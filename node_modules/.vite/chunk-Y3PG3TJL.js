import {
  require_safe_buffer
} from "./chunk-BTG65MVN.js";
import {
  __commonJS,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/bip66/index.js
var require_bip66 = __commonJS({
  "node_modules/bip66/index.js"(exports, module) {
    init_define_process_env();
    var Buffer = require_safe_buffer().Buffer;
    function check(buffer) {
      if (buffer.length < 8)
        return false;
      if (buffer.length > 72)
        return false;
      if (buffer[0] !== 48)
        return false;
      if (buffer[1] !== buffer.length - 2)
        return false;
      if (buffer[2] !== 2)
        return false;
      var lenR = buffer[3];
      if (lenR === 0)
        return false;
      if (5 + lenR >= buffer.length)
        return false;
      if (buffer[4 + lenR] !== 2)
        return false;
      var lenS = buffer[5 + lenR];
      if (lenS === 0)
        return false;
      if (6 + lenR + lenS !== buffer.length)
        return false;
      if (buffer[4] & 128)
        return false;
      if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
        return false;
      if (buffer[lenR + 6] & 128)
        return false;
      if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
        return false;
      return true;
    }
    function decode(buffer) {
      if (buffer.length < 8)
        throw new Error("DER sequence length is too short");
      if (buffer.length > 72)
        throw new Error("DER sequence length is too long");
      if (buffer[0] !== 48)
        throw new Error("Expected DER sequence");
      if (buffer[1] !== buffer.length - 2)
        throw new Error("DER sequence length is invalid");
      if (buffer[2] !== 2)
        throw new Error("Expected DER integer");
      var lenR = buffer[3];
      if (lenR === 0)
        throw new Error("R length is zero");
      if (5 + lenR >= buffer.length)
        throw new Error("R length is too long");
      if (buffer[4 + lenR] !== 2)
        throw new Error("Expected DER integer (2)");
      var lenS = buffer[5 + lenR];
      if (lenS === 0)
        throw new Error("S length is zero");
      if (6 + lenR + lenS !== buffer.length)
        throw new Error("S length is invalid");
      if (buffer[4] & 128)
        throw new Error("R value is negative");
      if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
        throw new Error("R value excessively padded");
      if (buffer[lenR + 6] & 128)
        throw new Error("S value is negative");
      if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
        throw new Error("S value excessively padded");
      return {
        r: buffer.slice(4, 4 + lenR),
        s: buffer.slice(6 + lenR)
      };
    }
    function encode(r, s) {
      var lenR = r.length;
      var lenS = s.length;
      if (lenR === 0)
        throw new Error("R length is zero");
      if (lenS === 0)
        throw new Error("S length is zero");
      if (lenR > 33)
        throw new Error("R length is too long");
      if (lenS > 33)
        throw new Error("S length is too long");
      if (r[0] & 128)
        throw new Error("R value is negative");
      if (s[0] & 128)
        throw new Error("S value is negative");
      if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
        throw new Error("R value excessively padded");
      if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
        throw new Error("S value excessively padded");
      var signature = Buffer.allocUnsafe(6 + lenR + lenS);
      signature[0] = 48;
      signature[1] = signature.length - 2;
      signature[2] = 2;
      signature[3] = r.length;
      r.copy(signature, 4);
      signature[4 + lenR] = 2;
      signature[5 + lenR] = s.length;
      s.copy(signature, 6 + lenR);
      return signature;
    }
    module.exports = {
      check,
      decode,
      encode
    };
  }
});

export {
  require_bip66
};
//# sourceMappingURL=chunk-Y3PG3TJL.js.map
