{
  "version": 3,
  "sources": ["dep:@web3-onboard_torus", "../@web3-onboard/torus/dist/index.js"],
  "sourcesContent": ["import d from \"./node_modules/@web3-onboard/torus/dist/index.js\";export default d;", "function torus(options) {\n    const { buttonPosition, modalZIndex, apiKey, buildEnv, enableLogging, loginConfig, showTorusButton, integrity, whiteLabel, skipTKey, useLocalStorage } = options || {};\n    return () => {\n        return {\n            label: 'Torus',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains }) => {\n                const { default: Torus } = await import('@toruslabs/torus-embed');\n                const { createEIP1193Provider, ProviderRpcErrorCode, ProviderRpcError } = await import('@web3-onboard/common');\n                const [chain] = chains;\n                let instance = new Torus({\n                    buttonPosition,\n                    modalZIndex,\n                    apiKey\n                });\n                await instance.init({\n                    buildEnv,\n                    enableLogging,\n                    network: {\n                        host: chain.rpcUrl,\n                        chainId: parseInt(chain.id),\n                        networkName: chain.label\n                    },\n                    showTorusButton: showTorusButton,\n                    loginConfig,\n                    integrity,\n                    whiteLabel,\n                    skipTKey,\n                    useLocalStorage\n                });\n                const torusProvider = instance.provider;\n                // patch the chainChanged event\n                const on = torusProvider.on.bind(torusProvider);\n                torusProvider.on = (event, listener) => {\n                    on(event, val => {\n                        if (event === 'chainChanged') {\n                            listener(`0x${val.toString(16)}`);\n                            return;\n                        }\n                        listener(val);\n                    });\n                    return torusProvider;\n                };\n                const provider = createEIP1193Provider(torusProvider, {\n                    eth_requestAccounts: async () => {\n                        try {\n                            const accounts = await instance.login();\n                            return accounts;\n                        }\n                        catch (error) {\n                            throw new ProviderRpcError({\n                                code: ProviderRpcErrorCode.ACCOUNT_ACCESS_REJECTED,\n                                message: 'Account access rejected'\n                            });\n                        }\n                    },\n                    eth_selectAccounts: null,\n                    wallet_switchEthereumChain: async ({ params }) => {\n                        const chain = chains.find(({ id }) => id === params[0].chainId);\n                        if (!chain)\n                            throw new Error('chain must be set before switching');\n                        await instance.setProvider({\n                            host: chain.rpcUrl,\n                            chainId: parseInt(chain.id),\n                            networkName: chain.label\n                        });\n                        return null;\n                    },\n                    eth_chainId: async ({ baseRequest }) => {\n                        const chainId = await baseRequest({ method: 'eth_chainId' });\n                        return `0x${parseInt(chainId).toString(16)}`;\n                    }\n                });\n                provider.disconnect = () => instance.cleanUp();\n                return {\n                    provider,\n                    instance\n                };\n            }\n        };\n    };\n}\nexport default torus;\n"],
  "mappings": ";;;;;AAAA;;;ACAA;AAAA,eAAe,SAAS;AACpB,QAAM,EAAE,gBAAgB,aAAa,QAAQ,UAAU,eAAe,aAAa,iBAAiB,WAAW,YAAY,UAAU,oBAAoB,WAAW,CAAC;AACrK,SAAO,MAAM;AACT,WAAO;AAAA,MACH,OAAO;AAAA,MACP,SAAS,YAAa,OAAM,OAAO,uBAAc;AAAA,MACjD,cAAc,OAAO,EAAE,aAAa;AAChC,cAAM,EAAE,SAAS,UAAU,MAAM,OAAO;AACxC,cAAM,EAAE,uBAAuB,sBAAsB,qBAAqB,MAAM,OAAO;AACvF,cAAM,CAAC,SAAS;AAChB,YAAI,WAAW,IAAI,MAAM;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,cAAM,SAAS,KAAK;AAAA,UAChB;AAAA,UACA;AAAA,UACA,SAAS;AAAA,YACL,MAAM,MAAM;AAAA,YACZ,SAAS,SAAS,MAAM,EAAE;AAAA,YAC1B,aAAa,MAAM;AAAA,UACvB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,cAAM,gBAAgB,SAAS;AAE/B,cAAM,KAAK,cAAc,GAAG,KAAK,aAAa;AAC9C,sBAAc,KAAK,CAAC,OAAO,aAAa;AACpC,aAAG,OAAO,SAAO;AACb,gBAAI,UAAU,gBAAgB;AAC1B,uBAAS,KAAK,IAAI,SAAS,EAAE,GAAG;AAChC;AAAA,YACJ;AACA,qBAAS,GAAG;AAAA,UAChB,CAAC;AACD,iBAAO;AAAA,QACX;AACA,cAAM,WAAW,sBAAsB,eAAe;AAAA,UAClD,qBAAqB,YAAY;AAC7B,gBAAI;AACA,oBAAM,WAAW,MAAM,SAAS,MAAM;AACtC,qBAAO;AAAA,YACX,SACO,OAAP;AACI,oBAAM,IAAI,iBAAiB;AAAA,gBACvB,MAAM,qBAAqB;AAAA,gBAC3B,SAAS;AAAA,cACb,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,UACA,oBAAoB;AAAA,UACpB,4BAA4B,OAAO,EAAE,aAAa;AAC9C,kBAAM,SAAQ,OAAO,KAAK,CAAC,EAAE,SAAS,OAAO,OAAO,GAAG,OAAO;AAC9D,gBAAI,CAAC;AACD,oBAAM,IAAI,MAAM,oCAAoC;AACxD,kBAAM,SAAS,YAAY;AAAA,cACvB,MAAM,OAAM;AAAA,cACZ,SAAS,SAAS,OAAM,EAAE;AAAA,cAC1B,aAAa,OAAM;AAAA,YACvB,CAAC;AACD,mBAAO;AAAA,UACX;AAAA,UACA,aAAa,OAAO,EAAE,kBAAkB;AACpC,kBAAM,UAAU,MAAM,YAAY,EAAE,QAAQ,cAAc,CAAC;AAC3D,mBAAO,KAAK,SAAS,OAAO,EAAE,SAAS,EAAE;AAAA,UAC7C;AAAA,QACJ,CAAC;AACD,iBAAS,aAAa,MAAM,SAAS,QAAQ;AAC7C,eAAO;AAAA,UACH;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAO,eAAQ;;;ADlFkD,IAAO,6BAAQ;",
  "names": []
}
