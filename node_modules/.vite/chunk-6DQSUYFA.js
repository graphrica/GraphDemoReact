import {
  require_dist as require_dist2
} from "./chunk-P7FZ3CER.js";
import {
  require_dist
} from "./chunk-GY2U6V7C.js";
import {
  __commonJS,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/@ethereumjs/tx/dist.browser/types.js
var require_types = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/types.js"(exports) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;
    var ethereumjs_util_1 = require_dist();
    var Capability;
    (function(Capability2) {
      Capability2[Capability2["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
      Capability2[Capability2["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
      Capability2[Capability2["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
      Capability2[Capability2["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
    })(Capability = exports.Capability || (exports.Capability = {}));
    function isAccessListBuffer(input) {
      if (input.length === 0) {
        return true;
      }
      var firstItem = input[0];
      if (Array.isArray(firstItem)) {
        return true;
      }
      return false;
    }
    exports.isAccessListBuffer = isAccessListBuffer;
    function isAccessList(input) {
      return !isAccessListBuffer(input);
    }
    exports.isAccessList = isAccessList;
    exports.N_DIV_2 = new ethereumjs_util_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
  }
});

// node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js
var require_baseTransaction = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js"(exports) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseTransaction = void 0;
    var common_1 = __importStar(require_dist2());
    var ethereumjs_util_1 = require_dist();
    var types_1 = require_types();
    var BaseTransaction = function() {
      function BaseTransaction2(txData) {
        this.cache = {
          hash: void 0,
          dataFee: void 0
        };
        this.activeCapabilities = [];
        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;
        this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;
        var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type = txData.type;
        this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();
        var toB = (0, ethereumjs_util_1.toBuffer)(to === "" ? "0x" : to);
        var vB = (0, ethereumjs_util_1.toBuffer)(v === "" ? "0x" : v);
        var rB = (0, ethereumjs_util_1.toBuffer)(r === "" ? "0x" : r);
        var sB = (0, ethereumjs_util_1.toBuffer)(s === "" ? "0x" : s);
        this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === "" ? "0x" : nonce));
        this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === "" ? "0x" : gasLimit));
        this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : void 0;
        this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === "" ? "0x" : value));
        this.data = (0, ethereumjs_util_1.toBuffer)(data === "" ? "0x" : data);
        this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : void 0;
        this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : void 0;
        this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : void 0;
        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
      }
      Object.defineProperty(BaseTransaction2.prototype, "transactionType", {
        get: function() {
          return this.type;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseTransaction2.prototype, "type", {
        get: function() {
          return this._type;
        },
        enumerable: false,
        configurable: true
      });
      BaseTransaction2.prototype.supports = function(capability) {
        return this.activeCapabilities.includes(capability);
      };
      BaseTransaction2.prototype.validate = function(stringError) {
        if (stringError === void 0) {
          stringError = false;
        }
        var errors = [];
        if (this.getBaseFee().gt(this.gasLimit)) {
          errors.push("gasLimit is too low. given ".concat(this.gasLimit, ", need at least ").concat(this.getBaseFee()));
        }
        if (this.isSigned() && !this.verifySignature()) {
          errors.push("Invalid Signature");
        }
        return stringError ? errors : errors.length === 0;
      };
      BaseTransaction2.prototype.getBaseFee = function() {
        var fee = this.getDataFee().addn(this.common.param("gasPrices", "tx"));
        if (this.common.gteHardfork("homestead") && this.toCreationAddress()) {
          fee.iaddn(this.common.param("gasPrices", "txCreation"));
        }
        return fee;
      };
      BaseTransaction2.prototype.getDataFee = function() {
        var txDataZero = this.common.param("gasPrices", "txDataZero");
        var txDataNonZero = this.common.param("gasPrices", "txDataNonZero");
        var cost = 0;
        for (var i = 0; i < this.data.length; i++) {
          this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;
        }
        cost = new ethereumjs_util_1.BN(cost);
        if ((this.to === void 0 || this.to === null) && this.common.isActivatedEIP(3860)) {
          var dataLength = Math.ceil(this.data.length / 32);
          var initCodeCost = new ethereumjs_util_1.BN(this.common.param("gasPrices", "initCodeWordCost")).imuln(dataLength);
          cost.iadd(initCodeCost);
        }
        return cost;
      };
      BaseTransaction2.prototype.toCreationAddress = function() {
        return this.to === void 0 || this.to.buf.length === 0;
      };
      BaseTransaction2.prototype.isSigned = function() {
        var _a = this, v = _a.v, r = _a.r, s = _a.s;
        if (this.type === 0) {
          if (!v || !r || !s) {
            return false;
          } else {
            return true;
          }
        } else {
          if (v === void 0 || !r || !s) {
            return false;
          } else {
            return true;
          }
        }
      };
      BaseTransaction2.prototype.verifySignature = function() {
        try {
          var publicKey = this.getSenderPublicKey();
          return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;
        } catch (e) {
          return false;
        }
      };
      BaseTransaction2.prototype.getSenderAddress = function() {
        return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));
      };
      BaseTransaction2.prototype.sign = function(privateKey) {
        if (privateKey.length !== 32) {
          var msg = this._errorMsg("Private key must be 32 bytes in length.");
          throw new Error(msg);
        }
        var hackApplied = false;
        if (this.type === 0 && this.common.gteHardfork("spuriousDragon") && !this.supports(types_1.Capability.EIP155ReplayProtection)) {
          this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
          hackApplied = true;
        }
        var msgHash = this.getMessageToSign(true);
        var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;
        var tx = this._processSignature(v, r, s);
        if (hackApplied) {
          var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);
          if (index > -1) {
            this.activeCapabilities.splice(index, 1);
          }
        }
        return tx;
      };
      BaseTransaction2.prototype._getCommon = function(common, chainId) {
        var _a;
        if (chainId) {
          var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));
          if (common) {
            if (!common.chainIdBN().eq(chainIdBN)) {
              var msg = this._errorMsg("The chain ID does not match the chain ID of Common");
              throw new Error(msg);
            }
            return common.copy();
          } else {
            if (common_1.default.isSupportedChainId(chainIdBN)) {
              return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });
            } else {
              return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {
                name: "custom-chain",
                networkId: chainIdBN,
                chainId: chainIdBN
              }, this.DEFAULT_HARDFORK);
            }
          }
        } else {
          return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
        }
      };
      BaseTransaction2.prototype._validateCannotExceedMaxInteger = function(values, bits, cannotEqual) {
        var e_1, _a;
        if (bits === void 0) {
          bits = 256;
        }
        if (cannotEqual === void 0) {
          cannotEqual = false;
        }
        try {
          for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            switch (bits) {
              case 64:
                if (cannotEqual) {
                  if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_UINT64)) {
                    var msg = this._errorMsg("".concat(key, " cannot equal or exceed MAX_UINT64 (2^64-1), given ").concat(value));
                    throw new Error(msg);
                  }
                } else {
                  if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_UINT64)) {
                    var msg = this._errorMsg("".concat(key, " cannot exceed MAX_UINT64 (2^64-1), given ").concat(value));
                    throw new Error(msg);
                  }
                }
                break;
              case 256:
                if (cannotEqual) {
                  if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_INTEGER)) {
                    var msg = this._errorMsg("".concat(key, " cannot equal or exceed MAX_INTEGER (2^256-1), given ").concat(value));
                    throw new Error(msg);
                  }
                } else {
                  if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {
                    var msg = this._errorMsg("".concat(key, " cannot exceed MAX_INTEGER (2^256-1), given ").concat(value));
                    throw new Error(msg);
                  }
                }
                break;
              default: {
                var msg = this._errorMsg("unimplemented bits value");
                throw new Error(msg);
              }
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      BaseTransaction2.prototype._getSharedErrorPostfix = function() {
        var hash = "";
        try {
          hash = this.isSigned() ? (0, ethereumjs_util_1.bufferToHex)(this.hash()) : "not available (unsigned)";
        } catch (e) {
          hash = "error";
        }
        var isSigned = "";
        try {
          isSigned = this.isSigned().toString();
        } catch (e) {
          hash = "error";
        }
        var hf = "";
        try {
          hf = this.common.hardfork();
        } catch (e) {
          hf = "error";
        }
        var postfix = "tx type=".concat(this.type, " hash=").concat(hash, " nonce=").concat(this.nonce, " value=").concat(this.value, " ");
        postfix += "signed=".concat(isSigned, " hf=").concat(hf);
        return postfix;
      };
      return BaseTransaction2;
    }();
    exports.BaseTransaction = BaseTransaction;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/util.js
var require_util = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/util.js"(exports) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccessLists = exports.checkMaxInitCodeSize = void 0;
    var ethereumjs_util_1 = require_dist();
    var types_1 = require_types();
    function checkMaxInitCodeSize(common, length) {
      if (length > common.param("vm", "maxInitCodeSize")) {
        throw new Error("the initcode size of this transaction is too large: it is ".concat(length, " while the max is ").concat(common.param("vm", "maxInitCodeSize")));
      }
    }
    exports.checkMaxInitCodeSize = checkMaxInitCodeSize;
    var AccessLists = function() {
      function AccessLists2() {
      }
      AccessLists2.getAccessListData = function(accessList) {
        var AccessListJSON;
        var bufferAccessList;
        if (accessList && (0, types_1.isAccessList)(accessList)) {
          AccessListJSON = accessList;
          var newAccessList = [];
          for (var i = 0; i < accessList.length; i++) {
            var item = accessList[i];
            var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);
            var storageItems = [];
            for (var index = 0; index < item.storageKeys.length; index++) {
              storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));
            }
            newAccessList.push([addressBuffer, storageItems]);
          }
          bufferAccessList = newAccessList;
        } else {
          bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
          var json = [];
          for (var i = 0; i < bufferAccessList.length; i++) {
            var data = bufferAccessList[i];
            var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);
            var storageKeys = [];
            for (var item = 0; item < data[1].length; item++) {
              storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));
            }
            var jsonItem = {
              address,
              storageKeys
            };
            json.push(jsonItem);
          }
          AccessListJSON = json;
        }
        return {
          AccessListJSON,
          accessList: bufferAccessList
        };
      };
      AccessLists2.verifyAccessList = function(accessList) {
        for (var key = 0; key < accessList.length; key++) {
          var accessListItem = accessList[key];
          var address = accessListItem[0];
          var storageSlots = accessListItem[1];
          if (accessListItem[2] !== void 0) {
            throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
          }
          if (address.length != 20) {
            throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
          }
          for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {
            if (storageSlots[storageSlot].length != 32) {
              throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
            }
          }
        }
      };
      AccessLists2.getAccessListJSON = function(accessList) {
        var accessListJSON = [];
        for (var index = 0; index < accessList.length; index++) {
          var item = accessList[index];
          var JSONItem = {
            address: "0x" + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString("hex"),
            storageKeys: []
          };
          var storageSlots = item[1];
          for (var slot = 0; slot < storageSlots.length; slot++) {
            var storageSlot = storageSlots[slot];
            JSONItem.storageKeys.push("0x" + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString("hex"));
          }
          accessListJSON.push(JSONItem);
        }
        return accessListJSON;
      };
      AccessLists2.getDataFeeEIP2930 = function(accessList, common) {
        var accessListStorageKeyCost = common.param("gasPrices", "accessListStorageKeyCost");
        var accessListAddressCost = common.param("gasPrices", "accessListAddressCost");
        var slots = 0;
        for (var index = 0; index < accessList.length; index++) {
          var item = accessList[index];
          var storageSlots = item[1];
          slots += storageSlots.length;
        }
        var addresses = accessList.length;
        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;
      };
      return AccessLists2;
    }();
    exports.AccessLists = AccessLists;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js
var require_legacyTransaction = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js"(exports) {
    "use strict";
    init_define_process_env();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist();
    var types_1 = require_types();
    var baseTransaction_1 = require_baseTransaction();
    var util_1 = require_util();
    var TRANSACTION_TYPE = 0;
    var Transaction = function(_super) {
      __extends(Transaction2, _super);
      function Transaction2(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        var _this = this;
        var _a;
        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        _this.common = _this._validateTxV(_this.v, opts.common);
        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === "" ? "0x" : txData.gasPrice));
        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {
          var msg = _this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");
          throw new Error(msg);
        }
        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });
        if (_this.common.gteHardfork("spuriousDragon")) {
          if (!_this.isSigned()) {
            _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
          } else {
            var v = _this.v;
            var chainIdDoubled = _this.common.chainIdBN().muln(2);
            if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {
              _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
            }
          }
        }
        if (_this.common.isActivatedEIP(3860)) {
          (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
        }
        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
        if (freeze) {
          Object.freeze(_this);
        }
        return _this;
      }
      Transaction2.fromTxData = function(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return new Transaction2(txData, opts);
      };
      Transaction2.fromSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        var values = ethereumjs_util_1.rlp.decode(serialized);
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input. Must be array");
        }
        return this.fromValuesArray(values, opts);
      };
      Transaction2.fromRlpSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return Transaction2.fromSerializedTx(serialized, opts);
      };
      Transaction2.fromValuesArray = function(values, opts) {
        if (opts === void 0) {
          opts = {};
        }
        if (values.length !== 6 && values.length !== 9) {
          throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
        }
        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];
        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        return new Transaction2({
          nonce,
          gasPrice,
          gasLimit,
          to,
          value,
          data,
          v,
          r,
          s
        }, opts);
      };
      Transaction2.prototype.raw = function() {
        return [
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Buffer.from([]),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
          this.data,
          this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
          this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
          this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])
        ];
      };
      Transaction2.prototype.serialize = function() {
        return ethereumjs_util_1.rlp.encode(this.raw());
      };
      Transaction2.prototype._getMessageToSign = function() {
        var values = [
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Buffer.from([]),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
          this.data
        ];
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
          values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));
          values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
          values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
        }
        return values;
      };
      Transaction2.prototype.getMessageToSign = function(hashMessage) {
        if (hashMessage === void 0) {
          hashMessage = true;
        }
        var message = this._getMessageToSign();
        if (hashMessage) {
          return (0, ethereumjs_util_1.rlphash)(message);
        } else {
          return message;
        }
      };
      Transaction2.prototype.getDataFee = function() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: _super.prototype.getDataFee.call(this),
            hardfork: this.common.hardfork()
          };
        }
        return _super.prototype.getDataFee.call(this);
      };
      Transaction2.prototype.getUpfrontCost = function() {
        return this.gasLimit.mul(this.gasPrice).add(this.value);
      };
      Transaction2.prototype.hash = function() {
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());
          }
          return this.cache.hash;
        }
        return (0, ethereumjs_util_1.rlphash)(this.raw());
      };
      Transaction2.prototype.getMessageToVerifySignature = function() {
        if (!this.isSigned()) {
          var msg = this._errorMsg("This transaction is not signed");
          throw new Error(msg);
        }
        var message = this._getMessageToSign();
        return (0, ethereumjs_util_1.rlphash)(message);
      };
      Transaction2.prototype.getSenderPublicKey = function() {
        var _a;
        var msgHash = this.getMessageToVerifySignature();
        if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
          var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
        var _b = this, v = _b.v, r = _b.r, s = _b.s;
        try {
          return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : void 0);
        } catch (e) {
          var msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      };
      Transaction2.prototype._processSignature = function(v, r, s) {
        var vBN = new ethereumjs_util_1.BN(v);
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
          vBN.iadd(this.common.chainIdBN().muln(2).addn(8));
        }
        var opts = {
          common: this.common
        };
        return Transaction2.fromTxData({
          nonce: this.nonce,
          gasPrice: this.gasPrice,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          v: vBN,
          r: new ethereumjs_util_1.BN(r),
          s: new ethereumjs_util_1.BN(s)
        }, opts);
      };
      Transaction2.prototype.toJSON = function() {
        return {
          nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
          gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
          gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: (0, ethereumjs_util_1.bnToHex)(this.value),
          data: "0x" + this.data.toString("hex"),
          v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
          r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
          s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
        };
      };
      Transaction2.prototype._validateTxV = function(v, common) {
        var chainIdBN;
        if (v !== void 0 && !v.eqn(0) && (!common || common.gteHardfork("spuriousDragon")) && !v.eqn(27) && !v.eqn(28)) {
          if (common) {
            var chainIdDoubled = common.chainIdBN().muln(2);
            var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
            if (!isValidEIP155V) {
              throw new Error("Incompatible EIP155-based V ".concat(v, " and chain id ").concat(common.chainIdBN(), ". See the Common parameter of the Transaction constructor to set the chain id."));
            }
          } else {
            var numSub = void 0;
            if (v.subn(35).isEven()) {
              numSub = 35;
            } else {
              numSub = 36;
            }
            chainIdBN = v.subn(numSub).divn(2);
          }
        }
        return this._getCommon(common, chainIdBN);
      };
      Transaction2.prototype._unsignedTxImplementsEIP155 = function() {
        return this.common.gteHardfork("spuriousDragon");
      };
      Transaction2.prototype._signedTxImplementsEIP155 = function() {
        if (!this.isSigned()) {
          var msg = this._errorMsg("This transaction is not signed");
          throw new Error(msg);
        }
        var onEIP155BlockOrLater = this.common.gteHardfork("spuriousDragon");
        var v = this.v;
        var chainIdDoubled = this.common.chainIdBN().muln(2);
        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;
      };
      Transaction2.prototype.errorStr = function() {
        var errorStr = this._getSharedErrorPostfix();
        errorStr += " gasPrice=".concat(this.gasPrice);
        return errorStr;
      };
      Transaction2.prototype._errorMsg = function(msg) {
        return "".concat(msg, " (").concat(this.errorStr(), ")");
      };
      return Transaction2;
    }(baseTransaction_1.BaseTransaction);
    exports.default = Transaction;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js
var require_eip2930Transaction = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js"(exports) {
    "use strict";
    init_define_process_env();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist();
    var baseTransaction_1 = require_baseTransaction();
    var types_1 = require_types();
    var util_1 = require_util();
    var TRANSACTION_TYPE = 1;
    var TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, "0"), "hex");
    var AccessListEIP2930Transaction = function(_super) {
      __extends(AccessListEIP2930Transaction2, _super);
      function AccessListEIP2930Transaction2(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        var _this = this;
        var _a, _b;
        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        _this.DEFAULT_HARDFORK = "berlin";
        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;
        _this.common = _this._getCommon(opts.common, chainId);
        _this.chainId = _this.common.chainIdBN();
        if (!_this.common.isActivatedEIP(2930)) {
          throw new Error("EIP-2930 not enabled on Common");
        }
        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);
        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        _this.accessList = accessListData.accessList;
        _this.AccessListJSON = accessListData.AccessListJSON;
        util_1.AccessLists.verifyAccessList(_this.accessList);
        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === "" ? "0x" : gasPrice));
        _this._validateCannotExceedMaxInteger({
          gasPrice: _this.gasPrice
        });
        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {
          var msg = _this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");
          throw new Error(msg);
        }
        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
          var msg = _this._errorMsg("The y-parity of the transaction should either be 0 or 1");
          throw new Error(msg);
        }
        if (_this.common.gteHardfork("homestead") && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
          var msg = _this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
        if (_this.common.isActivatedEIP(3860)) {
          (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
        }
        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
        if (freeze) {
          Object.freeze(_this);
        }
        return _this;
      }
      Object.defineProperty(AccessListEIP2930Transaction2.prototype, "senderR", {
        get: function() {
          return this.r;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AccessListEIP2930Transaction2.prototype, "senderS", {
        get: function() {
          return this.s;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AccessListEIP2930Transaction2.prototype, "yParity", {
        get: function() {
          return this.v;
        },
        enumerable: false,
        configurable: true
      });
      AccessListEIP2930Transaction2.fromTxData = function(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return new AccessListEIP2930Transaction2(txData, opts);
      };
      AccessListEIP2930Transaction2.fromSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
          throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ".concat(TRANSACTION_TYPE, ", received: ").concat(serialized.slice(0, 1).toString("hex")));
        }
        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input: must be array");
        }
        return AccessListEIP2930Transaction2.fromValuesArray(values, opts);
      };
      AccessListEIP2930Transaction2.fromRlpSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return AccessListEIP2930Transaction2.fromSerializedTx(serialized, opts);
      };
      AccessListEIP2930Transaction2.fromValuesArray = function(values, opts) {
        if (opts === void 0) {
          opts = {};
        }
        if (values.length !== 8 && values.length !== 11) {
          throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
        }
        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];
        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        var emptyAccessList = [];
        return new AccessListEIP2930Transaction2({
          chainId: new ethereumjs_util_1.BN(chainId),
          nonce,
          gasPrice,
          gasLimit,
          to,
          value,
          data,
          accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
          v: v !== void 0 ? new ethereumjs_util_1.BN(v) : void 0,
          r,
          s
        }, opts);
      };
      AccessListEIP2930Transaction2.prototype.getDataFee = function() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        var cost = _super.prototype.getDataFee.call(this);
        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
          };
        }
        return cost;
      };
      AccessListEIP2930Transaction2.prototype.getUpfrontCost = function() {
        return this.gasLimit.mul(this.gasPrice).add(this.value);
      };
      AccessListEIP2930Transaction2.prototype.raw = function() {
        return [
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Buffer.from([]),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
          this.data,
          this.accessList,
          this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
          this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
          this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])
        ];
      };
      AccessListEIP2930Transaction2.prototype.serialize = function() {
        var base = this.raw();
        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
      };
      AccessListEIP2930Transaction2.prototype.getMessageToSign = function(hashMessage) {
        if (hashMessage === void 0) {
          hashMessage = true;
        }
        var base = this.raw().slice(0, 8);
        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
        if (hashMessage) {
          return (0, ethereumjs_util_1.keccak256)(message);
        } else {
          return message;
        }
      };
      AccessListEIP2930Transaction2.prototype.hash = function() {
        if (!this.isSigned()) {
          var msg = this._errorMsg("Cannot call hash method if transaction is not signed");
          throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
          }
          return this.cache.hash;
        }
        return (0, ethereumjs_util_1.keccak256)(this.serialize());
      };
      AccessListEIP2930Transaction2.prototype.getMessageToVerifySignature = function() {
        return this.getMessageToSign();
      };
      AccessListEIP2930Transaction2.prototype.getSenderPublicKey = function() {
        var _a;
        if (!this.isSigned()) {
          var msg = this._errorMsg("Cannot call this method if transaction is not signed");
          throw new Error(msg);
        }
        var msgHash = this.getMessageToVerifySignature();
        if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
          var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;
        try {
          return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));
        } catch (e) {
          var msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      };
      AccessListEIP2930Transaction2.prototype._processSignature = function(v, r, s) {
        var opts = {
          common: this.common
        };
        return AccessListEIP2930Transaction2.fromTxData({
          chainId: this.chainId,
          nonce: this.nonce,
          gasPrice: this.gasPrice,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          accessList: this.accessList,
          v: new ethereumjs_util_1.BN(v - 27),
          r: new ethereumjs_util_1.BN(r),
          s: new ethereumjs_util_1.BN(s)
        }, opts);
      };
      AccessListEIP2930Transaction2.prototype.toJSON = function() {
        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
        return {
          chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
          nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
          gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
          gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: (0, ethereumjs_util_1.bnToHex)(this.value),
          data: "0x" + this.data.toString("hex"),
          accessList: accessListJSON,
          v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
          r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
          s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
        };
      };
      AccessListEIP2930Transaction2.prototype.errorStr = function() {
        var _a, _b;
        var errorStr = this._getSharedErrorPostfix();
        errorStr += " gasPrice=".concat(this.gasPrice, " accessListCount=").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
        return errorStr;
      };
      AccessListEIP2930Transaction2.prototype._errorMsg = function(msg) {
        return "".concat(msg, " (").concat(this.errorStr(), ")");
      };
      return AccessListEIP2930Transaction2;
    }(baseTransaction_1.BaseTransaction);
    exports.default = AccessListEIP2930Transaction;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js
var require_transactionFactory = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js"(exports) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist();
    var _1 = require_dist3();
    var TransactionFactory = function() {
      function TransactionFactory2() {
      }
      TransactionFactory2.fromTxData = function(txData, txOptions) {
        if (txOptions === void 0) {
          txOptions = {};
        }
        if (!("type" in txData) || txData.type === void 0) {
          return _1.Transaction.fromTxData(txData, txOptions);
        } else {
          var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();
          if (txType === 0) {
            return _1.Transaction.fromTxData(txData, txOptions);
          } else if (txType === 1) {
            return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);
          } else if (txType === 2) {
            return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
          } else {
            throw new Error("Tx instantiation with type ".concat(txType, " not supported"));
          }
        }
      };
      TransactionFactory2.fromSerializedData = function(data, txOptions) {
        if (txOptions === void 0) {
          txOptions = {};
        }
        if (data[0] <= 127) {
          var EIP = void 0;
          switch (data[0]) {
            case 1:
              EIP = 2930;
              break;
            case 2:
              EIP = 1559;
              break;
            default:
              throw new Error("TypedTransaction with ID ".concat(data[0], " unknown"));
          }
          if (EIP === 1559) {
            return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
          } else {
            return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
          }
        } else {
          return _1.Transaction.fromSerializedTx(data, txOptions);
        }
      };
      TransactionFactory2.fromBlockBodyData = function(data, txOptions) {
        if (txOptions === void 0) {
          txOptions = {};
        }
        if (Buffer.isBuffer(data)) {
          return this.fromSerializedData(data, txOptions);
        } else if (Array.isArray(data)) {
          return _1.Transaction.fromValuesArray(data, txOptions);
        } else {
          throw new Error("Cannot decode transaction: unknown type input");
        }
      };
      TransactionFactory2.getTransactionClass = function(transactionID, _common) {
        if (transactionID === void 0) {
          transactionID = 0;
        }
        var legacyTxn = transactionID == 0 || transactionID >= 128 && transactionID <= 255;
        if (legacyTxn) {
          return _1.Transaction;
        }
        switch (transactionID) {
          case 1:
            return _1.AccessListEIP2930Transaction;
          case 2:
            return _1.FeeMarketEIP1559Transaction;
          default:
            throw new Error("TypedTransaction with ID ".concat(transactionID, " unknown"));
        }
      };
      return TransactionFactory2;
    }();
    exports.default = TransactionFactory;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js
var require_eip1559Transaction = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js"(exports) {
    "use strict";
    init_define_process_env();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist();
    var baseTransaction_1 = require_baseTransaction();
    var types_1 = require_types();
    var util_1 = require_util();
    var TRANSACTION_TYPE = 2;
    var TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, "0"), "hex");
    var FeeMarketEIP1559Transaction = function(_super) {
      __extends(FeeMarketEIP1559Transaction2, _super);
      function FeeMarketEIP1559Transaction2(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        var _this = this;
        var _a, _b;
        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        _this.DEFAULT_HARDFORK = "london";
        var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;
        _this.common = _this._getCommon(opts.common, chainId);
        _this.chainId = _this.common.chainIdBN();
        if (!_this.common.isActivatedEIP(1559)) {
          throw new Error("EIP-1559 not enabled on Common");
        }
        _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);
        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        _this.accessList = accessListData.accessList;
        _this.AccessListJSON = accessListData.AccessListJSON;
        util_1.AccessLists.verifyAccessList(_this.accessList);
        _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === "" ? "0x" : maxFeePerGas));
        _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === "" ? "0x" : maxPriorityFeePerGas));
        _this._validateCannotExceedMaxInteger({
          maxFeePerGas: _this.maxFeePerGas,
          maxPriorityFeePerGas: _this.maxPriorityFeePerGas
        });
        if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {
          var msg = _this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");
          throw new Error(msg);
        }
        if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {
          var msg = _this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
          throw new Error(msg);
        }
        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
          var msg = _this._errorMsg("The y-parity of the transaction should either be 0 or 1");
          throw new Error(msg);
        }
        if (_this.common.gteHardfork("homestead") && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
          var msg = _this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
        if (_this.common.isActivatedEIP(3860)) {
          (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
        }
        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
        if (freeze) {
          Object.freeze(_this);
        }
        return _this;
      }
      Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "senderR", {
        get: function() {
          return this.r;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "senderS", {
        get: function() {
          return this.s;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "yParity", {
        get: function() {
          return this.v;
        },
        enumerable: false,
        configurable: true
      });
      FeeMarketEIP1559Transaction2.fromTxData = function(txData, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return new FeeMarketEIP1559Transaction2(txData, opts);
      };
      FeeMarketEIP1559Transaction2.fromSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
          throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ".concat(TRANSACTION_TYPE, ", received: ").concat(serialized.slice(0, 1).toString("hex")));
        }
        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input: must be array");
        }
        return FeeMarketEIP1559Transaction2.fromValuesArray(values, opts);
      };
      FeeMarketEIP1559Transaction2.fromRlpSerializedTx = function(serialized, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return FeeMarketEIP1559Transaction2.fromSerializedTx(serialized, opts);
      };
      FeeMarketEIP1559Transaction2.fromValuesArray = function(values, opts) {
        if (opts === void 0) {
          opts = {};
        }
        if (values.length !== 9 && values.length !== 12) {
          throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
        }
        var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];
        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });
        return new FeeMarketEIP1559Transaction2({
          chainId: new ethereumjs_util_1.BN(chainId),
          nonce,
          maxPriorityFeePerGas,
          maxFeePerGas,
          gasLimit,
          to,
          value,
          data,
          accessList: accessList !== null && accessList !== void 0 ? accessList : [],
          v: v !== void 0 ? new ethereumjs_util_1.BN(v) : void 0,
          r,
          s
        }, opts);
      };
      FeeMarketEIP1559Transaction2.prototype.getDataFee = function() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        var cost = _super.prototype.getDataFee.call(this);
        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
          };
        }
        return cost;
      };
      FeeMarketEIP1559Transaction2.prototype.getUpfrontCost = function(baseFee) {
        if (baseFee === void 0) {
          baseFee = new ethereumjs_util_1.BN(0);
        }
        var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));
        var gasPrice = inclusionFeePerGas.add(baseFee);
        return this.gasLimit.mul(gasPrice).add(this.value);
      };
      FeeMarketEIP1559Transaction2.prototype.raw = function() {
        return [
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Buffer.from([]),
          (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
          this.data,
          this.accessList,
          this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
          this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
          this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])
        ];
      };
      FeeMarketEIP1559Transaction2.prototype.serialize = function() {
        var base = this.raw();
        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
      };
      FeeMarketEIP1559Transaction2.prototype.getMessageToSign = function(hashMessage) {
        if (hashMessage === void 0) {
          hashMessage = true;
        }
        var base = this.raw().slice(0, 9);
        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
        if (hashMessage) {
          return (0, ethereumjs_util_1.keccak256)(message);
        } else {
          return message;
        }
      };
      FeeMarketEIP1559Transaction2.prototype.hash = function() {
        if (!this.isSigned()) {
          var msg = this._errorMsg("Cannot call hash method if transaction is not signed");
          throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
          }
          return this.cache.hash;
        }
        return (0, ethereumjs_util_1.keccak256)(this.serialize());
      };
      FeeMarketEIP1559Transaction2.prototype.getMessageToVerifySignature = function() {
        return this.getMessageToSign();
      };
      FeeMarketEIP1559Transaction2.prototype.getSenderPublicKey = function() {
        var _a;
        if (!this.isSigned()) {
          var msg = this._errorMsg("Cannot call this method if transaction is not signed");
          throw new Error(msg);
        }
        var msgHash = this.getMessageToVerifySignature();
        if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
          var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
        var _b = this, v = _b.v, r = _b.r, s = _b.s;
        try {
          return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));
        } catch (e) {
          var msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      };
      FeeMarketEIP1559Transaction2.prototype._processSignature = function(v, r, s) {
        var opts = {
          common: this.common
        };
        return FeeMarketEIP1559Transaction2.fromTxData({
          chainId: this.chainId,
          nonce: this.nonce,
          maxPriorityFeePerGas: this.maxPriorityFeePerGas,
          maxFeePerGas: this.maxFeePerGas,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          accessList: this.accessList,
          v: new ethereumjs_util_1.BN(v - 27),
          r: new ethereumjs_util_1.BN(r),
          s: new ethereumjs_util_1.BN(s)
        }, opts);
      };
      FeeMarketEIP1559Transaction2.prototype.toJSON = function() {
        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
        return {
          chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
          nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
          maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),
          maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),
          gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: (0, ethereumjs_util_1.bnToHex)(this.value),
          data: "0x" + this.data.toString("hex"),
          accessList: accessListJSON,
          v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
          r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
          s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
        };
      };
      FeeMarketEIP1559Transaction2.prototype.errorStr = function() {
        var errorStr = this._getSharedErrorPostfix();
        errorStr += " maxFeePerGas=".concat(this.maxFeePerGas, " maxPriorityFeePerGas=").concat(this.maxPriorityFeePerGas);
        return errorStr;
      };
      FeeMarketEIP1559Transaction2.prototype._errorMsg = function(msg) {
        return "".concat(msg, " (").concat(this.errorStr(), ")");
      };
      return FeeMarketEIP1559Transaction2;
    }(baseTransaction_1.BaseTransaction);
    exports.default = FeeMarketEIP1559Transaction;
  }
});

// node_modules/@ethereumjs/tx/dist.browser/index.js
var require_dist3 = __commonJS({
  "node_modules/@ethereumjs/tx/dist.browser/index.js"(exports) {
    init_define_process_env();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FeeMarketEIP1559Transaction = exports.TransactionFactory = exports.AccessListEIP2930Transaction = exports.Transaction = void 0;
    var legacyTransaction_1 = require_legacyTransaction();
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return __importDefault(legacyTransaction_1).default;
    } });
    var eip2930Transaction_1 = require_eip2930Transaction();
    Object.defineProperty(exports, "AccessListEIP2930Transaction", { enumerable: true, get: function() {
      return __importDefault(eip2930Transaction_1).default;
    } });
    var transactionFactory_1 = require_transactionFactory();
    Object.defineProperty(exports, "TransactionFactory", { enumerable: true, get: function() {
      return __importDefault(transactionFactory_1).default;
    } });
    var eip1559Transaction_1 = require_eip1559Transaction();
    Object.defineProperty(exports, "FeeMarketEIP1559Transaction", { enumerable: true, get: function() {
      return __importDefault(eip1559Transaction_1).default;
    } });
    __exportStar(require_types(), exports);
  }
});

export {
  require_dist3 as require_dist
};
//# sourceMappingURL=chunk-6DQSUYFA.js.map
