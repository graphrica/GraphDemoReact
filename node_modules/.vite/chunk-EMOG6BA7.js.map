{
  "version": 3,
  "sources": ["../hdkey/lib/hdkey.js"],
  "sourcesContent": ["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,QAAI,SAAS;AACb,QAAI,SAAS,sBAAuB;AACpC,QAAI,SAAS;AACb,QAAI,YAAY;AAChB,QAAI,YAAY;AAEhB,QAAI,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AACtD,QAAI,kBAAkB;AACtB,QAAI,MAAM;AAGV,QAAI,mBAAmB,EAAC,SAAS,UAAY,QAAQ,SAAU;AAE/D,mBAAgB,UAAU;AACxB,WAAK,WAAW,YAAY;AAC5B,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,WAAK,cAAc;AACnB,WAAK,aAAa;AAClB,WAAK,YAAY;AACjB,WAAK,eAAe;AACpB,WAAK,oBAAoB;AAAA,IAC3B;AAEA,WAAO,eAAe,MAAM,WAAW,eAAe,EAAE,KAAK,WAAY;AAAE,aAAO,KAAK;AAAA,IAAa,EAAE,CAAC;AACvG,WAAO,eAAe,MAAM,WAAW,cAAc,EAAE,KAAK,WAAY;AAAE,aAAO,KAAK;AAAA,IAAY,EAAE,CAAC;AACrG,WAAO,eAAe,MAAM,WAAW,cAAc,EAAE,KAAK,WAAY;AAAE,aAAO,KAAK;AAAA,IAAW,EAAE,CAAC;AAEpG,WAAO,eAAe,MAAM,WAAW,cAAc;AAAA,MACnD,KAAK,WAAY;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,KAAK,SAAU,OAAO;AACpB,eAAO,MAAM,MAAM,QAAQ,IAAI,+BAA+B;AAC9D,eAAO,UAAU,iBAAiB,KAAK,MAAM,MAAM,qBAAqB;AAExE,aAAK,cAAc;AACnB,aAAK,aAAa,OAAO,KAAK,UAAU,gBAAgB,OAAO,IAAI,CAAC;AACpE,aAAK,cAAc,QAAQ,KAAK,SAAS;AACzC,aAAK,eAAe,KAAK,YAAY,MAAM,GAAG,CAAC,EAAE,aAAa,CAAC;AAAA,MACjE;AAAA,IACF,CAAC;AAED,WAAO,eAAe,MAAM,WAAW,aAAa;AAAA,MAClD,KAAK,WAAY;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,KAAK,SAAU,OAAO;AACpB,eAAO,MAAM,WAAW,MAAM,MAAM,WAAW,IAAI,oCAAoC;AACvF,eAAO,UAAU,gBAAgB,KAAK,MAAM,MAAM,oBAAoB;AAEtE,aAAK,aAAa,OAAO,KAAK,UAAU,iBAAiB,OAAO,IAAI,CAAC;AACrE,aAAK,cAAc,QAAQ,KAAK,SAAS;AACzC,aAAK,eAAe,KAAK,YAAY,MAAM,GAAG,CAAC,EAAE,aAAa,CAAC;AAC/D,aAAK,cAAc;AAAA,MACrB;AAAA,IACF,CAAC;AAED,WAAO,eAAe,MAAM,WAAW,sBAAsB;AAAA,MAC3D,KAAK,WAAY;AACf,YAAI,KAAK;AAAa,iBAAO,UAAU,OAAO,UAAU,MAAM,KAAK,SAAS,SAAS,OAAO,OAAO,CAAC,OAAO,MAAM,GAAG,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC,CAAC;AAAA;AACrI,iBAAO;AAAA,MACd;AAAA,IACF,CAAC;AAED,WAAO,eAAe,MAAM,WAAW,qBAAqB;AAAA,MAC1D,KAAK,WAAY;AACf,eAAO,UAAU,OAAO,UAAU,MAAM,KAAK,SAAS,QAAQ,KAAK,SAAS,CAAC;AAAA,MAC/E;AAAA,IACF,CAAC;AAED,UAAM,UAAU,SAAS,SAAU,MAAM;AACvC,UAAI,SAAS,OAAO,SAAS,OAAO,SAAS,QAAQ,SAAS,MAAM;AAClE,eAAO;AAAA,MACT;AAEA,UAAI,UAAU,KAAK,MAAM,GAAG;AAC5B,UAAI,QAAQ;AACZ,cAAQ,QAAQ,SAAU,GAAG,GAAG;AAC9B,YAAI,MAAM,GAAG;AACX,iBAAO,WAAW,KAAK,CAAC,GAAG,iCAAiC;AAC5D;AAAA,QACF;AAEA,YAAI,WAAY,EAAE,SAAS,KAAO,EAAE,EAAE,SAAS,OAAO;AACtD,YAAI,aAAa,SAAS,GAAG,EAAE;AAC/B,eAAO,aAAa,iBAAiB,eAAe;AACpD,YAAI;AAAU,wBAAc;AAE5B,gBAAQ,MAAM,YAAY,UAAU;AAAA,MACtC,CAAC;AAED,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,cAAc,SAAU,OAAO;AAC7C,UAAI,aAAa,SAAS;AAC1B,UAAI,cAAc,OAAO,YAAY,CAAC;AACtC,kBAAY,cAAc,OAAO,CAAC;AAElC,UAAI;AAEJ,UAAI,YAAY;AACd,eAAO,KAAK,YAAY,qCAAqC;AAE7D,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,OAAO,MAAM,GAAG,CAAC;AAC1B,aAAK,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;AAG3B,eAAO,OAAO,OAAO,CAAC,IAAI,WAAW,CAAC;AAAA,MACxC,OAAO;AAGL,eAAO,OAAO,OAAO,CAAC,KAAK,WAAW,WAAW,CAAC;AAAA,MACpD;AAEA,UAAI,IAAI,OAAO,WAAW,UAAU,KAAK,SAAS,EAAE,OAAO,IAAI,EAAE,OAAO;AACxE,UAAI,KAAK,EAAE,MAAM,GAAG,EAAE;AACtB,UAAI,KAAK,EAAE,MAAM,EAAE;AAEnB,UAAI,KAAK,IAAI,MAAM,KAAK,QAAQ;AAGhC,UAAI,KAAK,YAAY;AAEnB,YAAI;AACF,aAAG,aAAa,OAAO,KAAK,UAAU,mBAAmB,OAAO,KAAK,KAAK,UAAU,GAAG,EAAE,CAAC;AAAA,QAE5F,SAAS,KAAP;AAEA,iBAAO,KAAK,YAAY,QAAQ,CAAC;AAAA,QACnC;AAAA,MAEF,OAAO;AAGL,YAAI;AACF,aAAG,YAAY,OAAO,KAAK,UAAU,kBAAkB,OAAO,KAAK,KAAK,SAAS,GAAG,IAAI,IAAI,CAAC;AAAA,QAE/F,SAAS,KAAP;AAEA,iBAAO,KAAK,YAAY,QAAQ,CAAC;AAAA,QACnC;AAAA,MACF;AAEA,SAAG,YAAY;AACf,SAAG,QAAQ,KAAK,QAAQ;AACxB,SAAG,oBAAoB,KAAK;AAC5B,SAAG,QAAQ;AAEX,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,OAAO,SAAU,MAAM;AACrC,aAAO,OAAO,KAAK,UAAU,UAAU,MAAM,KAAK,UAAU,EAAE,SAAS;AAAA,IACzE;AAEA,UAAM,UAAU,SAAS,SAAU,MAAM,WAAW;AAClD,aAAO,UAAU,YACf,WAAW,KAAK,SAAS,GACzB,WAAW,KAAK,IAAI,GACpB,WAAW,KAAK,KAAK,SAAS,CAChC;AAAA,IACF;AAEA,UAAM,UAAU,kBAAkB,WAAY;AAC5C,UAAI,KAAK;AAAa,eAAO,YAAY,KAAK,YAAY,MAAM,EAAE,KAAK,KAAK,WAAW;AACvF,WAAK,cAAc;AACnB,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,SAAS,WAAY;AACnC,aAAO;AAAA,QACL,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,MACb;AAAA,IACF;AAEA,UAAM,iBAAiB,SAAU,YAAY,UAAU;AACrD,UAAI,IAAI,OAAO,WAAW,UAAU,aAAa,EAAE,OAAO,UAAU,EAAE,OAAO;AAC7E,UAAI,KAAK,EAAE,MAAM,GAAG,EAAE;AACtB,UAAI,KAAK,EAAE,MAAM,EAAE;AAEnB,UAAI,QAAQ,IAAI,MAAM,QAAQ;AAC9B,YAAM,YAAY;AAClB,YAAM,aAAa;AAEnB,aAAO;AAAA,IACT;AAEA,UAAM,kBAAkB,SAAU,WAAW,UAAU;AAErD,iBAAW,YAAY;AACvB,UAAI,QAAQ,IAAI,MAAM,QAAQ;AAE9B,UAAI,YAAY,UAAU,OAAO,SAAS;AAE1C,UAAI,UAAU,UAAU,aAAa,CAAC;AACtC,aAAO,YAAY,SAAS,WAAW,YAAY,SAAS,QAAQ,oDAAoD;AAExH,YAAM,QAAQ,UAAU,UAAU,CAAC;AACnC,YAAM,oBAAoB,UAAU,aAAa,CAAC;AAClD,YAAM,QAAQ,UAAU,aAAa,CAAC;AACtC,YAAM,YAAY,UAAU,MAAM,IAAI,EAAE;AAExC,UAAI,MAAM,UAAU,MAAM,EAAE;AAC5B,UAAI,IAAI,UAAU,CAAC,MAAM,GAAG;AAC1B,eAAO,YAAY,SAAS,SAAS,kDAAkD;AACvF,cAAM,aAAa,IAAI,MAAM,CAAC;AAAA,MAChC,OAAO;AACL,eAAO,YAAY,SAAS,QAAQ,iDAAiD;AACrF,cAAM,YAAY;AAAA,MACpB;AAEA,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,SAAU,KAAK;AAC9B,aAAO,MAAM,gBAAgB,IAAI,KAAK;AAAA,IACxC;AAEA,uBAAoB,OAAO,SAAS,KAAK;AAEvC,UAAI,SAAS,OAAO,YAAY,GAAG;AAEnC,aAAO,cAAc,SAAS,CAAC;AAC/B,aAAO,WAAW,MAAM,OAAO,CAAC;AAEhC,UAAI,cAAc,MAAM,QAAQ,MAAM,oBAAoB;AAC1D,aAAO,cAAc,aAAa,CAAC;AACnC,aAAO,cAAc,MAAM,OAAO,CAAC;AAEnC,YAAM,UAAU,KAAK,QAAQ,EAAE;AAC/B,UAAI,KAAK,QAAQ,EAAE;AAEnB,aAAO;AAAA,IACT;AAEA,qBAAkB,KAAK;AACrB,UAAI,MAAM,OAAO,WAAW,QAAQ,EAAE,OAAO,GAAG,EAAE,OAAO;AACzD,aAAO,OAAO,WAAW,WAAW,EAAE,OAAO,GAAG,EAAE,OAAO;AAAA,IAC3D;AAEA,UAAM,kBAAkB;AACxB,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
