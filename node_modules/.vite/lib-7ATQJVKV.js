"use strict";
import {
  require_assertThisInitialized,
  require_asyncToGenerator,
  require_defineProperty,
  require_getPrototypeOf,
  require_setPrototypeOf
} from "./chunk-6UXVEZIO.js";
import {
  require_regenerator
} from "./chunk-5P5FTJNK.js";
import {
  require_interopRequireDefault
} from "./chunk-ESPIRCFT.js";
import {
  require_events
} from "./chunk-K2K3O27I.js";
import {
  __commonJS,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/trezor-connect/lib/constants/blockchain.js
var require_blockchain = __commonJS({
  "node_modules/trezor-connect/lib/constants/blockchain.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.FIAT_RATES_UPDATE = exports.NOTIFICATION = exports.BLOCK = exports.CONNECT = exports.ERROR = void 0;
    var ERROR = "blockchain-error";
    exports.ERROR = ERROR;
    var CONNECT = "blockchain-connect";
    exports.CONNECT = CONNECT;
    var BLOCK = "blockchain-block";
    exports.BLOCK = BLOCK;
    var NOTIFICATION = "blockchain-notification";
    exports.NOTIFICATION = NOTIFICATION;
    var FIAT_RATES_UPDATE = "fiat-rates-update";
    exports.FIAT_RATES_UPDATE = FIAT_RATES_UPDATE;
  }
});

// node_modules/trezor-connect/lib/constants/device.js
var require_device = __commonJS({
  "node_modules/trezor-connect/lib/constants/device.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.WAIT_FOR_SELECTION = exports.WORD = exports.PASSPHRASE_ON_DEVICE = exports.PASSPHRASE = exports.PIN = exports.BUTTON = exports.LOADING = exports.USED_ELSEWHERE = exports.RELEASED = exports.ACQUIRED = exports.RELEASE = exports.ACQUIRE = exports.CHANGED = exports.DISCONNECT = exports.CONNECT_UNACQUIRED = exports.CONNECT = void 0;
    var CONNECT = "device-connect";
    exports.CONNECT = CONNECT;
    var CONNECT_UNACQUIRED = "device-connect_unacquired";
    exports.CONNECT_UNACQUIRED = CONNECT_UNACQUIRED;
    var DISCONNECT = "device-disconnect";
    exports.DISCONNECT = DISCONNECT;
    var CHANGED = "device-changed";
    exports.CHANGED = CHANGED;
    var ACQUIRE = "device-acquire";
    exports.ACQUIRE = ACQUIRE;
    var RELEASE = "device-release";
    exports.RELEASE = RELEASE;
    var ACQUIRED = "device-acquired";
    exports.ACQUIRED = ACQUIRED;
    var RELEASED = "device-released";
    exports.RELEASED = RELEASED;
    var USED_ELSEWHERE = "device-used_elsewhere";
    exports.USED_ELSEWHERE = USED_ELSEWHERE;
    var LOADING = "device-loading";
    exports.LOADING = LOADING;
    var BUTTON = "button";
    exports.BUTTON = BUTTON;
    var PIN = "pin";
    exports.PIN = PIN;
    var PASSPHRASE = "passphrase";
    exports.PASSPHRASE = PASSPHRASE;
    var PASSPHRASE_ON_DEVICE = "passphrase_on_device";
    exports.PASSPHRASE_ON_DEVICE = PASSPHRASE_ON_DEVICE;
    var WORD = "word";
    exports.WORD = WORD;
    var WAIT_FOR_SELECTION = "device-wait_for_selection";
    exports.WAIT_FOR_SELECTION = WAIT_FOR_SELECTION;
  }
});

// node_modules/@babel/runtime/helpers/inheritsLoose.js
var require_inheritsLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports, module) {
    init_define_process_env();
    var setPrototypeOf = require_setPrototypeOf();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      setPrototypeOf(subClass, superClass);
    }
    module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeFunction.js"(exports, module) {
    init_define_process_env();
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports, module) {
    init_define_process_env();
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/construct.js
var require_construct = __commonJS({
  "node_modules/@babel/runtime/helpers/construct.js"(exports, module) {
    init_define_process_env();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf(instance, Class2.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _construct.apply(null, arguments);
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({
  "node_modules/@babel/runtime/helpers/wrapNativeSuper.js"(exports, module) {
    init_define_process_env();
    var getPrototypeOf = require_getPrototypeOf();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeFunction = require_isNativeFunction();
    var construct = require_construct();
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      module.exports = _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return construct(Class2, arguments, getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf(Wrapper, Class2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper(Class);
    }
    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/trezor-connect/lib/constants/errors.js
var require_errors = __commonJS({
  "node_modules/trezor-connect/lib/constants/errors.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.LIBUSB_ERROR_MESSAGE = exports.WEBUSB_ERROR_MESSAGE = exports.INVALID_PIN_ERROR_MESSAGE = exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    var ERROR_CODES = {
      Init_NotInitialized: "TrezorConnect not yet initialized",
      Init_AlreadyInitialized: "TrezorConnect has been already initialized",
      Init_IframeBlocked: "Iframe blocked",
      Init_IframeTimeout: "Iframe timeout",
      Init_ManifestMissing: "Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md",
      Popup_ConnectionMissing: "Unable to establish connection with iframe",
      Transport_Missing: "Transport is missing",
      Transport_InvalidProtobuf: "",
      Method_InvalidPackage: "This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead",
      Method_InvalidParameter: "",
      Method_NotAllowed: "Method not allowed for this configuration",
      Method_PermissionsNotGranted: "Permissions not granted",
      Method_Cancel: "Cancelled",
      Method_Interrupted: "Popup closed",
      Method_UnknownCoin: "Coin not found",
      Method_AddressNotMatch: "Addresses do not match",
      Method_FirmwareUpdate_DownloadFailed: "Failed to download firmware binary",
      Method_CustomMessage_Callback: 'Parameter "callback" is not a function',
      Method_Discovery_BundleException: "",
      Method_Override: "override",
      Method_NoResponse: "Call resolved without response",
      Backend_NotSupported: "BlockchainLink settings not found in coins.json",
      Backend_WorkerMissing: "",
      Backend_Disconnected: "Backend disconnected",
      Backend_Invalid: "Invalid backend",
      Backend_Error: "",
      Runtime: "",
      Device_NotFound: "Device not found",
      Device_InitializeFailed: "",
      Device_FwException: "",
      Device_ModeException: "",
      Device_Disconnected: "Device disconnected",
      Device_UsedElsewhere: "Device is used in another window",
      Device_InvalidState: "Passphrase is incorrect",
      Device_CallInProgress: "Device call in progress"
    };
    exports.ERROR_CODES = ERROR_CODES;
    var TrezorError = function(_Error) {
      (0, _inheritsLoose2["default"])(TrezorError2, _Error);
      function TrezorError2(code, message) {
        var _this;
        _this = _Error.call(this, message) || this;
        _this.code = code;
        _this.message = message;
        return _this;
      }
      return TrezorError2;
    }((0, _wrapNativeSuper2["default"])(Error));
    exports.TrezorError = TrezorError;
    var TypedError = function TypedError2(id, message) {
      return new TrezorError(id, message || ERROR_CODES[id]);
    };
    exports.TypedError = TypedError;
    var WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = "wrong previous session";
    exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = WRONG_PREVIOUS_SESSION_ERROR_MESSAGE;
    var INVALID_PIN_ERROR_MESSAGE = "PIN invalid";
    exports.INVALID_PIN_ERROR_MESSAGE = INVALID_PIN_ERROR_MESSAGE;
    var WEBUSB_ERROR_MESSAGE = "NetworkError: Unable to claim interface.";
    exports.WEBUSB_ERROR_MESSAGE = WEBUSB_ERROR_MESSAGE;
    var LIBUSB_ERROR_MESSAGE = "LIBUSB_ERROR";
    exports.LIBUSB_ERROR_MESSAGE = LIBUSB_ERROR_MESSAGE;
  }
});

// node_modules/trezor-connect/lib/constants/iframe.js
var require_iframe = __commonJS({
  "node_modules/trezor-connect/lib/constants/iframe.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.CALL = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;
    var BOOTSTRAP = "iframe-bootstrap";
    exports.BOOTSTRAP = BOOTSTRAP;
    var LOADED = "iframe-loaded";
    exports.LOADED = LOADED;
    var INIT = "iframe-init";
    exports.INIT = INIT;
    var ERROR = "iframe-error";
    exports.ERROR = ERROR;
    var CALL = "iframe-call";
    exports.CALL = CALL;
  }
});

// node_modules/trezor-connect/lib/constants/network.js
var require_network = __commonJS({
  "node_modules/trezor-connect/lib/constants/network.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.TYPES = void 0;
    var TYPES = Object.freeze({
      bitcoin: "Bitcoin",
      ethereum: "Ethereum",
      eos: "Eos",
      nem: "NEM",
      stellar: "Stellar",
      cardano: "Cardano",
      ripple: "Ripple",
      tezos: "Tezors",
      binance: "Binance"
    });
    exports.TYPES = TYPES;
  }
});

// node_modules/trezor-connect/lib/constants/popup.js
var require_popup = __commonJS({
  "node_modules/trezor-connect/lib/constants/popup.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.CLOSE_WINDOW = exports.CANCEL_POPUP_REQUEST = exports.CLOSED = exports.HANDSHAKE = exports.EXTENSION_USB_PERMISSIONS = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;
    var BOOTSTRAP = "popup-bootstrap";
    exports.BOOTSTRAP = BOOTSTRAP;
    var LOADED = "popup-loaded";
    exports.LOADED = LOADED;
    var INIT = "popup-init";
    exports.INIT = INIT;
    var ERROR = "popup-error";
    exports.ERROR = ERROR;
    var EXTENSION_USB_PERMISSIONS = "open-usb-permissions";
    exports.EXTENSION_USB_PERMISSIONS = EXTENSION_USB_PERMISSIONS;
    var HANDSHAKE = "popup-handshake";
    exports.HANDSHAKE = HANDSHAKE;
    var CLOSED = "popup-closed";
    exports.CLOSED = CLOSED;
    var CANCEL_POPUP_REQUEST = "ui-cancel-popup-request";
    exports.CANCEL_POPUP_REQUEST = CANCEL_POPUP_REQUEST;
    var CLOSE_WINDOW = "window.close";
    exports.CLOSE_WINDOW = CLOSE_WINDOW;
  }
});

// node_modules/trezor-connect/lib/constants/transport.js
var require_transport = __commonJS({
  "node_modules/trezor-connect/lib/constants/transport.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.START_PENDING = exports.DISABLE_WEBUSB = exports.REQUEST = exports.STREAM = exports.UPDATE = exports.ERROR = exports.START = void 0;
    var START = "transport-start";
    exports.START = START;
    var ERROR = "transport-error";
    exports.ERROR = ERROR;
    var UPDATE = "transport-update";
    exports.UPDATE = UPDATE;
    var STREAM = "transport-stream";
    exports.STREAM = STREAM;
    var REQUEST = "transport-request_device";
    exports.REQUEST = REQUEST;
    var DISABLE_WEBUSB = "transport-disable_webusb";
    exports.DISABLE_WEBUSB = DISABLE_WEBUSB;
    var START_PENDING = "transport-start_pending";
    exports.START_PENDING = START_PENDING;
  }
});

// node_modules/trezor-connect/lib/constants/ui.js
var require_ui = __commonJS({
  "node_modules/trezor-connect/lib/constants/ui.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.IFRAME_FAILURE = exports.ADDRESS_VALIDATION = exports.BUNDLE_PROGRESS = exports.LOGIN_CHALLENGE_RESPONSE = exports.LOGIN_CHALLENGE_REQUEST = exports.CUSTOM_MESSAGE_RESPONSE = exports.CUSTOM_MESSAGE_REQUEST = exports.CHANGE_SETTINGS = exports.RECEIVE_WORD = exports.RECEIVE_FEE = exports.RECEIVE_ACCOUNT = exports.CHANGE_ACCOUNT = exports.RECEIVE_DEVICE = exports.RECEIVE_PASSPHRASE = exports.RECEIVE_PIN = exports.RECEIVE_CONFIRMATION = exports.RECEIVE_PERMISSION = exports.REQUEST_WORD = exports.REQUEST_BUTTON = exports.INSUFFICIENT_FUNDS = exports.UPDATE_CUSTOM_FEE = exports.SELECT_FEE = exports.SELECT_ACCOUNT = exports.SELECT_DEVICE = exports.SET_OPERATION = exports.LOADING = exports.CONNECT = exports.INVALID_PASSPHRASE_ACTION = exports.INVALID_PASSPHRASE = exports.REQUEST_PASSPHRASE_ON_DEVICE = exports.REQUEST_PASSPHRASE = exports.INVALID_PIN = exports.REQUEST_PIN = exports.REQUEST_CONFIRMATION = exports.REQUEST_PERMISSION = exports.CLOSE_UI_WINDOW = exports.REQUEST_UI_WINDOW = exports.DEVICE_NEEDS_BACKUP = exports.FIRMWARE_PROGRESS = exports.FIRMWARE_NOT_INSTALLED = exports.FIRMWARE_NOT_COMPATIBLE = exports.FIRMWARE_NOT_SUPPORTED = exports.FIRMWARE_OUTDATED = exports.FIRMWARE_OLD = exports.SEEDLESS = exports.INITIALIZE = exports.REQUIRE_MODE = exports.NOT_IN_BOOTLOADER = exports.BOOTLOADER = exports.TRANSPORT = void 0;
    var TRANSPORT = "ui-no_transport";
    exports.TRANSPORT = TRANSPORT;
    var BOOTLOADER = "ui-device_bootloader_mode";
    exports.BOOTLOADER = BOOTLOADER;
    var NOT_IN_BOOTLOADER = "ui-device_not_in_bootloader_mode";
    exports.NOT_IN_BOOTLOADER = NOT_IN_BOOTLOADER;
    var REQUIRE_MODE = "ui-device_require_mode";
    exports.REQUIRE_MODE = REQUIRE_MODE;
    var INITIALIZE = "ui-device_not_initialized";
    exports.INITIALIZE = INITIALIZE;
    var SEEDLESS = "ui-device_seedless";
    exports.SEEDLESS = SEEDLESS;
    var FIRMWARE_OLD = "ui-device_firmware_old";
    exports.FIRMWARE_OLD = FIRMWARE_OLD;
    var FIRMWARE_OUTDATED = "ui-device_firmware_outdated";
    exports.FIRMWARE_OUTDATED = FIRMWARE_OUTDATED;
    var FIRMWARE_NOT_SUPPORTED = "ui-device_firmware_unsupported";
    exports.FIRMWARE_NOT_SUPPORTED = FIRMWARE_NOT_SUPPORTED;
    var FIRMWARE_NOT_COMPATIBLE = "ui-device_firmware_not_compatible";
    exports.FIRMWARE_NOT_COMPATIBLE = FIRMWARE_NOT_COMPATIBLE;
    var FIRMWARE_NOT_INSTALLED = "ui-device_firmware_not_installed";
    exports.FIRMWARE_NOT_INSTALLED = FIRMWARE_NOT_INSTALLED;
    var FIRMWARE_PROGRESS = "ui-firmware-progress";
    exports.FIRMWARE_PROGRESS = FIRMWARE_PROGRESS;
    var DEVICE_NEEDS_BACKUP = "ui-device_needs_backup";
    exports.DEVICE_NEEDS_BACKUP = DEVICE_NEEDS_BACKUP;
    var REQUEST_UI_WINDOW = "ui-request_window";
    exports.REQUEST_UI_WINDOW = REQUEST_UI_WINDOW;
    var CLOSE_UI_WINDOW = "ui-close_window";
    exports.CLOSE_UI_WINDOW = CLOSE_UI_WINDOW;
    var REQUEST_PERMISSION = "ui-request_permission";
    exports.REQUEST_PERMISSION = REQUEST_PERMISSION;
    var REQUEST_CONFIRMATION = "ui-request_confirmation";
    exports.REQUEST_CONFIRMATION = REQUEST_CONFIRMATION;
    var REQUEST_PIN = "ui-request_pin";
    exports.REQUEST_PIN = REQUEST_PIN;
    var INVALID_PIN = "ui-invalid_pin";
    exports.INVALID_PIN = INVALID_PIN;
    var REQUEST_PASSPHRASE = "ui-request_passphrase";
    exports.REQUEST_PASSPHRASE = REQUEST_PASSPHRASE;
    var REQUEST_PASSPHRASE_ON_DEVICE = "ui-request_passphrase_on_device";
    exports.REQUEST_PASSPHRASE_ON_DEVICE = REQUEST_PASSPHRASE_ON_DEVICE;
    var INVALID_PASSPHRASE = "ui-invalid_passphrase";
    exports.INVALID_PASSPHRASE = INVALID_PASSPHRASE;
    var INVALID_PASSPHRASE_ACTION = "ui-invalid_passphrase_action";
    exports.INVALID_PASSPHRASE_ACTION = INVALID_PASSPHRASE_ACTION;
    var CONNECT = "ui-connect";
    exports.CONNECT = CONNECT;
    var LOADING = "ui-loading";
    exports.LOADING = LOADING;
    var SET_OPERATION = "ui-set_operation";
    exports.SET_OPERATION = SET_OPERATION;
    var SELECT_DEVICE = "ui-select_device";
    exports.SELECT_DEVICE = SELECT_DEVICE;
    var SELECT_ACCOUNT = "ui-select_account";
    exports.SELECT_ACCOUNT = SELECT_ACCOUNT;
    var SELECT_FEE = "ui-select_fee";
    exports.SELECT_FEE = SELECT_FEE;
    var UPDATE_CUSTOM_FEE = "ui-update_custom_fee";
    exports.UPDATE_CUSTOM_FEE = UPDATE_CUSTOM_FEE;
    var INSUFFICIENT_FUNDS = "ui-insufficient_funds";
    exports.INSUFFICIENT_FUNDS = INSUFFICIENT_FUNDS;
    var REQUEST_BUTTON = "ui-button";
    exports.REQUEST_BUTTON = REQUEST_BUTTON;
    var REQUEST_WORD = "ui-request_word";
    exports.REQUEST_WORD = REQUEST_WORD;
    var RECEIVE_PERMISSION = "ui-receive_permission";
    exports.RECEIVE_PERMISSION = RECEIVE_PERMISSION;
    var RECEIVE_CONFIRMATION = "ui-receive_confirmation";
    exports.RECEIVE_CONFIRMATION = RECEIVE_CONFIRMATION;
    var RECEIVE_PIN = "ui-receive_pin";
    exports.RECEIVE_PIN = RECEIVE_PIN;
    var RECEIVE_PASSPHRASE = "ui-receive_passphrase";
    exports.RECEIVE_PASSPHRASE = RECEIVE_PASSPHRASE;
    var RECEIVE_DEVICE = "ui-receive_device";
    exports.RECEIVE_DEVICE = RECEIVE_DEVICE;
    var CHANGE_ACCOUNT = "ui-change_account";
    exports.CHANGE_ACCOUNT = CHANGE_ACCOUNT;
    var RECEIVE_ACCOUNT = "ui-receive_account";
    exports.RECEIVE_ACCOUNT = RECEIVE_ACCOUNT;
    var RECEIVE_FEE = "ui-receive_fee";
    exports.RECEIVE_FEE = RECEIVE_FEE;
    var RECEIVE_WORD = "ui-receive_word";
    exports.RECEIVE_WORD = RECEIVE_WORD;
    var CHANGE_SETTINGS = "ui-change_settings";
    exports.CHANGE_SETTINGS = CHANGE_SETTINGS;
    var CUSTOM_MESSAGE_REQUEST = "ui-custom_request";
    exports.CUSTOM_MESSAGE_REQUEST = CUSTOM_MESSAGE_REQUEST;
    var CUSTOM_MESSAGE_RESPONSE = "ui-custom_response";
    exports.CUSTOM_MESSAGE_RESPONSE = CUSTOM_MESSAGE_RESPONSE;
    var LOGIN_CHALLENGE_REQUEST = "ui-login_challenge_request";
    exports.LOGIN_CHALLENGE_REQUEST = LOGIN_CHALLENGE_REQUEST;
    var LOGIN_CHALLENGE_RESPONSE = "ui-login_challenge_response";
    exports.LOGIN_CHALLENGE_RESPONSE = LOGIN_CHALLENGE_RESPONSE;
    var BUNDLE_PROGRESS = "ui-bundle_progress";
    exports.BUNDLE_PROGRESS = BUNDLE_PROGRESS;
    var ADDRESS_VALIDATION = "ui-address_validation";
    exports.ADDRESS_VALIDATION = ADDRESS_VALIDATION;
    var IFRAME_FAILURE = "ui-iframe_failure";
    exports.IFRAME_FAILURE = IFRAME_FAILURE;
  }
});

// node_modules/trezor-connect/lib/constants/cardano.js
var require_cardano = __commonJS({
  "node_modules/trezor-connect/lib/constants/cardano.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.POOL_RELAY_TYPE = exports.CERTIFICATE_TYPE = exports.ADDRESS_TYPE = exports.NETWORK_IDS = exports.PROTOCOL_MAGICS = void 0;
    var PROTOCOL_MAGICS = Object.freeze({
      mainnet: 764824073,
      testnet: 42
    });
    exports.PROTOCOL_MAGICS = PROTOCOL_MAGICS;
    var NETWORK_IDS = Object.freeze({
      mainnet: 1,
      testnet: 0
    });
    exports.NETWORK_IDS = NETWORK_IDS;
    var ADDRESS_TYPE = Object.freeze({
      Base: 0,
      Pointer: 4,
      Enterprise: 6,
      Byron: 8,
      Reward: 14
    });
    exports.ADDRESS_TYPE = ADDRESS_TYPE;
    var CERTIFICATE_TYPE = Object.freeze({
      StakeRegistration: 0,
      StakeDeregistration: 1,
      StakeDelegation: 2,
      StakePoolRegistration: 3
    });
    exports.CERTIFICATE_TYPE = CERTIFICATE_TYPE;
    var POOL_RELAY_TYPE = Object.freeze({
      SingleHostIp: 0,
      SingleHostName: 1,
      MultipleHostName: 2
    });
    exports.POOL_RELAY_TYPE = POOL_RELAY_TYPE;
  }
});

// node_modules/trezor-connect/lib/constants/index.js
var require_constants = __commonJS({
  "node_modules/trezor-connect/lib/constants/index.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.CARDANO = exports.UI = exports.TRANSPORT = exports.POPUP = exports.NETWORK = exports.IFRAME = exports.ERRORS = exports.DEVICE = exports.BLOCKCHAIN = exports.BLOCKCHAIN_EVENT = exports.RESPONSE_EVENT = exports.TRANSPORT_EVENT = exports.DEVICE_EVENT = exports.UI_EVENT = exports.CORE_EVENT = void 0;
    var BLOCKCHAIN = _interopRequireWildcard(require_blockchain());
    exports.BLOCKCHAIN = BLOCKCHAIN;
    var DEVICE = _interopRequireWildcard(require_device());
    exports.DEVICE = DEVICE;
    var ERRORS = _interopRequireWildcard(require_errors());
    exports.ERRORS = ERRORS;
    var IFRAME = _interopRequireWildcard(require_iframe());
    exports.IFRAME = IFRAME;
    var NETWORK = _interopRequireWildcard(require_network());
    exports.NETWORK = NETWORK;
    var POPUP = _interopRequireWildcard(require_popup());
    exports.POPUP = POPUP;
    var TRANSPORT = _interopRequireWildcard(require_transport());
    exports.TRANSPORT = TRANSPORT;
    var UI = _interopRequireWildcard(require_ui());
    exports.UI = UI;
    var CARDANO = _interopRequireWildcard(require_cardano());
    exports.CARDANO = CARDANO;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var CORE_EVENT = "CORE_EVENT";
    exports.CORE_EVENT = CORE_EVENT;
    var UI_EVENT = "UI_EVENT";
    exports.UI_EVENT = UI_EVENT;
    var DEVICE_EVENT = "DEVICE_EVENT";
    exports.DEVICE_EVENT = DEVICE_EVENT;
    var TRANSPORT_EVENT = "TRANSPORT_EVENT";
    exports.TRANSPORT_EVENT = TRANSPORT_EVENT;
    var RESPONSE_EVENT = "RESPONSE_EVENT";
    exports.RESPONSE_EVENT = RESPONSE_EVENT;
    var BLOCKCHAIN_EVENT = "BLOCKCHAIN_EVENT";
    exports.BLOCKCHAIN_EVENT = BLOCKCHAIN_EVENT;
  }
});

// node_modules/trezor-connect/lib/popup/showPopupRequest.js
var require_showPopupRequest = __commonJS({
  "node_modules/trezor-connect/lib/popup/showPopupRequest.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.showPopupRequest = void 0;
    var LAYER_ID = "TrezorConnectInteractionLayer";
    var HTML = '\n    <div class="trezorconnect-container" id="' + LAYER_ID + '">\n        <div class="trezorconnect-window">\n            <div class="trezorconnect-head">\n                <svg class="trezorconnect-logo" x="0px" y="0px" viewBox="0 0 163.7 41.9" width="78px" height="20px" preserveAspectRatio="xMinYMin meet">\n                    <polygon points="101.1,12.8 118.2,12.8 118.2,17.3 108.9,29.9 118.2,29.9 118.2,35.2 101.1,35.2 101.1,30.7 110.4,18.1 101.1,18.1"/>\n                    <path d="M158.8,26.9c2.1-0.8,4.3-2.9,4.3-6.6c0-4.5-3.1-7.4-7.7-7.4h-10.5v22.3h5.8v-7.5h2.2l4.1,7.5h6.7L158.8,26.9z M154.7,22.5 h-4V18h4c1.5,0,2.5,0.9,2.5,2.2C157.2,21.6,156.2,22.5,154.7,22.5z"/>\n                    <path d="M130.8,12.5c-6.8,0-11.6,4.9-11.6,11.5s4.9,11.5,11.6,11.5s11.7-4.9,11.7-11.5S137.6,12.5,130.8,12.5z M130.8,30.3 c-3.4,0-5.7-2.6-5.7-6.3c0-3.8,2.3-6.3,5.7-6.3c3.4,0,5.8,2.6,5.8,6.3C136.6,27.7,134.2,30.3,130.8,30.3z"/>\n                    <polygon points="82.1,12.8 98.3,12.8 98.3,18 87.9,18 87.9,21.3 98,21.3 98,26.4 87.9,26.4 87.9,30 98.3,30 98.3,35.2 82.1,35.2 "/>\n                    <path d="M24.6,9.7C24.6,4.4,20,0,14.4,0S4.2,4.4,4.2,9.7v3.1H0v22.3h0l14.4,6.7l14.4-6.7h0V12.9h-4.2V9.7z M9.4,9.7 c0-2.5,2.2-4.5,5-4.5s5,2,5,4.5v3.1H9.4V9.7z M23,31.5l-8.6,4l-8.6-4V18.1H23V31.5z"/>\n                    <path d="M79.4,20.3c0-4.5-3.1-7.4-7.7-7.4H61.2v22.3H67v-7.5h2.2l4.1,7.5H80l-4.9-8.3C77.2,26.1,79.4,24,79.4,20.3z M71,22.5h-4V18 h4c1.5,0,2.5,0.9,2.5,2.2C73.5,21.6,72.5,22.5,71,22.5z"/>\n                    <polygon points="40.5,12.8 58.6,12.8 58.6,18.1 52.4,18.1 52.4,35.2 46.6,35.2 46.6,18.1 40.5,18.1 "/>\n                </svg>\n                <div class="trezorconnect-close">\n                    <svg x="0px" y="0px" viewBox="24 24 60 60" width="24px" height="24px" preserveAspectRatio="xMinYMin meet">\n                        <polygon class="st0" points="40,67.9 42.1,70 55,57.1 67.9,70 70,67.9 57.1,55 70,42.1 67.9,40 55,52.9 42.1,40 40,42.1 52.9,55 "/>\n                    </svg>\n                </div>\n            </div>\n            <div class="trezorconnect-body">\n                <h3>Popup was blocked</h3>\n                <p>Please click to \u201CContinue\u201D to open popup manually</p>\n                <button class="trezorconnect-open">Continue</button>\n            </div>\n        </div>\n    </div>\n';
    var showPopupRequest = function showPopupRequest2(open, cancel) {
      if (document.getElementById(LAYER_ID)) {
        return;
      }
      var div = document.createElement("div");
      div.id = LAYER_ID;
      div.className = "trezorconnect-container";
      div.innerHTML = HTML;
      if (document.body) {
        document.body.appendChild(div);
      }
      var button = div.getElementsByClassName("trezorconnect-open")[0];
      button.onclick = function() {
        open();
        if (document.body) {
          document.body.removeChild(div);
        }
      };
      var close = div.getElementsByClassName("trezorconnect-close")[0];
      close.onclick = function() {
        cancel();
        if (document.body) {
          document.body.removeChild(div);
        }
      };
    };
    exports.showPopupRequest = showPopupRequest;
  }
});

// node_modules/trezor-connect/lib/utils/urlUtils.js
var require_urlUtils = __commonJS({
  "node_modules/trezor-connect/lib/utils/urlUtils.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.getOnionDomain = getOnionDomain;
    exports.getOrigin = void 0;
    var getOrigin = function getOrigin2(url) {
      if (typeof url !== "string")
        return "unknown";
      if (url.indexOf("file://") === 0)
        return "file://";
      var parts = url.match(/^.+\:\/\/[^\/]+/);
      return Array.isArray(parts) && parts.length > 0 ? parts[0] : "unknown";
    };
    exports.getOrigin = getOrigin;
    function getOnionDomain(url, dict) {
      if (Array.isArray(url)) {
        return url.map(function(u) {
          return getOnionDomain(u, dict);
        });
      }
      if (typeof url === "string") {
        var _url$match;
        var _ref = (_url$match = url.match(/^(http|ws)s?:\/\/([^:/]+\.)?([^/.]+\.[^/.]+)(\/.*)?$/i)) != null ? _url$match : [], protocol = _ref[1], subdomain = _ref[2], _domain = _ref[3], rest = _ref[4];
        if (!_domain || !dict[_domain])
          return url;
        return protocol + "://" + (subdomain || "") + dict[_domain] + (rest || "");
      }
      return url;
    }
  }
});

// node_modules/trezor-connect/lib/utils/deferred.js
var require_deferred = __commonJS({
  "node_modules/trezor-connect/lib/utils/deferred.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.create = create;
    exports.createAsync = createAsync;
    exports.resolveTimeoutPromise = resolveTimeoutPromise;
    exports.rejectTimeoutPromise = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    function create(arg, device) {
      var localResolve = function localResolve2(_t) {
      };
      var localReject = function localReject2(_e) {
      };
      var id;
      var promise = new Promise(function() {
        var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(resolve, reject) {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  localResolve = resolve;
                  localReject = reject;
                  if (!(typeof arg === "function")) {
                    _context.next = 11;
                    break;
                  }
                  _context.prev = 3;
                  _context.next = 6;
                  return arg();
                case 6:
                  _context.next = 11;
                  break;
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  reject(_context.t0);
                case 11:
                  if (typeof arg === "string")
                    id = arg;
                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));
        return function(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
      return {
        id,
        device,
        resolve: localResolve,
        reject: localReject,
        promise
      };
    }
    function createAsync(innerFn) {
      var localResolve = function localResolve2(_t) {
      };
      var localReject = function localReject2(_e) {
      };
      var promise = new Promise(function(resolve, reject) {
        localResolve = resolve;
        localReject = reject;
      });
      var inner = function() {
        var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
          return _regenerator["default"].wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return innerFn();
                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function inner2() {
          return _ref2.apply(this, arguments);
        };
      }();
      return {
        resolve: localResolve,
        reject: localReject,
        promise,
        run: function run() {
          inner();
          return promise;
        }
      };
    }
    function resolveTimeoutPromise(delay, result) {
      return new Promise(function(resolve) {
        setTimeout(function() {
          resolve(result);
        }, delay);
      });
    }
    var rejectTimeoutPromise = function rejectTimeoutPromise2(delay, error) {
      return new Promise(function(resolve, reject) {
        setTimeout(function() {
          reject(error);
        }, delay);
      });
    };
    exports.rejectTimeoutPromise = rejectTimeoutPromise;
  }
});

// node_modules/trezor-connect/lib/popup/PopupManager.js
var require_PopupManager = __commonJS({
  "node_modules/trezor-connect/lib/popup/PopupManager.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports["default"] = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _events = _interopRequireDefault(require_events());
    var POPUP = _interopRequireWildcard(require_popup());
    var IFRAME = _interopRequireWildcard(require_iframe());
    var UI = _interopRequireWildcard(require_ui());
    var _showPopupRequest = require_showPopupRequest();
    var _urlUtils = require_urlUtils();
    var _deferred = require_deferred();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var POPUP_REQUEST_TIMEOUT = 850;
    var POPUP_CLOSE_INTERVAL = 500;
    var POPUP_OPEN_TIMEOUT = 3e3;
    var PopupManager = function(_EventEmitter) {
      (0, _inheritsLoose2["default"])(PopupManager2, _EventEmitter);
      function PopupManager2(settings) {
        var _this;
        _this = _EventEmitter.call(this) || this;
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "requestTimeout", 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "closeInterval", 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "extensionTabId", 0);
        _this.settings = settings;
        _this.origin = (0, _urlUtils.getOrigin)(settings.popupSrc);
        _this.handleMessage = _this.handleMessage.bind((0, _assertThisInitialized2["default"])(_this));
        _this.iframeHandshake = (0, _deferred.create)(IFRAME.LOADED);
        if (_this.settings.env === "webextension") {
          _this.handleExtensionConnect = _this.handleExtensionConnect.bind((0, _assertThisInitialized2["default"])(_this));
          _this.handleExtensionMessage = _this.handleExtensionMessage.bind((0, _assertThisInitialized2["default"])(_this));
          chrome.runtime.onConnect.addListener(_this.handleExtensionConnect);
        }
        window.addEventListener("message", _this.handleMessage, false);
        return _this;
      }
      var _proto = PopupManager2.prototype;
      _proto.request = function request(lazyLoad) {
        var _this2 = this;
        if (lazyLoad === void 0) {
          lazyLoad = false;
        }
        if (this.locked) {
          if (this._window) {
            if (this.settings.env === "webextension") {
              chrome.tabs.update(this._window.id, {
                active: true
              });
            } else {
              this._window.focus();
            }
          }
          return;
        }
        var openFn = this.open.bind(this);
        this.locked = true;
        if (!this.settings.supportedBrowser) {
          openFn();
        } else {
          var timeout = lazyLoad || this.settings.env === "webextension" ? 1 : POPUP_REQUEST_TIMEOUT;
          this.requestTimeout = window.setTimeout(function() {
            _this2.requestTimeout = 0;
            openFn(lazyLoad);
          }, timeout);
        }
      };
      _proto.cancel = function cancel() {
        this.close();
      };
      _proto.unlock = function unlock() {
        this.locked = false;
      };
      _proto.open = function open(lazyLoad) {
        var _this3 = this;
        var src = this.settings.popupSrc;
        if (!this.settings.supportedBrowser) {
          this.openWrapper(src + "#unsupported");
          return;
        }
        this.popupPromise = (0, _deferred.create)(POPUP.LOADED);
        this.openWrapper(lazyLoad ? src + "#loading" : src);
        this.closeInterval = window.setInterval(function() {
          if (!_this3._window)
            return;
          if (_this3.settings.env === "webextension") {
            chrome.tabs.get(_this3._window.id, function(tab) {
              if (!tab) {
                _this3.close();
                _this3.emit(POPUP.CLOSED);
              }
            });
          } else if (_this3._window.closed) {
            _this3.close();
            _this3.emit(POPUP.CLOSED);
          }
        }, POPUP_CLOSE_INTERVAL);
        this.openTimeout = window.setTimeout(function() {
          _this3.close();
          (0, _showPopupRequest.showPopupRequest)(_this3.open.bind(_this3), function() {
            _this3.emit(POPUP.CLOSED);
          });
        }, POPUP_OPEN_TIMEOUT);
      };
      _proto.openWrapper = function openWrapper(url) {
        var _this4 = this;
        if (this.settings.env === "webextension") {
          chrome.windows.getCurrent(null, function(currentWindow) {
            if (currentWindow.type !== "normal") {
              chrome.windows.create({
                url
              }, function(newWindow) {
                chrome.tabs.query({
                  windowId: newWindow.id,
                  active: true
                }, function(tabs) {
                  _this4._window = tabs[0];
                });
              });
            } else {
              chrome.tabs.query({
                currentWindow: true,
                active: true
              }, function(tabs) {
                _this4.extensionTabId = tabs[0].id;
                chrome.tabs.create({
                  url,
                  index: tabs[0].index + 1
                }, function(tab) {
                  _this4._window = tab;
                });
              });
            }
          });
        } else if (this.settings.env === "electron") {
          this._window = window.open(url, "modal");
        } else {
          this._window = window.open("", "_blank");
          if (this._window) {
            this._window.location.href = url;
          }
        }
      };
      _proto.handleExtensionConnect = function handleExtensionConnect(port) {
        if (port.name !== "trezor-connect")
          return;
        if (!this._window || this._window && this._window.id !== port.sender.tab.id) {
          port.disconnect();
          return;
        }
        window.clearTimeout(this.openTimeout);
        this.extensionPort = port;
        this.extensionPort.onMessage.addListener(this.handleExtensionMessage);
      };
      _proto.handleExtensionMessage = function handleExtensionMessage(message) {
        var _this5 = this;
        if (!this.extensionPort)
          return;
        var port = this.extensionPort;
        var data = message.data;
        if (!data || typeof data !== "object")
          return;
        if (data.type === POPUP.ERROR) {
          var errorMessage = data.payload && typeof data.payload.error === "string" ? data.payload.error : null;
          this.emit(POPUP.CLOSED, errorMessage ? "Popup error: " + errorMessage : null);
          this.close();
        } else if (data.type === POPUP.LOADED) {
          if (this.popupPromise) {
            this.popupPromise.resolve();
          }
          this.iframeHandshake.promise.then(function(useBroadcastChannel) {
            port.postMessage({
              type: POPUP.INIT,
              payload: {
                settings: _this5.settings,
                useBroadcastChannel
              }
            });
          });
        } else if (data.type === POPUP.EXTENSION_USB_PERMISSIONS) {
          chrome.tabs.query({
            currentWindow: true,
            active: true
          }, function(tabs) {
            chrome.tabs.create({
              url: "trezor-usb-permissions.html",
              index: tabs[0].index + 1
            }, function(_tab) {
            });
          });
        } else if (data.type === POPUP.CLOSE_WINDOW) {
          this.emit(POPUP.CLOSED);
          this.close();
        }
      };
      _proto.handleMessage = function handleMessage(message) {
        var _this6 = this;
        var data = message.data;
        if ((0, _urlUtils.getOrigin)(message.origin) !== this.origin || !data || typeof data !== "object")
          return;
        if (data.type === IFRAME.LOADED) {
          var useBroadcastChannel = data.payload && typeof data.payload.useBroadcastChannel === "boolean" ? data.payload.useBroadcastChannel : false;
          this.iframeHandshake.resolve(useBroadcastChannel);
        } else if (data.type === POPUP.BOOTSTRAP) {
          window.clearTimeout(this.openTimeout);
        } else if (data.type === POPUP.ERROR && this._window) {
          var errorMessage = data.payload && typeof data.payload.error === "string" ? data.payload.error : null;
          this.emit(POPUP.CLOSED, errorMessage ? "Popup error: " + errorMessage : null);
          this.close();
        } else if (data.type === POPUP.LOADED) {
          if (this.popupPromise) {
            this.popupPromise.resolve();
          }
          this.iframeHandshake.promise.then(function(useBroadcastChannel2) {
            _this6._window.postMessage({
              type: POPUP.INIT,
              payload: {
                settings: _this6.settings,
                useBroadcastChannel: useBroadcastChannel2
              }
            }, _this6.origin);
          });
        } else if (data.type === POPUP.CANCEL_POPUP_REQUEST || data.type === UI.CLOSE_UI_WINDOW) {
          this.close();
        }
      };
      _proto.close = function close() {
        this.locked = false;
        this.popupPromise = void 0;
        if (this.requestTimeout) {
          window.clearTimeout(this.requestTimeout);
          this.requestTimeout = 0;
        }
        if (this.openTimeout) {
          window.clearTimeout(this.openTimeout);
          this.openTimeout = 0;
        }
        if (this.closeInterval) {
          window.clearInterval(this.closeInterval);
          this.closeInterval = 0;
        }
        if (this.extensionPort) {
          this.extensionPort.disconnect();
          this.extensionPort = null;
        }
        if (this.extensionTabId) {
          chrome.tabs.update(this.extensionTabId, {
            active: true
          });
          this.extensionTabId = 0;
        }
        if (this._window) {
          if (this.settings.env === "webextension") {
            var _e = chrome.runtime.lastError;
            chrome.tabs.remove(this._window.id, function() {
              _e = chrome.runtime.lastError;
            });
          } else {
            this._window.close();
          }
          this._window = null;
        }
      };
      _proto.postMessage = function() {
        var _postMessage = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(message) {
          var _this7 = this;
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(!this._window && message.type !== UI.REQUEST_UI_WINDOW && this.openTimeout)) {
                    _context.next = 4;
                    break;
                  }
                  this.close();
                  (0, _showPopupRequest.showPopupRequest)(this.open.bind(this), function() {
                    _this7.emit(POPUP.CLOSED);
                  });
                  return _context.abrupt("return");
                case 4:
                  if (!this.popupPromise) {
                    _context.next = 7;
                    break;
                  }
                  _context.next = 7;
                  return this.popupPromise.promise;
                case 7:
                  if (this._window) {
                    this._window.postMessage(message, this.origin);
                  }
                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
        function postMessage(_x) {
          return _postMessage.apply(this, arguments);
        }
        return postMessage;
      }();
      return PopupManager2;
    }(_events["default"]);
    exports["default"] = PopupManager;
  }
});

// node_modules/trezor-connect/lib/iframe/inline-styles.js
var require_inline_styles = __commonJS({
  "node_modules/trezor-connect/lib/iframe/inline-styles.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports["default"] = void 0;
    var css = '.trezorconnect-container{position:fixed!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-webkit-flex-direction:column!important;-ms-flex-direction:column!important;flex-direction:column!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important;z-index:10000!important;width:100%!important;height:100%!important;top:0!important;left:0!important;background:rgba(0,0,0,.35)!important;overflow:auto!important;padding:20px!important;margin:0!important}.trezorconnect-container .trezorconnect-window{position:relative!important;display:block!important;width:370px!important;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif!important;margin:auto!important;border-radius:3px!important;background-color:#fff!important;text-align:center!important;overflow:hidden!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head{text-align:left;padding:12px 24px!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-logo{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close{cursor:pointer!important;height:24px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close svg{fill:#757575;-webkit-transition:fill .3s ease-in-out!important;transition:fill .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close:hover svg{fill:#494949}.trezorconnect-container .trezorconnect-window .trezorconnect-body{padding:24px 24px 32px!important;background:#FBFBFB!important;border-top:1px solid #EBEBEB}.trezorconnect-container .trezorconnect-window .trezorconnect-body h3{color:#505050!important;font-size:16px!important;font-weight:500!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body p{margin:8px 0 24px!important;font-weight:400!important;color:#A9A9A9!important;font-size:12px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button{width:100%!important;padding:12px 24px!important;margin:0!important;border-radius:3px!important;font-size:14px!important;font-weight:300!important;cursor:pointer!important;background:#01B757!important;color:#fff!important;border:0!important;-webkit-transition:background-color .3s ease-in-out!important;transition:background-color .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:hover{background-color:#00AB51!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:active{background-color:#009546!important}/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0IiwiJHN0ZGluIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLHlCQUNJLFNBQUEsZ0JBQ0EsUUFBQSxzQkFDQSxRQUFBLHVCQUNBLFFBQUEsc0JBRUEsUUFBQSxlQUNBLG1CQUFBLG1CQUNBLHNCQUFBLGlCQUNBLHVCQUFBLGlCQUNBLG1CQUFBLGlCQUNBLGVBQUEsaUJBRUEsa0JBQUEsaUJBQ0Esb0JBQUEsaUJBQ0EsZUFBQSxpQkNmTSxZQUFhLGlCREFyQixRQUFTLGdCQWtCSCxNQUFBLGVBQ0EsT0FBQSxlQUNBLElBQUEsWUFDQSxLQUFBLFlBQ0EsV0FBQSwwQkFDQSxTQUFBLGVBQ0EsUUFBQSxlQUNBLE9BQUEsWUNkUiwrQ0RYRSxTQUFVLG1CQTZCQSxRQUFBLGdCQUNBLE1BQUEsZ0JBQ0EsWUFBQSxjQUFBLG1CQUFBLFdBQUEsT0FBQSxpQkFBQSxNQUFBLHFCQUNBLE9BQUEsZUNmVixjQUFlLGNEakJmLGlCQWlCRSxlQWtCWSxXQUFBLGlCQ2ZkLFNBQVUsaUJEbUJJLG1FQUNBLFdBQUEsS0NoQmQsUUFBUyxLQUFLLGVEeEJkLFFBQVMsc0JBMENTLFFBQUEsdUJBQ0EsUUFBQSxzQkNmbEIsUUFBUyxlRGlCSyxrQkE1QlosaUJBOEJvQixvQkFBQSxpQkNoQmxCLGVBQWdCLGlCRC9CWixZQWlCTixpQkFzQ1EsdUZBQ0EsaUJBQUEsRUNwQlYsYUFBYyxFRHBDVixTQUFVLEVBMkRBLEtBQUEsRUFFQSx3RkNwQmQsT0FBUSxrQkR6Q1IsT0FBUSxlQWlFTSw0RkFDQSxLQUFBLFFBQ0EsbUJBQUEsS0FBQSxJQUFBLHNCQ3BCZCxXQUFZLEtBQUssSUFBSyxzQkR3QlIsa0dBQ0EsS0FBQSxRQUVBLG1FQUNBLFFBQUEsS0FBQSxLQUFBLGVBQ0EsV0FBQSxrQkFDQSxXQUFBLElBQUEsTUFBQSxRQUVBLHNFQUNBLE1BQUEsa0JBQ0EsVUFBQSxlQ3JCZCxZQUFhLGNEd0JLLHFFQ3JCbEIsT0FBUSxJQUFJLEVBQUksZUR3QkYsWUFBQSxjQUNJLE1BQUEsa0JDdEJsQixVQUFXLGVBRWIsMEVBQ0UsTUFBTyxlQUNQLFFBQVMsS0FBSyxlQUNkLE9BQVEsWUFDUixjQUFlLGNBQ2YsVUFBVyxlQUNYLFlBQWEsY0FDYixPQUFRLGtCQUNSLFdBQVksa0JBQ1osTUFBTyxlQUNQLE9BQVEsWUFDUixtQkFBb0IsaUJBQWlCLElBQUssc0JBQzFDLFdBQVksaUJBQWlCLElBQUssc0JBRXBDLGdGQUNFLGlCQUFrQixrQkFFcEIsaUZBQ0UsaUJBQWtCIn0= */';
    var _default = css;
    exports["default"] = _default;
  }
});

// node_modules/trezor-connect/lib/iframe/builder.js
var require_builder = __commonJS({
  "node_modules/trezor-connect/lib/iframe/builder.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.clearTimeout = exports.dispose = exports.postMessage = exports.init = exports.messagePromises = exports.error = exports.timeout = exports.initPromise = exports.origin = exports.instance = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _deferred = require_deferred();
    var _constants = require_constants();
    var _urlUtils = require_urlUtils();
    var _inlineStyles = _interopRequireDefault(require_inline_styles());
    var instance;
    exports.instance = instance;
    var origin;
    exports.origin = origin;
    var initPromise = (0, _deferred.create)();
    exports.initPromise = initPromise;
    var timeout = 0;
    exports.timeout = timeout;
    var error;
    exports.error = error;
    var _messageID = 0;
    var messagePromises = {};
    exports.messagePromises = messagePromises;
    var init = function() {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(settings) {
        var existedFrame, src, manifestString, manifest, onLoad;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                exports.initPromise = initPromise = (0, _deferred.create)();
                existedFrame = document.getElementById("trezorconnect");
                if (existedFrame) {
                  exports.instance = instance = existedFrame;
                } else {
                  exports.instance = instance = document.createElement("iframe");
                  instance.frameBorder = "0";
                  instance.width = "0px";
                  instance.height = "0px";
                  instance.style.position = "absolute";
                  instance.style.display = "none";
                  instance.style.border = "0px";
                  instance.style.width = "0px";
                  instance.style.height = "0px";
                  instance.id = "trezorconnect";
                }
                if (settings.env === "web") {
                  manifestString = settings.manifest ? JSON.stringify(settings.manifest) : "undefined";
                  manifest = "version=" + settings.version + "&manifest=" + encodeURIComponent(btoa(JSON.stringify(manifestString)));
                  src = settings.iframeSrc + "?" + manifest;
                } else {
                  src = settings.iframeSrc;
                }
                instance.setAttribute("src", src);
                if (settings.webusb) {
                  instance.setAttribute("allow", "usb");
                }
                exports.origin = origin = (0, _urlUtils.getOrigin)(instance.src);
                exports.timeout = timeout = window.setTimeout(function() {
                  initPromise.reject(_constants.ERRORS.TypedError("Init_IframeTimeout"));
                }, 1e4);
                onLoad = function onLoad2() {
                  if (!instance) {
                    initPromise.reject(_constants.ERRORS.TypedError("Init_IframeBlocked"));
                    return;
                  }
                  try {
                    var iframeOrigin = instance.contentWindow.location.origin;
                    if (!iframeOrigin || iframeOrigin === "null") {
                      handleIframeBlocked();
                      return;
                    }
                  } catch (e) {
                  }
                  var extension;
                  if (typeof chrome !== "undefined" && chrome.runtime && typeof chrome.runtime.onConnect !== "undefined") {
                    chrome.runtime.onConnect.addListener(function() {
                    });
                    extension = chrome.runtime.id;
                  }
                  instance.contentWindow.postMessage({
                    type: _constants.IFRAME.INIT,
                    payload: {
                      settings,
                      extension
                    }
                  }, origin);
                  instance.onload = void 0;
                };
                if (instance.attachEvent) {
                  instance.attachEvent("onload", onLoad);
                } else {
                  instance.onload = onLoad;
                }
                if (document.body) {
                  document.body.appendChild(instance);
                  injectStyleSheet();
                }
                _context.prev = 11;
                _context.next = 14;
                return initPromise.promise;
              case 14:
                _context.next = 20;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](11);
                if (instance) {
                  if (instance.parentNode) {
                    instance.parentNode.removeChild(instance);
                  }
                  exports.instance = instance = null;
                }
                throw _context.t0;
              case 20:
                _context.prev = 20;
                window.clearTimeout(timeout);
                exports.timeout = timeout = 0;
                return _context.finish(20);
              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[11, 16, 20, 24]]);
      }));
      return function init2(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    exports.init = init;
    var injectStyleSheet = function injectStyleSheet2() {
      if (!instance) {
        throw _constants.ERRORS.TypedError("Init_IframeBlocked");
      }
      var doc = instance.ownerDocument;
      var head = doc.head || doc.getElementsByTagName("head")[0];
      var style = document.createElement("style");
      style.setAttribute("type", "text/css");
      style.setAttribute("id", "TrezorConnectStylesheet");
      if (style.styleSheet) {
        style.styleSheet.cssText = _inlineStyles["default"];
        head.appendChild(style);
      } else {
        style.appendChild(document.createTextNode(_inlineStyles["default"]));
        head.append(style);
      }
    };
    var handleIframeBlocked = function handleIframeBlocked2() {
      window.clearTimeout(timeout);
      exports.error = error = _constants.ERRORS.TypedError("Init_IframeBlocked");
      dispose();
      initPromise.reject(error);
    };
    var postMessage = function postMessage2(message, usePromise) {
      if (usePromise === void 0) {
        usePromise = true;
      }
      if (!instance) {
        throw _constants.ERRORS.TypedError("Init_IframeBlocked");
      }
      if (usePromise) {
        _messageID++;
        message.id = _messageID;
        messagePromises[_messageID] = (0, _deferred.create)();
        var promise = messagePromises[_messageID].promise;
        instance.contentWindow.postMessage(message, origin);
        return promise;
      }
      instance.contentWindow.postMessage(message, origin);
      return null;
    };
    exports.postMessage = postMessage;
    var dispose = function dispose2() {
      if (instance && instance.parentNode) {
        try {
          instance.parentNode.removeChild(instance);
        } catch (e) {
        }
      }
      exports.instance = instance = null;
      exports.timeout = timeout = 0;
    };
    exports.dispose = dispose;
    var clearTimeout = function clearTimeout2() {
      window.clearTimeout(timeout);
    };
    exports.clearTimeout = clearTimeout;
  }
});

// node_modules/trezor-connect/lib/webusb/button.js
var require_button = __commonJS({
  "node_modules/trezor-connect/lib/webusb/button.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports["default"] = void 0;
    var render = function render2(className, url, origin) {
      var query = className || ".trezor-webusb-button";
      var buttons = document.querySelectorAll(query);
      var src = url + "?" + Date.now();
      buttons.forEach(function(b) {
        if (b.getElementsByTagName("iframe").length < 1) {
          var bounds = b.getBoundingClientRect();
          var btnIframe = document.createElement("iframe");
          btnIframe.frameBorder = "0";
          btnIframe.width = Math.round(bounds.width) + "px";
          btnIframe.height = Math.round(bounds.height) + "px";
          btnIframe.style.position = "absolute";
          btnIframe.style.top = "0px";
          btnIframe.style.left = "0px";
          btnIframe.style.zIndex = "1";
          btnIframe.setAttribute("allow", "usb");
          btnIframe.setAttribute("scrolling", "no");
          btnIframe.onload = function() {
            btnIframe.contentWindow.postMessage({}, origin);
          };
          btnIframe.src = src;
          b.append(btnIframe);
        }
      });
    };
    var _default = render;
    exports["default"] = _default;
  }
});

// node_modules/trezor-connect/lib/message/index.js
var require_message = __commonJS({
  "node_modules/trezor-connect/lib/message/index.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.errorMessage = exports.parseMessage = void 0;
    var parseMessage = function parseMessage2(messageData) {
      var message = {
        event: messageData.event,
        type: messageData.type,
        payload: messageData.payload
      };
      if (typeof messageData.id === "number") {
        message.id = messageData.id;
      }
      if (typeof messageData.success === "boolean") {
        message.success = messageData.success;
      }
      return message;
    };
    exports.parseMessage = parseMessage;
    var errorMessage = function errorMessage2(error) {
      return {
        success: false,
        payload: {
          error: error.message,
          code: error.code
        }
      };
    };
    exports.errorMessage = errorMessage;
  }
});

// node_modules/trezor-connect/lib/message/builder.js
var require_builder2 = __commonJS({
  "node_modules/trezor-connect/lib/message/builder.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.BlockchainMessage = exports.ResponseMessage = exports.TransportMessage = exports.DeviceMessage = exports.UiMessage = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _constants = require_constants();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var UiMessage = function UiMessage2(type, payload) {
      return {
        event: _constants.UI_EVENT,
        type,
        payload
      };
    };
    exports.UiMessage = UiMessage;
    var DeviceMessage = function DeviceMessage2(type, payload) {
      return {
        event: _constants.DEVICE_EVENT,
        type,
        payload
      };
    };
    exports.DeviceMessage = DeviceMessage;
    var TransportMessage = function TransportMessage2(type, payload) {
      return {
        event: _constants.TRANSPORT_EVENT,
        type,
        payload: payload.error ? _objectSpread(_objectSpread({}, payload), {}, {
          error: payload.error.message,
          code: payload.error.code
        }) : payload
      };
    };
    exports.TransportMessage = TransportMessage;
    var ResponseMessage = function ResponseMessage2(id, success, payload) {
      if (payload === void 0) {
        payload = null;
      }
      return {
        event: _constants.RESPONSE_EVENT,
        type: _constants.RESPONSE_EVENT,
        id,
        success,
        payload: success ? payload : {
          error: payload.error.message,
          code: payload.error.code
        }
      };
    };
    exports.ResponseMessage = ResponseMessage;
    var BlockchainMessage = function BlockchainMessage2(type, payload) {
      return {
        event: _constants.BLOCKCHAIN_EVENT,
        type,
        payload
      };
    };
    exports.BlockchainMessage = BlockchainMessage;
  }
});

// node_modules/trezor-connect/lib/data/ConnectSettings.js
var require_ConnectSettings = __commonJS({
  "node_modules/trezor-connect/lib/data/ConnectSettings.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.parse = exports.corsValidator = exports.getEnv = exports.DEFAULT_PRIORITY = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var VERSION = "8.2.7";
    var versionN = VERSION.split(".").map(function(s) {
      return parseInt(s, 10);
    });
    var DIRECTORY = versionN[0] + "/";
    var DEFAULT_DOMAIN = "https://connect.trezor.io/" + DIRECTORY;
    var DEFAULT_PRIORITY = 2;
    exports.DEFAULT_PRIORITY = DEFAULT_PRIORITY;
    var initialSettings = {
      configSrc: "./data/config.json",
      version: VERSION,
      debug: false,
      priority: DEFAULT_PRIORITY,
      trustedHost: false,
      connectSrc: DEFAULT_DOMAIN,
      iframeSrc: DEFAULT_DOMAIN + "iframe.html",
      popup: true,
      popupSrc: DEFAULT_DOMAIN + "popup.html",
      webusbSrc: DEFAULT_DOMAIN + "webusb.html",
      transportReconnect: false,
      webusb: true,
      pendingTransportEvent: true,
      supportedBrowser: typeof navigator !== "undefined" ? !/Trident|MSIE|Edge/.test(navigator.userAgent) : true,
      manifest: null,
      env: "web",
      lazyLoad: false,
      timestamp: new Date().getTime(),
      interactionTimeout: 600
    };
    var parseManifest = function parseManifest2(manifest) {
      if (!manifest)
        return;
      if (typeof manifest.email !== "string")
        return;
      if (typeof manifest.appUrl !== "string")
        return;
      return {
        email: manifest.email,
        appUrl: manifest.appUrl
      };
    };
    var getEnv = function getEnv2() {
      if (typeof chrome !== "undefined" && chrome.runtime && typeof chrome.runtime.onConnect !== "undefined") {
        return "webextension";
      }
      if (typeof navigator !== "undefined") {
        if (typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative") {
          return "react-native";
        }
        var userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.indexOf(" electron/") > -1) {
          return "electron";
        }
      }
      return "web";
    };
    exports.getEnv = getEnv;
    var corsValidator = function corsValidator2(url) {
      if (typeof url !== "string")
        return;
      if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*trezor\.io\//))
        return url;
      if (url.match(/^https?:\/\/localhost:[58][0-9]{3}\//))
        return url;
      if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*sldev\.cz\//))
        return url;
      if (url.match(/^https?:\/\/([A-Za-z0-9\-_]+\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\.onion\//))
        return url;
    };
    exports.corsValidator = corsValidator;
    var parse = function parse2(input) {
      if (input === void 0) {
        input = {};
      }
      var settings = _objectSpread({}, initialSettings);
      if (Object.prototype.hasOwnProperty.call(input, "debug")) {
        if (Array.isArray(input)) {
        }
        if (typeof input.debug === "boolean") {
          settings.debug = input.debug;
        } else if (typeof input.debug === "string") {
          settings.debug = input.debug === "true";
        }
      }
      if (typeof input.connectSrc === "string") {
        settings.connectSrc = input.connectSrc;
      }
      if (typeof global !== "undefined" && typeof global.__TREZOR_CONNECT_SRC === "string") {
        settings.connectSrc = corsValidator(global.__TREZOR_CONNECT_SRC);
        settings.debug = true;
      }
      if (typeof window !== "undefined" && window.location && typeof window.location.search === "string") {
        var vars = window.location.search.split("&");
        var customUrl = vars.find(function(v) {
          return v.indexOf("trezor-connect-src") >= 0;
        });
        if (customUrl) {
          var _customUrl$split = customUrl.split("="), connectSrc = _customUrl$split[1];
          settings.connectSrc = corsValidator(decodeURIComponent(connectSrc));
          settings.debug = true;
        }
      }
      var src = settings.connectSrc || DEFAULT_DOMAIN;
      settings.iframeSrc = src + "iframe.html";
      settings.popupSrc = src + "popup.html";
      settings.webusbSrc = src + "webusb.html";
      if (typeof input.transportReconnect === "boolean") {
        settings.transportReconnect = input.transportReconnect;
      }
      if (typeof input.webusb === "boolean") {
        settings.webusb = input.webusb;
      }
      if (typeof input.popup === "boolean") {
        settings.popup = input.popup;
      }
      if (typeof input.lazyLoad === "boolean") {
        settings.lazyLoad = input.lazyLoad;
      }
      if (typeof input.pendingTransportEvent === "boolean") {
        settings.pendingTransportEvent = input.pendingTransportEvent;
      }
      if (typeof window !== "undefined" && window.location && window.location.protocol === "file:") {
        settings.origin = "file://" + window.location.pathname;
        settings.webusb = false;
      }
      if (typeof input.extension === "string") {
        settings.extension = input.extension;
      }
      if (typeof input.env === "string") {
        settings.env = input.env;
      } else {
        settings.env = getEnv();
      }
      if (typeof input.timestamp === "number") {
        settings.timestamp = input.timestamp;
      }
      if (typeof input.interactionTimeout === "number") {
        settings.interactionTimeout = input.interactionTimeout;
      }
      if (typeof input.manifest === "object") {
        settings.manifest = parseManifest(input.manifest);
      }
      return settings;
    };
    exports.parse = parse;
  }
});

// node_modules/trezor-connect/lib/utils/debug.js
var require_debug = __commonJS({
  "node_modules/trezor-connect/lib/utils/debug.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.getLog = exports.enableLogByPrefix = exports.enableLog = exports.initLog = void 0;
    var colors = {
      DescriptorStream: "color: #77ab59",
      DeviceList: "color: #36802d",
      Device: "color: #bada55",
      Core: "color: #c9df8a",
      IFrame: "color: #FFFFFF; background: #f4a742;",
      Popup: "color: #f48a00"
    };
    var MAX_ENTRIES = 100;
    var Log = function() {
      function Log2(prefix, enabled) {
        this.prefix = prefix;
        this.enabled = enabled;
        this.messages = [];
        this.css = colors[prefix] || "color: #000000; background: #FFFFFF;";
      }
      var _proto = Log2.prototype;
      _proto.addMessage = function addMessage(level, prefix) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        this.messages.push({
          level,
          prefix,
          message: args,
          timestamp: new Date().getTime()
        });
        if (this.messages.length > MAX_ENTRIES) {
          this.messages.shift();
        }
      };
      _proto.log = function log() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        this.addMessage.apply(this, ["log", this.prefix].concat(args));
        if (this.enabled) {
          var _console;
          (_console = console).log.apply(_console, [this.prefix].concat(args));
        }
      };
      _proto.error = function error() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        this.addMessage.apply(this, ["error", this.prefix].concat(args));
        if (this.enabled) {
          var _console2;
          (_console2 = console).error.apply(_console2, [this.prefix].concat(args));
        }
      };
      _proto.warn = function warn() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        this.addMessage.apply(this, ["warn", this.prefix].concat(args));
        if (this.enabled) {
          var _console3;
          (_console3 = console).warn.apply(_console3, [this.prefix].concat(args));
        }
      };
      _proto.debug = function debug() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        this.addMessage.apply(this, ["debug", this.prefix].concat(args));
        if (this.enabled) {
          var _console4;
          (_console4 = console).log.apply(_console4, ["%c" + this.prefix, this.css].concat(args));
        }
      };
      return Log2;
    }();
    var _logs = {};
    var initLog = function initLog2(prefix, enabled) {
      var instance = new Log(prefix, !!enabled);
      _logs[prefix] = instance;
      return instance;
    };
    exports.initLog = initLog;
    var enableLog = function enableLog2(enabled) {
      Object.keys(_logs).forEach(function(key) {
        _logs[key].enabled = enabled;
      });
    };
    exports.enableLog = enableLog;
    var enableLogByPrefix = function enableLogByPrefix2(prefix, enabled) {
      if (_logs[prefix]) {
        _logs[prefix].enabled = enabled;
      }
    };
    exports.enableLogByPrefix = enableLogByPrefix;
    var getLog = function getLog2() {
      var logs = [];
      Object.keys(_logs).forEach(function(key) {
        logs = logs.concat(_logs[key].messages);
      });
      logs.sort(function(a, b) {
        return a.timestamp - b.timestamp;
      });
      return logs;
    };
    exports.getLog = getLog;
  }
});

// node_modules/trezor-connect/lib/types/params.js
var require_params = __commonJS({
  "node_modules/trezor-connect/lib/types/params.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/trezor/device.js
var require_device2 = __commonJS({
  "node_modules/trezor-connect/lib/types/trezor/device.js"() {
    "use strict";
    init_define_process_env();
    var _constants = require_constants();
  }
});

// node_modules/trezor-connect/lib/types/trezor/management.js
var require_management = __commonJS({
  "node_modules/trezor-connect/lib/types/trezor/management.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/trezor/protobuf.js
var require_protobuf = __commonJS({
  "node_modules/trezor-connect/lib/types/trezor/protobuf.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.Enum_TezosBallotType = exports.Enum_TezosContractType = exports.Enum_StellarSignerType = exports.Enum_StellarMemoType = exports.Enum_StellarAssetType = exports.Enum_NEMImportanceTransferMode = exports.Enum_NEMModificationType = exports.Enum_NEMSupplyChangeType = exports.Enum_NEMMosaicLevy = exports.Enum_WordRequestType = exports.Enum_RecoveryDeviceType = exports.Enum_SdProtectOperationType = exports.Enum_Capability = exports.Enum_SafetyCheckLevel = exports.Enum_BackupType = exports.Enum_EthereumDataType = exports.Enum_DebugButton = exports.Enum_PinMatrixRequestType = exports.Enum_ButtonRequestType = exports.Enum_FailureType = exports.Enum_CardanoTxWitnessType = exports.Enum_CardanoTxSigningMode = exports.Enum_CardanoTxAuxiliaryDataSupplementType = exports.Enum_CardanoPoolRelayType = exports.Enum_CardanoCertificateType = exports.Enum_CardanoNativeScriptHashDisplayFormat = exports.Enum_CardanoNativeScriptType = exports.Enum_CardanoAddressType = exports.Enum_CardanoDerivationType = exports.Enum_RequestType = exports.Enum_AmountUnit = exports.Enum_DecredStakingSpendType = exports.Enum_OutputScriptType = exports.Enum_InputScriptType = exports.Enum_BinanceTimeInForce = exports.Enum_BinanceOrderSide = exports.Enum_BinanceOrderType = void 0;
    var Enum_BinanceOrderType = Object.freeze({
      OT_UNKNOWN: 0,
      MARKET: 1,
      LIMIT: 2,
      OT_RESERVED: 3
    });
    exports.Enum_BinanceOrderType = Enum_BinanceOrderType;
    var Enum_BinanceOrderSide = Object.freeze({
      SIDE_UNKNOWN: 0,
      BUY: 1,
      SELL: 2
    });
    exports.Enum_BinanceOrderSide = Enum_BinanceOrderSide;
    var Enum_BinanceTimeInForce = Object.freeze({
      TIF_UNKNOWN: 0,
      GTE: 1,
      TIF_RESERVED: 2,
      IOC: 3
    });
    exports.Enum_BinanceTimeInForce = Enum_BinanceTimeInForce;
    var Enum_InputScriptType = Object.freeze({
      SPENDADDRESS: 0,
      SPENDMULTISIG: 1,
      EXTERNAL: 2,
      SPENDWITNESS: 3,
      SPENDP2SHWITNESS: 4,
      SPENDTAPROOT: 5
    });
    exports.Enum_InputScriptType = Enum_InputScriptType;
    var Enum_OutputScriptType = Object.freeze({
      PAYTOADDRESS: 0,
      PAYTOSCRIPTHASH: 1,
      PAYTOMULTISIG: 2,
      PAYTOOPRETURN: 3,
      PAYTOWITNESS: 4,
      PAYTOP2SHWITNESS: 5,
      PAYTOTAPROOT: 6
    });
    exports.Enum_OutputScriptType = Enum_OutputScriptType;
    var Enum_DecredStakingSpendType = Object.freeze({
      SSGen: 0,
      SSRTX: 1
    });
    exports.Enum_DecredStakingSpendType = Enum_DecredStakingSpendType;
    var Enum_AmountUnit = Object.freeze({
      BITCOIN: 0,
      MILLIBITCOIN: 1,
      MICROBITCOIN: 2,
      SATOSHI: 3
    });
    exports.Enum_AmountUnit = Enum_AmountUnit;
    var Enum_RequestType = Object.freeze({
      TXINPUT: 0,
      TXOUTPUT: 1,
      TXMETA: 2,
      TXFINISHED: 3,
      TXEXTRADATA: 4,
      TXORIGINPUT: 5,
      TXORIGOUTPUT: 6
    });
    exports.Enum_RequestType = Enum_RequestType;
    var Enum_CardanoDerivationType = Object.freeze({
      LEDGER: 0,
      ICARUS: 1,
      ICARUS_TREZOR: 2
    });
    exports.Enum_CardanoDerivationType = Enum_CardanoDerivationType;
    var Enum_CardanoAddressType = Object.freeze({
      BASE: 0,
      BASE_SCRIPT_KEY: 1,
      BASE_KEY_SCRIPT: 2,
      BASE_SCRIPT_SCRIPT: 3,
      POINTER: 4,
      POINTER_SCRIPT: 5,
      ENTERPRISE: 6,
      ENTERPRISE_SCRIPT: 7,
      BYRON: 8,
      REWARD: 14,
      REWARD_SCRIPT: 15
    });
    exports.Enum_CardanoAddressType = Enum_CardanoAddressType;
    var Enum_CardanoNativeScriptType = Object.freeze({
      PUB_KEY: 0,
      ALL: 1,
      ANY: 2,
      N_OF_K: 3,
      INVALID_BEFORE: 4,
      INVALID_HEREAFTER: 5
    });
    exports.Enum_CardanoNativeScriptType = Enum_CardanoNativeScriptType;
    var Enum_CardanoNativeScriptHashDisplayFormat = Object.freeze({
      HIDE: 0,
      BECH32: 1,
      POLICY_ID: 2
    });
    exports.Enum_CardanoNativeScriptHashDisplayFormat = Enum_CardanoNativeScriptHashDisplayFormat;
    var Enum_CardanoCertificateType = Object.freeze({
      STAKE_REGISTRATION: 0,
      STAKE_DEREGISTRATION: 1,
      STAKE_DELEGATION: 2,
      STAKE_POOL_REGISTRATION: 3
    });
    exports.Enum_CardanoCertificateType = Enum_CardanoCertificateType;
    var Enum_CardanoPoolRelayType = Object.freeze({
      SINGLE_HOST_IP: 0,
      SINGLE_HOST_NAME: 1,
      MULTIPLE_HOST_NAME: 2
    });
    exports.Enum_CardanoPoolRelayType = Enum_CardanoPoolRelayType;
    var Enum_CardanoTxAuxiliaryDataSupplementType = Object.freeze({
      NONE: 0,
      CATALYST_REGISTRATION_SIGNATURE: 1
    });
    exports.Enum_CardanoTxAuxiliaryDataSupplementType = Enum_CardanoTxAuxiliaryDataSupplementType;
    var Enum_CardanoTxSigningMode = Object.freeze({
      ORDINARY_TRANSACTION: 0,
      POOL_REGISTRATION_AS_OWNER: 1,
      MULTISIG_TRANSACTION: 2
    });
    exports.Enum_CardanoTxSigningMode = Enum_CardanoTxSigningMode;
    var Enum_CardanoTxWitnessType = Object.freeze({
      BYRON_WITNESS: 0,
      SHELLEY_WITNESS: 1
    });
    exports.Enum_CardanoTxWitnessType = Enum_CardanoTxWitnessType;
    var Enum_FailureType = Object.freeze({
      Failure_UnexpectedMessage: 1,
      Failure_ButtonExpected: 2,
      Failure_DataError: 3,
      Failure_ActionCancelled: 4,
      Failure_PinExpected: 5,
      Failure_PinCancelled: 6,
      Failure_PinInvalid: 7,
      Failure_InvalidSignature: 8,
      Failure_ProcessError: 9,
      Failure_NotEnoughFunds: 10,
      Failure_NotInitialized: 11,
      Failure_PinMismatch: 12,
      Failure_WipeCodeMismatch: 13,
      Failure_InvalidSession: 14,
      Failure_FirmwareError: 99
    });
    exports.Enum_FailureType = Enum_FailureType;
    var Enum_ButtonRequestType = Object.freeze({
      ButtonRequest_Other: 1,
      ButtonRequest_FeeOverThreshold: 2,
      ButtonRequest_ConfirmOutput: 3,
      ButtonRequest_ResetDevice: 4,
      ButtonRequest_ConfirmWord: 5,
      ButtonRequest_WipeDevice: 6,
      ButtonRequest_ProtectCall: 7,
      ButtonRequest_SignTx: 8,
      ButtonRequest_FirmwareCheck: 9,
      ButtonRequest_Address: 10,
      ButtonRequest_PublicKey: 11,
      ButtonRequest_MnemonicWordCount: 12,
      ButtonRequest_MnemonicInput: 13,
      _Deprecated_ButtonRequest_PassphraseType: 14,
      ButtonRequest_UnknownDerivationPath: 15,
      ButtonRequest_RecoveryHomepage: 16,
      ButtonRequest_Success: 17,
      ButtonRequest_Warning: 18,
      ButtonRequest_PassphraseEntry: 19,
      ButtonRequest_PinEntry: 20
    });
    exports.Enum_ButtonRequestType = Enum_ButtonRequestType;
    var Enum_PinMatrixRequestType = Object.freeze({
      PinMatrixRequestType_Current: 1,
      PinMatrixRequestType_NewFirst: 2,
      PinMatrixRequestType_NewSecond: 3,
      PinMatrixRequestType_WipeCodeFirst: 4,
      PinMatrixRequestType_WipeCodeSecond: 5
    });
    exports.Enum_PinMatrixRequestType = Enum_PinMatrixRequestType;
    var Enum_DebugButton = Object.freeze({
      NO: 0,
      YES: 1,
      INFO: 2
    });
    exports.Enum_DebugButton = Enum_DebugButton;
    var Enum_EthereumDataType = Object.freeze({
      UINT: 1,
      INT: 2,
      BYTES: 3,
      STRING: 4,
      BOOL: 5,
      ADDRESS: 6,
      ARRAY: 7,
      STRUCT: 8
    });
    exports.Enum_EthereumDataType = Enum_EthereumDataType;
    var Enum_BackupType = Object.freeze({
      Bip39: 0,
      Slip39_Basic: 1,
      Slip39_Advanced: 2
    });
    exports.Enum_BackupType = Enum_BackupType;
    var Enum_SafetyCheckLevel = Object.freeze({
      Strict: 0,
      PromptAlways: 1,
      PromptTemporarily: 2
    });
    exports.Enum_SafetyCheckLevel = Enum_SafetyCheckLevel;
    var Enum_Capability = Object.freeze({
      Capability_Bitcoin: 1,
      Capability_Bitcoin_like: 2,
      Capability_Binance: 3,
      Capability_Cardano: 4,
      Capability_Crypto: 5,
      Capability_EOS: 6,
      Capability_Ethereum: 7,
      Capability_Lisk: 8,
      Capability_Monero: 9,
      Capability_NEM: 10,
      Capability_Ripple: 11,
      Capability_Stellar: 12,
      Capability_Tezos: 13,
      Capability_U2F: 14,
      Capability_Shamir: 15,
      Capability_ShamirGroups: 16,
      Capability_PassphraseEntry: 17
    });
    exports.Enum_Capability = Enum_Capability;
    var Enum_SdProtectOperationType = Object.freeze({
      DISABLE: 0,
      ENABLE: 1,
      REFRESH: 2
    });
    exports.Enum_SdProtectOperationType = Enum_SdProtectOperationType;
    var Enum_RecoveryDeviceType = Object.freeze({
      RecoveryDeviceType_ScrambledWords: 0,
      RecoveryDeviceType_Matrix: 1
    });
    exports.Enum_RecoveryDeviceType = Enum_RecoveryDeviceType;
    var Enum_WordRequestType = Object.freeze({
      WordRequestType_Plain: 0,
      WordRequestType_Matrix9: 1,
      WordRequestType_Matrix6: 2
    });
    exports.Enum_WordRequestType = Enum_WordRequestType;
    var Enum_NEMMosaicLevy = Object.freeze({
      MosaicLevy_Absolute: 1,
      MosaicLevy_Percentile: 2
    });
    exports.Enum_NEMMosaicLevy = Enum_NEMMosaicLevy;
    var Enum_NEMSupplyChangeType = Object.freeze({
      SupplyChange_Increase: 1,
      SupplyChange_Decrease: 2
    });
    exports.Enum_NEMSupplyChangeType = Enum_NEMSupplyChangeType;
    var Enum_NEMModificationType = Object.freeze({
      CosignatoryModification_Add: 1,
      CosignatoryModification_Delete: 2
    });
    exports.Enum_NEMModificationType = Enum_NEMModificationType;
    var Enum_NEMImportanceTransferMode = Object.freeze({
      ImportanceTransfer_Activate: 1,
      ImportanceTransfer_Deactivate: 2
    });
    exports.Enum_NEMImportanceTransferMode = Enum_NEMImportanceTransferMode;
    var Enum_StellarAssetType = Object.freeze({
      NATIVE: 0,
      ALPHANUM4: 1,
      ALPHANUM12: 2
    });
    exports.Enum_StellarAssetType = Enum_StellarAssetType;
    var Enum_StellarMemoType = Object.freeze({
      NONE: 0,
      TEXT: 1,
      ID: 2,
      HASH: 3,
      RETURN: 4
    });
    exports.Enum_StellarMemoType = Enum_StellarMemoType;
    var Enum_StellarSignerType = Object.freeze({
      ACCOUNT: 0,
      PRE_AUTH: 1,
      HASH: 2
    });
    exports.Enum_StellarSignerType = Enum_StellarSignerType;
    var Enum_TezosContractType = Object.freeze({
      Implicit: 0,
      Originated: 1
    });
    exports.Enum_TezosContractType = Enum_TezosContractType;
    var Enum_TezosBallotType = Object.freeze({
      Yay: 0,
      Nay: 1,
      Pass: 2
    });
    exports.Enum_TezosBallotType = Enum_TezosBallotType;
  }
});

// node_modules/trezor-connect/lib/types/account.js
var require_account = __commonJS({
  "node_modules/trezor-connect/lib/types/account.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/bitcoin.js
var require_bitcoin = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/bitcoin.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/binance.js
var require_binance = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/binance.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/cardano.js
var require_cardano2 = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/cardano.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    exports.CardanoTxWitnessType = exports.CardanoTxSigningMode = exports.CardanoPoolRelayType = exports.CardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptType = exports.CardanoCertificateType = exports.CardanoAddressType = void 0;
    var _protobuf = require_protobuf();
    exports.CardanoAddressType = _protobuf.Enum_CardanoAddressType;
    exports.CardanoCertificateType = _protobuf.Enum_CardanoCertificateType;
    exports.CardanoNativeScriptType = _protobuf.Enum_CardanoNativeScriptType;
    exports.CardanoNativeScriptHashDisplayFormat = _protobuf.Enum_CardanoNativeScriptHashDisplayFormat;
    exports.CardanoPoolRelayType = _protobuf.Enum_CardanoPoolRelayType;
    exports.CardanoTxSigningMode = _protobuf.Enum_CardanoTxSigningMode;
    exports.CardanoTxWitnessType = _protobuf.Enum_CardanoTxWitnessType;
  }
});

// node_modules/trezor-connect/lib/types/networks/coinInfo.js
var require_coinInfo = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/coinInfo.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/eos.js
var require_eos = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/eos.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/ethereum.js
var require_ethereum = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/ethereum.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/nem.js
var require_nem = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/nem.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/ripple.js
var require_ripple = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/ripple.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/stellar.js
var require_stellar = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/stellar.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/networks/tezos.js
var require_tezos = __commonJS({
  "node_modules/trezor-connect/lib/types/networks/tezos.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/misc.js
var require_misc = __commonJS({
  "node_modules/trezor-connect/lib/types/misc.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/events.js
var require_events2 = __commonJS({
  "node_modules/trezor-connect/lib/types/events.js"() {
    "use strict";
    init_define_process_env();
    var _constants = require_constants();
  }
});

// node_modules/trezor-connect/lib/types/backend/blockchain.js
var require_blockchain2 = __commonJS({
  "node_modules/trezor-connect/lib/types/backend/blockchain.js"() {
    "use strict";
    init_define_process_env();
    var _constants = require_constants();
  }
});

// node_modules/trezor-connect/lib/types/api.js
var require_api = __commonJS({
  "node_modules/trezor-connect/lib/types/api.js"() {
    "use strict";
    init_define_process_env();
    var CONSTANTS = _interopRequireWildcard(require_constants());
    var P = _interopRequireWildcard(require_params());
    var Device = _interopRequireWildcard(require_device2());
    var Mgmnt = _interopRequireWildcard(require_management());
    var Protobuf = _interopRequireWildcard(require_protobuf());
    var Account = _interopRequireWildcard(require_account());
    var Bitcoin = _interopRequireWildcard(require_bitcoin());
    var Binance = _interopRequireWildcard(require_binance());
    var Cardano = _interopRequireWildcard(require_cardano2());
    var CoinInfo = _interopRequireWildcard(require_coinInfo());
    var EOS = _interopRequireWildcard(require_eos());
    var Ethereum = _interopRequireWildcard(require_ethereum());
    var NEM = _interopRequireWildcard(require_nem());
    var Ripple = _interopRequireWildcard(require_ripple());
    var Stellar = _interopRequireWildcard(require_stellar());
    var Tezos = _interopRequireWildcard(require_tezos());
    var Misc = _interopRequireWildcard(require_misc());
    var Events = _interopRequireWildcard(require_events2());
    var Blockchain = _interopRequireWildcard(require_blockchain2());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
  }
});

// node_modules/trezor-connect/lib/types/backend/transactions.js
var require_transactions = __commonJS({
  "node_modules/trezor-connect/lib/types/backend/transactions.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/trezor-connect/lib/types/index.js
var require_types = __commonJS({
  "node_modules/trezor-connect/lib/types/index.js"(exports) {
    "use strict";
    init_define_process_env();
    exports.__esModule = true;
    var _api = require_api();
    Object.keys(_api).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _api[key])
        return;
      exports[key] = _api[key];
    });
    var _events = require_events2();
    Object.keys(_events).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _events[key])
        return;
      exports[key] = _events[key];
    });
    var _misc = require_misc();
    Object.keys(_misc).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _misc[key])
        return;
      exports[key] = _misc[key];
    });
    var _params = require_params();
    Object.keys(_params).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _params[key])
        return;
      exports[key] = _params[key];
    });
    var _account = require_account();
    Object.keys(_account).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _account[key])
        return;
      exports[key] = _account[key];
    });
    var _device = require_device2();
    Object.keys(_device).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _device[key])
        return;
      exports[key] = _device[key];
    });
    var _management = require_management();
    Object.keys(_management).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _management[key])
        return;
      exports[key] = _management[key];
    });
    var _bitcoin = require_bitcoin();
    Object.keys(_bitcoin).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _bitcoin[key])
        return;
      exports[key] = _bitcoin[key];
    });
    var _binance = require_binance();
    Object.keys(_binance).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _binance[key])
        return;
      exports[key] = _binance[key];
    });
    var _cardano = require_cardano2();
    Object.keys(_cardano).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _cardano[key])
        return;
      exports[key] = _cardano[key];
    });
    var _coinInfo = require_coinInfo();
    Object.keys(_coinInfo).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _coinInfo[key])
        return;
      exports[key] = _coinInfo[key];
    });
    var _eos = require_eos();
    Object.keys(_eos).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _eos[key])
        return;
      exports[key] = _eos[key];
    });
    var _ethereum = require_ethereum();
    Object.keys(_ethereum).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _ethereum[key])
        return;
      exports[key] = _ethereum[key];
    });
    var _nem = require_nem();
    Object.keys(_nem).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _nem[key])
        return;
      exports[key] = _nem[key];
    });
    var _ripple = require_ripple();
    Object.keys(_ripple).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _ripple[key])
        return;
      exports[key] = _ripple[key];
    });
    var _stellar = require_stellar();
    Object.keys(_stellar).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _stellar[key])
        return;
      exports[key] = _stellar[key];
    });
    var _tezos = require_tezos();
    Object.keys(_tezos).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _tezos[key])
        return;
      exports[key] = _tezos[key];
    });
    var _blockchain = require_blockchain2();
    Object.keys(_blockchain).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _blockchain[key])
        return;
      exports[key] = _blockchain[key];
    });
    var _transactions = require_transactions();
    Object.keys(_transactions).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _transactions[key])
        return;
      exports[key] = _transactions[key];
    });
  }
});

// node_modules/trezor-connect/lib/env/browser/index.js
var require_browser = __commonJS({
  "node_modules/trezor-connect/lib/env/browser/index.js"(exports) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.disableWebUSB = exports.requestLogin = exports.customMessage = exports.getSettings = exports.renderWebUSBButton = exports.uiResponse = exports.call = exports.init = exports.cancel = exports.dispose = exports.manifest = exports.eventEmitter = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _events = _interopRequireDefault(require_events());
    var _PopupManager = _interopRequireDefault(require_PopupManager());
    var iframe = _interopRequireWildcard(require_builder());
    var _button = _interopRequireDefault(require_button());
    var _message = require_message();
    var _builder2 = require_builder2();
    var _ConnectSettings = require_ConnectSettings();
    var _debug = require_debug();
    var _constants = require_constants();
    var $T = _interopRequireWildcard(require_types());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var eventEmitter = new _events["default"]();
    exports.eventEmitter = eventEmitter;
    var _log = (0, _debug.initLog)("[trezor-connect.js]");
    var _settings = (0, _ConnectSettings.parse)();
    var _popupManager;
    var initPopupManager = function initPopupManager2() {
      var pm = new _PopupManager["default"](_settings);
      pm.on(_constants.POPUP.CLOSED, function(error) {
        iframe.postMessage({
          type: _constants.POPUP.CLOSED,
          payload: error ? {
            error
          } : null
        }, false);
      });
      return pm;
    };
    var manifest = function manifest2(data) {
      _settings = (0, _ConnectSettings.parse)(_objectSpread(_objectSpread({}, _settings), {}, {
        manifest: data
      }));
    };
    exports.manifest = manifest;
    var dispose = function dispose2() {
      eventEmitter.removeAllListeners();
      iframe.dispose();
      _settings = (0, _ConnectSettings.parse)();
      if (_popupManager) {
        _popupManager.close();
      }
    };
    exports.dispose = dispose;
    var cancel = function cancel2(error) {
      if (_popupManager) {
        _popupManager.emit(_constants.POPUP.CLOSED, error);
      }
    };
    exports.cancel = cancel;
    var handleMessage = function handleMessage2(messageEvent) {
      if (messageEvent.origin !== iframe.origin)
        return;
      var message = (0, _message.parseMessage)(messageEvent.data);
      var event = message.event, type = message.type, payload = message.payload;
      var id = message.id || 0;
      _log.log("handleMessage", message);
      switch (event) {
        case _constants.RESPONSE_EVENT:
          if (iframe.messagePromises[id]) {
            iframe.messagePromises[id].resolve({
              id,
              success: message.success,
              payload
            });
            delete iframe.messagePromises[id];
          } else {
            _log.warn("Unknown message id " + id);
          }
          break;
        case _constants.DEVICE_EVENT:
          eventEmitter.emit(event, message);
          eventEmitter.emit(type, payload);
          break;
        case _constants.TRANSPORT_EVENT:
          eventEmitter.emit(event, message);
          eventEmitter.emit(type, payload);
          break;
        case _constants.BLOCKCHAIN_EVENT:
          eventEmitter.emit(event, message);
          eventEmitter.emit(type, payload);
          break;
        case _constants.UI_EVENT:
          if (type === _constants.IFRAME.BOOTSTRAP) {
            iframe.clearTimeout();
            break;
          }
          if (type === _constants.IFRAME.LOADED) {
            iframe.initPromise.resolve();
          }
          if (type === _constants.IFRAME.ERROR) {
            iframe.initPromise.reject(payload.error);
          }
          eventEmitter.emit(event, message);
          eventEmitter.emit(type, payload);
          break;
        default:
          _log.log("Undefined message", event, messageEvent);
      }
    };
    var init = function() {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(settings) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (settings === void 0) {
                  settings = {};
                }
                if (!iframe.instance) {
                  _context.next = 3;
                  break;
                }
                throw _constants.ERRORS.TypedError("Init_AlreadyInitialized");
              case 3:
                _settings = (0, _ConnectSettings.parse)(_objectSpread(_objectSpread({}, _settings), settings));
                if (_settings.manifest) {
                  _context.next = 6;
                  break;
                }
                throw _constants.ERRORS.TypedError("Init_ManifestMissing");
              case 6:
                if (!_settings.lazyLoad) {
                  _context.next = 9;
                  break;
                }
                _settings.lazyLoad = false;
                return _context.abrupt("return");
              case 9:
                if (!_popupManager) {
                  _popupManager = initPopupManager();
                }
                _log.enabled = !!_settings.debug;
                window.addEventListener("message", handleMessage);
                window.addEventListener("unload", dispose);
                _context.next = 15;
                return iframe.init(_settings);
              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function init2(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    exports.init = init;
    var call = function() {
      var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(params) {
        var response;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!iframe.instance && !iframe.timeout)) {
                  _context2.next = 15;
                  break;
                }
                _settings = (0, _ConnectSettings.parse)(_settings);
                if (_settings.manifest) {
                  _context2.next = 4;
                  break;
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError("Init_ManifestMissing")));
              case 4:
                if (!_popupManager) {
                  _popupManager = initPopupManager();
                }
                _popupManager.request(true);
                _context2.prev = 6;
                _context2.next = 9;
                return init(_settings);
              case 9:
                _context2.next = 15;
                break;
              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](6);
                if (_popupManager) {
                  if (["Init_IframeBlocked", "Init_IframeTimeout"].includes(_context2.t0.code)) {
                    _popupManager.postMessage((0, _builder2.UiMessage)(_constants.UI.IFRAME_FAILURE));
                  } else {
                    _popupManager.close();
                  }
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(_context2.t0));
              case 15:
                if (!iframe.timeout) {
                  _context2.next = 17;
                  break;
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError("Init_ManifestMissing")));
              case 17:
                if (!iframe.error) {
                  _context2.next = 19;
                  break;
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(iframe.error));
              case 19:
                if (_settings.popup && _popupManager) {
                  _popupManager.request();
                }
                _context2.prev = 20;
                _context2.next = 23;
                return iframe.postMessage({
                  type: _constants.IFRAME.CALL,
                  payload: params
                });
              case 23:
                response = _context2.sent;
                if (!response) {
                  _context2.next = 27;
                  break;
                }
                if (!response.success && response.payload.code !== "Device_CallInProgress" && _popupManager) {
                  _popupManager.unlock();
                }
                return _context2.abrupt("return", response);
              case 27:
                if (_popupManager) {
                  _popupManager.unlock();
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError("Method_NoResponse")));
              case 31:
                _context2.prev = 31;
                _context2.t1 = _context2["catch"](20);
                _log.error("__call error", _context2.t1);
                if (_popupManager) {
                  _popupManager.close();
                }
                return _context2.abrupt("return", (0, _message.errorMessage)(_context2.t1));
              case 36:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[6, 11], [20, 31]]);
      }));
      return function call2(_x2) {
        return _ref2.apply(this, arguments);
      };
    }();
    exports.call = call;
    var customMessageResponse = function customMessageResponse2(payload) {
      iframe.postMessage({
        event: _constants.UI_EVENT,
        type: _constants.UI.CUSTOM_MESSAGE_RESPONSE,
        payload
      });
    };
    var uiResponse = function uiResponse2(response) {
      if (!iframe.instance) {
        throw _constants.ERRORS.TypedError("Init_NotInitialized");
      }
      var type = response.type, payload = response.payload;
      iframe.postMessage({
        event: _constants.UI_EVENT,
        type,
        payload
      });
    };
    exports.uiResponse = uiResponse;
    var renderWebUSBButton = function renderWebUSBButton2(className) {
      (0, _button["default"])(className, _settings.webusbSrc, iframe.origin);
    };
    exports.renderWebUSBButton = renderWebUSBButton;
    var getSettings = function getSettings2() {
      if (!iframe.instance) {
        return Promise.resolve((0, _message.errorMessage)(_constants.ERRORS.TypedError("Init_NotInitialized")));
      }
      return call({
        method: "getSettings"
      });
    };
    exports.getSettings = getSettings;
    var customMessage = function() {
      var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(params) {
        var callback, customMessageListener, response;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (iframe.instance) {
                  _context4.next = 2;
                  break;
                }
                throw _constants.ERRORS.TypedError("Init_NotInitialized");
              case 2:
                if (!(typeof params.callback !== "function")) {
                  _context4.next = 4;
                  break;
                }
                return _context4.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError("Method_CustomMessage_Callback")));
              case 4:
                callback = params.callback;
                customMessageListener = function() {
                  var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(event) {
                    var data, payload;
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            data = event.data;
                            if (!(data && data.type === _constants.UI.CUSTOM_MESSAGE_REQUEST)) {
                              _context3.next = 6;
                              break;
                            }
                            _context3.next = 4;
                            return callback(data.payload);
                          case 4:
                            payload = _context3.sent;
                            if (payload) {
                              customMessageResponse(payload);
                            } else {
                              customMessageResponse({
                                message: "release"
                              });
                            }
                          case 6:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));
                  return function customMessageListener2(_x4) {
                    return _ref4.apply(this, arguments);
                  };
                }();
                window.addEventListener("message", customMessageListener, false);
                _context4.next = 9;
                return call(_objectSpread(_objectSpread({
                  method: "customMessage"
                }, params), {}, {
                  callback: null
                }));
              case 9:
                response = _context4.sent;
                window.removeEventListener("message", customMessageListener);
                return _context4.abrupt("return", response);
              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return function customMessage2(_x3) {
        return _ref3.apply(this, arguments);
      };
    }();
    exports.customMessage = customMessage;
    var requestLogin = function() {
      var _ref5 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(params) {
        var callback, loginChallengeListener, response;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (iframe.instance) {
                  _context6.next = 2;
                  break;
                }
                throw _constants.ERRORS.TypedError("Init_NotInitialized");
              case 2:
                if (!(typeof params.callback === "function")) {
                  _context6.next = 11;
                  break;
                }
                callback = params.callback;
                loginChallengeListener = function() {
                  var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(event) {
                    var data, payload;
                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            data = event.data;
                            if (!(data && data.type === _constants.UI.LOGIN_CHALLENGE_REQUEST)) {
                              _context5.next = 12;
                              break;
                            }
                            _context5.prev = 2;
                            _context5.next = 5;
                            return callback();
                          case 5:
                            payload = _context5.sent;
                            iframe.postMessage({
                              event: _constants.UI_EVENT,
                              type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,
                              payload
                            });
                            _context5.next = 12;
                            break;
                          case 9:
                            _context5.prev = 9;
                            _context5.t0 = _context5["catch"](2);
                            iframe.postMessage({
                              event: _constants.UI_EVENT,
                              type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,
                              payload: _context5.t0.message
                            });
                          case 12:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5, null, [[2, 9]]);
                  }));
                  return function loginChallengeListener2(_x6) {
                    return _ref6.apply(this, arguments);
                  };
                }();
                window.addEventListener("message", loginChallengeListener, false);
                _context6.next = 8;
                return call(_objectSpread(_objectSpread({
                  method: "requestLogin"
                }, params), {}, {
                  asyncChallenge: true,
                  callback: null
                }));
              case 8:
                response = _context6.sent;
                window.removeEventListener("message", loginChallengeListener);
                return _context6.abrupt("return", response);
              case 11:
                return _context6.abrupt("return", call(_objectSpread({
                  method: "requestLogin"
                }, params)));
              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      return function requestLogin2(_x5) {
        return _ref5.apply(this, arguments);
      };
    }();
    exports.requestLogin = requestLogin;
    var disableWebUSB = function disableWebUSB2() {
      if (!iframe.instance) {
        throw _constants.ERRORS.TypedError("Init_NotInitialized");
      }
      iframe.postMessage({
        event: _constants.UI_EVENT,
        type: _constants.TRANSPORT.DISABLE_WEBUSB
      });
    };
    exports.disableWebUSB = disableWebUSB;
  }
});

// node_modules/trezor-connect/lib/index.js
var require_lib = __commonJS({
  "node_modules/trezor-connect/lib/index.js"(exports) {
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    var _exportNames = {};
    exports["default"] = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _constants = require_constants();
    Object.keys(_constants).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _constants[key])
        return;
      exports[key] = _constants[key];
    });
    var _node = require_browser();
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _types[key])
        return;
      exports[key] = _types[key];
    });
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var TrezorConnect = {
      manifest: _node.manifest,
      init: _node.init,
      getSettings: _node.getSettings,
      on: function on(type, fn) {
        _node.eventEmitter.on(type, fn);
      },
      off: function off(type, fn) {
        _node.eventEmitter.removeListener(type, fn);
      },
      removeAllListeners: function removeAllListeners() {
        _node.eventEmitter.removeAllListeners();
      },
      uiResponse: _node.uiResponse,
      blockchainGetAccountBalanceHistory: function blockchainGetAccountBalanceHistory(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainGetAccountBalanceHistory"
        }, params));
      },
      blockchainGetCurrentFiatRates: function blockchainGetCurrentFiatRates(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainGetCurrentFiatRates"
        }, params));
      },
      blockchainGetFiatRatesForTimestamps: function blockchainGetFiatRatesForTimestamps(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainGetFiatRatesForTimestamps"
        }, params));
      },
      blockchainDisconnect: function blockchainDisconnect(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainDisconnect"
        }, params));
      },
      blockchainEstimateFee: function blockchainEstimateFee(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainEstimateFee"
        }, params));
      },
      blockchainGetTransactions: function blockchainGetTransactions(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainGetTransactions"
        }, params));
      },
      blockchainSetCustomBackend: function blockchainSetCustomBackend(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainSetCustomBackend"
        }, params));
      },
      blockchainSubscribe: function blockchainSubscribe(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainSubscribe"
        }, params));
      },
      blockchainSubscribeFiatRates: function blockchainSubscribeFiatRates(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainSubscribeFiatRates"
        }, params));
      },
      blockchainUnsubscribe: function blockchainUnsubscribe(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainUnsubscribe"
        }, params));
      },
      blockchainUnsubscribeFiatRates: function blockchainUnsubscribeFiatRates(params) {
        return (0, _node.call)(_objectSpread({
          method: "blockchainUnsubscribeFiatRates"
        }, params));
      },
      customMessage: function customMessage(params) {
        return (0, _node.customMessage)(params);
      },
      requestLogin: function requestLogin(params) {
        return (0, _node.requestLogin)(params);
      },
      cardanoGetAddress: function cardanoGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "cardanoGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      cardanoGetNativeScriptHash: function cardanoGetNativeScriptHash(params) {
        return (0, _node.call)(_objectSpread({
          method: "cardanoGetNativeScriptHash"
        }, params));
      },
      cardanoGetPublicKey: function cardanoGetPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "cardanoGetPublicKey"
        }, params));
      },
      cardanoSignTransaction: function cardanoSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "cardanoSignTransaction"
        }, params));
      },
      cipherKeyValue: function cipherKeyValue(params) {
        return (0, _node.call)(_objectSpread({
          method: "cipherKeyValue"
        }, params));
      },
      composeTransaction: function composeTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "composeTransaction"
        }, params));
      },
      ethereumGetAddress: function ethereumGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "ethereumGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      ethereumGetPublicKey: function ethereumGetPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "ethereumGetPublicKey"
        }, params));
      },
      ethereumSignMessage: function ethereumSignMessage(params) {
        return (0, _node.call)(_objectSpread({
          method: "ethereumSignMessage"
        }, params));
      },
      ethereumSignTransaction: function ethereumSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "ethereumSignTransaction"
        }, params));
      },
      ethereumSignTypedData: function ethereumSignTypedData(params) {
        return (0, _node.call)(_objectSpread({
          method: "ethereumSignTypedData"
        }, params));
      },
      ethereumVerifyMessage: function ethereumVerifyMessage(params) {
        return (0, _node.call)(_objectSpread({
          method: "ethereumVerifyMessage"
        }, params));
      },
      getAccountInfo: function getAccountInfo(params) {
        return (0, _node.call)(_objectSpread({
          method: "getAccountInfo"
        }, params));
      },
      getAddress: function getAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "getAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      getDeviceState: function getDeviceState(params) {
        return (0, _node.call)(_objectSpread({
          method: "getDeviceState"
        }, params));
      },
      getFeatures: function getFeatures(params) {
        return (0, _node.call)(_objectSpread({
          method: "getFeatures"
        }, params));
      },
      getPublicKey: function getPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "getPublicKey"
        }, params));
      },
      liskGetAddress: function liskGetAddress() {
        return (0, _node.call)({
          method: "liskDeprecated"
        });
      },
      liskGetPublicKey: function liskGetPublicKey() {
        return (0, _node.call)({
          method: "liskDeprecated"
        });
      },
      liskSignMessage: function liskSignMessage() {
        return (0, _node.call)({
          method: "liskDeprecated"
        });
      },
      liskSignTransaction: function liskSignTransaction() {
        return (0, _node.call)({
          method: "liskDeprecated"
        });
      },
      liskVerifyMessage: function liskVerifyMessage() {
        return (0, _node.call)({
          method: "liskDeprecated"
        });
      },
      nemGetAddress: function nemGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "nemGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      nemSignTransaction: function nemSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "nemSignTransaction"
        }, params));
      },
      pushTransaction: function pushTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "pushTransaction"
        }, params));
      },
      rippleGetAddress: function rippleGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "rippleGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      rippleSignTransaction: function rippleSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "rippleSignTransaction"
        }, params));
      },
      signMessage: function signMessage(params) {
        return (0, _node.call)(_objectSpread({
          method: "signMessage"
        }, params));
      },
      signTransaction: function signTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "signTransaction"
        }, params));
      },
      stellarGetAddress: function stellarGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "stellarGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      stellarSignTransaction: function stellarSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "stellarSignTransaction"
        }, params));
      },
      tezosGetAddress: function tezosGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "tezosGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      tezosGetPublicKey: function tezosGetPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "tezosGetPublicKey"
        }, params));
      },
      tezosSignTransaction: function tezosSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "tezosSignTransaction"
        }, params));
      },
      eosGetPublicKey: function eosGetPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "eosGetPublicKey"
        }, params));
      },
      eosSignTransaction: function eosSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "eosSignTransaction"
        }, params));
      },
      binanceGetAddress: function binanceGetAddress(params) {
        var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
        return (0, _node.call)(_objectSpread(_objectSpread({
          method: "binanceGetAddress"
        }, params), {}, {
          useEventListener
        }));
      },
      binanceGetPublicKey: function binanceGetPublicKey(params) {
        return (0, _node.call)(_objectSpread({
          method: "binanceGetPublicKey"
        }, params));
      },
      binanceSignTransaction: function binanceSignTransaction(params) {
        return (0, _node.call)(_objectSpread({
          method: "binanceSignTransaction"
        }, params));
      },
      verifyMessage: function verifyMessage(params) {
        return (0, _node.call)(_objectSpread({
          method: "verifyMessage"
        }, params));
      },
      resetDevice: function resetDevice(params) {
        return (0, _node.call)(_objectSpread({
          method: "resetDevice"
        }, params));
      },
      wipeDevice: function wipeDevice(params) {
        return (0, _node.call)(_objectSpread({
          method: "wipeDevice"
        }, params));
      },
      applyFlags: function applyFlags(params) {
        return (0, _node.call)(_objectSpread({
          method: "applyFlags"
        }, params));
      },
      applySettings: function applySettings(params) {
        return (0, _node.call)(_objectSpread({
          method: "applySettings"
        }, params));
      },
      backupDevice: function backupDevice(params) {
        return (0, _node.call)(_objectSpread({
          method: "backupDevice"
        }, params));
      },
      changePin: function changePin(params) {
        return (0, _node.call)(_objectSpread({
          method: "changePin"
        }, params));
      },
      firmwareUpdate: function firmwareUpdate(params) {
        return (0, _node.call)(_objectSpread({
          method: "firmwareUpdate"
        }, params));
      },
      recoveryDevice: function recoveryDevice(params) {
        return (0, _node.call)(_objectSpread({
          method: "recoveryDevice"
        }, params));
      },
      getCoinInfo: function getCoinInfo(params) {
        return (0, _node.call)(_objectSpread({
          method: "getCoinInfo"
        }, params));
      },
      rebootToBootloader: function rebootToBootloader(params) {
        return (0, _node.call)(_objectSpread({
          method: "rebootToBootloader"
        }, params));
      },
      setProxy: function setProxy(params) {
        return (0, _node.call)(_objectSpread({
          method: "setProxy"
        }, params));
      },
      dispose: _node.dispose,
      cancel: _node.cancel,
      renderWebUSBButton: _node.renderWebUSBButton,
      disableWebUSB: _node.disableWebUSB
    };
    var _default = TrezorConnect;
    exports["default"] = _default;
  }
});
"use strict";
export default require_lib();
//# sourceMappingURL=lib-7ATQJVKV.js.map
