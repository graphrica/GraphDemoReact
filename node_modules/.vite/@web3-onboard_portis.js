import {
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// dep:@web3-onboard_portis
init_define_process_env();

// node_modules/@web3-onboard/portis/dist/index.js
init_define_process_env();
function portis(options) {
  const { apiKey } = options;
  return () => {
    return {
      label: "Portis",
      getIcon: async () => (await import("./icon-VH4CCID2.js")).default,
      getInterface: async ({ chains }) => {
        const { default: Portis } = await import("./es-7HT6FS5O.js");
        const { createEIP1193Provider } = await import("./dist-3LUD4YRJ.js");
        const instance = new Portis(apiKey, {
          nodeUrl: chains[0].rpcUrl,
          chainId: chains[0].id
        });
        const portisProvider = instance.provider;
        const provider = createEIP1193Provider(portisProvider, {
          eth_requestAccounts: portisProvider.enable,
          eth_selectAccounts: null,
          wallet_switchEthereumChain: async ({ params }) => {
            const chain = chains.find(({ id }) => id === params[0].chainId);
            if (!chain)
              throw new Error("chain must be set before switching");
            instance.changeNetwork({
              nodeUrl: chain.rpcUrl,
              chainId: chain.id
            });
            provider.emit("chainChanged", chain.id);
            return null;
          }
        });
        return {
          provider,
          instance
        };
      }
    };
  };
}
var dist_default = portis;

// dep:@web3-onboard_portis
var web3_onboard_portis_default = dist_default;
export {
  web3_onboard_portis_default as default
};
//# sourceMappingURL=@web3-onboard_portis.js.map
