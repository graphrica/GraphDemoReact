import {
  require_src
} from "./chunk-3L2QOU6N.js";
import {
  require_browser
} from "./chunk-UTWHOSAQ.js";
import {
  require_safe_buffer
} from "./chunk-BTG65MVN.js";
import {
  __commonJS,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/bs58/index.js"(exports, module) {
    init_define_process_env();
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET);
  }
});

// node_modules/bs58check/base.js
var require_base = __commonJS({
  "node_modules/bs58check/base.js"(exports, module) {
    "use strict";
    init_define_process_env();
    var base58 = require_bs58();
    var Buffer = require_safe_buffer().Buffer;
    module.exports = function(checksumFn) {
      function encode(payload) {
        var checksum = checksumFn(payload);
        return base58.encode(Buffer.concat([
          payload,
          checksum
        ], payload.length + 4));
      }
      function decodeRaw(buffer) {
        var payload = buffer.slice(0, -4);
        var checksum = buffer.slice(-4);
        var newChecksum = checksumFn(payload);
        if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
          return;
        return payload;
      }
      function decodeUnsafe(string) {
        var buffer = base58.decodeUnsafe(string);
        if (!buffer)
          return;
        return decodeRaw(buffer);
      }
      function decode(string) {
        var buffer = base58.decode(string);
        var payload = decodeRaw(buffer, checksumFn);
        if (!payload)
          throw new Error("Invalid checksum");
        return payload;
      }
      return {
        encode,
        decode,
        decodeUnsafe
      };
    };
  }
});

// node_modules/bs58check/index.js
var require_bs58check = __commonJS({
  "node_modules/bs58check/index.js"(exports, module) {
    "use strict";
    init_define_process_env();
    var createHash = require_browser();
    var bs58checkBase = require_base();
    function sha256x2(buffer) {
      var tmp = createHash("sha256").update(buffer).digest();
      return createHash("sha256").update(tmp).digest();
    }
    module.exports = bs58checkBase(sha256x2);
  }
});

export {
  require_bs58,
  require_bs58check
};
//# sourceMappingURL=chunk-LM3A5ETM.js.map
