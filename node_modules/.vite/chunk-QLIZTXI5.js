import {
  __asyncGenerator,
  __asyncValues,
  __await,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values
} from "./chunk-BRDLAWJG.js";
import {
  utils_exports
} from "./chunk-AAFDKQNN.js";
import {
  __commonJS,
  __toESM,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/joi/dist/joi-browser.min.js
var require_joi_browser_min = __commonJS({
  "node_modules/joi/dist/joi-browser.min.js"(exports, module) {
    init_define_process_env();
    !function(e, t) {
      typeof exports == "object" && typeof module == "object" ? module.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports == "object" ? exports.joi = t() : e.joi = t();
    }(self, function() {
      return e = { 1238: (e2) => {
        "use strict";
        e2.exports = { version: "17.6.0" };
      }, 7629: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(9474), o = r(1687), i = r(8652), l = r(8160), c = r(3292), u = r(6354), f = r(8901), m = r(9708), h = r(6914), d = r(2294), p = r(6133), g = r(1152), y = r(8863), b = r(2036), v = { Base: class {
          constructor(e3) {
            this.type = e3, this.$_root = null, this._definition = {}, this._reset();
          }
          _reset() {
            this._ids = new d.Ids(), this._preferences = null, this._refs = new p.Manager(), this._cache = null, this._valids = null, this._invalids = null, this._flags = {}, this._rules = [], this._singleRules = /* @__PURE__ */ new Map(), this.$_terms = {}, this.$_temp = { ruleset: null, whens: {} };
          }
          describe() {
            return s(typeof m.describe == "function", "Manifest functionality disabled"), m.describe(this);
          }
          allow(...e3) {
            return l.verifyFlat(e3, "allow"), this._values(e3, "_valids");
          }
          alter(e3) {
            s(e3 && typeof e3 == "object" && !Array.isArray(e3), "Invalid targets argument"), s(!this._inRuleset(), "Cannot set alterations inside a ruleset");
            const t3 = this.clone();
            t3.$_terms.alterations = t3.$_terms.alterations || [];
            for (const r2 in e3) {
              const n2 = e3[r2];
              s(typeof n2 == "function", "Alteration adjuster for", r2, "must be a function"), t3.$_terms.alterations.push({ target: r2, adjuster: n2 });
            }
            return t3.$_temp.ruleset = false, t3;
          }
          artifact(e3) {
            return s(e3 !== void 0, "Artifact cannot be undefined"), s(!this._cache, "Cannot set an artifact with a rule cache"), this.$_setFlag("artifact", e3);
          }
          cast(e3) {
            return s(e3 === false || typeof e3 == "string", "Invalid to value"), s(e3 === false || this._definition.cast[e3], "Type", this.type, "does not support casting to", e3), this.$_setFlag("cast", e3 === false ? void 0 : e3);
          }
          default(e3, t3) {
            return this._default("default", e3, t3);
          }
          description(e3) {
            return s(e3 && typeof e3 == "string", "Description must be a non-empty string"), this.$_setFlag("description", e3);
          }
          empty(e3) {
            const t3 = this.clone();
            return e3 !== void 0 && (e3 = t3.$_compile(e3, { override: false })), t3.$_setFlag("empty", e3, { clone: false });
          }
          error(e3) {
            return s(e3, "Missing error"), s(e3 instanceof Error || typeof e3 == "function", "Must provide a valid Error object or a function"), this.$_setFlag("error", e3);
          }
          example(e3, t3 = {}) {
            return s(e3 !== void 0, "Missing example"), l.assertOptions(t3, ["override"]), this._inner("examples", e3, { single: true, override: t3.override });
          }
          external(e3, t3) {
            return typeof e3 == "object" && (s(!t3, "Cannot combine options with description"), t3 = e3.description, e3 = e3.method), s(typeof e3 == "function", "Method must be a function"), s(t3 === void 0 || t3 && typeof t3 == "string", "Description must be a non-empty string"), this._inner("externals", { method: e3, description: t3 }, { single: true });
          }
          failover(e3, t3) {
            return this._default("failover", e3, t3);
          }
          forbidden() {
            return this.presence("forbidden");
          }
          id(e3) {
            return e3 ? (s(typeof e3 == "string", "id must be a non-empty string"), s(/^[^\.]+$/.test(e3), "id cannot contain period character"), this.$_setFlag("id", e3)) : this.$_setFlag("id", void 0);
          }
          invalid(...e3) {
            return this._values(e3, "_invalids");
          }
          label(e3) {
            return s(e3 && typeof e3 == "string", "Label name must be a non-empty string"), this.$_setFlag("label", e3);
          }
          meta(e3) {
            return s(e3 !== void 0, "Meta cannot be undefined"), this._inner("metas", e3, { single: true });
          }
          note(...e3) {
            s(e3.length, "Missing notes");
            for (const t3 of e3)
              s(t3 && typeof t3 == "string", "Notes must be non-empty strings");
            return this._inner("notes", e3);
          }
          only(e3 = true) {
            return s(typeof e3 == "boolean", "Invalid mode:", e3), this.$_setFlag("only", e3);
          }
          optional() {
            return this.presence("optional");
          }
          prefs(e3) {
            s(e3, "Missing preferences"), s(e3.context === void 0, "Cannot override context"), s(e3.externals === void 0, "Cannot override externals"), s(e3.warnings === void 0, "Cannot override warnings"), s(e3.debug === void 0, "Cannot override debug"), l.checkPreferences(e3);
            const t3 = this.clone();
            return t3._preferences = l.preferences(t3._preferences, e3), t3;
          }
          presence(e3) {
            return s(["optional", "required", "forbidden"].includes(e3), "Unknown presence mode", e3), this.$_setFlag("presence", e3);
          }
          raw(e3 = true) {
            return this.$_setFlag("result", e3 ? "raw" : void 0);
          }
          result(e3) {
            return s(["raw", "strip"].includes(e3), "Unknown result mode", e3), this.$_setFlag("result", e3);
          }
          required() {
            return this.presence("required");
          }
          strict(e3) {
            const t3 = this.clone(), r2 = e3 !== void 0 && !e3;
            return t3._preferences = l.preferences(t3._preferences, { convert: r2 }), t3;
          }
          strip(e3 = true) {
            return this.$_setFlag("result", e3 ? "strip" : void 0);
          }
          tag(...e3) {
            s(e3.length, "Missing tags");
            for (const t3 of e3)
              s(t3 && typeof t3 == "string", "Tags must be non-empty strings");
            return this._inner("tags", e3);
          }
          unit(e3) {
            return s(e3 && typeof e3 == "string", "Unit name must be a non-empty string"), this.$_setFlag("unit", e3);
          }
          valid(...e3) {
            l.verifyFlat(e3, "valid");
            const t3 = this.allow(...e3);
            return t3.$_setFlag("only", !!t3._valids, { clone: false }), t3;
          }
          when(e3, t3) {
            const r2 = this.clone();
            r2.$_terms.whens || (r2.$_terms.whens = []);
            const n2 = c.when(r2, e3, t3);
            if (!["any", "link"].includes(r2.type)) {
              const e4 = n2.is ? [n2] : n2.switch;
              for (const t4 of e4)
                s(!t4.then || t4.then.type === "any" || t4.then.type === r2.type, "Cannot combine", r2.type, "with", t4.then && t4.then.type), s(!t4.otherwise || t4.otherwise.type === "any" || t4.otherwise.type === r2.type, "Cannot combine", r2.type, "with", t4.otherwise && t4.otherwise.type);
            }
            return r2.$_terms.whens.push(n2), r2.$_mutateRebuild();
          }
          cache(e3) {
            s(!this._inRuleset(), "Cannot set caching inside a ruleset"), s(!this._cache, "Cannot override schema cache"), s(this._flags.artifact === void 0, "Cannot cache a rule with an artifact");
            const t3 = this.clone();
            return t3._cache = e3 || i.provider.provision(), t3.$_temp.ruleset = false, t3;
          }
          clone() {
            const e3 = Object.create(Object.getPrototypeOf(this));
            return this._assign(e3);
          }
          concat(e3) {
            s(l.isSchema(e3), "Invalid schema object"), s(this.type === "any" || e3.type === "any" || e3.type === this.type, "Cannot merge type", this.type, "with another type:", e3.type), s(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset"), s(!e3._inRuleset(), "Cannot concatenate a schema with open ruleset");
            let t3 = this.clone();
            if (this.type === "any" && e3.type !== "any") {
              const r2 = e3.clone();
              for (const e4 of Object.keys(t3))
                e4 !== "type" && (r2[e4] = t3[e4]);
              t3 = r2;
            }
            t3._ids.concat(e3._ids), t3._refs.register(e3, p.toSibling), t3._preferences = t3._preferences ? l.preferences(t3._preferences, e3._preferences) : e3._preferences, t3._valids = b.merge(t3._valids, e3._valids, e3._invalids), t3._invalids = b.merge(t3._invalids, e3._invalids, e3._valids);
            for (const r2 of e3._singleRules.keys())
              t3._singleRules.has(r2) && (t3._rules = t3._rules.filter((e4) => e4.keep || e4.name !== r2), t3._singleRules.delete(r2));
            for (const r2 of e3._rules)
              e3._definition.rules[r2.method].multi || t3._singleRules.set(r2.name, r2), t3._rules.push(r2);
            if (t3._flags.empty && e3._flags.empty) {
              t3._flags.empty = t3._flags.empty.concat(e3._flags.empty);
              const r2 = Object.assign({}, e3._flags);
              delete r2.empty, o(t3._flags, r2);
            } else if (e3._flags.empty) {
              t3._flags.empty = e3._flags.empty;
              const r2 = Object.assign({}, e3._flags);
              delete r2.empty, o(t3._flags, r2);
            } else
              o(t3._flags, e3._flags);
            for (const r2 in e3.$_terms) {
              const s2 = e3.$_terms[r2];
              s2 ? t3.$_terms[r2] ? t3.$_terms[r2] = t3.$_terms[r2].concat(s2) : t3.$_terms[r2] = s2.slice() : t3.$_terms[r2] || (t3.$_terms[r2] = s2);
            }
            return this.$_root._tracer && this.$_root._tracer._combine(t3, [this, e3]), t3.$_mutateRebuild();
          }
          extend(e3) {
            return s(!e3.base, "Cannot extend type with another base"), f.type(this, e3);
          }
          extract(e3) {
            return e3 = Array.isArray(e3) ? e3 : e3.split("."), this._ids.reach(e3);
          }
          fork(e3, t3) {
            s(!this._inRuleset(), "Cannot fork inside a ruleset");
            let r2 = this;
            for (let s2 of [].concat(e3))
              s2 = Array.isArray(s2) ? s2 : s2.split("."), r2 = r2._ids.fork(s2, t3, r2);
            return r2.$_temp.ruleset = false, r2;
          }
          rule(e3) {
            const t3 = this._definition;
            l.assertOptions(e3, Object.keys(t3.modifiers)), s(this.$_temp.ruleset !== false, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
            const r2 = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;
            s(r2 >= 0 && r2 < this._rules.length, "Cannot apply rules to empty ruleset");
            const a2 = this.clone();
            for (let o2 = r2; o2 < a2._rules.length; ++o2) {
              const r3 = a2._rules[o2], i2 = n(r3);
              for (const n2 in e3)
                t3.modifiers[n2](i2, e3[n2]), s(i2.name === r3.name, "Cannot change rule name");
              a2._rules[o2] = i2, a2._singleRules.get(i2.name) === r3 && a2._singleRules.set(i2.name, i2);
            }
            return a2.$_temp.ruleset = false, a2.$_mutateRebuild();
          }
          get ruleset() {
            s(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
            const e3 = this.clone();
            return e3.$_temp.ruleset = e3._rules.length, e3;
          }
          get $() {
            return this.ruleset;
          }
          tailor(e3) {
            e3 = [].concat(e3), s(!this._inRuleset(), "Cannot tailor inside a ruleset");
            let t3 = this;
            if (this.$_terms.alterations)
              for (const { target: r2, adjuster: n2 } of this.$_terms.alterations)
                e3.includes(r2) && (t3 = n2(t3), s(l.isSchema(t3), "Alteration adjuster for", r2, "failed to return a schema object"));
            return t3 = t3.$_modify({ each: (t4) => t4.tailor(e3), ref: false }), t3.$_temp.ruleset = false, t3.$_mutateRebuild();
          }
          tracer() {
            return g.location ? g.location(this) : this;
          }
          validate(e3, t3) {
            return y.entry(e3, this, t3);
          }
          validateAsync(e3, t3) {
            return y.entryAsync(e3, this, t3);
          }
          $_addRule(e3) {
            typeof e3 == "string" && (e3 = { name: e3 }), s(e3 && typeof e3 == "object", "Invalid options"), s(e3.name && typeof e3.name == "string", "Invalid rule name");
            for (const t4 in e3)
              s(t4[0] !== "_", "Cannot set private rule properties");
            const t3 = Object.assign({}, e3);
            t3._resolve = [], t3.method = t3.method || t3.name;
            const r2 = this._definition.rules[t3.method], n2 = t3.args;
            s(r2, "Unknown rule", t3.method);
            const a2 = this.clone();
            if (n2) {
              s(Object.keys(n2).length === 1 || Object.keys(n2).length === this._definition.rules[t3.name].args.length, "Invalid rule definition for", this.type, t3.name);
              for (const e4 in n2) {
                let o2 = n2[e4];
                if (o2 !== void 0) {
                  if (r2.argsByName) {
                    const i2 = r2.argsByName.get(e4);
                    if (i2.ref && l.isResolvable(o2))
                      t3._resolve.push(e4), a2.$_mutateRegister(o2);
                    else if (i2.normalize && (o2 = i2.normalize(o2), n2[e4] = o2), i2.assert) {
                      const t4 = l.validateArg(o2, e4, i2);
                      s(!t4, t4, "or reference");
                    }
                  }
                  n2[e4] = o2;
                } else
                  delete n2[e4];
              }
            }
            return r2.multi || (a2._ruleRemove(t3.name, { clone: false }), a2._singleRules.set(t3.name, t3)), a2.$_temp.ruleset === false && (a2.$_temp.ruleset = null), r2.priority ? a2._rules.unshift(t3) : a2._rules.push(t3), a2;
          }
          $_compile(e3, t3) {
            return c.schema(this.$_root, e3, t3);
          }
          $_createError(e3, t3, r2, s2, n2, a2 = {}) {
            const o2 = a2.flags !== false ? this._flags : {}, i2 = a2.messages ? h.merge(this._definition.messages, a2.messages) : this._definition.messages;
            return new u.Report(e3, t3, r2, o2, i2, s2, n2);
          }
          $_getFlag(e3) {
            return this._flags[e3];
          }
          $_getRule(e3) {
            return this._singleRules.get(e3);
          }
          $_mapLabels(e3) {
            return e3 = Array.isArray(e3) ? e3 : e3.split("."), this._ids.labels(e3);
          }
          $_match(e3, t3, r2, s2) {
            (r2 = Object.assign({}, r2)).abortEarly = true, r2._externals = false, t3.snapshot();
            const n2 = !y.validate(e3, this, t3, r2, s2).errors;
            return t3.restore(), n2;
          }
          $_modify(e3) {
            return l.assertOptions(e3, ["each", "once", "ref", "schema"]), d.schema(this, e3) || this;
          }
          $_mutateRebuild() {
            return s(!this._inRuleset(), "Cannot add this rule inside a ruleset"), this._refs.reset(), this._ids.reset(), this.$_modify({ each: (e3, { source: t3, name: r2, path: s2, key: n2 }) => {
              const a2 = this._definition[t3][r2] && this._definition[t3][r2].register;
              a2 !== false && this.$_mutateRegister(e3, { family: a2, key: n2 });
            } }), this._definition.rebuild && this._definition.rebuild(this), this.$_temp.ruleset = false, this;
          }
          $_mutateRegister(e3, { family: t3, key: r2 } = {}) {
            this._refs.register(e3, t3), this._ids.register(e3, { key: r2 });
          }
          $_property(e3) {
            return this._definition.properties[e3];
          }
          $_reach(e3) {
            return this._ids.reach(e3);
          }
          $_rootReferences() {
            return this._refs.roots();
          }
          $_setFlag(e3, t3, r2 = {}) {
            s(e3[0] === "_" || !this._inRuleset(), "Cannot set flag inside a ruleset");
            const n2 = this._definition.flags[e3] || {};
            if (a(t3, n2.default) && (t3 = void 0), a(t3, this._flags[e3]))
              return this;
            const o2 = r2.clone !== false ? this.clone() : this;
            return t3 !== void 0 ? (o2._flags[e3] = t3, o2.$_mutateRegister(t3)) : delete o2._flags[e3], e3[0] !== "_" && (o2.$_temp.ruleset = false), o2;
          }
          $_parent(e3, ...t3) {
            return this[e3][l.symbols.parent].call(this, ...t3);
          }
          $_validate(e3, t3, r2) {
            return y.validate(e3, this, t3, r2);
          }
          _assign(e3) {
            e3.type = this.type, e3.$_root = this.$_root, e3.$_temp = Object.assign({}, this.$_temp), e3.$_temp.whens = {}, e3._ids = this._ids.clone(), e3._preferences = this._preferences, e3._valids = this._valids && this._valids.clone(), e3._invalids = this._invalids && this._invalids.clone(), e3._rules = this._rules.slice(), e3._singleRules = n(this._singleRules, { shallow: true }), e3._refs = this._refs.clone(), e3._flags = Object.assign({}, this._flags), e3._cache = null, e3.$_terms = {};
            for (const t3 in this.$_terms)
              e3.$_terms[t3] = this.$_terms[t3] ? this.$_terms[t3].slice() : null;
            e3.$_super = {};
            for (const t3 in this.$_super)
              e3.$_super[t3] = this._super[t3].bind(e3);
            return e3;
          }
          _bare() {
            const e3 = this.clone();
            e3._reset();
            const t3 = e3._definition.terms;
            for (const r2 in t3) {
              const s2 = t3[r2];
              e3.$_terms[r2] = s2.init;
            }
            return e3.$_mutateRebuild();
          }
          _default(e3, t3, r2 = {}) {
            return l.assertOptions(r2, "literal"), s(t3 !== void 0, "Missing", e3, "value"), s(typeof t3 == "function" || !r2.literal, "Only function value supports literal option"), typeof t3 == "function" && r2.literal && (t3 = { [l.symbols.literal]: true, literal: t3 }), this.$_setFlag(e3, t3);
          }
          _generate(e3, t3, r2) {
            if (!this.$_terms.whens)
              return { schema: this };
            const s2 = [], n2 = [];
            for (let a3 = 0; a3 < this.$_terms.whens.length; ++a3) {
              const o3 = this.$_terms.whens[a3];
              if (o3.concat) {
                s2.push(o3.concat), n2.push("".concat(a3, ".concat"));
                continue;
              }
              const i2 = o3.ref ? o3.ref.resolve(e3, t3, r2) : e3, l2 = o3.is ? [o3] : o3.switch, c2 = n2.length;
              for (let c3 = 0; c3 < l2.length; ++c3) {
                const { is: u2, then: f2, otherwise: m2 } = l2[c3], h2 = "".concat(a3).concat(o3.switch ? "." + c3 : "");
                if (u2.$_match(i2, t3.nest(u2, "".concat(h2, ".is")), r2)) {
                  if (f2) {
                    const a4 = t3.localize([...t3.path, "".concat(h2, ".then")], t3.ancestors, t3.schemas), { schema: o4, id: i3 } = f2._generate(e3, a4, r2);
                    s2.push(o4), n2.push("".concat(h2, ".then").concat(i3 ? "(".concat(i3, ")") : ""));
                    break;
                  }
                } else if (m2) {
                  const a4 = t3.localize([...t3.path, "".concat(h2, ".otherwise")], t3.ancestors, t3.schemas), { schema: o4, id: i3 } = m2._generate(e3, a4, r2);
                  s2.push(o4), n2.push("".concat(h2, ".otherwise").concat(i3 ? "(".concat(i3, ")") : ""));
                  break;
                }
              }
              if (o3.break && n2.length > c2)
                break;
            }
            const a2 = n2.join(", ");
            if (t3.mainstay.tracer.debug(t3, "rule", "when", a2), !a2)
              return { schema: this };
            if (!t3.mainstay.tracer.active && this.$_temp.whens[a2])
              return { schema: this.$_temp.whens[a2], id: a2 };
            let o2 = this;
            this._definition.generate && (o2 = this._definition.generate(this, e3, t3, r2));
            for (const e4 of s2)
              o2 = o2.concat(e4);
            return this.$_root._tracer && this.$_root._tracer._combine(o2, [this, ...s2]), this.$_temp.whens[a2] = o2, { schema: o2, id: a2 };
          }
          _inner(e3, t3, r2 = {}) {
            s(!this._inRuleset(), "Cannot set ".concat(e3, " inside a ruleset"));
            const n2 = this.clone();
            return n2.$_terms[e3] && !r2.override || (n2.$_terms[e3] = []), r2.single ? n2.$_terms[e3].push(t3) : n2.$_terms[e3].push(...t3), n2.$_temp.ruleset = false, n2;
          }
          _inRuleset() {
            return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;
          }
          _ruleRemove(e3, t3 = {}) {
            if (!this._singleRules.has(e3))
              return this;
            const r2 = t3.clone !== false ? this.clone() : this;
            r2._singleRules.delete(e3);
            const s2 = [];
            for (let t4 = 0; t4 < r2._rules.length; ++t4) {
              const n2 = r2._rules[t4];
              n2.name !== e3 || n2.keep ? s2.push(n2) : r2._inRuleset() && t4 < r2.$_temp.ruleset && --r2.$_temp.ruleset;
            }
            return r2._rules = s2, r2;
          }
          _values(e3, t3) {
            l.verifyFlat(e3, t3.slice(1, -1));
            const r2 = this.clone(), n2 = e3[0] === l.symbols.override;
            if (n2 && (e3 = e3.slice(1)), !r2[t3] && e3.length ? r2[t3] = new b() : n2 && (r2[t3] = e3.length ? new b() : null, r2.$_mutateRebuild()), !r2[t3])
              return r2;
            n2 && r2[t3].override();
            for (const n3 of e3) {
              s(n3 !== void 0, "Cannot call allow/valid/invalid with undefined"), s(n3 !== l.symbols.override, "Override must be the first value");
              const e4 = t3 === "_invalids" ? "_valids" : "_invalids";
              r2[e4] && (r2[e4].remove(n3), r2[e4].length || (s(t3 === "_valids" || !r2._flags.only, "Setting invalid value", n3, "leaves schema rejecting all values due to previous valid rule"), r2[e4] = null)), r2[t3].add(n3, r2._refs);
            }
            return r2;
          }
        } };
        v.Base.prototype[l.symbols.any] = { version: l.version, compile: c.compile, root: "$_root" }, v.Base.prototype.isImmutable = true, v.Base.prototype.deny = v.Base.prototype.invalid, v.Base.prototype.disallow = v.Base.prototype.invalid, v.Base.prototype.equal = v.Base.prototype.valid, v.Base.prototype.exist = v.Base.prototype.required, v.Base.prototype.not = v.Base.prototype.invalid, v.Base.prototype.options = v.Base.prototype.prefs, v.Base.prototype.preferences = v.Base.prototype.prefs, e2.exports = new v.Base();
      }, 8652: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8160), o = { max: 1e3, supported: /* @__PURE__ */ new Set(["undefined", "boolean", "number", "string"]) };
        t2.provider = { provision: (e3) => new o.Cache(e3) }, o.Cache = class {
          constructor(e3 = {}) {
            a.assertOptions(e3, ["max"]), s(e3.max === void 0 || e3.max && e3.max > 0 && isFinite(e3.max), "Invalid max cache size"), this._max = e3.max || o.max, this._map = /* @__PURE__ */ new Map(), this._list = new o.List();
          }
          get length() {
            return this._map.size;
          }
          set(e3, t3) {
            if (e3 !== null && !o.supported.has(typeof e3))
              return;
            let r2 = this._map.get(e3);
            if (r2)
              return r2.value = t3, void this._list.first(r2);
            r2 = this._list.unshift({ key: e3, value: t3 }), this._map.set(e3, r2), this._compact();
          }
          get(e3) {
            const t3 = this._map.get(e3);
            if (t3)
              return this._list.first(t3), n(t3.value);
          }
          _compact() {
            if (this._map.size > this._max) {
              const e3 = this._list.pop();
              this._map.delete(e3.key);
            }
          }
        }, o.List = class {
          constructor() {
            this.tail = null, this.head = null;
          }
          unshift(e3) {
            return e3.next = null, e3.prev = this.head, this.head && (this.head.next = e3), this.head = e3, this.tail || (this.tail = e3), e3;
          }
          first(e3) {
            e3 !== this.head && (this._remove(e3), this.unshift(e3));
          }
          pop() {
            return this._remove(this.tail);
          }
          _remove(e3) {
            const { next: t3, prev: r2 } = e3;
            return t3.prev = r2, r2 && (r2.next = t3), e3 === this.tail && (this.tail = t3), e3.prev = null, e3.next = null, e3;
          }
        };
      }, 8160: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7916), a = r(1238);
        let o, i;
        const l = { isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/ };
        t2.version = a.version, t2.defaults = { abortEarly: true, allowUnknown: false, artifacts: false, cache: true, context: null, convert: true, dateFormat: "iso", errors: { escapeHtml: false, label: "path", language: null, render: true, stack: false, wrap: { label: '"', array: "[]" } }, externals: true, messages: {}, nonEnumerables: false, noDefaults: false, presence: "optional", skipFunctions: false, stripUnknown: false, warnings: false }, t2.symbols = { any: Symbol.for("@hapi/joi/schema"), arraySingle: Symbol("arraySingle"), deepDefault: Symbol("deepDefault"), errors: Symbol("errors"), literal: Symbol("literal"), override: Symbol("override"), parent: Symbol("parent"), prefs: Symbol("prefs"), ref: Symbol("ref"), template: Symbol("template"), values: Symbol("values") }, t2.assertOptions = function(e3, t3, r2 = "Options") {
          s(e3 && typeof e3 == "object" && !Array.isArray(e3), "Options must be of type object");
          const n2 = Object.keys(e3).filter((e4) => !t3.includes(e4));
          s(n2.length === 0, "".concat(r2, " contain unknown keys: ").concat(n2));
        }, t2.checkPreferences = function(e3) {
          i = i || r(3378);
          const t3 = i.preferences.validate(e3);
          if (t3.error)
            throw new n([t3.error.details[0].message]);
        }, t2.compare = function(e3, t3, r2) {
          switch (r2) {
            case "=":
              return e3 === t3;
            case ">":
              return e3 > t3;
            case "<":
              return e3 < t3;
            case ">=":
              return e3 >= t3;
            case "<=":
              return e3 <= t3;
          }
        }, t2.default = function(e3, t3) {
          return e3 === void 0 ? t3 : e3;
        }, t2.isIsoDate = function(e3) {
          return l.isoDate.test(e3);
        }, t2.isNumber = function(e3) {
          return typeof e3 == "number" && !isNaN(e3);
        }, t2.isResolvable = function(e3) {
          return !!e3 && (e3[t2.symbols.ref] || e3[t2.symbols.template]);
        }, t2.isSchema = function(e3, r2 = {}) {
          const n2 = e3 && e3[t2.symbols.any];
          return !!n2 && (s(r2.legacy || n2.version === t2.version, "Cannot mix different versions of joi schemas"), true);
        }, t2.isValues = function(e3) {
          return e3[t2.symbols.values];
        }, t2.limit = function(e3) {
          return Number.isSafeInteger(e3) && e3 >= 0;
        }, t2.preferences = function(e3, s2) {
          o = o || r(6914), e3 = e3 || {}, s2 = s2 || {};
          const n2 = Object.assign({}, e3, s2);
          return s2.errors && e3.errors && (n2.errors = Object.assign({}, e3.errors, s2.errors), n2.errors.wrap = Object.assign({}, e3.errors.wrap, s2.errors.wrap)), s2.messages && (n2.messages = o.compile(s2.messages, e3.messages)), delete n2[t2.symbols.prefs], n2;
        }, t2.tryWithPath = function(e3, t3, r2 = {}) {
          try {
            return e3();
          } catch (e4) {
            throw e4.path !== void 0 ? e4.path = t3 + "." + e4.path : e4.path = t3, r2.append && (e4.message = "".concat(e4.message, " (").concat(e4.path, ")")), e4;
          }
        }, t2.validateArg = function(e3, r2, { assert: s2, message: n2 }) {
          if (t2.isSchema(s2)) {
            const t3 = s2.validate(e3);
            if (!t3.error)
              return;
            return t3.error.message;
          }
          if (!s2(e3))
            return r2 ? "".concat(r2, " ").concat(n2) : n2;
        }, t2.verifyFlat = function(e3, t3) {
          for (const r2 of e3)
            s(!Array.isArray(r2), "Method no longer accepts array arguments:", t3);
        };
      }, 3292: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8160), a = r(6133), o = {};
        t2.schema = function(e3, t3, r2 = {}) {
          n.assertOptions(r2, ["appendPath", "override"]);
          try {
            return o.schema(e3, t3, r2);
          } catch (e4) {
            throw r2.appendPath && e4.path !== void 0 && (e4.message = "".concat(e4.message, " (").concat(e4.path, ")")), e4;
          }
        }, o.schema = function(e3, t3, r2) {
          s(t3 !== void 0, "Invalid undefined schema"), Array.isArray(t3) && (s(t3.length, "Invalid empty array schema"), t3.length === 1 && (t3 = t3[0]));
          const a2 = (t4, ...s2) => r2.override !== false ? t4.valid(e3.override, ...s2) : t4.valid(...s2);
          if (o.simple(t3))
            return a2(e3, t3);
          if (typeof t3 == "function")
            return e3.custom(t3);
          if (s(typeof t3 == "object", "Invalid schema content:", typeof t3), n.isResolvable(t3))
            return a2(e3, t3);
          if (n.isSchema(t3))
            return t3;
          if (Array.isArray(t3)) {
            for (const r3 of t3)
              if (!o.simple(r3))
                return e3.alternatives().try(...t3);
            return a2(e3, ...t3);
          }
          return t3 instanceof RegExp ? e3.string().regex(t3) : t3 instanceof Date ? a2(e3.date(), t3) : (s(Object.getPrototypeOf(t3) === Object.getPrototypeOf({}), "Schema can only contain plain objects"), e3.object().keys(t3));
        }, t2.ref = function(e3, t3) {
          return a.isRef(e3) ? e3 : a.create(e3, t3);
        }, t2.compile = function(e3, r2, a2 = {}) {
          n.assertOptions(a2, ["legacy"]);
          const i = r2 && r2[n.symbols.any];
          if (i)
            return s(a2.legacy || i.version === n.version, "Cannot mix different versions of joi schemas:", i.version, n.version), r2;
          if (typeof r2 != "object" || !a2.legacy)
            return t2.schema(e3, r2, { appendPath: true });
          const l = o.walk(r2);
          return l ? l.compile(l.root, r2) : t2.schema(e3, r2, { appendPath: true });
        }, o.walk = function(e3) {
          if (typeof e3 != "object")
            return null;
          if (Array.isArray(e3)) {
            for (const t4 of e3) {
              const e4 = o.walk(t4);
              if (e4)
                return e4;
            }
            return null;
          }
          const t3 = e3[n.symbols.any];
          if (t3)
            return { root: e3[t3.root], compile: t3.compile };
          s(Object.getPrototypeOf(e3) === Object.getPrototypeOf({}), "Schema can only contain plain objects");
          for (const t4 in e3) {
            const r2 = o.walk(e3[t4]);
            if (r2)
              return r2;
          }
          return null;
        }, o.simple = function(e3) {
          return e3 === null || ["boolean", "string", "number"].includes(typeof e3);
        }, t2.when = function(e3, r2, i) {
          if (i === void 0 && (s(r2 && typeof r2 == "object", "Missing options"), i = r2, r2 = a.create(".")), Array.isArray(i) && (i = { switch: i }), n.assertOptions(i, ["is", "not", "then", "otherwise", "switch", "break"]), n.isSchema(r2))
            return s(i.is === void 0, '"is" can not be used with a schema condition'), s(i.not === void 0, '"not" can not be used with a schema condition'), s(i.switch === void 0, '"switch" can not be used with a schema condition'), o.condition(e3, { is: r2, then: i.then, otherwise: i.otherwise, break: i.break });
          if (s(a.isRef(r2) || typeof r2 == "string", "Invalid condition:", r2), s(i.not === void 0 || i.is === void 0, 'Cannot combine "is" with "not"'), i.switch === void 0) {
            let l2 = i;
            i.not !== void 0 && (l2 = { is: i.not, then: i.otherwise, otherwise: i.then, break: i.break });
            let c = l2.is !== void 0 ? e3.$_compile(l2.is) : e3.$_root.invalid(null, false, 0, "").required();
            return s(l2.then !== void 0 || l2.otherwise !== void 0, 'options must have at least one of "then", "otherwise", or "switch"'), s(l2.break === void 0 || l2.then === void 0 || l2.otherwise === void 0, "Cannot specify then, otherwise, and break all together"), i.is === void 0 || a.isRef(i.is) || n.isSchema(i.is) || (c = c.required()), o.condition(e3, { ref: t2.ref(r2), is: c, then: l2.then, otherwise: l2.otherwise, break: l2.break });
          }
          s(Array.isArray(i.switch), '"switch" must be an array'), s(i.is === void 0, 'Cannot combine "switch" with "is"'), s(i.not === void 0, 'Cannot combine "switch" with "not"'), s(i.then === void 0, 'Cannot combine "switch" with "then"');
          const l = { ref: t2.ref(r2), switch: [], break: i.break };
          for (let t3 = 0; t3 < i.switch.length; ++t3) {
            const r3 = i.switch[t3], o2 = t3 === i.switch.length - 1;
            n.assertOptions(r3, o2 ? ["is", "then", "otherwise"] : ["is", "then"]), s(r3.is !== void 0, 'Switch statement missing "is"'), s(r3.then !== void 0, 'Switch statement missing "then"');
            const c = { is: e3.$_compile(r3.is), then: e3.$_compile(r3.then) };
            if (a.isRef(r3.is) || n.isSchema(r3.is) || (c.is = c.is.required()), o2) {
              s(i.otherwise === void 0 || r3.otherwise === void 0, 'Cannot specify "otherwise" inside and outside a "switch"');
              const t4 = i.otherwise !== void 0 ? i.otherwise : r3.otherwise;
              t4 !== void 0 && (s(l.break === void 0, "Cannot specify both otherwise and break"), c.otherwise = e3.$_compile(t4));
            }
            l.switch.push(c);
          }
          return l;
        }, o.condition = function(e3, t3) {
          for (const r2 of ["then", "otherwise"])
            t3[r2] === void 0 ? delete t3[r2] : t3[r2] = e3.$_compile(t3[r2]);
          return t3;
        };
      }, 6354: (e2, t2, r) => {
        "use strict";
        const s = r(5688), n = r(8160), a = r(3328);
        t2.Report = class {
          constructor(e3, r2, s2, n2, a2, o, i) {
            if (this.code = e3, this.flags = n2, this.messages = a2, this.path = o.path, this.prefs = i, this.state = o, this.value = r2, this.message = null, this.template = null, this.local = s2 || {}, this.local.label = t2.label(this.flags, this.state, this.prefs, this.messages), this.value === void 0 || this.local.hasOwnProperty("value") || (this.local.value = this.value), this.path.length) {
              const e4 = this.path[this.path.length - 1];
              typeof e4 != "object" && (this.local.key = e4);
            }
          }
          _setTemplate(e3) {
            if (this.template = e3, !this.flags.label && this.path.length === 0) {
              const e4 = this._template(this.template, "root");
              e4 && (this.local.label = e4);
            }
          }
          toString() {
            if (this.message)
              return this.message;
            const e3 = this.code;
            if (!this.prefs.errors.render)
              return this.code;
            const t3 = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);
            return t3 === void 0 ? 'Error code "'.concat(e3, '" is not defined, your custom type is missing the correct messages definition') : (this.message = t3.render(this.value, this.state, this.prefs, this.local, { errors: this.prefs.errors, messages: [this.prefs.messages, this.messages] }), this.prefs.errors.label || (this.message = this.message.replace(/^"" /, "").trim()), this.message);
          }
          _template(e3, r2) {
            return t2.template(this.value, e3, r2 || this.code, this.state, this.prefs);
          }
        }, t2.path = function(e3) {
          let t3 = "";
          for (const r2 of e3)
            typeof r2 != "object" && (typeof r2 == "string" ? (t3 && (t3 += "."), t3 += r2) : t3 += "[".concat(r2, "]"));
          return t3;
        }, t2.template = function(e3, t3, r2, s2, o) {
          if (!t3)
            return;
          if (a.isTemplate(t3))
            return r2 !== "root" ? t3 : null;
          let i = o.errors.language;
          if (n.isResolvable(i) && (i = i.resolve(e3, s2, o)), i && t3[i]) {
            if (t3[i][r2] !== void 0)
              return t3[i][r2];
            if (t3[i]["*"] !== void 0)
              return t3[i]["*"];
          }
          return t3[r2] ? t3[r2] : t3["*"];
        }, t2.label = function(e3, r2, s2, n2) {
          if (e3.label)
            return e3.label;
          if (!s2.errors.label)
            return "";
          let a2 = r2.path;
          s2.errors.label === "key" && r2.path.length > 1 && (a2 = r2.path.slice(-1));
          return t2.path(a2) || t2.template(null, s2.messages, "root", r2, s2) || n2 && t2.template(null, n2, "root", r2, s2) || "value";
        }, t2.process = function(e3, r2, s2) {
          if (!e3)
            return null;
          const { override: n2, message: a2, details: o } = t2.details(e3);
          if (n2)
            return n2;
          if (s2.errors.stack)
            return new t2.ValidationError(a2, o, r2);
          const i = Error.stackTraceLimit;
          Error.stackTraceLimit = 0;
          const l = new t2.ValidationError(a2, o, r2);
          return Error.stackTraceLimit = i, l;
        }, t2.details = function(e3, t3 = {}) {
          let r2 = [];
          const s2 = [];
          for (const n2 of e3) {
            if (n2 instanceof Error) {
              if (t3.override !== false)
                return { override: n2 };
              const e5 = n2.toString();
              r2.push(e5), s2.push({ message: e5, type: "override", context: { error: n2 } });
              continue;
            }
            const e4 = n2.toString();
            r2.push(e4), s2.push({ message: e4, path: n2.path.filter((e5) => typeof e5 != "object"), type: n2.code, context: n2.local });
          }
          return r2.length > 1 && (r2 = [...new Set(r2)]), { message: r2.join(". "), details: s2 };
        }, t2.ValidationError = class extends Error {
          constructor(e3, t3, r2) {
            super(e3), this._original = r2, this.details = t3;
          }
          static isError(e3) {
            return e3 instanceof t2.ValidationError;
          }
        }, t2.ValidationError.prototype.isJoi = true, t2.ValidationError.prototype.name = "ValidationError", t2.ValidationError.prototype.annotate = s.error;
      }, 8901: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8160), o = r(6914), i = {};
        t2.type = function(e3, t3) {
          const r2 = Object.getPrototypeOf(e3), l = n(r2), c = e3._assign(Object.create(l)), u = Object.assign({}, t3);
          delete u.base, l._definition = u;
          const f = r2._definition || {};
          u.messages = o.merge(f.messages, u.messages), u.properties = Object.assign({}, f.properties, u.properties), c.type = u.type, u.flags = Object.assign({}, f.flags, u.flags);
          const m = Object.assign({}, f.terms);
          if (u.terms)
            for (const e4 in u.terms) {
              const t4 = u.terms[e4];
              s(c.$_terms[e4] === void 0, "Invalid term override for", u.type, e4), c.$_terms[e4] = t4.init, m[e4] = t4;
            }
          u.terms = m, u.args || (u.args = f.args), u.prepare = i.prepare(u.prepare, f.prepare), u.coerce && (typeof u.coerce == "function" && (u.coerce = { method: u.coerce }), u.coerce.from && !Array.isArray(u.coerce.from) && (u.coerce = { method: u.coerce.method, from: [].concat(u.coerce.from) })), u.coerce = i.coerce(u.coerce, f.coerce), u.validate = i.validate(u.validate, f.validate);
          const h = Object.assign({}, f.rules);
          if (u.rules)
            for (const e4 in u.rules) {
              const t4 = u.rules[e4];
              s(typeof t4 == "object", "Invalid rule definition for", u.type, e4);
              let r3 = t4.method;
              if (r3 === void 0 && (r3 = function() {
                return this.$_addRule(e4);
              }), r3 && (s(!l[e4], "Rule conflict in", u.type, e4), l[e4] = r3), s(!h[e4], "Rule conflict in", u.type, e4), h[e4] = t4, t4.alias) {
                const e5 = [].concat(t4.alias);
                for (const r4 of e5)
                  l[r4] = t4.method;
              }
              t4.args && (t4.argsByName = /* @__PURE__ */ new Map(), t4.args = t4.args.map((e5) => (typeof e5 == "string" && (e5 = { name: e5 }), s(!t4.argsByName.has(e5.name), "Duplicated argument name", e5.name), a.isSchema(e5.assert) && (e5.assert = e5.assert.strict().label(e5.name)), t4.argsByName.set(e5.name, e5), e5)));
            }
          u.rules = h;
          const d = Object.assign({}, f.modifiers);
          if (u.modifiers)
            for (const e4 in u.modifiers) {
              s(!l[e4], "Rule conflict in", u.type, e4);
              const t4 = u.modifiers[e4];
              s(typeof t4 == "function", "Invalid modifier definition for", u.type, e4);
              const r3 = function(t5) {
                return this.rule({ [e4]: t5 });
              };
              l[e4] = r3, d[e4] = t4;
            }
          if (u.modifiers = d, u.overrides) {
            l._super = r2, c.$_super = {};
            for (const e4 in u.overrides)
              s(r2[e4], "Cannot override missing", e4), u.overrides[e4][a.symbols.parent] = r2[e4], c.$_super[e4] = r2[e4].bind(c);
            Object.assign(l, u.overrides);
          }
          u.cast = Object.assign({}, f.cast, u.cast);
          const p = Object.assign({}, f.manifest, u.manifest);
          return p.build = i.build(u.manifest && u.manifest.build, f.manifest && f.manifest.build), u.manifest = p, u.rebuild = i.rebuild(u.rebuild, f.rebuild), c;
        }, i.build = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            return t3(e3(r2, s2), s2);
          } : e3 || t3;
        }, i.coerce = function(e3, t3) {
          return e3 && t3 ? { from: e3.from && t3.from ? [.../* @__PURE__ */ new Set([...e3.from, ...t3.from])] : null, method(r2, s2) {
            let n2;
            if ((!t3.from || t3.from.includes(typeof r2)) && (n2 = t3.method(r2, s2), n2)) {
              if (n2.errors || n2.value === void 0)
                return n2;
              r2 = n2.value;
            }
            if (!e3.from || e3.from.includes(typeof r2)) {
              const t4 = e3.method(r2, s2);
              if (t4)
                return t4;
            }
            return n2;
          } } : e3 || t3;
        }, i.prepare = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            const n2 = e3(r2, s2);
            if (n2) {
              if (n2.errors || n2.value === void 0)
                return n2;
              r2 = n2.value;
            }
            return t3(r2, s2) || n2;
          } : e3 || t3;
        }, i.rebuild = function(e3, t3) {
          return e3 && t3 ? function(r2) {
            t3(r2), e3(r2);
          } : e3 || t3;
        }, i.validate = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            const n2 = t3(r2, s2);
            if (n2) {
              if (n2.errors && (!Array.isArray(n2.errors) || n2.errors.length))
                return n2;
              r2 = n2.value;
            }
            return e3(r2, s2) || n2;
          } : e3 || t3;
        };
      }, 5107: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8652), o = r(8160), i = r(3292), l = r(6354), c = r(8901), u = r(9708), f = r(6133), m = r(3328), h = r(1152);
        let d;
        const p = { types: { alternatives: r(4946), any: r(8068), array: r(546), boolean: r(4937), date: r(7500), function: r(390), link: r(8785), number: r(3832), object: r(8966), string: r(7417), symbol: r(8826) }, aliases: { alt: "alternatives", bool: "boolean", func: "function" }, root: function() {
          const e3 = { _types: new Set(Object.keys(p.types)) };
          for (const t3 of e3._types)
            e3[t3] = function(...e4) {
              return s(!e4.length || ["alternatives", "link", "object"].includes(t3), "The", t3, "type does not allow arguments"), p.generate(this, p.types[t3], e4);
            };
          for (const t3 of ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"])
            e3[t3] = function(...e4) {
              return this.any()[t3](...e4);
            };
          Object.assign(e3, p.methods);
          for (const t3 in p.aliases) {
            const r2 = p.aliases[t3];
            e3[t3] = e3[r2];
          }
          return e3.x = e3.expression, h.setup && h.setup(e3), e3;
        } };
        p.methods = { ValidationError: l.ValidationError, version: o.version, cache: a.provider, assert(e3, t3, ...r2) {
          p.assert(e3, t3, true, r2);
        }, attempt: (e3, t3, ...r2) => p.assert(e3, t3, false, r2), build(e3) {
          return s(typeof u.build == "function", "Manifest functionality disabled"), u.build(this, e3);
        }, checkPreferences(e3) {
          o.checkPreferences(e3);
        }, compile(e3, t3) {
          return i.compile(this, e3, t3);
        }, defaults(e3) {
          s(typeof e3 == "function", "modifier must be a function");
          const t3 = Object.assign({}, this);
          for (const r2 of t3._types) {
            const n2 = e3(t3[r2]());
            s(o.isSchema(n2), "modifier must return a valid schema object"), t3[r2] = function(...e4) {
              return p.generate(this, n2, e4);
            };
          }
          return t3;
        }, expression: (...e3) => new m(...e3), extend(...e3) {
          o.verifyFlat(e3, "extend"), d = d || r(3378), s(e3.length, "You need to provide at least one extension"), this.assert(e3, d.extensions);
          const t3 = Object.assign({}, this);
          t3._types = new Set(t3._types);
          for (let r2 of e3) {
            typeof r2 == "function" && (r2 = r2(t3)), this.assert(r2, d.extension);
            const e4 = p.expandExtension(r2, t3);
            for (const r3 of e4) {
              s(t3[r3.type] === void 0 || t3._types.has(r3.type), "Cannot override name", r3.type);
              const e5 = r3.base || this.any(), n2 = c.type(e5, r3);
              t3._types.add(r3.type), t3[r3.type] = function(...e6) {
                return p.generate(this, n2, e6);
              };
            }
          }
          return t3;
        }, isError: l.ValidationError.isError, isExpression: m.isTemplate, isRef: f.isRef, isSchema: o.isSchema, in: (...e3) => f.in(...e3), override: o.symbols.override, ref: (...e3) => f.create(...e3), types() {
          const e3 = {};
          for (const t3 of this._types)
            e3[t3] = this[t3]();
          for (const t3 in p.aliases)
            e3[t3] = this[t3]();
          return e3;
        } }, p.assert = function(e3, t3, r2, s2) {
          const a2 = s2[0] instanceof Error || typeof s2[0] == "string" ? s2[0] : null, i2 = a2 ? s2[1] : s2[0], c2 = t3.validate(e3, o.preferences({ errors: { stack: true } }, i2 || {}));
          let u2 = c2.error;
          if (!u2)
            return c2.value;
          if (a2 instanceof Error)
            throw a2;
          const f2 = r2 && typeof u2.annotate == "function" ? u2.annotate() : u2.message;
          throw u2 instanceof l.ValidationError == 0 && (u2 = n(u2)), u2.message = a2 ? "".concat(a2, " ").concat(f2) : f2, u2;
        }, p.generate = function(e3, t3, r2) {
          return s(e3, "Must be invoked on a Joi instance."), t3.$_root = e3, t3._definition.args && r2.length ? t3._definition.args(t3, ...r2) : t3;
        }, p.expandExtension = function(e3, t3) {
          if (typeof e3.type == "string")
            return [e3];
          const r2 = [];
          for (const s2 of t3._types)
            if (e3.type.test(s2)) {
              const n2 = Object.assign({}, e3);
              n2.type = s2, n2.base = t3[s2](), r2.push(n2);
            }
          return r2;
        }, e2.exports = p.root();
      }, 6914: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(3328);
        t2.compile = function(e3, t3) {
          if (typeof e3 == "string")
            return s(!t3, "Cannot set single message string"), new a(e3);
          if (a.isTemplate(e3))
            return s(!t3, "Cannot set single message template"), e3;
          s(typeof e3 == "object" && !Array.isArray(e3), "Invalid message options"), t3 = t3 ? n(t3) : {};
          for (let r2 in e3) {
            const n2 = e3[r2];
            if (r2 === "root" || a.isTemplate(n2)) {
              t3[r2] = n2;
              continue;
            }
            if (typeof n2 == "string") {
              t3[r2] = new a(n2);
              continue;
            }
            s(typeof n2 == "object" && !Array.isArray(n2), "Invalid message for", r2);
            const o = r2;
            for (r2 in t3[o] = t3[o] || {}, n2) {
              const e4 = n2[r2];
              r2 === "root" || a.isTemplate(e4) ? t3[o][r2] = e4 : (s(typeof e4 == "string", "Invalid message for", r2, "in", o), t3[o][r2] = new a(e4));
            }
          }
          return t3;
        }, t2.decompile = function(e3) {
          const t3 = {};
          for (let r2 in e3) {
            const s2 = e3[r2];
            if (r2 === "root") {
              t3.root = s2;
              continue;
            }
            if (a.isTemplate(s2)) {
              t3[r2] = s2.describe({ compact: true });
              continue;
            }
            const n2 = r2;
            for (r2 in t3[n2] = {}, s2) {
              const e4 = s2[r2];
              r2 !== "root" ? t3[n2][r2] = e4.describe({ compact: true }) : t3[n2].root = e4;
            }
          }
          return t3;
        }, t2.merge = function(e3, r2) {
          if (!e3)
            return t2.compile(r2);
          if (!r2)
            return e3;
          if (typeof r2 == "string")
            return new a(r2);
          if (a.isTemplate(r2))
            return r2;
          const o = n(e3);
          for (let e4 in r2) {
            const t3 = r2[e4];
            if (e4 === "root" || a.isTemplate(t3)) {
              o[e4] = t3;
              continue;
            }
            if (typeof t3 == "string") {
              o[e4] = new a(t3);
              continue;
            }
            s(typeof t3 == "object" && !Array.isArray(t3), "Invalid message for", e4);
            const n2 = e4;
            for (e4 in o[n2] = o[n2] || {}, t3) {
              const r3 = t3[e4];
              e4 === "root" || a.isTemplate(r3) ? o[n2][e4] = r3 : (s(typeof r3 == "string", "Invalid message for", e4, "in", n2), o[n2][e4] = new a(r3));
            }
          }
          return o;
        };
      }, 2294: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8160), l = r(6133), c = {};
        t2.Ids = c.Ids = class {
          constructor() {
            this._byId = /* @__PURE__ */ new Map(), this._byKey = /* @__PURE__ */ new Map(), this._schemaChain = false;
          }
          clone() {
            const e3 = new c.Ids();
            return e3._byId = new Map(this._byId), e3._byKey = new Map(this._byKey), e3._schemaChain = this._schemaChain, e3;
          }
          concat(e3) {
            e3._schemaChain && (this._schemaChain = true);
            for (const [t3, r2] of e3._byId.entries())
              o(!this._byKey.has(t3), "Schema id conflicts with existing key:", t3), this._byId.set(t3, r2);
            for (const [t3, r2] of e3._byKey.entries())
              o(!this._byId.has(t3), "Schema key conflicts with existing id:", t3), this._byKey.set(t3, r2);
          }
          fork(e3, t3, r2) {
            const s2 = this._collect(e3);
            s2.push({ schema: r2 });
            const n2 = s2.shift();
            let a2 = { id: n2.id, schema: t3(n2.schema) };
            o(i.isSchema(a2.schema), "adjuster function failed to return a joi schema type");
            for (const e4 of s2)
              a2 = { id: e4.id, schema: c.fork(e4.schema, a2.id, a2.schema) };
            return a2.schema;
          }
          labels(e3, t3 = []) {
            const r2 = e3[0], s2 = this._get(r2);
            if (!s2)
              return [...t3, ...e3].join(".");
            const n2 = e3.slice(1);
            return t3 = [...t3, s2.schema._flags.label || r2], n2.length ? s2.schema._ids.labels(n2, t3) : t3.join(".");
          }
          reach(e3, t3 = []) {
            const r2 = e3[0], s2 = this._get(r2);
            o(s2, "Schema does not contain path", [...t3, ...e3].join("."));
            const n2 = e3.slice(1);
            return n2.length ? s2.schema._ids.reach(n2, [...t3, r2]) : s2.schema;
          }
          register(e3, { key: t3 } = {}) {
            if (!e3 || !i.isSchema(e3))
              return;
            (e3.$_property("schemaChain") || e3._ids._schemaChain) && (this._schemaChain = true);
            const r2 = e3._flags.id;
            if (r2) {
              const t4 = this._byId.get(r2);
              o(!t4 || t4.schema === e3, "Cannot add different schemas with the same id:", r2), o(!this._byKey.has(r2), "Schema id conflicts with existing key:", r2), this._byId.set(r2, { schema: e3, id: r2 });
            }
            t3 && (o(!this._byKey.has(t3), "Schema already contains key:", t3), o(!this._byId.has(t3), "Schema key conflicts with existing id:", t3), this._byKey.set(t3, { schema: e3, id: t3 }));
          }
          reset() {
            this._byId = /* @__PURE__ */ new Map(), this._byKey = /* @__PURE__ */ new Map(), this._schemaChain = false;
          }
          _collect(e3, t3 = [], r2 = []) {
            const s2 = e3[0], n2 = this._get(s2);
            o(n2, "Schema does not contain path", [...t3, ...e3].join(".")), r2 = [n2, ...r2];
            const a2 = e3.slice(1);
            return a2.length ? n2.schema._ids._collect(a2, [...t3, s2], r2) : r2;
          }
          _get(e3) {
            return this._byId.get(e3) || this._byKey.get(e3);
          }
        }, c.fork = function(e3, r2, s2) {
          const n2 = t2.schema(e3, { each: (e4, { key: t3 }) => {
            if (r2 === (e4._flags.id || t3))
              return s2;
          }, ref: false });
          return n2 ? n2.$_mutateRebuild() : e3;
        }, t2.schema = function(e3, t3) {
          let r2;
          for (const s2 in e3._flags) {
            if (s2[0] === "_")
              continue;
            const n2 = c.scan(e3._flags[s2], { source: "flags", name: s2 }, t3);
            n2 !== void 0 && (r2 = r2 || e3.clone(), r2._flags[s2] = n2);
          }
          for (let s2 = 0; s2 < e3._rules.length; ++s2) {
            const n2 = e3._rules[s2], a2 = c.scan(n2.args, { source: "rules", name: n2.name }, t3);
            if (a2 !== void 0) {
              r2 = r2 || e3.clone();
              const t4 = Object.assign({}, n2);
              t4.args = a2, r2._rules[s2] = t4, r2._singleRules.get(n2.name) === n2 && r2._singleRules.set(n2.name, t4);
            }
          }
          for (const s2 in e3.$_terms) {
            if (s2[0] === "_")
              continue;
            const n2 = c.scan(e3.$_terms[s2], { source: "terms", name: s2 }, t3);
            n2 !== void 0 && (r2 = r2 || e3.clone(), r2.$_terms[s2] = n2);
          }
          return r2;
        }, c.scan = function(e3, t3, r2, s2, a2) {
          const o2 = s2 || [];
          if (e3 === null || typeof e3 != "object")
            return;
          let u;
          if (Array.isArray(e3)) {
            for (let s3 = 0; s3 < e3.length; ++s3) {
              const n2 = t3.source === "terms" && t3.name === "keys" && e3[s3].key, a3 = c.scan(e3[s3], t3, r2, [s3, ...o2], n2);
              a3 !== void 0 && (u = u || e3.slice(), u[s3] = a3);
            }
            return u;
          }
          if (r2.schema !== false && i.isSchema(e3) || r2.ref !== false && l.isRef(e3)) {
            const s3 = r2.each(e3, n(n({}, t3), {}, { path: o2, key: a2 }));
            if (s3 === e3)
              return;
            return s3;
          }
          for (const s3 in e3) {
            if (s3[0] === "_")
              continue;
            const n2 = c.scan(e3[s3], t3, r2, [s3, ...o2], a2);
            n2 !== void 0 && (u = u || Object.assign({}, e3), u[s3] = n2);
          }
          return u;
        };
      }, 6133: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8571), l = r(9621), c = r(8160);
        let u;
        const f = { symbol: Symbol("ref"), defaults: { adjust: null, in: false, iterables: null, map: null, separator: ".", type: "value" } };
        t2.create = function(e3, t3 = {}) {
          o(typeof e3 == "string", "Invalid reference key:", e3), c.assertOptions(t3, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "render", "separator"]), o(!t3.prefix || typeof t3.prefix == "object", "options.prefix must be of type object");
          const r2 = Object.assign({}, f.defaults, t3);
          delete r2.prefix;
          const s2 = r2.separator, n2 = f.context(e3, s2, t3.prefix);
          if (r2.type = n2.type, e3 = n2.key, r2.type === "value")
            if (n2.root && (o(!s2 || e3[0] !== s2, "Cannot specify relative path with root prefix"), r2.ancestor = "root", e3 || (e3 = null)), s2 && s2 === e3)
              e3 = null, r2.ancestor = 0;
            else if (r2.ancestor !== void 0)
              o(!s2 || !e3 || e3[0] !== s2, "Cannot combine prefix with ancestor option");
            else {
              const [t4, n3] = f.ancestor(e3, s2);
              n3 && (e3 = e3.slice(n3)) === "" && (e3 = null), r2.ancestor = t4;
            }
          return r2.path = s2 ? e3 === null ? [] : e3.split(s2) : [e3], new f.Ref(r2);
        }, t2.in = function(e3, r2 = {}) {
          return t2.create(e3, n(n({}, r2), {}, { in: true }));
        }, t2.isRef = function(e3) {
          return !!e3 && !!e3[c.symbols.ref];
        }, f.Ref = class {
          constructor(e3) {
            o(typeof e3 == "object", "Invalid reference construction"), c.assertOptions(e3, ["adjust", "ancestor", "in", "iterables", "map", "path", "render", "separator", "type", "depth", "key", "root", "display"]), o([false, void 0].includes(e3.separator) || typeof e3.separator == "string" && e3.separator.length === 1, "Invalid separator"), o(!e3.adjust || typeof e3.adjust == "function", "options.adjust must be a function"), o(!e3.map || Array.isArray(e3.map), "options.map must be an array"), o(!e3.map || !e3.adjust, "Cannot set both map and adjust options"), Object.assign(this, f.defaults, e3), o(this.type === "value" || this.ancestor === void 0, "Non-value references cannot reference ancestors"), Array.isArray(this.map) && (this.map = new Map(this.map)), this.depth = this.path.length, this.key = this.path.length ? this.path.join(this.separator) : null, this.root = this.path[0], this.updateDisplay();
          }
          resolve(e3, t3, r2, s2, n2 = {}) {
            return o(!this.in || n2.in, "Invalid in() reference usage"), this.type === "global" ? this._resolve(r2.context, t3, n2) : this.type === "local" ? this._resolve(s2, t3, n2) : this.ancestor ? this.ancestor === "root" ? this._resolve(t3.ancestors[t3.ancestors.length - 1], t3, n2) : (o(this.ancestor <= t3.ancestors.length, "Invalid reference exceeds the schema root:", this.display), this._resolve(t3.ancestors[this.ancestor - 1], t3, n2)) : this._resolve(e3, t3, n2);
          }
          _resolve(e3, t3, r2) {
            let s2;
            if (this.type === "value" && t3.mainstay.shadow && r2.shadow !== false && (s2 = t3.mainstay.shadow.get(this.absolute(t3))), s2 === void 0 && (s2 = l(e3, this.path, { iterables: this.iterables, functions: true })), this.adjust && (s2 = this.adjust(s2)), this.map) {
              const e4 = this.map.get(s2);
              e4 !== void 0 && (s2 = e4);
            }
            return t3.mainstay && t3.mainstay.tracer.resolve(t3, this, s2), s2;
          }
          toString() {
            return this.display;
          }
          absolute(e3) {
            return [...e3.path.slice(0, -this.ancestor), ...this.path];
          }
          clone() {
            return new f.Ref(this);
          }
          describe() {
            const e3 = { path: this.path };
            this.type !== "value" && (e3.type = this.type), this.separator !== "." && (e3.separator = this.separator), this.type === "value" && this.ancestor !== 1 && (e3.ancestor = this.ancestor), this.map && (e3.map = [...this.map]);
            for (const t3 of ["adjust", "iterables", "render"])
              this[t3] !== null && this[t3] !== void 0 && (e3[t3] = this[t3]);
            return this.in !== false && (e3.in = true), { ref: e3 };
          }
          updateDisplay() {
            const e3 = this.key !== null ? this.key : "";
            if (this.type !== "value")
              return void (this.display = "ref:".concat(this.type, ":").concat(e3));
            if (!this.separator)
              return void (this.display = "ref:".concat(e3));
            if (!this.ancestor)
              return void (this.display = "ref:".concat(this.separator).concat(e3));
            if (this.ancestor === "root")
              return void (this.display = "ref:root:".concat(e3));
            if (this.ancestor === 1)
              return void (this.display = "ref:".concat(e3 || ".."));
            const t3 = new Array(this.ancestor + 1).fill(this.separator).join("");
            this.display = "ref:".concat(t3).concat(e3 || "");
          }
        }, f.Ref.prototype[c.symbols.ref] = true, t2.build = function(e3) {
          return (e3 = Object.assign({}, f.defaults, e3)).type === "value" && e3.ancestor === void 0 && (e3.ancestor = 1), new f.Ref(e3);
        }, f.context = function(e3, t3, r2 = {}) {
          if (e3 = e3.trim(), r2) {
            const s2 = r2.global === void 0 ? "$" : r2.global;
            if (s2 !== t3 && e3.startsWith(s2))
              return { key: e3.slice(s2.length), type: "global" };
            const n2 = r2.local === void 0 ? "#" : r2.local;
            if (n2 !== t3 && e3.startsWith(n2))
              return { key: e3.slice(n2.length), type: "local" };
            const a2 = r2.root === void 0 ? "/" : r2.root;
            if (a2 !== t3 && e3.startsWith(a2))
              return { key: e3.slice(a2.length), type: "value", root: true };
          }
          return { key: e3, type: "value" };
        }, f.ancestor = function(e3, t3) {
          if (!t3)
            return [1, 0];
          if (e3[0] !== t3)
            return [1, 0];
          if (e3[1] !== t3)
            return [0, 1];
          let r2 = 2;
          for (; e3[r2] === t3; )
            ++r2;
          return [r2 - 1, r2];
        }, t2.toSibling = 0, t2.toParent = 1, t2.Manager = class {
          constructor() {
            this.refs = [];
          }
          register(e3, s2) {
            if (e3)
              if (s2 = s2 === void 0 ? t2.toParent : s2, Array.isArray(e3))
                for (const t3 of e3)
                  this.register(t3, s2);
              else if (c.isSchema(e3))
                for (const t3 of e3._refs.refs)
                  t3.ancestor - s2 >= 0 && this.refs.push({ ancestor: t3.ancestor - s2, root: t3.root });
              else
                t2.isRef(e3) && e3.type === "value" && e3.ancestor - s2 >= 0 && this.refs.push({ ancestor: e3.ancestor - s2, root: e3.root }), u = u || r(3328), u.isTemplate(e3) && this.register(e3.refs(), s2);
          }
          get length() {
            return this.refs.length;
          }
          clone() {
            const e3 = new t2.Manager();
            return e3.refs = i(this.refs), e3;
          }
          reset() {
            this.refs = [];
          }
          roots() {
            return this.refs.filter((e3) => !e3.ancestor).map((e3) => e3.root);
          }
        };
      }, 3378: (e2, t2, r) => {
        "use strict";
        const s = r(5107), n = {};
        n.wrap = s.string().min(1).max(2).allow(false), t2.preferences = s.object({ allowUnknown: s.boolean(), abortEarly: s.boolean(), artifacts: s.boolean(), cache: s.boolean(), context: s.object(), convert: s.boolean(), dateFormat: s.valid("date", "iso", "string", "time", "utc"), debug: s.boolean(), errors: { escapeHtml: s.boolean(), label: s.valid("path", "key", false), language: [s.string(), s.object().ref()], render: s.boolean(), stack: s.boolean(), wrap: { label: n.wrap, array: n.wrap, string: n.wrap } }, externals: s.boolean(), messages: s.object(), noDefaults: s.boolean(), nonEnumerables: s.boolean(), presence: s.valid("required", "optional", "forbidden"), skipFunctions: s.boolean(), stripUnknown: s.object({ arrays: s.boolean(), objects: s.boolean() }).or("arrays", "objects").allow(true, false), warnings: s.boolean() }).strict(), n.nameRx = /^[a-zA-Z0-9]\w*$/, n.rule = s.object({ alias: s.array().items(s.string().pattern(n.nameRx)).single(), args: s.array().items(s.string(), s.object({ name: s.string().pattern(n.nameRx).required(), ref: s.boolean(), assert: s.alternatives([s.function(), s.object().schema()]).conditional("ref", { is: true, then: s.required() }), normalize: s.function(), message: s.string().when("assert", { is: s.function(), then: s.required() }) })), convert: s.boolean(), manifest: s.boolean(), method: s.function().allow(false), multi: s.boolean(), validate: s.function() }), t2.extension = s.object({ type: s.alternatives([s.string(), s.object().regex()]).required(), args: s.function(), cast: s.object().pattern(n.nameRx, s.object({ from: s.function().maxArity(1).required(), to: s.function().minArity(1).maxArity(2).required() })), base: s.object().schema().when("type", { is: s.object().regex(), then: s.forbidden() }), coerce: [s.function().maxArity(3), s.object({ method: s.function().maxArity(3).required(), from: s.array().items(s.string()).single() })], flags: s.object().pattern(n.nameRx, s.object({ setter: s.string(), default: s.any() })), manifest: { build: s.function().arity(2) }, messages: [s.object(), s.string()], modifiers: s.object().pattern(n.nameRx, s.function().minArity(1).maxArity(2)), overrides: s.object().pattern(n.nameRx, s.function()), prepare: s.function().maxArity(3), rebuild: s.function().arity(1), rules: s.object().pattern(n.nameRx, n.rule), terms: s.object().pattern(n.nameRx, s.object({ init: s.array().allow(null).required(), manifest: s.object().pattern(/.+/, [s.valid("schema", "single"), s.object({ mapped: s.object({ from: s.string().required(), to: s.string().required() }).required() })]) })), validate: s.function().maxArity(3) }).strict(), t2.extensions = s.array().items(s.object(), s.function().arity(1)).strict(), n.desc = { buffer: s.object({ buffer: s.string() }), func: s.object({ function: s.function().required(), options: { literal: true } }), override: s.object({ override: true }), ref: s.object({ ref: s.object({ type: s.valid("value", "global", "local"), path: s.array().required(), separator: s.string().length(1).allow(false), ancestor: s.number().min(0).integer().allow("root"), map: s.array().items(s.array().length(2)).min(1), adjust: s.function(), iterables: s.boolean(), in: s.boolean(), render: s.boolean() }).required() }), regex: s.object({ regex: s.string().min(3) }), special: s.object({ special: s.valid("deep").required() }), template: s.object({ template: s.string().required(), options: s.object() }), value: s.object({ value: s.alternatives([s.object(), s.array()]).required() }) }, n.desc.entity = s.alternatives([s.array().items(s.link("...")), s.boolean(), s.function(), s.number(), s.string(), n.desc.buffer, n.desc.func, n.desc.ref, n.desc.regex, n.desc.special, n.desc.template, n.desc.value, s.link("/")]), n.desc.values = s.array().items(null, s.boolean(), s.function(), s.number().allow(1 / 0, -1 / 0), s.string().allow(""), s.symbol(), n.desc.buffer, n.desc.func, n.desc.override, n.desc.ref, n.desc.regex, n.desc.template, n.desc.value), n.desc.messages = s.object().pattern(/.+/, [s.string(), n.desc.template, s.object().pattern(/.+/, [s.string(), n.desc.template])]), t2.description = s.object({ type: s.string().required(), flags: s.object({ cast: s.string(), default: s.any(), description: s.string(), empty: s.link("/"), failover: n.desc.entity, id: s.string(), label: s.string(), only: true, presence: ["optional", "required", "forbidden"], result: ["raw", "strip"], strip: s.boolean(), unit: s.string() }).unknown(), preferences: { allowUnknown: s.boolean(), abortEarly: s.boolean(), artifacts: s.boolean(), cache: s.boolean(), convert: s.boolean(), dateFormat: ["date", "iso", "string", "time", "utc"], errors: { escapeHtml: s.boolean(), label: ["path", "key"], language: [s.string(), n.desc.ref], wrap: { label: n.wrap, array: n.wrap } }, externals: s.boolean(), messages: n.desc.messages, noDefaults: s.boolean(), nonEnumerables: s.boolean(), presence: ["required", "optional", "forbidden"], skipFunctions: s.boolean(), stripUnknown: s.object({ arrays: s.boolean(), objects: s.boolean() }).or("arrays", "objects").allow(true, false), warnings: s.boolean() }, allow: n.desc.values, invalid: n.desc.values, rules: s.array().min(1).items({ name: s.string().required(), args: s.object().min(1), keep: s.boolean(), message: [s.string(), n.desc.messages], warn: s.boolean() }), keys: s.object().pattern(/.*/, s.link("/")), link: n.desc.ref }).pattern(/^[a-z]\w*$/, s.any());
      }, 493: (e2, t2, r) => {
        "use strict";
        const s = r(8571), n = r(9621), a = r(8160), o = { value: Symbol("value") };
        e2.exports = o.State = class {
          constructor(e3, t3, r2) {
            this.path = e3, this.ancestors = t3, this.mainstay = r2.mainstay, this.schemas = r2.schemas, this.debug = null;
          }
          localize(e3, t3 = null, r2 = null) {
            const s2 = new o.State(e3, t3, this);
            return r2 && s2.schemas && (s2.schemas = [o.schemas(r2), ...s2.schemas]), s2;
          }
          nest(e3, t3) {
            const r2 = new o.State(this.path, this.ancestors, this);
            return r2.schemas = r2.schemas && [o.schemas(e3), ...r2.schemas], r2.debug = t3, r2;
          }
          shadow(e3, t3) {
            this.mainstay.shadow = this.mainstay.shadow || new o.Shadow(), this.mainstay.shadow.set(this.path, e3, t3);
          }
          snapshot() {
            this.mainstay.shadow && (this._snapshot = s(this.mainstay.shadow.node(this.path)));
          }
          restore() {
            this.mainstay.shadow && (this.mainstay.shadow.override(this.path, this._snapshot), this._snapshot = void 0);
          }
        }, o.schemas = function(e3) {
          return a.isSchema(e3) ? { schema: e3 } : e3;
        }, o.Shadow = class {
          constructor() {
            this._values = null;
          }
          set(e3, t3, r2) {
            if (!e3.length)
              return;
            if (r2 === "strip" && typeof e3[e3.length - 1] == "number")
              return;
            this._values = this._values || /* @__PURE__ */ new Map();
            let s2 = this._values;
            for (let t4 = 0; t4 < e3.length; ++t4) {
              const r3 = e3[t4];
              let n2 = s2.get(r3);
              n2 || (n2 = /* @__PURE__ */ new Map(), s2.set(r3, n2)), s2 = n2;
            }
            s2[o.value] = t3;
          }
          get(e3) {
            const t3 = this.node(e3);
            if (t3)
              return t3[o.value];
          }
          node(e3) {
            if (this._values)
              return n(this._values, e3, { iterables: true });
          }
          override(e3, t3) {
            if (!this._values)
              return;
            const r2 = e3.slice(0, -1), s2 = e3[e3.length - 1], a2 = n(this._values, r2, { iterables: true });
            t3 ? a2.set(s2, t3) : a2 && a2.delete(s2);
          }
        };
      }, 3328: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8571), l = r(5277), c = r(1447), u = r(8160), f = r(6354), m = r(6133), h = { symbol: Symbol("template"), opens: new Array(1e3).join("\0"), closes: new Array(1e3).join(""), dateFormat: { date: Date.prototype.toDateString, iso: Date.prototype.toISOString, string: Date.prototype.toString, time: Date.prototype.toTimeString, utc: Date.prototype.toUTCString } };
        e2.exports = h.Template = class {
          constructor(e3, t3) {
            o(typeof e3 == "string", "Template source must be a string"), o(!e3.includes("\0") && !e3.includes(""), "Template source cannot contain reserved control characters"), this.source = e3, this.rendered = e3, this._template = null, this._settings = i(t3), this._parse();
          }
          _parse() {
            if (!this.source.includes("{"))
              return;
            const e3 = h.encode(this.source), t3 = h.split(e3);
            let r2 = false;
            const s2 = [], n2 = t3.shift();
            n2 && s2.push(n2);
            for (const e4 of t3) {
              const t4 = e4[0] !== "{", n3 = t4 ? "}" : "}}", a2 = e4.indexOf(n3);
              if (a2 === -1 || e4[1] === "{") {
                s2.push("{".concat(h.decode(e4)));
                continue;
              }
              let o2 = e4.slice(t4 ? 0 : 1, a2);
              const i2 = o2[0] === ":";
              i2 && (o2 = o2.slice(1));
              const l2 = this._ref(h.decode(o2), { raw: t4, wrapped: i2 });
              s2.push(l2), typeof l2 != "string" && (r2 = true);
              const c2 = e4.slice(a2 + n3.length);
              c2 && s2.push(h.decode(c2));
            }
            r2 ? this._template = s2 : this.rendered = s2.join("");
          }
          static date(e3, t3) {
            return h.dateFormat[t3.dateFormat].call(e3);
          }
          describe(e3 = {}) {
            if (!this._settings && e3.compact)
              return this.source;
            const t3 = { template: this.source };
            return this._settings && (t3.options = this._settings), t3;
          }
          static build(e3) {
            return new h.Template(e3.template, e3.options);
          }
          isDynamic() {
            return !!this._template;
          }
          static isTemplate(e3) {
            return !!e3 && !!e3[u.symbols.template];
          }
          refs() {
            if (!this._template)
              return;
            const e3 = [];
            for (const t3 of this._template)
              typeof t3 != "string" && e3.push(...t3.refs);
            return e3;
          }
          resolve(e3, t3, r2, s2) {
            return this._template && this._template.length === 1 ? this._part(this._template[0], e3, t3, r2, s2, {}) : this.render(e3, t3, r2, s2);
          }
          _part(e3, ...t3) {
            return e3.ref ? e3.ref.resolve(...t3) : e3.formula.evaluate(t3);
          }
          render(e3, t3, r2, s2, n2 = {}) {
            if (!this.isDynamic())
              return this.rendered;
            const a2 = [];
            for (const o2 of this._template)
              if (typeof o2 == "string")
                a2.push(o2);
              else {
                const i2 = this._part(o2, e3, t3, r2, s2, n2), c2 = h.stringify(i2, e3, t3, r2, s2, n2);
                if (c2 !== void 0) {
                  const e4 = o2.raw || (n2.errors && n2.errors.escapeHtml) === false ? c2 : l(c2);
                  a2.push(h.wrap(e4, o2.wrapped && r2.errors.wrap.label));
                }
              }
            return a2.join("");
          }
          _ref(e3, { raw: t3, wrapped: r2 }) {
            const s2 = [], n2 = (e4) => {
              const t4 = m.create(e4, this._settings);
              return s2.push(t4), (e5) => t4.resolve(...e5);
            };
            try {
              var a2 = new c.Parser(e3, { reference: n2, functions: h.functions, constants: h.constants });
            } catch (t4) {
              throw t4.message = 'Invalid template variable "'.concat(e3, '" fails due to: ').concat(t4.message), t4;
            }
            if (a2.single) {
              if (a2.single.type === "reference") {
                const e4 = s2[0];
                return { ref: e4, raw: t3, refs: s2, wrapped: r2 || e4.type === "local" && e4.key === "label" };
              }
              return h.stringify(a2.single.value);
            }
            return { formula: a2, raw: t3, refs: s2 };
          }
          toString() {
            return this.source;
          }
        }, h.Template.prototype[u.symbols.template] = true, h.Template.prototype.isImmutable = true, h.encode = function(e3) {
          return e3.replace(/\\(\{+)/g, (e4, t3) => h.opens.slice(0, t3.length)).replace(/\\(\}+)/g, (e4, t3) => h.closes.slice(0, t3.length));
        }, h.decode = function(e3) {
          return e3.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
        }, h.split = function(e3) {
          const t3 = [];
          let r2 = "";
          for (let s2 = 0; s2 < e3.length; ++s2) {
            const n2 = e3[s2];
            if (n2 === "{") {
              let n3 = "";
              for (; s2 + 1 < e3.length && e3[s2 + 1] === "{"; )
                n3 += "{", ++s2;
              t3.push(r2), r2 = n3;
            } else
              r2 += n2;
          }
          return t3.push(r2), t3;
        }, h.wrap = function(e3, t3) {
          return t3 ? t3.length === 1 ? "".concat(t3).concat(e3).concat(t3) : "".concat(t3[0]).concat(e3).concat(t3[1]) : e3;
        }, h.stringify = function(e3, t3, r2, s2, a2, o2 = {}) {
          const i2 = typeof e3, l2 = s2 && s2.errors && s2.errors.wrap || {};
          let c2 = false;
          if (m.isRef(e3) && e3.render && (c2 = e3.in, e3 = e3.resolve(t3, r2, s2, a2, n({ in: e3.in }, o2))), e3 === null)
            return "null";
          if (i2 === "string")
            return h.wrap(e3, o2.arrayItems && l2.string);
          if (i2 === "number" || i2 === "function" || i2 === "symbol")
            return e3.toString();
          if (i2 !== "object")
            return JSON.stringify(e3);
          if (e3 instanceof Date)
            return h.Template.date(e3, s2);
          if (e3 instanceof Map) {
            const t4 = [];
            for (const [r3, s3] of e3.entries())
              t4.push("".concat(r3.toString(), " -> ").concat(s3.toString()));
            e3 = t4;
          }
          if (!Array.isArray(e3))
            return e3.toString();
          const u2 = [];
          for (const i3 of e3)
            u2.push(h.stringify(i3, t3, r2, s2, a2, n({ arrayItems: true }, o2)));
          return h.wrap(u2.join(", "), !c2 && l2.array);
        }, h.constants = { true: true, false: false, null: null, second: 1e3, minute: 6e4, hour: 36e5, day: 864e5 }, h.functions = { if: (e3, t3, r2) => e3 ? t3 : r2, length: (e3) => typeof e3 == "string" ? e3.length : e3 && typeof e3 == "object" ? Array.isArray(e3) ? e3.length : Object.keys(e3).length : null, msg(e3) {
          const [t3, r2, s2, n2, a2] = this, o2 = a2.messages;
          if (!o2)
            return "";
          const i2 = f.template(t3, o2[0], e3, r2, s2) || f.template(t3, o2[1], e3, r2, s2);
          return i2 ? i2.render(t3, r2, s2, n2, a2) : "";
        }, number: (e3) => typeof e3 == "number" ? e3 : typeof e3 == "string" ? parseFloat(e3) : typeof e3 == "boolean" ? e3 ? 1 : 0 : e3 instanceof Date ? e3.getTime() : null };
      }, 4946: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(1687), a = r(8068), o = r(8160), i = r(3292), l = r(6354), c = r(6133), u = {};
        e2.exports = a.extend({ type: "alternatives", flags: { match: { default: "any" } }, terms: { matches: { init: [], register: c.toSibling } }, args: (e3, ...t3) => t3.length === 1 && Array.isArray(t3[0]) ? e3.try(...t3[0]) : e3.try(...t3), validate(e3, t3) {
          const { schema: r2, error: s2, state: a2, prefs: o2 } = t3;
          if (r2._flags.match) {
            const t4 = [], i3 = [];
            for (let s3 = 0; s3 < r2.$_terms.matches.length; ++s3) {
              const n2 = r2.$_terms.matches[s3], l2 = a2.nest(n2.schema, "match.".concat(s3));
              l2.snapshot();
              const c3 = n2.schema.$_validate(e3, l2, o2);
              c3.errors ? (i3.push(c3.errors), l2.restore()) : t4.push(c3.value);
            }
            if (t4.length === 0)
              return { errors: s2("alternatives.any", { details: i3.map((e4) => l.details(e4, { override: false })) }) };
            if (r2._flags.match === "one")
              return t4.length === 1 ? { value: t4[0] } : { errors: s2("alternatives.one") };
            if (t4.length !== r2.$_terms.matches.length)
              return { errors: s2("alternatives.all", { details: i3.map((e4) => l.details(e4, { override: false })) }) };
            const c2 = (e4) => e4.$_terms.matches.some((e5) => e5.schema.type === "object" || e5.schema.type === "alternatives" && c2(e5.schema));
            return c2(r2) ? { value: t4.reduce((e4, t5) => n(e4, t5, { mergeArrays: false })) } : { value: t4[t4.length - 1] };
          }
          const i2 = [];
          for (let t4 = 0; t4 < r2.$_terms.matches.length; ++t4) {
            const s3 = r2.$_terms.matches[t4];
            if (s3.schema) {
              const r3 = a2.nest(s3.schema, "match.".concat(t4));
              r3.snapshot();
              const n3 = s3.schema.$_validate(e3, r3, o2);
              if (!n3.errors)
                return n3;
              r3.restore(), i2.push({ schema: s3.schema, reports: n3.errors });
              continue;
            }
            const n2 = s3.ref ? s3.ref.resolve(e3, a2, o2) : e3, l2 = s3.is ? [s3] : s3.switch;
            for (let r3 = 0; r3 < l2.length; ++r3) {
              const i3 = l2[r3], { is: c2, then: u2, otherwise: f } = i3, m = "match.".concat(t4).concat(s3.switch ? "." + r3 : "");
              if (c2.$_match(n2, a2.nest(c2, "".concat(m, ".is")), o2)) {
                if (u2)
                  return u2.$_validate(e3, a2.nest(u2, "".concat(m, ".then")), o2);
              } else if (f)
                return f.$_validate(e3, a2.nest(f, "".concat(m, ".otherwise")), o2);
            }
          }
          return u.errors(i2, t3);
        }, rules: { conditional: { method(e3, t3) {
          s(!this._flags._endedSwitch, "Unreachable condition"), s(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule"), s(t3.break === void 0, "Cannot use break option with alternatives conditional");
          const r2 = this.clone(), n2 = i.when(r2, e3, t3), a2 = n2.is ? [n2] : n2.switch;
          for (const e4 of a2)
            if (e4.then && e4.otherwise) {
              r2.$_setFlag("_endedSwitch", true, { clone: false });
              break;
            }
          return r2.$_terms.matches.push(n2), r2.$_mutateRebuild();
        } }, match: { method(e3) {
          if (s(["any", "one", "all"].includes(e3), "Invalid alternatives match mode", e3), e3 !== "any")
            for (const t3 of this.$_terms.matches)
              s(t3.schema, "Cannot combine match mode", e3, "with conditional rules");
          return this.$_setFlag("match", e3);
        } }, try: { method(...e3) {
          s(e3.length, "Missing alternative schemas"), o.verifyFlat(e3, "try"), s(!this._flags._endedSwitch, "Unreachable condition");
          const t3 = this.clone();
          for (const r2 of e3)
            t3.$_terms.matches.push({ schema: t3.$_compile(r2) });
          return t3.$_mutateRebuild();
        } } }, overrides: { label(e3) {
          return this.$_parent("label", e3).$_modify({ each: (t3, r2) => r2.path[0] !== "is" ? t3.label(e3) : void 0, ref: false });
        } }, rebuild(e3) {
          e3.$_modify({ each: (t3) => {
            o.isSchema(t3) && t3.type === "array" && e3.$_setFlag("_arrayItems", true, { clone: false });
          } });
        }, manifest: { build(e3, t3) {
          if (t3.matches)
            for (const r2 of t3.matches) {
              const { schema: t4, ref: s2, is: n2, not: a2, then: o2, otherwise: i2 } = r2;
              e3 = t4 ? e3.try(t4) : s2 ? e3.conditional(s2, { is: n2, then: o2, not: a2, otherwise: i2, switch: r2.switch }) : e3.conditional(n2, { then: o2, otherwise: i2 });
            }
          return e3;
        } }, messages: { "alternatives.all": "{{#label}} does not match all of the required types", "alternatives.any": "{{#label}} does not match any of the allowed types", "alternatives.match": "{{#label}} does not match any of the allowed types", "alternatives.one": "{{#label}} matches more than one allowed type", "alternatives.types": "{{#label}} must be one of {{#types}}" } }), u.errors = function(e3, { error: t3, state: r2 }) {
          if (!e3.length)
            return { errors: t3("alternatives.any") };
          if (e3.length === 1)
            return { errors: e3[0].reports };
          const s2 = /* @__PURE__ */ new Set(), n2 = [];
          for (const { reports: a2, schema: o2 } of e3) {
            if (a2.length > 1)
              return u.unmatched(e3, t3);
            const i2 = a2[0];
            if (i2 instanceof l.Report == 0)
              return u.unmatched(e3, t3);
            if (i2.state.path.length !== r2.path.length) {
              n2.push({ type: o2.type, report: i2 });
              continue;
            }
            if (i2.code === "any.only") {
              for (const e4 of i2.local.valids)
                s2.add(e4);
              continue;
            }
            const [c2, f] = i2.code.split(".");
            f === "base" ? s2.add(c2) : n2.push({ type: o2.type, report: i2 });
          }
          return n2.length ? n2.length === 1 ? { errors: n2[0].report } : u.unmatched(e3, t3) : { errors: t3("alternatives.types", { types: [...s2] }) };
        }, u.unmatched = function(e3, t3) {
          const r2 = [];
          for (const t4 of e3)
            r2.push(...t4.reports);
          return { errors: t3("alternatives.match", l.details(r2, { override: false })) };
        };
      }, 8068: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7629), a = r(8160), o = r(6914);
        e2.exports = n.extend({ type: "any", flags: { only: { default: false } }, terms: { alterations: { init: null }, examples: { init: null }, externals: { init: null }, metas: { init: [] }, notes: { init: [] }, shared: { init: null }, tags: { init: [] }, whens: { init: null } }, rules: { custom: { method(e3, t3) {
          return s(typeof e3 == "function", "Method must be a function"), s(t3 === void 0 || t3 && typeof t3 == "string", "Description must be a non-empty string"), this.$_addRule({ name: "custom", args: { method: e3, description: t3 } });
        }, validate(e3, t3, { method: r2 }) {
          try {
            return r2(e3, t3);
          } catch (e4) {
            return t3.error("any.custom", { error: e4 });
          }
        }, args: ["method", "description"], multi: true }, messages: { method(e3) {
          return this.prefs({ messages: e3 });
        } }, shared: { method(e3) {
          s(a.isSchema(e3) && e3._flags.id, "Schema must be a schema with an id");
          const t3 = this.clone();
          return t3.$_terms.shared = t3.$_terms.shared || [], t3.$_terms.shared.push(e3), t3.$_mutateRegister(e3), t3;
        } }, warning: { method(e3, t3) {
          return s(e3 && typeof e3 == "string", "Invalid warning code"), this.$_addRule({ name: "warning", args: { code: e3, local: t3 }, warn: true });
        }, validate: (e3, t3, { code: r2, local: s2 }) => t3.error(r2, s2), args: ["code", "local"], multi: true } }, modifiers: { keep(e3, t3 = true) {
          e3.keep = t3;
        }, message(e3, t3) {
          e3.message = o.compile(t3);
        }, warn(e3, t3 = true) {
          e3.warn = t3;
        } }, manifest: { build(e3, t3) {
          for (const r2 in t3) {
            const s2 = t3[r2];
            if (["examples", "externals", "metas", "notes", "tags"].includes(r2))
              for (const t4 of s2)
                e3 = e3[r2.slice(0, -1)](t4);
            else if (r2 !== "alterations")
              if (r2 !== "whens") {
                if (r2 === "shared")
                  for (const t4 of s2)
                    e3 = e3.shared(t4);
              } else
                for (const t4 of s2) {
                  const { ref: r3, is: s3, not: n2, then: a2, otherwise: o2, concat: i } = t4;
                  e3 = i ? e3.concat(i) : r3 ? e3.when(r3, { is: s3, not: n2, then: a2, otherwise: o2, switch: t4.switch, break: t4.break }) : e3.when(s3, { then: a2, otherwise: o2, break: t4.break });
                }
            else {
              const t4 = {};
              for (const { target: e4, adjuster: r3 } of s2)
                t4[e4] = r3;
              e3 = e3.alter(t4);
            }
          }
          return e3;
        } }, messages: { "any.custom": "{{#label}} failed custom validation because {{#error.message}}", "any.default": "{{#label}} threw an error when running default method", "any.failover": "{{#label}} threw an error when running failover method", "any.invalid": "{{#label}} contains an invalid value", "any.only": '{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}', "any.ref": "{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}", "any.required": "{{#label}} is required", "any.unknown": "{{#label}} is not allowed" } });
      }, 546: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(9474), a = r(9621), o = r(8068), i = r(8160), l = r(3292), c = {};
        e2.exports = o.extend({ type: "array", flags: { single: { default: false }, sparse: { default: false } }, terms: { items: { init: [], manifest: "schema" }, ordered: { init: [], manifest: "schema" }, _exclusions: { init: [] }, _inclusions: { init: [] }, _requireds: { init: [] } }, coerce: { from: "object", method(e3, { schema: t3, state: r2, prefs: s2 }) {
          if (!Array.isArray(e3))
            return;
          const n2 = t3.$_getRule("sort");
          return n2 ? c.sort(t3, e3, n2.args.options, r2, s2) : void 0;
        } }, validate(e3, { schema: t3, error: r2 }) {
          if (!Array.isArray(e3)) {
            if (t3._flags.single) {
              const t4 = [e3];
              return t4[i.symbols.arraySingle] = true, { value: t4 };
            }
            return { errors: r2("array.base") };
          }
          if (t3.$_getRule("items") || t3.$_terms.externals)
            return { value: e3.slice() };
        }, rules: { has: { method(e3) {
          e3 = this.$_compile(e3, { appendPath: true });
          const t3 = this.$_addRule({ name: "has", args: { schema: e3 } });
          return t3.$_mutateRegister(e3), t3;
        }, validate(e3, { state: t3, prefs: r2, error: s2 }, { schema: n2 }) {
          const a2 = [e3, ...t3.ancestors];
          for (let s3 = 0; s3 < e3.length; ++s3) {
            const o3 = t3.localize([...t3.path, s3], a2, n2);
            if (n2.$_match(e3[s3], o3, r2))
              return e3;
          }
          const o2 = n2._flags.label;
          return o2 ? s2("array.hasKnown", { patternLabel: o2 }) : s2("array.hasUnknown", null);
        }, multi: true }, items: { method(...e3) {
          i.verifyFlat(e3, "items");
          const t3 = this.$_addRule("items");
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const s2 = i.tryWithPath(() => this.$_compile(e3[r2]), r2, { append: true });
            t3.$_terms.items.push(s2);
          }
          return t3.$_mutateRebuild();
        }, validate(e3, { schema: t3, error: r2, state: s2, prefs: n2, errorsArray: a2 }) {
          const o2 = t3.$_terms._requireds.slice(), l2 = t3.$_terms.ordered.slice(), u = [...t3.$_terms._inclusions, ...o2], f = !e3[i.symbols.arraySingle];
          delete e3[i.symbols.arraySingle];
          const m = a2();
          let h = e3.length;
          for (let a3 = 0; a3 < h; ++a3) {
            const i2 = e3[a3];
            let d = false, p = false;
            const g = f ? a3 : new Number(a3), y = [...s2.path, g];
            if (!t3._flags.sparse && i2 === void 0) {
              if (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly)
                return m;
              l2.shift();
              continue;
            }
            const b = [e3, ...s2.ancestors];
            for (const e4 of t3.$_terms._exclusions)
              if (e4.$_match(i2, s2.localize(y, b, e4), n2, { presence: "ignore" })) {
                if (m.push(r2("array.excludes", { pos: a3, value: i2 }, s2.localize(y))), n2.abortEarly)
                  return m;
                d = true, l2.shift();
                break;
              }
            if (d)
              continue;
            if (t3.$_terms.ordered.length) {
              if (l2.length) {
                const o3 = l2.shift(), u2 = o3.$_validate(i2, s2.localize(y, b, o3), n2);
                if (u2.errors) {
                  if (m.push(...u2.errors), n2.abortEarly)
                    return m;
                } else if (o3._flags.result === "strip")
                  c.fastSplice(e3, a3), --a3, --h;
                else {
                  if (!t3._flags.sparse && u2.value === void 0) {
                    if (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly)
                      return m;
                    continue;
                  }
                  e3[a3] = u2.value;
                }
                continue;
              }
              if (!t3.$_terms.items.length) {
                if (m.push(r2("array.orderedLength", { pos: a3, limit: t3.$_terms.ordered.length })), n2.abortEarly)
                  return m;
                break;
              }
            }
            const v = [];
            let _ = o2.length;
            for (let l3 = 0; l3 < _; ++l3) {
              const u2 = s2.localize(y, b, o2[l3]);
              u2.snapshot();
              const f2 = o2[l3].$_validate(i2, u2, n2);
              if (v[l3] = f2, !f2.errors) {
                if (e3[a3] = f2.value, p = true, c.fastSplice(o2, l3), --l3, --_, !t3._flags.sparse && f2.value === void 0 && (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly))
                  return m;
                break;
              }
              u2.restore();
            }
            if (p)
              continue;
            const w = n2.stripUnknown && !!n2.stripUnknown.arrays || false;
            _ = u.length;
            for (const l3 of u) {
              let u2;
              const f2 = o2.indexOf(l3);
              if (f2 !== -1)
                u2 = v[f2];
              else {
                const o3 = s2.localize(y, b, l3);
                if (o3.snapshot(), u2 = l3.$_validate(i2, o3, n2), !u2.errors) {
                  l3._flags.result === "strip" ? (c.fastSplice(e3, a3), --a3, --h) : t3._flags.sparse || u2.value !== void 0 ? e3[a3] = u2.value : (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), d = true), p = true;
                  break;
                }
                o3.restore();
              }
              if (_ === 1) {
                if (w) {
                  c.fastSplice(e3, a3), --a3, --h, p = true;
                  break;
                }
                if (m.push(...u2.errors), n2.abortEarly)
                  return m;
                d = true;
                break;
              }
            }
            if (!d && (t3.$_terms._inclusions.length || t3.$_terms._requireds.length) && !p) {
              if (w) {
                c.fastSplice(e3, a3), --a3, --h;
                continue;
              }
              if (m.push(r2("array.includes", { pos: a3, value: i2 }, s2.localize(y))), n2.abortEarly)
                return m;
            }
          }
          return o2.length && c.fillMissedErrors(t3, m, o2, e3, s2, n2), l2.length && (c.fillOrderedErrors(t3, m, l2, e3, s2, n2), m.length || c.fillDefault(l2, e3, s2, n2)), m.length ? m : e3;
        }, priority: true, manifest: false }, length: { method(e3) {
          return this.$_addRule({ name: "length", args: { limit: e3 }, operator: "=" });
        }, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: a2 }) => i.compare(e3.length, r2, n2) ? e3 : t3.error("array." + s2, { limit: a2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: i.limit, message: "must be a positive integer" }] }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "length", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "length", args: { limit: e3 }, operator: ">=" });
        } }, ordered: { method(...e3) {
          i.verifyFlat(e3, "ordered");
          const t3 = this.$_addRule("items");
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const s2 = i.tryWithPath(() => this.$_compile(e3[r2]), r2, { append: true });
            c.validateSingle(s2, t3), t3.$_mutateRegister(s2), t3.$_terms.ordered.push(s2);
          }
          return t3.$_mutateRebuild();
        } }, single: { method(e3) {
          const t3 = e3 === void 0 || !!e3;
          return s(!t3 || !this._flags._arrayItems, "Cannot specify single rule when array has array items"), this.$_setFlag("single", t3);
        } }, sort: { method(e3 = {}) {
          i.assertOptions(e3, ["by", "order"]);
          const t3 = { order: e3.order || "ascending" };
          return e3.by && (t3.by = l.ref(e3.by, { ancestor: 0 }), s(!t3.by.ancestor, "Cannot sort by ancestor")), this.$_addRule({ name: "sort", args: { options: t3 } });
        }, validate(e3, { error: t3, state: r2, prefs: s2, schema: n2 }, { options: a2 }) {
          const { value: o2, errors: i2 } = c.sort(n2, e3, a2, r2, s2);
          if (i2)
            return i2;
          for (let r3 = 0; r3 < e3.length; ++r3)
            if (e3[r3] !== o2[r3])
              return t3("array.sort", { order: a2.order, by: a2.by ? a2.by.key : "value" });
          return e3;
        }, convert: true }, sparse: { method(e3) {
          const t3 = e3 === void 0 || !!e3;
          return this._flags.sparse === t3 ? this : (t3 ? this.clone() : this.$_addRule("items")).$_setFlag("sparse", t3, { clone: false });
        } }, unique: { method(e3, t3 = {}) {
          s(!e3 || typeof e3 == "function" || typeof e3 == "string", "comparator must be a function or a string"), i.assertOptions(t3, ["ignoreUndefined", "separator"]);
          const r2 = { name: "unique", args: { options: t3, comparator: e3 } };
          if (e3)
            if (typeof e3 == "string") {
              const s2 = i.default(t3.separator, ".");
              r2.path = s2 ? e3.split(s2) : [e3];
            } else
              r2.comparator = e3;
          return this.$_addRule(r2);
        }, validate(e3, { state: t3, error: r2, schema: o2 }, { comparator: i2, options: l2 }, { comparator: c2, path: u }) {
          const f = { string: /* @__PURE__ */ Object.create(null), number: /* @__PURE__ */ Object.create(null), undefined: /* @__PURE__ */ Object.create(null), boolean: /* @__PURE__ */ Object.create(null), object: /* @__PURE__ */ new Map(), function: /* @__PURE__ */ new Map(), custom: /* @__PURE__ */ new Map() }, m = c2 || n, h = l2.ignoreUndefined;
          for (let n2 = 0; n2 < e3.length; ++n2) {
            const o3 = u ? a(e3[n2], u) : e3[n2], l3 = c2 ? f.custom : f[typeof o3];
            if (s(l3, "Failed to find unique map container for type", typeof o3), l3 instanceof Map) {
              const s2 = l3.entries();
              let a2;
              for (; !(a2 = s2.next()).done; )
                if (m(a2.value[0], o3)) {
                  const s3 = t3.localize([...t3.path, n2], [e3, ...t3.ancestors]), o4 = { pos: n2, value: e3[n2], dupePos: a2.value[1], dupeValue: e3[a2.value[1]] };
                  return u && (o4.path = i2), r2("array.unique", o4, s3);
                }
              l3.set(o3, n2);
            } else {
              if ((!h || o3 !== void 0) && l3[o3] !== void 0) {
                const s2 = { pos: n2, value: e3[n2], dupePos: l3[o3], dupeValue: e3[l3[o3]] };
                return u && (s2.path = i2), r2("array.unique", s2, t3.localize([...t3.path, n2], [e3, ...t3.ancestors]));
              }
              l3[o3] = n2;
            }
          }
          return e3;
        }, args: ["comparator", "options"], multi: true } }, cast: { set: { from: Array.isArray, to: (e3, t3) => new Set(e3) } }, rebuild(e3) {
          e3.$_terms._inclusions = [], e3.$_terms._exclusions = [], e3.$_terms._requireds = [];
          for (const t3 of e3.$_terms.items)
            c.validateSingle(t3, e3), t3._flags.presence === "required" ? e3.$_terms._requireds.push(t3) : t3._flags.presence === "forbidden" ? e3.$_terms._exclusions.push(t3) : e3.$_terms._inclusions.push(t3);
          for (const t3 of e3.$_terms.ordered)
            c.validateSingle(t3, e3);
        }, manifest: { build: (e3, t3) => (t3.items && (e3 = e3.items(...t3.items)), t3.ordered && (e3 = e3.ordered(...t3.ordered)), e3) }, messages: { "array.base": "{{#label}} must be an array", "array.excludes": "{{#label}} contains an excluded value", "array.hasKnown": "{{#label}} does not contain at least one required match for type {:#patternLabel}", "array.hasUnknown": "{{#label}} does not contain at least one required match", "array.includes": "{{#label}} does not match any of the allowed types", "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)", "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}", "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)", "array.length": "{{#label}} must contain {{#limit}} items", "array.max": "{{#label}} must contain less than or equal to {{#limit}} items", "array.min": "{{#label}} must contain at least {{#limit}} items", "array.orderedLength": "{{#label}} must contain at most {{#limit}} items", "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}", "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types", "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}", "array.sparse": "{{#label}} must not be a sparse array item", "array.unique": "{{#label}} contains a duplicate value" } }), c.fillMissedErrors = function(e3, t3, r2, s2, n2, a2) {
          const o2 = [];
          let i2 = 0;
          for (const e4 of r2) {
            const t4 = e4._flags.label;
            t4 ? o2.push(t4) : ++i2;
          }
          o2.length ? i2 ? t3.push(e3.$_createError("array.includesRequiredBoth", s2, { knownMisses: o2, unknownMisses: i2 }, n2, a2)) : t3.push(e3.$_createError("array.includesRequiredKnowns", s2, { knownMisses: o2 }, n2, a2)) : t3.push(e3.$_createError("array.includesRequiredUnknowns", s2, { unknownMisses: i2 }, n2, a2));
        }, c.fillOrderedErrors = function(e3, t3, r2, s2, n2, a2) {
          const o2 = [];
          for (const e4 of r2)
            e4._flags.presence === "required" && o2.push(e4);
          o2.length && c.fillMissedErrors(e3, t3, o2, s2, n2, a2);
        }, c.fillDefault = function(e3, t3, r2, s2) {
          const n2 = [];
          let a2 = true;
          for (let o2 = e3.length - 1; o2 >= 0; --o2) {
            const i2 = e3[o2], l2 = [t3, ...r2.ancestors], c2 = i2.$_validate(void 0, r2.localize(r2.path, l2, i2), s2).value;
            if (a2) {
              if (c2 === void 0)
                continue;
              a2 = false;
            }
            n2.unshift(c2);
          }
          n2.length && t3.push(...n2);
        }, c.fastSplice = function(e3, t3) {
          let r2 = t3;
          for (; r2 < e3.length; )
            e3[r2++] = e3[r2];
          --e3.length;
        }, c.validateSingle = function(e3, t3) {
          (e3.type === "array" || e3._flags._arrayItems) && (s(!t3._flags.single, "Cannot specify array item with single rule enabled"), t3.$_setFlag("_arrayItems", true, { clone: false }));
        }, c.sort = function(e3, t3, r2, s2, n2) {
          const a2 = r2.order === "ascending" ? 1 : -1, o2 = -1 * a2, i2 = a2, l2 = (l3, u) => {
            let f = c.compare(l3, u, o2, i2);
            if (f !== null)
              return f;
            if (r2.by && (l3 = r2.by.resolve(l3, s2, n2), u = r2.by.resolve(u, s2, n2)), f = c.compare(l3, u, o2, i2), f !== null)
              return f;
            const m = typeof l3;
            if (m !== typeof u)
              throw e3.$_createError("array.sort.mismatching", t3, null, s2, n2);
            if (m !== "number" && m !== "string")
              throw e3.$_createError("array.sort.unsupported", t3, { type: m }, s2, n2);
            return m === "number" ? (l3 - u) * a2 : l3 < u ? o2 : i2;
          };
          try {
            return { value: t3.slice().sort(l2) };
          } catch (e4) {
            return { errors: e4 };
          }
        }, c.compare = function(e3, t3, r2, s2) {
          return e3 === t3 ? 0 : e3 === void 0 ? 1 : t3 === void 0 ? -1 : e3 === null ? s2 : t3 === null ? r2 : null;
        };
      }, 4937: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(2036), i = { isBool: function(e3) {
          return typeof e3 == "boolean";
        } };
        e2.exports = n.extend({ type: "boolean", flags: { sensitive: { default: false } }, terms: { falsy: { init: null, manifest: "values" }, truthy: { init: null, manifest: "values" } }, coerce(e3, { schema: t3 }) {
          if (typeof e3 != "boolean") {
            if (typeof e3 == "string") {
              const r2 = t3._flags.sensitive ? e3 : e3.toLowerCase();
              e3 = r2 === "true" || r2 !== "false" && e3;
            }
            return typeof e3 != "boolean" && (e3 = t3.$_terms.truthy && t3.$_terms.truthy.has(e3, null, null, !t3._flags.sensitive) || (!t3.$_terms.falsy || !t3.$_terms.falsy.has(e3, null, null, !t3._flags.sensitive)) && e3), { value: e3 };
          }
        }, validate(e3, { error: t3 }) {
          if (typeof e3 != "boolean")
            return { value: e3, errors: t3("boolean.base") };
        }, rules: { truthy: { method(...e3) {
          a.verifyFlat(e3, "truthy");
          const t3 = this.clone();
          t3.$_terms.truthy = t3.$_terms.truthy || new o();
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const n2 = e3[r2];
            s(n2 !== void 0, "Cannot call truthy with undefined"), t3.$_terms.truthy.add(n2);
          }
          return t3;
        } }, falsy: { method(...e3) {
          a.verifyFlat(e3, "falsy");
          const t3 = this.clone();
          t3.$_terms.falsy = t3.$_terms.falsy || new o();
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const n2 = e3[r2];
            s(n2 !== void 0, "Cannot call falsy with undefined"), t3.$_terms.falsy.add(n2);
          }
          return t3;
        } }, sensitive: { method(e3 = true) {
          return this.$_setFlag("sensitive", e3);
        } } }, cast: { number: { from: i.isBool, to: (e3, t3) => e3 ? 1 : 0 }, string: { from: i.isBool, to: (e3, t3) => e3 ? "true" : "false" } }, manifest: { build: (e3, t3) => (t3.truthy && (e3 = e3.truthy(...t3.truthy)), t3.falsy && (e3 = e3.falsy(...t3.falsy)), e3) }, messages: { "boolean.base": "{{#label}} must be a boolean" } });
      }, 7500: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(3328), i = { isDate: function(e3) {
          return e3 instanceof Date;
        } };
        e2.exports = n.extend({ type: "date", coerce: { from: ["number", "string"], method: (e3, { schema: t3 }) => ({ value: i.parse(e3, t3._flags.format) || e3 }) }, validate(e3, { schema: t3, error: r2, prefs: s2 }) {
          if (e3 instanceof Date && !isNaN(e3.getTime()))
            return;
          const n2 = t3._flags.format;
          return s2.convert && n2 && typeof e3 == "string" ? { value: e3, errors: r2("date.format", { format: n2 }) } : { value: e3, errors: r2("date.base") };
        }, rules: { compare: { method: false, validate(e3, t3, { date: r2 }, { name: s2, operator: n2, args: o2 }) {
          const i2 = r2 === "now" ? Date.now() : r2.getTime();
          return a.compare(e3.getTime(), i2, n2) ? e3 : t3.error("date." + s2, { limit: o2.date, value: e3 });
        }, args: [{ name: "date", ref: true, normalize: (e3) => e3 === "now" ? e3 : i.parse(e3), assert: (e3) => e3 !== null, message: "must have a valid date format" }] }, format: { method(e3) {
          return s(["iso", "javascript", "unix"].includes(e3), "Unknown date format", e3), this.$_setFlag("format", e3);
        } }, greater: { method(e3) {
          return this.$_addRule({ name: "greater", method: "compare", args: { date: e3 }, operator: ">" });
        } }, iso: { method() {
          return this.format("iso");
        } }, less: { method(e3) {
          return this.$_addRule({ name: "less", method: "compare", args: { date: e3 }, operator: "<" });
        } }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "compare", args: { date: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "compare", args: { date: e3 }, operator: ">=" });
        } }, timestamp: { method(e3 = "javascript") {
          return s(["javascript", "unix"].includes(e3), '"type" must be one of "javascript, unix"'), this.format(e3);
        } } }, cast: { number: { from: i.isDate, to: (e3, t3) => e3.getTime() }, string: { from: i.isDate, to: (e3, { prefs: t3 }) => o.date(e3, t3) } }, messages: { "date.base": "{{#label}} must be a valid date", "date.format": '{{#label}} must be in {msg("date.format." + #format) || #format} format', "date.greater": "{{#label}} must be greater than {{:#limit}}", "date.less": "{{#label}} must be less than {{:#limit}}", "date.max": "{{#label}} must be less than or equal to {{:#limit}}", "date.min": "{{#label}} must be greater than or equal to {{:#limit}}", "date.format.iso": "ISO 8601 date", "date.format.javascript": "timestamp or number of milliseconds", "date.format.unix": "timestamp or number of seconds" } }), i.parse = function(e3, t3) {
          if (e3 instanceof Date)
            return e3;
          if (typeof e3 != "string" && (isNaN(e3) || !isFinite(e3)))
            return null;
          if (/^\s*$/.test(e3))
            return null;
          if (t3 === "iso")
            return a.isIsoDate(e3) ? i.date(e3.toString()) : null;
          const r2 = e3;
          if (typeof e3 == "string" && /^[+-]?\d+(\.\d+)?$/.test(e3) && (e3 = parseFloat(e3)), t3) {
            if (t3 === "javascript")
              return i.date(1 * e3);
            if (t3 === "unix")
              return i.date(1e3 * e3);
            if (typeof r2 == "string")
              return null;
          }
          return i.date(e3);
        }, i.date = function(e3) {
          const t3 = new Date(e3);
          return isNaN(t3.getTime()) ? null : t3;
        };
      }, 390: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7824);
        e2.exports = n.extend({ type: "function", properties: { typeof: "function" }, rules: { arity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 >= 0, "n must be a positive integer"), this.$_addRule({ name: "arity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length === r2 ? e3 : t3.error("function.arity", { n: r2 }) }, class: { method() {
          return this.$_addRule("class");
        }, validate: (e3, t3) => /^\s*class\s/.test(e3.toString()) ? e3 : t3.error("function.class", { value: e3 }) }, minArity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 > 0, "n must be a strict positive integer"), this.$_addRule({ name: "minArity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length >= r2 ? e3 : t3.error("function.minArity", { n: r2 }) }, maxArity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 >= 0, "n must be a positive integer"), this.$_addRule({ name: "maxArity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length <= r2 ? e3 : t3.error("function.maxArity", { n: r2 }) } }, messages: { "function.arity": "{{#label}} must have an arity of {{#n}}", "function.class": "{{#label}} must be a class", "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}", "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}" } });
      }, 7824: (e2, t2, r) => {
        "use strict";
        const s = r(978), n = r(375), a = r(8571), o = r(3652), i = r(8068), l = r(8160), c = r(3292), u = r(6354), f = r(6133), m = r(3328), h = { renameDefaults: { alias: false, multiple: false, override: false } };
        e2.exports = i.extend({ type: "_keys", properties: { typeof: "object" }, flags: { unknown: { default: false } }, terms: { dependencies: { init: null }, keys: { init: null, manifest: { mapped: { from: "schema", to: "key" } } }, patterns: { init: null }, renames: { init: null } }, args: (e3, t3) => e3.keys(t3), validate(e3, { schema: t3, error: r2, state: s2, prefs: n2 }) {
          if (!e3 || typeof e3 !== t3.$_property("typeof") || Array.isArray(e3))
            return { value: e3, errors: r2("object.base", { type: t3.$_property("typeof") }) };
          if (!(t3.$_terms.renames || t3.$_terms.dependencies || t3.$_terms.keys || t3.$_terms.patterns || t3.$_terms.externals))
            return;
          e3 = h.clone(e3, n2);
          const a2 = [];
          if (t3.$_terms.renames && !h.rename(t3, e3, s2, n2, a2))
            return { value: e3, errors: a2 };
          if (!t3.$_terms.keys && !t3.$_terms.patterns && !t3.$_terms.dependencies)
            return { value: e3, errors: a2 };
          const o2 = new Set(Object.keys(e3));
          if (t3.$_terms.keys) {
            const r3 = [e3, ...s2.ancestors];
            for (const i2 of t3.$_terms.keys) {
              const t4 = i2.key, l2 = e3[t4];
              o2.delete(t4);
              const c2 = s2.localize([...s2.path, t4], r3, i2), u2 = i2.schema.$_validate(l2, c2, n2);
              if (u2.errors) {
                if (n2.abortEarly)
                  return { value: e3, errors: u2.errors };
                u2.value !== void 0 && (e3[t4] = u2.value), a2.push(...u2.errors);
              } else
                i2.schema._flags.result === "strip" || u2.value === void 0 && l2 !== void 0 ? delete e3[t4] : u2.value !== void 0 && (e3[t4] = u2.value);
            }
          }
          if (o2.size || t3._flags._hasPatternMatch) {
            const r3 = h.unknown(t3, e3, o2, a2, s2, n2);
            if (r3)
              return r3;
          }
          if (t3.$_terms.dependencies)
            for (const r3 of t3.$_terms.dependencies) {
              if (r3.key && r3.key.resolve(e3, s2, n2, null, { shadow: false }) === void 0)
                continue;
              const o3 = h.dependencies[r3.rel](t3, r3, e3, s2, n2);
              if (o3) {
                const r4 = t3.$_createError(o3.code, e3, o3.context, s2, n2);
                if (n2.abortEarly)
                  return { value: e3, errors: r4 };
                a2.push(r4);
              }
            }
          return { value: e3, errors: a2 };
        }, rules: { and: { method(...e3) {
          return l.verifyFlat(e3, "and"), h.dependency(this, "and", null, e3);
        } }, append: { method(e3) {
          return e3 == null || Object.keys(e3).length === 0 ? this : this.keys(e3);
        } }, assert: { method(e3, t3, r2) {
          m.isTemplate(e3) || (e3 = c.ref(e3)), n(r2 === void 0 || typeof r2 == "string", "Message must be a string"), t3 = this.$_compile(t3, { appendPath: true });
          const s2 = this.$_addRule({ name: "assert", args: { subject: e3, schema: t3, message: r2 } });
          return s2.$_mutateRegister(e3), s2.$_mutateRegister(t3), s2;
        }, validate(e3, { error: t3, prefs: r2, state: s2 }, { subject: n2, schema: a2, message: o2 }) {
          const i2 = n2.resolve(e3, s2, r2), l2 = f.isRef(n2) ? n2.absolute(s2) : [];
          return a2.$_match(i2, s2.localize(l2, [e3, ...s2.ancestors], a2), r2) ? e3 : t3("object.assert", { subject: n2, message: o2 });
        }, args: ["subject", "schema", "message"], multi: true }, instance: { method(e3, t3) {
          return n(typeof e3 == "function", "constructor must be a function"), t3 = t3 || e3.name, this.$_addRule({ name: "instance", args: { constructor: e3, name: t3 } });
        }, validate: (e3, t3, { constructor: r2, name: s2 }) => e3 instanceof r2 ? e3 : t3.error("object.instance", { type: s2, value: e3 }), args: ["constructor", "name"] }, keys: { method(e3) {
          n(e3 === void 0 || typeof e3 == "object", "Object schema must be a valid object"), n(!l.isSchema(e3), "Object schema cannot be a joi schema");
          const t3 = this.clone();
          if (e3)
            if (Object.keys(e3).length) {
              t3.$_terms.keys = t3.$_terms.keys ? t3.$_terms.keys.filter((t4) => !e3.hasOwnProperty(t4.key)) : new h.Keys();
              for (const r2 in e3)
                l.tryWithPath(() => t3.$_terms.keys.push({ key: r2, schema: this.$_compile(e3[r2]) }), r2);
            } else
              t3.$_terms.keys = new h.Keys();
          else
            t3.$_terms.keys = null;
          return t3.$_mutateRebuild();
        } }, length: { method(e3) {
          return this.$_addRule({ name: "length", args: { limit: e3 }, operator: "=" });
        }, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: a2 }) => l.compare(Object.keys(e3).length, r2, n2) ? e3 : t3.error("object." + s2, { limit: a2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: l.limit, message: "must be a positive integer" }] }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "length", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "length", args: { limit: e3 }, operator: ">=" });
        } }, nand: { method(...e3) {
          return l.verifyFlat(e3, "nand"), h.dependency(this, "nand", null, e3);
        } }, or: { method(...e3) {
          return l.verifyFlat(e3, "or"), h.dependency(this, "or", null, e3);
        } }, oxor: { method(...e3) {
          return h.dependency(this, "oxor", null, e3);
        } }, pattern: { method(e3, t3, r2 = {}) {
          const s2 = e3 instanceof RegExp;
          s2 || (e3 = this.$_compile(e3, { appendPath: true })), n(t3 !== void 0, "Invalid rule"), l.assertOptions(r2, ["fallthrough", "matches"]), s2 && n(!e3.flags.includes("g") && !e3.flags.includes("y"), "pattern should not use global or sticky mode"), t3 = this.$_compile(t3, { appendPath: true });
          const a2 = this.clone();
          a2.$_terms.patterns = a2.$_terms.patterns || [];
          const o2 = { [s2 ? "regex" : "schema"]: e3, rule: t3 };
          return r2.matches && (o2.matches = this.$_compile(r2.matches), o2.matches.type !== "array" && (o2.matches = o2.matches.$_root.array().items(o2.matches)), a2.$_mutateRegister(o2.matches), a2.$_setFlag("_hasPatternMatch", true, { clone: false })), r2.fallthrough && (o2.fallthrough = true), a2.$_terms.patterns.push(o2), a2.$_mutateRegister(t3), a2;
        } }, ref: { method() {
          return this.$_addRule("ref");
        }, validate: (e3, t3) => f.isRef(e3) ? e3 : t3.error("object.refType", { value: e3 }) }, regex: { method() {
          return this.$_addRule("regex");
        }, validate: (e3, t3) => e3 instanceof RegExp ? e3 : t3.error("object.regex", { value: e3 }) }, rename: { method(e3, t3, r2 = {}) {
          n(typeof e3 == "string" || e3 instanceof RegExp, "Rename missing the from argument"), n(typeof t3 == "string" || t3 instanceof m, "Invalid rename to argument"), n(t3 !== e3, "Cannot rename key to same name:", e3), l.assertOptions(r2, ["alias", "ignoreUndefined", "override", "multiple"]);
          const a2 = this.clone();
          a2.$_terms.renames = a2.$_terms.renames || [];
          for (const t4 of a2.$_terms.renames)
            n(t4.from !== e3, "Cannot rename the same key multiple times");
          return t3 instanceof m && a2.$_mutateRegister(t3), a2.$_terms.renames.push({ from: e3, to: t3, options: s(h.renameDefaults, r2) }), a2;
        } }, schema: { method(e3 = "any") {
          return this.$_addRule({ name: "schema", args: { type: e3 } });
        }, validate: (e3, t3, { type: r2 }) => !l.isSchema(e3) || r2 !== "any" && e3.type !== r2 ? t3.error("object.schema", { type: r2 }) : e3 }, unknown: { method(e3) {
          return this.$_setFlag("unknown", e3 !== false);
        } }, with: { method(e3, t3, r2 = {}) {
          return h.dependency(this, "with", e3, t3, r2);
        } }, without: { method(e3, t3, r2 = {}) {
          return h.dependency(this, "without", e3, t3, r2);
        } }, xor: { method(...e3) {
          return l.verifyFlat(e3, "xor"), h.dependency(this, "xor", null, e3);
        } } }, overrides: { default(e3, t3) {
          return e3 === void 0 && (e3 = l.symbols.deepDefault), this.$_parent("default", e3, t3);
        } }, rebuild(e3) {
          if (e3.$_terms.keys) {
            const t3 = new o.Sorter();
            for (const r2 of e3.$_terms.keys)
              l.tryWithPath(() => t3.add(r2, { after: r2.schema.$_rootReferences(), group: r2.key }), r2.key);
            e3.$_terms.keys = new h.Keys(...t3.nodes);
          }
        }, manifest: { build(e3, t3) {
          if (t3.keys && (e3 = e3.keys(t3.keys)), t3.dependencies)
            for (const { rel: r2, key: s2 = null, peers: n2, options: a2 } of t3.dependencies)
              e3 = h.dependency(e3, r2, s2, n2, a2);
          if (t3.patterns)
            for (const { regex: r2, schema: s2, rule: n2, fallthrough: a2, matches: o2 } of t3.patterns)
              e3 = e3.pattern(r2 || s2, n2, { fallthrough: a2, matches: o2 });
          if (t3.renames)
            for (const { from: r2, to: s2, options: n2 } of t3.renames)
              e3 = e3.rename(r2, s2, n2);
          return e3;
        } }, messages: { "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}", "object.assert": '{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}', "object.base": "{{#label}} must be of type {{#type}}", "object.instance": "{{#label}} must be an instance of {{:#type}}", "object.length": '{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}', "object.max": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}', "object.min": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}', "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}", "object.nand": "{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}", "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}", "object.pattern.match": "{{#label}} keys failed to match pattern requirements", "object.refType": "{{#label}} must be a Joi reference", "object.regex": "{{#label}} must be a RegExp object", "object.rename.multiple": "{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}", "object.rename.override": "{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists", "object.schema": "{{#label}} must be a Joi schema of {{#type}} type", "object.unknown": "{{#label}} is not allowed", "object.with": "{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}", "object.without": "{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}", "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}" } }), h.clone = function(e3, t3) {
          if (typeof e3 == "object") {
            if (t3.nonEnumerables)
              return a(e3, { shallow: true });
            const r3 = Object.create(Object.getPrototypeOf(e3));
            return Object.assign(r3, e3), r3;
          }
          const r2 = function(...t4) {
            return e3.apply(this, t4);
          };
          return r2.prototype = a(e3.prototype), Object.defineProperty(r2, "name", { value: e3.name, writable: false }), Object.defineProperty(r2, "length", { value: e3.length, writable: false }), Object.assign(r2, e3), r2;
        }, h.dependency = function(e3, t3, r2, s2, a2) {
          n(r2 === null || typeof r2 == "string", t3, "key must be a strings"), a2 || (a2 = s2.length > 1 && typeof s2[s2.length - 1] == "object" ? s2.pop() : {}), l.assertOptions(a2, ["separator"]), s2 = [].concat(s2);
          const o2 = l.default(a2.separator, "."), i2 = [];
          for (const e4 of s2)
            n(typeof e4 == "string", t3, "peers must be strings"), i2.push(c.ref(e4, { separator: o2, ancestor: 0, prefix: false }));
          r2 !== null && (r2 = c.ref(r2, { separator: o2, ancestor: 0, prefix: false }));
          const u2 = e3.clone();
          return u2.$_terms.dependencies = u2.$_terms.dependencies || [], u2.$_terms.dependencies.push(new h.Dependency(t3, r2, i2, s2)), u2;
        }, h.dependencies = { and(e3, t3, r2, s2, n2) {
          const a2 = [], o2 = [], i2 = t3.peers.length;
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) === void 0 ? a2.push(e4.key) : o2.push(e4.key);
          if (a2.length !== i2 && o2.length !== i2)
            return { code: "object.and", context: { present: o2, presentWithLabels: h.keysToLabels(e3, o2), missing: a2, missingWithLabels: h.keysToLabels(e3, a2) } };
        }, nand(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (a2.length !== t3.peers.length)
            return;
          const o2 = t3.paths[0], i2 = t3.paths.slice(1);
          return { code: "object.nand", context: { main: o2, mainWithLabel: h.keysToLabels(e3, o2), peers: i2, peersWithLabels: h.keysToLabels(e3, i2) } };
        }, or(e3, t3, r2, s2, n2) {
          for (const e4 of t3.peers)
            if (e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0)
              return;
          return { code: "object.missing", context: { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) } };
        }, oxor(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (!a2.length || a2.length === 1)
            return;
          const o2 = { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) };
          return o2.present = a2, o2.presentWithLabels = h.keysToLabels(e3, a2), { code: "object.oxor", context: o2 };
        }, with(e3, t3, r2, s2, n2) {
          for (const a2 of t3.peers)
            if (a2.resolve(r2, s2, n2, null, { shadow: false }) === void 0)
              return { code: "object.with", context: { main: t3.key.key, mainWithLabel: h.keysToLabels(e3, t3.key.key), peer: a2.key, peerWithLabel: h.keysToLabels(e3, a2.key) } };
        }, without(e3, t3, r2, s2, n2) {
          for (const a2 of t3.peers)
            if (a2.resolve(r2, s2, n2, null, { shadow: false }) !== void 0)
              return { code: "object.without", context: { main: t3.key.key, mainWithLabel: h.keysToLabels(e3, t3.key.key), peer: a2.key, peerWithLabel: h.keysToLabels(e3, a2.key) } };
        }, xor(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (a2.length === 1)
            return;
          const o2 = { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) };
          return a2.length === 0 ? { code: "object.missing", context: o2 } : (o2.present = a2, o2.presentWithLabels = h.keysToLabels(e3, a2), { code: "object.xor", context: o2 });
        } }, h.keysToLabels = function(e3, t3) {
          return Array.isArray(t3) ? t3.map((t4) => e3.$_mapLabels(t4)) : e3.$_mapLabels(t3);
        }, h.rename = function(e3, t3, r2, s2, n2) {
          const a2 = {};
          for (const o2 of e3.$_terms.renames) {
            const i2 = [], l2 = typeof o2.from != "string";
            if (l2)
              for (const e4 in t3) {
                if (t3[e4] === void 0 && o2.options.ignoreUndefined)
                  continue;
                if (e4 === o2.to)
                  continue;
                const r3 = o2.from.exec(e4);
                r3 && i2.push({ from: e4, to: o2.to, match: r3 });
              }
            else
              !Object.prototype.hasOwnProperty.call(t3, o2.from) || t3[o2.from] === void 0 && o2.options.ignoreUndefined || i2.push(o2);
            for (const c2 of i2) {
              const i3 = c2.from;
              let u2 = c2.to;
              if (u2 instanceof m && (u2 = u2.render(t3, r2, s2, c2.match)), i3 !== u2) {
                if (!o2.options.multiple && a2[u2] && (n2.push(e3.$_createError("object.rename.multiple", t3, { from: i3, to: u2, pattern: l2 }, r2, s2)), s2.abortEarly))
                  return false;
                if (Object.prototype.hasOwnProperty.call(t3, u2) && !o2.options.override && !a2[u2] && (n2.push(e3.$_createError("object.rename.override", t3, { from: i3, to: u2, pattern: l2 }, r2, s2)), s2.abortEarly))
                  return false;
                t3[i3] === void 0 ? delete t3[u2] : t3[u2] = t3[i3], a2[u2] = true, o2.options.alias || delete t3[i3];
              }
            }
          }
          return true;
        }, h.unknown = function(e3, t3, r2, s2, n2, a2) {
          if (e3.$_terms.patterns) {
            let o2 = false;
            const i2 = e3.$_terms.patterns.map((e4) => {
              if (e4.matches)
                return o2 = true, [];
            }), l2 = [t3, ...n2.ancestors];
            for (const o3 of r2) {
              const c2 = t3[o3], u2 = [...n2.path, o3];
              for (let f2 = 0; f2 < e3.$_terms.patterns.length; ++f2) {
                const m2 = e3.$_terms.patterns[f2];
                if (m2.regex) {
                  const e4 = m2.regex.test(o3);
                  if (n2.mainstay.tracer.debug(n2, "rule", "pattern.".concat(f2), e4 ? "pass" : "error"), !e4)
                    continue;
                } else if (!m2.schema.$_match(o3, n2.nest(m2.schema, "pattern.".concat(f2)), a2))
                  continue;
                r2.delete(o3);
                const h2 = n2.localize(u2, l2, { schema: m2.rule, key: o3 }), d = m2.rule.$_validate(c2, h2, a2);
                if (d.errors) {
                  if (a2.abortEarly)
                    return { value: t3, errors: d.errors };
                  s2.push(...d.errors);
                }
                if (m2.matches && i2[f2].push(o3), t3[o3] = d.value, !m2.fallthrough)
                  break;
              }
            }
            if (o2)
              for (let r3 = 0; r3 < i2.length; ++r3) {
                const o3 = i2[r3];
                if (!o3)
                  continue;
                const c2 = e3.$_terms.patterns[r3].matches, f2 = n2.localize(n2.path, l2, c2), m2 = c2.$_validate(o3, f2, a2);
                if (m2.errors) {
                  const r4 = u.details(m2.errors, { override: false });
                  r4.matches = o3;
                  const i3 = e3.$_createError("object.pattern.match", t3, r4, n2, a2);
                  if (a2.abortEarly)
                    return { value: t3, errors: i3 };
                  s2.push(i3);
                }
              }
          }
          if (r2.size && (e3.$_terms.keys || e3.$_terms.patterns)) {
            if (a2.stripUnknown && !e3._flags.unknown || a2.skipFunctions) {
              const e4 = !(!a2.stripUnknown || a2.stripUnknown !== true && !a2.stripUnknown.objects);
              for (const s3 of r2)
                e4 ? (delete t3[s3], r2.delete(s3)) : typeof t3[s3] == "function" && r2.delete(s3);
            }
            if (!l.default(e3._flags.unknown, a2.allowUnknown))
              for (const o2 of r2) {
                const r3 = n2.localize([...n2.path, o2], []), i2 = e3.$_createError("object.unknown", t3[o2], { child: o2 }, r3, a2, { flags: false });
                if (a2.abortEarly)
                  return { value: t3, errors: i2 };
                s2.push(i2);
              }
          }
        }, h.Dependency = class {
          constructor(e3, t3, r2, s2) {
            this.rel = e3, this.key = t3, this.peers = r2, this.paths = s2;
          }
          describe() {
            const e3 = { rel: this.rel, peers: this.paths };
            return this.key !== null && (e3.key = this.key.key), this.peers[0].separator !== "." && (e3.options = { separator: this.peers[0].separator }), e3;
          }
        }, h.Keys = class extends Array {
          concat(e3) {
            const t3 = this.slice(), r2 = /* @__PURE__ */ new Map();
            for (let e4 = 0; e4 < t3.length; ++e4)
              r2.set(t3[e4].key, e4);
            for (const s2 of e3) {
              const e4 = s2.key, n2 = r2.get(e4);
              n2 !== void 0 ? t3[n2] = { key: e4, schema: t3[n2].schema.concat(s2.schema) } : t3.push(s2);
            }
            return t3;
          }
        };
      }, 8785: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(3292), i = r(6354), l = {};
        e2.exports = n.extend({ type: "link", properties: { schemaChain: true }, terms: { link: { init: null, manifest: "single", register: false } }, args: (e3, t3) => e3.ref(t3), validate(e3, { schema: t3, state: r2, prefs: n2 }) {
          s(t3.$_terms.link, "Uninitialized link schema");
          const a2 = l.generate(t3, e3, r2, n2), o2 = t3.$_terms.link[0].ref;
          return a2.$_validate(e3, r2.nest(a2, "link:".concat(o2.display, ":").concat(a2.type)), n2);
        }, generate: (e3, t3, r2, s2) => l.generate(e3, t3, r2, s2), rules: { ref: { method(e3) {
          s(!this.$_terms.link, "Cannot reinitialize schema"), e3 = o.ref(e3), s(e3.type === "value" || e3.type === "local", "Invalid reference type:", e3.type), s(e3.type === "local" || e3.ancestor === "root" || e3.ancestor > 0, "Link cannot reference itself");
          const t3 = this.clone();
          return t3.$_terms.link = [{ ref: e3 }], t3;
        } }, relative: { method(e3 = true) {
          return this.$_setFlag("relative", e3);
        } } }, overrides: { concat(e3) {
          s(this.$_terms.link, "Uninitialized link schema"), s(a.isSchema(e3), "Invalid schema object"), s(e3.type !== "link", "Cannot merge type link with another link");
          const t3 = this.clone();
          return t3.$_terms.whens || (t3.$_terms.whens = []), t3.$_terms.whens.push({ concat: e3 }), t3.$_mutateRebuild();
        } }, manifest: { build: (e3, t3) => (s(t3.link, "Invalid link description missing link"), e3.ref(t3.link)) } }), l.generate = function(e3, t3, r2, s2) {
          let n2 = r2.mainstay.links.get(e3);
          if (n2)
            return n2._generate(t3, r2, s2).schema;
          const a2 = e3.$_terms.link[0].ref, { perspective: o2, path: i2 } = l.perspective(a2, r2);
          l.assert(o2, "which is outside of schema boundaries", a2, e3, r2, s2);
          try {
            n2 = i2.length ? o2.$_reach(i2) : o2;
          } catch (t4) {
            l.assert(false, "to non-existing schema", a2, e3, r2, s2);
          }
          return l.assert(n2.type !== "link", "which is another link", a2, e3, r2, s2), e3._flags.relative || r2.mainstay.links.set(e3, n2), n2._generate(t3, r2, s2).schema;
        }, l.perspective = function(e3, t3) {
          if (e3.type === "local") {
            for (const { schema: r2, key: s2 } of t3.schemas) {
              if ((r2._flags.id || s2) === e3.path[0])
                return { perspective: r2, path: e3.path.slice(1) };
              if (r2.$_terms.shared) {
                for (const t4 of r2.$_terms.shared)
                  if (t4._flags.id === e3.path[0])
                    return { perspective: t4, path: e3.path.slice(1) };
              }
            }
            return { perspective: null, path: null };
          }
          return e3.ancestor === "root" ? { perspective: t3.schemas[t3.schemas.length - 1].schema, path: e3.path } : { perspective: t3.schemas[e3.ancestor] && t3.schemas[e3.ancestor].schema, path: e3.path };
        }, l.assert = function(e3, t3, r2, n2, a2, o2) {
          e3 || s(false, '"'.concat(i.label(n2._flags, a2, o2), '" contains link reference "').concat(r2.display, '" ').concat(t3));
        };
      }, 3832: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = { numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i, precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/ };
        e2.exports = n.extend({ type: "number", flags: { unsafe: { default: false } }, coerce: { from: "string", method(e3, { schema: t3, error: r2 }) {
          const s2 = e3.match(o.numberRx);
          if (!s2)
            return;
          e3 = e3.trim();
          const n2 = { value: parseFloat(e3) };
          if (n2.value === 0 && (n2.value = 0), !t3._flags.unsafe)
            if (e3.match(/e/i)) {
              if (o.normalizeExponent("".concat(n2.value / Math.pow(10, s2[1]), "e").concat(s2[1])) !== o.normalizeExponent(e3))
                return n2.errors = r2("number.unsafe"), n2;
            } else {
              const t4 = n2.value.toString();
              if (t4.match(/e/i))
                return n2;
              if (t4 !== o.normalizeDecimal(e3))
                return n2.errors = r2("number.unsafe"), n2;
            }
          return n2;
        } }, validate(e3, { schema: t3, error: r2, prefs: s2 }) {
          if (e3 === 1 / 0 || e3 === -1 / 0)
            return { value: e3, errors: r2("number.infinity") };
          if (!a.isNumber(e3))
            return { value: e3, errors: r2("number.base") };
          const n2 = { value: e3 };
          if (s2.convert) {
            const e4 = t3.$_getRule("precision");
            if (e4) {
              const t4 = Math.pow(10, e4.args.limit);
              n2.value = Math.round(n2.value * t4) / t4;
            }
          }
          return n2.value === 0 && (n2.value = 0), !t3._flags.unsafe && (e3 > Number.MAX_SAFE_INTEGER || e3 < Number.MIN_SAFE_INTEGER) && (n2.errors = r2("number.unsafe")), n2;
        }, rules: { compare: { method: false, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: o2 }) => a.compare(e3, r2, n2) ? e3 : t3.error("number." + s2, { limit: o2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: a.isNumber, message: "must be a number" }] }, greater: { method(e3) {
          return this.$_addRule({ name: "greater", method: "compare", args: { limit: e3 }, operator: ">" });
        } }, integer: { method() {
          return this.$_addRule("integer");
        }, validate: (e3, t3) => Math.trunc(e3) - e3 == 0 ? e3 : t3.error("number.integer") }, less: { method(e3) {
          return this.$_addRule({ name: "less", method: "compare", args: { limit: e3 }, operator: "<" });
        } }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "compare", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "compare", args: { limit: e3 }, operator: ">=" });
        } }, multiple: { method(e3) {
          return this.$_addRule({ name: "multiple", args: { base: e3 } });
        }, validate: (e3, t3, { base: r2 }, s2) => e3 * (1 / r2) % 1 == 0 ? e3 : t3.error("number.multiple", { multiple: s2.args.base, value: e3 }), args: [{ name: "base", ref: true, assert: (e3) => typeof e3 == "number" && isFinite(e3) && e3 > 0, message: "must be a positive number" }], multi: true }, negative: { method() {
          return this.sign("negative");
        } }, port: { method() {
          return this.$_addRule("port");
        }, validate: (e3, t3) => Number.isSafeInteger(e3) && e3 >= 0 && e3 <= 65535 ? e3 : t3.error("number.port") }, positive: { method() {
          return this.sign("positive");
        } }, precision: { method(e3) {
          return s(Number.isSafeInteger(e3), "limit must be an integer"), this.$_addRule({ name: "precision", args: { limit: e3 } });
        }, validate(e3, t3, { limit: r2 }) {
          const s2 = e3.toString().match(o.precisionRx);
          return Math.max((s2[1] ? s2[1].length : 0) - (s2[2] ? parseInt(s2[2], 10) : 0), 0) <= r2 ? e3 : t3.error("number.precision", { limit: r2, value: e3 });
        }, convert: true }, sign: { method(e3) {
          return s(["negative", "positive"].includes(e3), "Invalid sign", e3), this.$_addRule({ name: "sign", args: { sign: e3 } });
        }, validate: (e3, t3, { sign: r2 }) => r2 === "negative" && e3 < 0 || r2 === "positive" && e3 > 0 ? e3 : t3.error("number.".concat(r2)) }, unsafe: { method(e3 = true) {
          return s(typeof e3 == "boolean", "enabled must be a boolean"), this.$_setFlag("unsafe", e3);
        } } }, cast: { string: { from: (e3) => typeof e3 == "number", to: (e3, t3) => e3.toString() } }, messages: { "number.base": "{{#label}} must be a number", "number.greater": "{{#label}} must be greater than {{#limit}}", "number.infinity": "{{#label}} cannot be infinity", "number.integer": "{{#label}} must be an integer", "number.less": "{{#label}} must be less than {{#limit}}", "number.max": "{{#label}} must be less than or equal to {{#limit}}", "number.min": "{{#label}} must be greater than or equal to {{#limit}}", "number.multiple": "{{#label}} must be a multiple of {{#multiple}}", "number.negative": "{{#label}} must be a negative number", "number.port": "{{#label}} must be a valid port", "number.positive": "{{#label}} must be a positive number", "number.precision": "{{#label}} must have no more than {{#limit}} decimal places", "number.unsafe": "{{#label}} must be a safe number" } }), o.normalizeExponent = function(e3) {
          return e3.replace(/E/, "e").replace(/\.(\d*[1-9])?0+e/, ".$1e").replace(/\.e/, "e").replace(/e\+/, "e").replace(/^\+/, "").replace(/^(-?)0+([1-9])/, "$1$2");
        }, o.normalizeDecimal = function(e3) {
          return (e3 = e3.replace(/^\+/, "").replace(/\.0*$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([0-9])/, "$1$2")).includes(".") && e3.endsWith("0") && (e3 = e3.replace(/0+$/, "")), e3 === "-0" ? "0" : e3;
        };
      }, 8966: (e2, t2, r) => {
        "use strict";
        const s = r(7824);
        e2.exports = s.extend({ type: "object", cast: { map: { from: (e3) => e3 && typeof e3 == "object", to: (e3, t3) => new Map(Object.entries(e3)) } } });
      }, 7417: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(5380), l = r(1745), c = r(9959), u = r(6064), f = r(9926), m = r(5752), h = r(8068), d = r(8160), p = { tlds: f instanceof Set && { tlds: { allow: f, deny: null } }, base64Regex: { true: { true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/, false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/ }, false: { true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/, false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/ } }, dataUriRegex: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/, hexRegex: /^[a-f0-9]+$/i, ipRegex: c.regex({ cidr: "forbidden" }).regex, isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/, guidBrackets: { "{": "}", "[": "]", "(": ")", "": "" }, guidVersions: { uuidv1: "1", uuidv2: "2", uuidv3: "3", uuidv4: "4", uuidv5: "5" }, guidSeparators: /* @__PURE__ */ new Set([void 0, true, false, "-", ":"]), normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"] };
        e2.exports = h.extend({ type: "string", flags: { insensitive: { default: false }, truncate: { default: false } }, terms: { replacements: { init: null } }, coerce: { from: "string", method(e3, { schema: t3, state: r2, prefs: s2 }) {
          const n2 = t3.$_getRule("normalize");
          n2 && (e3 = e3.normalize(n2.args.form));
          const a2 = t3.$_getRule("case");
          a2 && (e3 = a2.args.direction === "upper" ? e3.toLocaleUpperCase() : e3.toLocaleLowerCase());
          const o2 = t3.$_getRule("trim");
          if (o2 && o2.args.enabled && (e3 = e3.trim()), t3.$_terms.replacements)
            for (const r3 of t3.$_terms.replacements)
              e3 = e3.replace(r3.pattern, r3.replacement);
          const i2 = t3.$_getRule("hex");
          if (i2 && i2.args.options.byteAligned && e3.length % 2 != 0 && (e3 = "0".concat(e3)), t3.$_getRule("isoDate")) {
            const t4 = p.isoDate(e3);
            t4 && (e3 = t4);
          }
          if (t3._flags.truncate) {
            const n3 = t3.$_getRule("max");
            if (n3) {
              let a3 = n3.args.limit;
              if (d.isResolvable(a3) && (a3 = a3.resolve(e3, r2, s2), !d.limit(a3)))
                return { value: e3, errors: t3.$_createError("any.ref", a3, { ref: n3.args.limit, arg: "limit", reason: "must be a positive integer" }, r2, s2) };
              e3 = e3.slice(0, a3);
            }
          }
          return { value: e3 };
        } }, validate(e3, { schema: t3, error: r2 }) {
          if (typeof e3 != "string")
            return { value: e3, errors: r2("string.base") };
          if (e3 === "") {
            const s2 = t3.$_getRule("min");
            if (s2 && s2.args.limit === 0)
              return;
            return { value: e3, errors: r2("string.empty") };
          }
        }, rules: { alphanum: { method() {
          return this.$_addRule("alphanum");
        }, validate: (e3, t3) => /^[a-zA-Z0-9]+$/.test(e3) ? e3 : t3.error("string.alphanum") }, base64: { method(e3 = {}) {
          return d.assertOptions(e3, ["paddingRequired", "urlSafe"]), e3 = n({ urlSafe: false, paddingRequired: true }, e3), o(typeof e3.paddingRequired == "boolean", "paddingRequired must be boolean"), o(typeof e3.urlSafe == "boolean", "urlSafe must be boolean"), this.$_addRule({ name: "base64", args: { options: e3 } });
        }, validate: (e3, t3, { options: r2 }) => p.base64Regex[r2.paddingRequired][r2.urlSafe].test(e3) ? e3 : t3.error("string.base64") }, case: { method(e3) {
          return o(["lower", "upper"].includes(e3), "Invalid case:", e3), this.$_addRule({ name: "case", args: { direction: e3 } });
        }, validate: (e3, t3, { direction: r2 }) => r2 === "lower" && e3 === e3.toLocaleLowerCase() || r2 === "upper" && e3 === e3.toLocaleUpperCase() ? e3 : t3.error("string.".concat(r2, "case")), convert: true }, creditCard: { method() {
          return this.$_addRule("creditCard");
        }, validate(e3, t3) {
          let r2 = e3.length, s2 = 0, n2 = 1;
          for (; r2--; ) {
            const t4 = e3.charAt(r2) * n2;
            s2 += t4 - 9 * (t4 > 9), n2 ^= 3;
          }
          return s2 > 0 && s2 % 10 == 0 ? e3 : t3.error("string.creditCard");
        } }, dataUri: { method(e3 = {}) {
          return d.assertOptions(e3, ["paddingRequired"]), e3 = n({ paddingRequired: true }, e3), o(typeof e3.paddingRequired == "boolean", "paddingRequired must be boolean"), this.$_addRule({ name: "dataUri", args: { options: e3 } });
        }, validate(e3, t3, { options: r2 }) {
          const s2 = e3.match(p.dataUriRegex);
          if (s2) {
            if (!s2[2])
              return e3;
            if (s2[2] !== "base64")
              return e3;
            if (p.base64Regex[r2.paddingRequired].false.test(s2[3]))
              return e3;
          }
          return t3.error("string.dataUri");
        } }, domain: { method(e3) {
          e3 && d.assertOptions(e3, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
          const t3 = p.addressOptions(e3);
          return this.$_addRule({ name: "domain", args: { options: e3 }, address: t3 });
        }, validate: (e3, t3, r2, { address: s2 }) => i.isValid(e3, s2) ? e3 : t3.error("string.domain") }, email: { method(e3 = {}) {
          d.assertOptions(e3, ["allowFullyQualified", "allowUnicode", "ignoreLength", "maxDomainSegments", "minDomainSegments", "multiple", "separator", "tlds"]), o(e3.multiple === void 0 || typeof e3.multiple == "boolean", "multiple option must be an boolean");
          const t3 = p.addressOptions(e3), r2 = new RegExp("\\s*[".concat(e3.separator ? u(e3.separator) : ",", "]\\s*"));
          return this.$_addRule({ name: "email", args: { options: e3 }, regex: r2, address: t3 });
        }, validate(e3, t3, { options: r2 }, { regex: s2, address: n2 }) {
          const a2 = r2.multiple ? e3.split(s2) : [e3], o2 = [];
          for (const e4 of a2)
            l.isValid(e4, n2) || o2.push(e4);
          return o2.length ? t3.error("string.email", { value: e3, invalids: o2 }) : e3;
        } }, guid: { alias: "uuid", method(e3 = {}) {
          d.assertOptions(e3, ["version", "separator"]);
          let t3 = "";
          if (e3.version) {
            const r3 = [].concat(e3.version);
            o(r3.length >= 1, "version must have at least 1 valid version specified");
            const s3 = /* @__PURE__ */ new Set();
            for (let e4 = 0; e4 < r3.length; ++e4) {
              const n2 = r3[e4];
              o(typeof n2 == "string", "version at position " + e4 + " must be a string");
              const a2 = p.guidVersions[n2.toLowerCase()];
              o(a2, "version at position " + e4 + " must be one of " + Object.keys(p.guidVersions).join(", ")), o(!s3.has(a2), "version at position " + e4 + " must not be a duplicate"), t3 += a2, s3.add(a2);
            }
          }
          o(p.guidSeparators.has(e3.separator), 'separator must be one of true, false, "-", or ":"');
          const r2 = e3.separator === void 0 ? "[:-]?" : e3.separator === true ? "[:-]" : e3.separator === false ? "[]?" : "\\".concat(e3.separator), s2 = new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(r2, ")[0-9A-F]{4}\\2?[").concat(t3 || "0-9A-F", "][0-9A-F]{3}\\2?[").concat(t3 ? "89AB" : "0-9A-F", "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"), "i");
          return this.$_addRule({ name: "guid", args: { options: e3 }, regex: s2 });
        }, validate(e3, t3, r2, { regex: s2 }) {
          const n2 = s2.exec(e3);
          return n2 ? p.guidBrackets[n2[1]] !== n2[n2.length - 1] ? t3.error("string.guid") : e3 : t3.error("string.guid");
        } }, hex: { method(e3 = {}) {
          return d.assertOptions(e3, ["byteAligned"]), e3 = n({ byteAligned: false }, e3), o(typeof e3.byteAligned == "boolean", "byteAligned must be boolean"), this.$_addRule({ name: "hex", args: { options: e3 } });
        }, validate: (e3, t3, { options: r2 }) => p.hexRegex.test(e3) ? r2.byteAligned && e3.length % 2 != 0 ? t3.error("string.hexAlign") : e3 : t3.error("string.hex") }, hostname: { method() {
          return this.$_addRule("hostname");
        }, validate: (e3, t3) => i.isValid(e3, { minDomainSegments: 1 }) || p.ipRegex.test(e3) ? e3 : t3.error("string.hostname") }, insensitive: { method() {
          return this.$_setFlag("insensitive", true);
        } }, ip: { method(e3 = {}) {
          d.assertOptions(e3, ["cidr", "version"]);
          const { cidr: t3, versions: r2, regex: s2 } = c.regex(e3), n2 = e3.version ? r2 : void 0;
          return this.$_addRule({ name: "ip", args: { options: { cidr: t3, version: n2 } }, regex: s2 });
        }, validate: (e3, t3, { options: r2 }, { regex: s2 }) => s2.test(e3) ? e3 : r2.version ? t3.error("string.ipVersion", { value: e3, cidr: r2.cidr, version: r2.version }) : t3.error("string.ip", { value: e3, cidr: r2.cidr }) }, isoDate: { method() {
          return this.$_addRule("isoDate");
        }, validate: (e3, { error: t3 }) => p.isoDate(e3) ? e3 : t3("string.isoDate") }, isoDuration: { method() {
          return this.$_addRule("isoDuration");
        }, validate: (e3, t3) => p.isoDurationRegex.test(e3) ? e3 : t3.error("string.isoDuration") }, length: { method(e3, t3) {
          return p.length(this, "length", e3, "=", t3);
        }, validate(e3, t3, { limit: r2, encoding: s2 }, { name: n2, operator: a2, args: o2 }) {
          const i2 = !s2 && e3.length;
          return d.compare(i2, r2, a2) ? e3 : t3.error("string." + n2, { limit: o2.limit, value: e3, encoding: s2 });
        }, args: [{ name: "limit", ref: true, assert: d.limit, message: "must be a positive integer" }, "encoding"] }, lowercase: { method() {
          return this.case("lower");
        } }, max: { method(e3, t3) {
          return p.length(this, "max", e3, "<=", t3);
        }, args: ["limit", "encoding"] }, min: { method(e3, t3) {
          return p.length(this, "min", e3, ">=", t3);
        }, args: ["limit", "encoding"] }, normalize: { method(e3 = "NFC") {
          return o(p.normalizationForms.includes(e3), "normalization form must be one of " + p.normalizationForms.join(", ")), this.$_addRule({ name: "normalize", args: { form: e3 } });
        }, validate: (e3, { error: t3 }, { form: r2 }) => e3 === e3.normalize(r2) ? e3 : t3("string.normalize", { value: e3, form: r2 }), convert: true }, pattern: { alias: "regex", method(e3, t3 = {}) {
          o(e3 instanceof RegExp, "regex must be a RegExp"), o(!e3.flags.includes("g") && !e3.flags.includes("y"), "regex should not use global or sticky mode"), typeof t3 == "string" && (t3 = { name: t3 }), d.assertOptions(t3, ["invert", "name"]);
          const r2 = ["string.pattern", t3.invert ? ".invert" : "", t3.name ? ".name" : ".base"].join("");
          return this.$_addRule({ name: "pattern", args: { regex: e3, options: t3 }, errorCode: r2 });
        }, validate: (e3, t3, { regex: r2, options: s2 }, { errorCode: n2 }) => r2.test(e3) ^ s2.invert ? e3 : t3.error(n2, { name: s2.name, regex: r2, value: e3 }), args: ["regex", "options"], multi: true }, replace: { method(e3, t3) {
          typeof e3 == "string" && (e3 = new RegExp(u(e3), "g")), o(e3 instanceof RegExp, "pattern must be a RegExp"), o(typeof t3 == "string", "replacement must be a String");
          const r2 = this.clone();
          return r2.$_terms.replacements || (r2.$_terms.replacements = []), r2.$_terms.replacements.push({ pattern: e3, replacement: t3 }), r2;
        } }, token: { method() {
          return this.$_addRule("token");
        }, validate: (e3, t3) => /^\w+$/.test(e3) ? e3 : t3.error("string.token") }, trim: { method(e3 = true) {
          return o(typeof e3 == "boolean", "enabled must be a boolean"), this.$_addRule({ name: "trim", args: { enabled: e3 } });
        }, validate: (e3, t3, { enabled: r2 }) => r2 && e3 !== e3.trim() ? t3.error("string.trim") : e3, convert: true }, truncate: { method(e3 = true) {
          return o(typeof e3 == "boolean", "enabled must be a boolean"), this.$_setFlag("truncate", e3);
        } }, uppercase: { method() {
          return this.case("upper");
        } }, uri: { method(e3 = {}) {
          d.assertOptions(e3, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme"]), e3.domain && d.assertOptions(e3.domain, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
          const { regex: t3, scheme: r2 } = m.regex(e3), s2 = e3.domain ? p.addressOptions(e3.domain) : null;
          return this.$_addRule({ name: "uri", args: { options: e3 }, regex: t3, domain: s2, scheme: r2 });
        }, validate(e3, t3, { options: r2 }, { regex: s2, domain: n2, scheme: a2 }) {
          if (["http:/", "https:/"].includes(e3))
            return t3.error("string.uri");
          const o2 = s2.exec(e3);
          if (o2) {
            const s3 = o2[1] || o2[2];
            return !n2 || r2.allowRelative && !s3 || i.isValid(s3, n2) ? e3 : t3.error("string.domain", { value: s3 });
          }
          return r2.relativeOnly ? t3.error("string.uriRelativeOnly") : r2.scheme ? t3.error("string.uriCustomScheme", { scheme: a2, value: e3 }) : t3.error("string.uri");
        } } }, manifest: { build(e3, t3) {
          if (t3.replacements)
            for (const { pattern: r2, replacement: s2 } of t3.replacements)
              e3 = e3.replace(r2, s2);
          return e3;
        } }, messages: { "string.alphanum": "{{#label}} must only contain alpha-numeric characters", "string.base": "{{#label}} must be a string", "string.base64": "{{#label}} must be a valid base64 string", "string.creditCard": "{{#label}} must be a credit card", "string.dataUri": "{{#label}} must be a valid dataUri string", "string.domain": "{{#label}} must contain a valid domain name", "string.email": "{{#label}} must be a valid email", "string.empty": "{{#label}} is not allowed to be empty", "string.guid": "{{#label}} must be a valid GUID", "string.hex": "{{#label}} must only contain hexadecimal characters", "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned", "string.hostname": "{{#label}} must be a valid hostname", "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR", "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR", "string.isoDate": "{{#label}} must be in iso format", "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration", "string.length": "{{#label}} length must be {{#limit}} characters long", "string.lowercase": "{{#label}} must only contain lowercase characters", "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long", "string.min": "{{#label}} length must be at least {{#limit}} characters long", "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form", "string.token": "{{#label}} must only contain alpha-numeric and underscore characters", "string.pattern.base": "{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}", "string.pattern.name": "{{#label}} with value {:[.]} fails to match the {{#name}} pattern", "string.pattern.invert.base": "{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}", "string.pattern.invert.name": "{{#label}} with value {:[.]} matches the inverted {{#name}} pattern", "string.trim": "{{#label}} must not have leading or trailing whitespace", "string.uri": "{{#label}} must be a valid uri", "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern", "string.uriRelativeOnly": "{{#label}} must be a valid relative uri", "string.uppercase": "{{#label}} must only contain uppercase characters" } }), p.addressOptions = function(e3) {
          if (!e3)
            return e3;
          if (o(e3.minDomainSegments === void 0 || Number.isSafeInteger(e3.minDomainSegments) && e3.minDomainSegments > 0, "minDomainSegments must be a positive integer"), o(e3.maxDomainSegments === void 0 || Number.isSafeInteger(e3.maxDomainSegments) && e3.maxDomainSegments > 0, "maxDomainSegments must be a positive integer"), e3.tlds === false)
            return e3;
          if (e3.tlds === true || e3.tlds === void 0)
            return o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e3, p.tlds);
          o(typeof e3.tlds == "object", "tlds must be true, false, or an object");
          const t3 = e3.tlds.deny;
          if (t3)
            return Array.isArray(t3) && (e3 = Object.assign({}, e3, { tlds: { deny: new Set(t3) } })), o(e3.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean"), o(!e3.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists"), p.validateTlds(e3.tlds.deny, "tlds.deny"), e3;
          const r2 = e3.tlds.allow;
          return r2 ? r2 === true ? (o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e3, p.tlds)) : (Array.isArray(r2) && (e3 = Object.assign({}, e3, { tlds: { allow: new Set(r2) } })), o(e3.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean"), p.validateTlds(e3.tlds.allow, "tlds.allow"), e3) : e3;
        }, p.validateTlds = function(e3, t3) {
          for (const r2 of e3)
            o(i.isValid(r2, { minDomainSegments: 1, maxDomainSegments: 1 }), "".concat(t3, " must contain valid top level domain names"));
        }, p.isoDate = function(e3) {
          if (!d.isIsoDate(e3))
            return null;
          /.*T.*[+-]\d\d$/.test(e3) && (e3 += "00");
          const t3 = new Date(e3);
          return isNaN(t3.getTime()) ? null : t3.toISOString();
        }, p.length = function(e3, t3, r2, s2, n2) {
          return o(!n2 || false, "Invalid encoding:", n2), e3.$_addRule({ name: t3, method: "length", args: { limit: r2, encoding: n2 }, operator: s2 });
        };
      }, 8826: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = {};
        a.Map = class extends Map {
          slice() {
            return new a.Map(this);
          }
        }, e2.exports = n.extend({ type: "symbol", terms: { map: { init: new a.Map() } }, coerce: { method(e3, { schema: t3, error: r2 }) {
          const s2 = t3.$_terms.map.get(e3);
          return s2 && (e3 = s2), t3._flags.only && typeof e3 != "symbol" ? { value: e3, errors: r2("symbol.map", { map: t3.$_terms.map }) } : { value: e3 };
        } }, validate(e3, { error: t3 }) {
          if (typeof e3 != "symbol")
            return { value: e3, errors: t3("symbol.base") };
        }, rules: { map: { method(e3) {
          e3 && !e3[Symbol.iterator] && typeof e3 == "object" && (e3 = Object.entries(e3)), s(e3 && e3[Symbol.iterator], "Iterable must be an iterable or object");
          const t3 = this.clone(), r2 = [];
          for (const n2 of e3) {
            s(n2 && n2[Symbol.iterator], "Entry must be an iterable");
            const [e4, a2] = n2;
            s(typeof e4 != "object" && typeof e4 != "function" && typeof e4 != "symbol", "Key must not be of type object, function, or Symbol"), s(typeof a2 == "symbol", "Value must be a Symbol"), t3.$_terms.map.set(e4, a2), r2.push(a2);
          }
          return t3.valid(...r2);
        } } }, manifest: { build: (e3, t3) => (t3.map && (e3 = e3.map(t3.map)), e3) }, messages: { "symbol.base": "{{#label}} must be a symbol", "symbol.map": "{{#label}} must be one of {{#map}}" } });
      }, 8863: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(738), o = r(9621), i = r(8160), l = r(6354), c = r(493), u = { result: Symbol("result") };
        t2.entry = function(e3, t3, r2) {
          let n2 = i.defaults;
          r2 && (s(r2.warnings === void 0, "Cannot override warnings preference in synchronous validation"), s(r2.artifacts === void 0, "Cannot override artifacts preference in synchronous validation"), n2 = i.preferences(i.defaults, r2));
          const a2 = u.entry(e3, t3, n2);
          s(!a2.mainstay.externals.length, "Schema with external rules must use validateAsync()");
          const o2 = { value: a2.value };
          return a2.error && (o2.error = a2.error), a2.mainstay.warnings.length && (o2.warning = l.details(a2.mainstay.warnings)), a2.mainstay.debug && (o2.debug = a2.mainstay.debug), a2.mainstay.artifacts && (o2.artifacts = a2.mainstay.artifacts), o2;
        }, t2.entryAsync = async function(e3, t3, r2) {
          let s2 = i.defaults;
          r2 && (s2 = i.preferences(i.defaults, r2));
          const n2 = u.entry(e3, t3, s2), a2 = n2.mainstay;
          if (n2.error)
            throw a2.debug && (n2.error.debug = a2.debug), n2.error;
          if (a2.externals.length) {
            let e4 = n2.value;
            for (const { method: t4, path: n3, label: i2 } of a2.externals) {
              let a3, l2, c3 = e4;
              n3.length && (a3 = n3[n3.length - 1], l2 = o(e4, n3.slice(0, -1)), c3 = l2[a3]);
              try {
                const s3 = await t4(c3, { prefs: r2 });
                if (s3 === void 0 || s3 === c3)
                  continue;
                l2 ? l2[a3] = s3 : e4 = s3;
              } catch (e5) {
                throw s2.errors.label && (e5.message += " (".concat(i2, ")")), e5;
              }
            }
            n2.value = e4;
          }
          if (!s2.warnings && !s2.debug && !s2.artifacts)
            return n2.value;
          const c2 = { value: n2.value };
          return a2.warnings.length && (c2.warning = l.details(a2.warnings)), a2.debug && (c2.debug = a2.debug), a2.artifacts && (c2.artifacts = a2.artifacts), c2;
        }, u.entry = function(e3, r2, s2) {
          const { tracer: n2, cleanup: a2 } = u.tracer(r2, s2), o2 = { externals: [], warnings: [], tracer: n2, debug: s2.debug ? [] : null, links: r2._ids._schemaChain ? /* @__PURE__ */ new Map() : null }, i2 = r2._ids._schemaChain ? [{ schema: r2 }] : null, f = new c([], [], { mainstay: o2, schemas: i2 }), m = t2.validate(e3, r2, f, s2);
          a2 && r2.$_root.untrace();
          const h = l.process(m.errors, e3, s2);
          return { value: m.value, error: h, mainstay: o2 };
        }, u.tracer = function(e3, t3) {
          return e3.$_root._tracer ? { tracer: e3.$_root._tracer._register(e3) } : t3.debug ? (s(e3.$_root.trace, "Debug mode not supported"), { tracer: e3.$_root.trace()._register(e3), cleanup: true }) : { tracer: u.ignore };
        }, t2.validate = function(e3, t3, r2, s2, n2 = {}) {
          if (t3.$_terms.whens && (t3 = t3._generate(e3, r2, s2).schema), t3._preferences && (s2 = u.prefs(t3, s2)), t3._cache && s2.cache) {
            const s3 = t3._cache.get(e3);
            if (r2.mainstay.tracer.debug(r2, "validate", "cached", !!s3), s3)
              return s3;
          }
          const a2 = (n3, a3, o3) => t3.$_createError(n3, e3, a3, o3 || r2, s2), o2 = { original: e3, prefs: s2, schema: t3, state: r2, error: a2, errorsArray: u.errorsArray, warn: (e4, t4, s3) => r2.mainstay.warnings.push(a2(e4, t4, s3)), message: (n3, a3) => t3.$_createError("custom", e3, a3, r2, s2, { messages: n3 }) };
          r2.mainstay.tracer.entry(t3, r2);
          const l2 = t3._definition;
          if (l2.prepare && e3 !== void 0 && s2.convert) {
            const t4 = l2.prepare(e3, o2);
            if (t4) {
              if (r2.mainstay.tracer.value(r2, "prepare", e3, t4.value), t4.errors)
                return u.finalize(t4.value, [].concat(t4.errors), o2);
              e3 = t4.value;
            }
          }
          if (l2.coerce && e3 !== void 0 && s2.convert && (!l2.coerce.from || l2.coerce.from.includes(typeof e3))) {
            const t4 = l2.coerce.method(e3, o2);
            if (t4) {
              if (r2.mainstay.tracer.value(r2, "coerced", e3, t4.value), t4.errors)
                return u.finalize(t4.value, [].concat(t4.errors), o2);
              e3 = t4.value;
            }
          }
          const c2 = t3._flags.empty;
          c2 && c2.$_match(u.trim(e3, t3), r2.nest(c2), i.defaults) && (r2.mainstay.tracer.value(r2, "empty", e3, void 0), e3 = void 0);
          const f = n2.presence || t3._flags.presence || (t3._flags._endedSwitch ? null : s2.presence);
          if (e3 === void 0) {
            if (f === "forbidden")
              return u.finalize(e3, null, o2);
            if (f === "required")
              return u.finalize(e3, [t3.$_createError("any.required", e3, null, r2, s2)], o2);
            if (f === "optional") {
              if (t3._flags.default !== i.symbols.deepDefault)
                return u.finalize(e3, null, o2);
              r2.mainstay.tracer.value(r2, "default", e3, {}), e3 = {};
            }
          } else if (f === "forbidden")
            return u.finalize(e3, [t3.$_createError("any.unknown", e3, null, r2, s2)], o2);
          const m = [];
          if (t3._valids) {
            const n3 = t3._valids.get(e3, r2, s2, t3._flags.insensitive);
            if (n3)
              return s2.convert && (r2.mainstay.tracer.value(r2, "valids", e3, n3.value), e3 = n3.value), r2.mainstay.tracer.filter(t3, r2, "valid", n3), u.finalize(e3, null, o2);
            if (t3._flags.only) {
              const n4 = t3.$_createError("any.only", e3, { valids: t3._valids.values({ display: true }) }, r2, s2);
              if (s2.abortEarly)
                return u.finalize(e3, [n4], o2);
              m.push(n4);
            }
          }
          if (t3._invalids) {
            const n3 = t3._invalids.get(e3, r2, s2, t3._flags.insensitive);
            if (n3) {
              r2.mainstay.tracer.filter(t3, r2, "invalid", n3);
              const a3 = t3.$_createError("any.invalid", e3, { invalids: t3._invalids.values({ display: true }) }, r2, s2);
              if (s2.abortEarly)
                return u.finalize(e3, [a3], o2);
              m.push(a3);
            }
          }
          if (l2.validate) {
            const t4 = l2.validate(e3, o2);
            if (t4 && (r2.mainstay.tracer.value(r2, "base", e3, t4.value), e3 = t4.value, t4.errors)) {
              if (!Array.isArray(t4.errors))
                return m.push(t4.errors), u.finalize(e3, m, o2);
              if (t4.errors.length)
                return m.push(...t4.errors), u.finalize(e3, m, o2);
            }
          }
          return t3._rules.length ? u.rules(e3, m, o2) : u.finalize(e3, m, o2);
        }, u.rules = function(e3, t3, r2) {
          const { schema: s2, state: n2, prefs: a2 } = r2;
          for (const o2 of s2._rules) {
            const l2 = s2._definition.rules[o2.method];
            if (l2.convert && a2.convert) {
              n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "full");
              continue;
            }
            let c2, f = o2.args;
            if (o2._resolve.length) {
              f = Object.assign({}, f);
              for (const t4 of o2._resolve) {
                const r3 = l2.argsByName.get(t4), o3 = f[t4].resolve(e3, n2, a2), u2 = r3.normalize ? r3.normalize(o3) : o3, m2 = i.validateArg(u2, null, r3);
                if (m2) {
                  c2 = s2.$_createError("any.ref", o3, { arg: t4, ref: f[t4], reason: m2 }, n2, a2);
                  break;
                }
                f[t4] = u2;
              }
            }
            c2 = c2 || l2.validate(e3, r2, f, o2);
            const m = u.rule(c2, o2);
            if (m.errors) {
              if (n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "error"), o2.warn) {
                n2.mainstay.warnings.push(...m.errors);
                continue;
              }
              if (a2.abortEarly)
                return u.finalize(e3, m.errors, r2);
              t3.push(...m.errors);
            } else
              n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "pass"), n2.mainstay.tracer.value(n2, "rule", e3, m.value, o2.name), e3 = m.value;
          }
          return u.finalize(e3, t3, r2);
        }, u.rule = function(e3, t3) {
          return e3 instanceof l.Report ? (u.error(e3, t3), { errors: [e3], value: null }) : Array.isArray(e3) && e3[i.symbols.errors] ? (e3.forEach((e4) => u.error(e4, t3)), { errors: e3, value: null }) : { errors: null, value: e3 };
        }, u.error = function(e3, t3) {
          return t3.message && e3._setTemplate(t3.message), e3;
        }, u.finalize = function(e3, t3, r2) {
          t3 = t3 || [];
          const { schema: n2, state: a2, prefs: o2 } = r2;
          if (t3.length) {
            const s2 = u.default("failover", void 0, t3, r2);
            s2 !== void 0 && (a2.mainstay.tracer.value(a2, "failover", e3, s2), e3 = s2, t3 = []);
          }
          if (t3.length && n2._flags.error)
            if (typeof n2._flags.error == "function") {
              t3 = n2._flags.error(t3), Array.isArray(t3) || (t3 = [t3]);
              for (const e4 of t3)
                s(e4 instanceof Error || e4 instanceof l.Report, "error() must return an Error object");
            } else
              t3 = [n2._flags.error];
          if (e3 === void 0) {
            const s2 = u.default("default", e3, t3, r2);
            a2.mainstay.tracer.value(a2, "default", e3, s2), e3 = s2;
          }
          if (n2._flags.cast && e3 !== void 0) {
            const t4 = n2._definition.cast[n2._flags.cast];
            if (t4.from(e3)) {
              const s2 = t4.to(e3, r2);
              a2.mainstay.tracer.value(a2, "cast", e3, s2, n2._flags.cast), e3 = s2;
            }
          }
          if (n2.$_terms.externals && o2.externals && o2._externals !== false)
            for (const { method: e4 } of n2.$_terms.externals)
              a2.mainstay.externals.push({ method: e4, path: a2.path, label: l.label(n2._flags, a2, o2) });
          const i2 = { value: e3, errors: t3.length ? t3 : null };
          return n2._flags.result && (i2.value = n2._flags.result === "strip" ? void 0 : r2.original, a2.mainstay.tracer.value(a2, n2._flags.result, e3, i2.value), a2.shadow(e3, n2._flags.result)), n2._cache && o2.cache !== false && !n2._refs.length && n2._cache.set(r2.original, i2), e3 === void 0 || i2.errors || n2._flags.artifact === void 0 || (a2.mainstay.artifacts = a2.mainstay.artifacts || /* @__PURE__ */ new Map(), a2.mainstay.artifacts.has(n2._flags.artifact) || a2.mainstay.artifacts.set(n2._flags.artifact, []), a2.mainstay.artifacts.get(n2._flags.artifact).push(a2.path)), i2;
        }, u.prefs = function(e3, t3) {
          const r2 = t3 === i.defaults;
          return r2 && e3._preferences[i.symbols.prefs] ? e3._preferences[i.symbols.prefs] : (t3 = i.preferences(t3, e3._preferences), r2 && (e3._preferences[i.symbols.prefs] = t3), t3);
        }, u.default = function(e3, t3, r2, s2) {
          const { schema: a2, state: o2, prefs: l2 } = s2, c2 = a2._flags[e3];
          if (l2.noDefaults || c2 === void 0)
            return t3;
          if (o2.mainstay.tracer.log(a2, o2, "rule", e3, "full"), !c2)
            return c2;
          if (typeof c2 == "function") {
            const t4 = c2.length ? [n(o2.ancestors[0]), s2] : [];
            try {
              return c2(...t4);
            } catch (t5) {
              return void r2.push(a2.$_createError("any.".concat(e3), null, { error: t5 }, o2, l2));
            }
          }
          return typeof c2 != "object" ? c2 : c2[i.symbols.literal] ? c2.literal : i.isResolvable(c2) ? c2.resolve(t3, o2, l2) : n(c2);
        }, u.trim = function(e3, t3) {
          if (typeof e3 != "string")
            return e3;
          const r2 = t3.$_getRule("trim");
          return r2 && r2.args.enabled ? e3.trim() : e3;
        }, u.ignore = { active: false, debug: a, entry: a, filter: a, log: a, resolve: a, value: a }, u.errorsArray = function() {
          const e3 = [];
          return e3[i.symbols.errors] = true, e3;
        };
      }, 2036: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(9474), a = r(8160), o = {};
        e2.exports = o.Values = class {
          constructor(e3, t3) {
            this._values = new Set(e3), this._refs = new Set(t3), this._lowercase = o.lowercases(e3), this._override = false;
          }
          get length() {
            return this._values.size + this._refs.size;
          }
          add(e3, t3) {
            a.isResolvable(e3) ? this._refs.has(e3) || (this._refs.add(e3), t3 && t3.register(e3)) : this.has(e3, null, null, false) || (this._values.add(e3), typeof e3 == "string" && this._lowercase.set(e3.toLowerCase(), e3));
          }
          static merge(e3, t3, r2) {
            if (e3 = e3 || new o.Values(), t3) {
              if (t3._override)
                return t3.clone();
              for (const r3 of [...t3._values, ...t3._refs])
                e3.add(r3);
            }
            if (r2)
              for (const t4 of [...r2._values, ...r2._refs])
                e3.remove(t4);
            return e3.length ? e3 : null;
          }
          remove(e3) {
            a.isResolvable(e3) ? this._refs.delete(e3) : (this._values.delete(e3), typeof e3 == "string" && this._lowercase.delete(e3.toLowerCase()));
          }
          has(e3, t3, r2, s2) {
            return !!this.get(e3, t3, r2, s2);
          }
          get(e3, t3, r2, s2) {
            if (!this.length)
              return false;
            if (this._values.has(e3))
              return { value: e3 };
            if (typeof e3 == "string" && e3 && s2) {
              const t4 = this._lowercase.get(e3.toLowerCase());
              if (t4)
                return { value: t4 };
            }
            if (!this._refs.size && typeof e3 != "object")
              return false;
            if (typeof e3 == "object") {
              for (const t4 of this._values)
                if (n(t4, e3))
                  return { value: t4 };
            }
            if (t3)
              for (const a2 of this._refs) {
                const o2 = a2.resolve(e3, t3, r2, null, { in: true });
                if (o2 === void 0)
                  continue;
                const i = a2.in && typeof o2 == "object" ? Array.isArray(o2) ? o2 : Object.keys(o2) : [o2];
                for (const t4 of i)
                  if (typeof t4 == typeof e3) {
                    if (s2 && e3 && typeof e3 == "string") {
                      if (t4.toLowerCase() === e3.toLowerCase())
                        return { value: t4, ref: a2 };
                    } else if (n(t4, e3))
                      return { value: t4, ref: a2 };
                  }
              }
            return false;
          }
          override() {
            this._override = true;
          }
          values(e3) {
            if (e3 && e3.display) {
              const e4 = [];
              for (const t3 of [...this._values, ...this._refs])
                t3 !== void 0 && e4.push(t3);
              return e4;
            }
            return Array.from([...this._values, ...this._refs]);
          }
          clone() {
            const e3 = new o.Values(this._values, this._refs);
            return e3._override = this._override, e3;
          }
          concat(e3) {
            s(!e3._override, "Cannot concat override set of values");
            const t3 = new o.Values([...this._values, ...e3._values], [...this._refs, ...e3._refs]);
            return t3._override = this._override, t3;
          }
          describe() {
            const e3 = [];
            this._override && e3.push({ override: true });
            for (const t3 of this._values.values())
              e3.push(t3 && typeof t3 == "object" ? { value: t3 } : t3);
            for (const t3 of this._refs.values())
              e3.push(t3.describe());
            return e3;
          }
        }, o.Values.prototype[a.symbols.values] = true, o.Values.prototype.slice = o.Values.prototype.clone, o.lowercases = function(e3) {
          const t3 = /* @__PURE__ */ new Map();
          if (e3)
            for (const r2 of e3)
              typeof r2 == "string" && t3.set(r2.toLowerCase(), r2);
          return t3;
        };
      }, 978: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(1687), o = r(9621), i = {};
        e2.exports = function(e3, t3, r2 = {}) {
          if (s(e3 && typeof e3 == "object", "Invalid defaults value: must be an object"), s(!t3 || t3 === true || typeof t3 == "object", "Invalid source value: must be true, falsy or an object"), s(typeof r2 == "object", "Invalid options: must be an object"), !t3)
            return null;
          if (r2.shallow)
            return i.applyToDefaultsWithShallow(e3, t3, r2);
          const o2 = n(e3);
          if (t3 === true)
            return o2;
          const l = r2.nullOverride !== void 0 && r2.nullOverride;
          return a(o2, t3, { nullOverride: l, mergeArrays: false });
        }, i.applyToDefaultsWithShallow = function(e3, t3, r2) {
          const l = r2.shallow;
          s(Array.isArray(l), "Invalid keys");
          const c = /* @__PURE__ */ new Map(), u = t3 === true ? null : /* @__PURE__ */ new Set();
          for (let r3 of l) {
            r3 = Array.isArray(r3) ? r3 : r3.split(".");
            const s2 = o(e3, r3);
            s2 && typeof s2 == "object" ? c.set(s2, u && o(t3, r3) || s2) : u && u.add(r3);
          }
          const f = n(e3, {}, c);
          if (!u)
            return f;
          for (const e4 of u)
            i.reachCopy(f, t3, e4);
          const m = r2.nullOverride !== void 0 && r2.nullOverride;
          return a(f, t3, { nullOverride: m, mergeArrays: false });
        }, i.reachCopy = function(e3, t3, r2) {
          for (const e4 of r2) {
            if (!(e4 in t3))
              return;
            const r3 = t3[e4];
            if (typeof r3 != "object" || r3 === null)
              return;
            t3 = r3;
          }
          const s2 = t3;
          let n2 = e3;
          for (let e4 = 0; e4 < r2.length - 1; ++e4) {
            const t4 = r2[e4];
            typeof n2[t4] != "object" && (n2[t4] = {}), n2 = n2[t4];
          }
          n2[r2[r2.length - 1]] = s2;
        };
      }, 375: (e2, t2, r) => {
        "use strict";
        const s = r(7916);
        e2.exports = function(e3, ...t3) {
          if (!e3) {
            if (t3.length === 1 && t3[0] instanceof Error)
              throw t3[0];
            throw new s(t3);
          }
        };
      }, 8571: (e2, t2, r) => {
        "use strict";
        const s = r(9621), n = r(4277), a = r(7043), o = { needsProtoHack: /* @__PURE__ */ new Set([n.set, n.map, n.weakSet, n.weakMap]) };
        e2.exports = o.clone = function(e3, t3 = {}, r2 = null) {
          if (typeof e3 != "object" || e3 === null)
            return e3;
          let s2 = o.clone, i = r2;
          if (t3.shallow) {
            if (t3.shallow !== true)
              return o.cloneWithShallow(e3, t3);
            s2 = (e4) => e4;
          } else if (i) {
            const t4 = i.get(e3);
            if (t4)
              return t4;
          } else
            i = /* @__PURE__ */ new Map();
          const l = n.getInternalProto(e3);
          if (l === n.buffer)
            return false;
          if (l === n.date)
            return new Date(e3.getTime());
          if (l === n.regex)
            return new RegExp(e3);
          const c = o.base(e3, l, t3);
          if (c === e3)
            return e3;
          if (i && i.set(e3, c), l === n.set)
            for (const r3 of e3)
              c.add(s2(r3, t3, i));
          else if (l === n.map)
            for (const [r3, n2] of e3)
              c.set(r3, s2(n2, t3, i));
          const u = a.keys(e3, t3);
          for (const r3 of u) {
            if (r3 === "__proto__")
              continue;
            if (l === n.array && r3 === "length") {
              c.length = e3.length;
              continue;
            }
            const a2 = Object.getOwnPropertyDescriptor(e3, r3);
            a2 ? a2.get || a2.set ? Object.defineProperty(c, r3, a2) : a2.enumerable ? c[r3] = s2(e3[r3], t3, i) : Object.defineProperty(c, r3, { enumerable: false, writable: true, configurable: true, value: s2(e3[r3], t3, i) }) : Object.defineProperty(c, r3, { enumerable: true, writable: true, configurable: true, value: s2(e3[r3], t3, i) });
          }
          return c;
        }, o.cloneWithShallow = function(e3, t3) {
          const r2 = t3.shallow;
          (t3 = Object.assign({}, t3)).shallow = false;
          const n2 = /* @__PURE__ */ new Map();
          for (const t4 of r2) {
            const r3 = s(e3, t4);
            typeof r3 != "object" && typeof r3 != "function" || n2.set(r3, r3);
          }
          return o.clone(e3, t3, n2);
        }, o.base = function(e3, t3, r2) {
          if (r2.prototype === false)
            return o.needsProtoHack.has(t3) ? new t3.constructor() : t3 === n.array ? [] : {};
          const s2 = Object.getPrototypeOf(e3);
          if (s2 && s2.isImmutable)
            return e3;
          if (t3 === n.array) {
            const e4 = [];
            return s2 !== t3 && Object.setPrototypeOf(e4, s2), e4;
          }
          if (o.needsProtoHack.has(t3)) {
            const e4 = new s2.constructor();
            return s2 !== t3 && Object.setPrototypeOf(e4, s2), e4;
          }
          return Object.create(s2);
        };
      }, 9474: (e2, t2, r) => {
        "use strict";
        const s = r(4277), n = { mismatched: null };
        e2.exports = function(e3, t3, r2) {
          return r2 = Object.assign({ prototype: true }, r2), !!n.isDeepEqual(e3, t3, r2, []);
        }, n.isDeepEqual = function(e3, t3, r2, a) {
          if (e3 === t3)
            return e3 !== 0 || 1 / e3 == 1 / t3;
          const o = typeof e3;
          if (o !== typeof t3)
            return false;
          if (e3 === null || t3 === null)
            return false;
          if (o === "function") {
            if (!r2.deepFunction || e3.toString() !== t3.toString())
              return false;
          } else if (o !== "object")
            return e3 != e3 && t3 != t3;
          const i = n.getSharedType(e3, t3, !!r2.prototype);
          switch (i) {
            case s.buffer:
              return false;
            case s.promise:
              return e3 === t3;
            case s.regex:
              return e3.toString() === t3.toString();
            case n.mismatched:
              return false;
          }
          for (let r3 = a.length - 1; r3 >= 0; --r3)
            if (a[r3].isSame(e3, t3))
              return true;
          a.push(new n.SeenEntry(e3, t3));
          try {
            return !!n.isDeepEqualObj(i, e3, t3, r2, a);
          } finally {
            a.pop();
          }
        }, n.getSharedType = function(e3, t3, r2) {
          if (r2)
            return Object.getPrototypeOf(e3) !== Object.getPrototypeOf(t3) ? n.mismatched : s.getInternalProto(e3);
          const a = s.getInternalProto(e3);
          return a !== s.getInternalProto(t3) ? n.mismatched : a;
        }, n.valueOf = function(e3) {
          const t3 = e3.valueOf;
          if (t3 === void 0)
            return e3;
          try {
            return t3.call(e3);
          } catch (e4) {
            return e4;
          }
        }, n.hasOwnEnumerableProperty = function(e3, t3) {
          return Object.prototype.propertyIsEnumerable.call(e3, t3);
        }, n.isSetSimpleEqual = function(e3, t3) {
          for (const r2 of Set.prototype.values.call(e3))
            if (!Set.prototype.has.call(t3, r2))
              return false;
          return true;
        }, n.isDeepEqualObj = function(e3, t3, r2, a, o) {
          const { isDeepEqual: i, valueOf: l, hasOwnEnumerableProperty: c } = n, { keys: u, getOwnPropertySymbols: f } = Object;
          if (e3 === s.array) {
            if (!a.part) {
              if (t3.length !== r2.length)
                return false;
              for (let e4 = 0; e4 < t3.length; ++e4)
                if (!i(t3[e4], r2[e4], a, o))
                  return false;
              return true;
            }
            for (const e4 of t3)
              for (const t4 of r2)
                if (i(e4, t4, a, o))
                  return true;
          } else if (e3 === s.set) {
            if (t3.size !== r2.size)
              return false;
            if (!n.isSetSimpleEqual(t3, r2)) {
              const e4 = new Set(Set.prototype.values.call(r2));
              for (const r3 of Set.prototype.values.call(t3)) {
                if (e4.delete(r3))
                  continue;
                let t4 = false;
                for (const s2 of e4)
                  if (i(r3, s2, a, o)) {
                    e4.delete(s2), t4 = true;
                    break;
                  }
                if (!t4)
                  return false;
              }
            }
          } else if (e3 === s.map) {
            if (t3.size !== r2.size)
              return false;
            for (const [e4, s2] of Map.prototype.entries.call(t3)) {
              if (s2 === void 0 && !Map.prototype.has.call(r2, e4))
                return false;
              if (!i(s2, Map.prototype.get.call(r2, e4), a, o))
                return false;
            }
          } else if (e3 === s.error && (t3.name !== r2.name || t3.message !== r2.message))
            return false;
          const m = l(t3), h = l(r2);
          if ((t3 !== m || r2 !== h) && !i(m, h, a, o))
            return false;
          const d = u(t3);
          if (!a.part && d.length !== u(r2).length && !a.skip)
            return false;
          let p = 0;
          for (const e4 of d)
            if (a.skip && a.skip.includes(e4))
              r2[e4] === void 0 && ++p;
            else {
              if (!c(r2, e4))
                return false;
              if (!i(t3[e4], r2[e4], a, o))
                return false;
            }
          if (!a.part && d.length - p !== u(r2).length)
            return false;
          if (a.symbols !== false) {
            const e4 = f(t3), s2 = new Set(f(r2));
            for (const n2 of e4) {
              if (!a.skip || !a.skip.includes(n2)) {
                if (c(t3, n2)) {
                  if (!c(r2, n2))
                    return false;
                  if (!i(t3[n2], r2[n2], a, o))
                    return false;
                } else if (c(r2, n2))
                  return false;
              }
              s2.delete(n2);
            }
            for (const e5 of s2)
              if (c(r2, e5))
                return false;
          }
          return true;
        }, n.SeenEntry = class {
          constructor(e3, t3) {
            this.obj = e3, this.ref = t3;
          }
          isSame(e3, t3) {
            return this.obj === e3 && this.ref === t3;
          }
        };
      }, 7916: (e2, t2, r) => {
        "use strict";
        const s = r(8761);
        e2.exports = class extends Error {
          constructor(e3) {
            super(e3.filter((e4) => e4 !== "").map((e4) => typeof e4 == "string" ? e4 : e4 instanceof Error ? e4.message : s(e4)).join(" ") || "Unknown error"), typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, t2.assert);
          }
        };
      }, 5277: (e2) => {
        "use strict";
        const t2 = {};
        e2.exports = function(e3) {
          if (!e3)
            return "";
          let r = "";
          for (let s = 0; s < e3.length; ++s) {
            const n = e3.charCodeAt(s);
            t2.isSafe(n) ? r += e3[s] : r += t2.escapeHtmlChar(n);
          }
          return r;
        }, t2.escapeHtmlChar = function(e3) {
          const r = t2.namedHtml[e3];
          if (r !== void 0)
            return r;
          if (e3 >= 256)
            return "&#" + e3 + ";";
          const s = e3.toString(16).padStart(2, "0");
          return "&#x".concat(s, ";");
        }, t2.isSafe = function(e3) {
          return t2.safeCharCodes[e3] !== void 0;
        }, t2.namedHtml = { 38: "&amp;", 60: "&lt;", 62: "&gt;", 34: "&quot;", 160: "&nbsp;", 162: "&cent;", 163: "&pound;", 164: "&curren;", 169: "&copy;", 174: "&reg;" }, t2.safeCharCodes = function() {
          const e3 = {};
          for (let t3 = 32; t3 < 123; ++t3)
            (t3 >= 97 || t3 >= 65 && t3 <= 90 || t3 >= 48 && t3 <= 57 || t3 === 32 || t3 === 46 || t3 === 44 || t3 === 45 || t3 === 58 || t3 === 95) && (e3[t3] = null);
          return e3;
        }();
      }, 6064: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          return e3.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
        };
      }, 738: (e2) => {
        "use strict";
        e2.exports = function() {
        };
      }, 1687: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(7043), o = {};
        e2.exports = o.merge = function(e3, t3, r2) {
          if (s(e3 && typeof e3 == "object", "Invalid target value: must be an object"), s(t3 == null || typeof t3 == "object", "Invalid source value: must be null, undefined, or an object"), !t3)
            return e3;
          if (r2 = Object.assign({ nullOverride: true, mergeArrays: true }, r2), Array.isArray(t3)) {
            s(Array.isArray(e3), "Cannot merge array onto an object"), r2.mergeArrays || (e3.length = 0);
            for (let s2 = 0; s2 < t3.length; ++s2)
              e3.push(n(t3[s2], { symbols: r2.symbols }));
            return e3;
          }
          const i = a.keys(t3, r2);
          for (let s2 = 0; s2 < i.length; ++s2) {
            const a2 = i[s2];
            if (a2 === "__proto__" || !Object.prototype.propertyIsEnumerable.call(t3, a2))
              continue;
            const l = t3[a2];
            if (l && typeof l == "object") {
              if (e3[a2] === l)
                continue;
              !e3[a2] || typeof e3[a2] != "object" || Array.isArray(e3[a2]) !== Array.isArray(l) || l instanceof Date || l instanceof RegExp ? e3[a2] = n(l, { symbols: r2.symbols }) : o.merge(e3[a2], l, r2);
            } else
              (l != null || r2.nullOverride) && (e3[a2] = l);
          }
          return e3;
        };
      }, 9621: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = {};
        e2.exports = function(e3, t3, r2) {
          if (t3 === false || t3 == null)
            return e3;
          typeof (r2 = r2 || {}) == "string" && (r2 = { separator: r2 });
          const a = Array.isArray(t3);
          s(!a || !r2.separator, "Separator option no valid for array-based chain");
          const o = a ? t3 : t3.split(r2.separator || ".");
          let i = e3;
          for (let e4 = 0; e4 < o.length; ++e4) {
            let a2 = o[e4];
            const l = r2.iterables && n.iterables(i);
            if (Array.isArray(i) || l === "set") {
              const e5 = Number(a2);
              Number.isInteger(e5) && (a2 = e5 < 0 ? i.length + e5 : e5);
            }
            if (!i || typeof i == "function" && r2.functions === false || !l && i[a2] === void 0) {
              s(!r2.strict || e4 + 1 === o.length, "Missing segment", a2, "in reach path ", t3), s(typeof i == "object" || r2.functions === true || typeof i != "function", "Invalid segment", a2, "in reach path ", t3), i = r2.default;
              break;
            }
            i = l ? l === "set" ? [...i][a2] : i.get(a2) : i[a2];
          }
          return i;
        }, n.iterables = function(e3) {
          return e3 instanceof Set ? "set" : e3 instanceof Map ? "map" : void 0;
        };
      }, 8761: (e2) => {
        "use strict";
        e2.exports = function(...e3) {
          try {
            return JSON.stringify.apply(null, e3);
          } catch (e4) {
            return "[Cannot display object: " + e4.message + "]";
          }
        };
      }, 4277: (e2, t2) => {
        "use strict";
        const r = {};
        t2 = e2.exports = { array: Array.prototype, buffer: false, date: Date.prototype, error: Error.prototype, generic: Object.prototype, map: Map.prototype, promise: Promise.prototype, regex: RegExp.prototype, set: Set.prototype, weakMap: WeakMap.prototype, weakSet: WeakSet.prototype }, r.typeMap = /* @__PURE__ */ new Map([["[object Error]", t2.error], ["[object Map]", t2.map], ["[object Promise]", t2.promise], ["[object Set]", t2.set], ["[object WeakMap]", t2.weakMap], ["[object WeakSet]", t2.weakSet]]), t2.getInternalProto = function(e3) {
          if (Array.isArray(e3))
            return t2.array;
          if (e3 instanceof Date)
            return t2.date;
          if (e3 instanceof RegExp)
            return t2.regex;
          if (e3 instanceof Error)
            return t2.error;
          const s = Object.prototype.toString.call(e3);
          return r.typeMap.get(s) || t2.generic;
        };
      }, 7043: (e2, t2) => {
        "use strict";
        t2.keys = function(e3, t3 = {}) {
          return t3.symbols !== false ? Reflect.ownKeys(e3) : Object.getOwnPropertyNames(e3);
        };
      }, 3652: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = {};
        t2.Sorter = class {
          constructor() {
            this._items = [], this.nodes = [];
          }
          add(e3, t3) {
            const r2 = [].concat((t3 = t3 || {}).before || []), n2 = [].concat(t3.after || []), a = t3.group || "?", o = t3.sort || 0;
            s(!r2.includes(a), "Item cannot come before itself: ".concat(a)), s(!r2.includes("?"), "Item cannot come before unassociated items"), s(!n2.includes(a), "Item cannot come after itself: ".concat(a)), s(!n2.includes("?"), "Item cannot come after unassociated items"), Array.isArray(e3) || (e3 = [e3]);
            for (const t4 of e3) {
              const e4 = { seq: this._items.length, sort: o, before: r2, after: n2, group: a, node: t4 };
              this._items.push(e4);
            }
            if (!t3.manual) {
              const e4 = this._sort();
              s(e4, "item", a !== "?" ? "added into group ".concat(a) : "", "created a dependencies error");
            }
            return this.nodes;
          }
          merge(e3) {
            Array.isArray(e3) || (e3 = [e3]);
            for (const t4 of e3)
              if (t4)
                for (const e4 of t4._items)
                  this._items.push(Object.assign({}, e4));
            this._items.sort(n.mergeSort);
            for (let e4 = 0; e4 < this._items.length; ++e4)
              this._items[e4].seq = e4;
            const t3 = this._sort();
            return s(t3, "merge created a dependencies error"), this.nodes;
          }
          sort() {
            const e3 = this._sort();
            return s(e3, "sort created a dependencies error"), this.nodes;
          }
          _sort() {
            const e3 = {}, t3 = /* @__PURE__ */ Object.create(null), r2 = /* @__PURE__ */ Object.create(null);
            for (const s3 of this._items) {
              const n3 = s3.seq, a2 = s3.group;
              r2[a2] = r2[a2] || [], r2[a2].push(n3), e3[n3] = s3.before;
              for (const e4 of s3.after)
                t3[e4] = t3[e4] || [], t3[e4].push(n3);
            }
            for (const t4 in e3) {
              const s3 = [];
              for (const n3 in e3[t4]) {
                const a2 = e3[t4][n3];
                r2[a2] = r2[a2] || [], s3.push(...r2[a2]);
              }
              e3[t4] = s3;
            }
            for (const s3 in t3)
              if (r2[s3])
                for (const n3 of r2[s3])
                  e3[n3].push(...t3[s3]);
            const s2 = {};
            for (const t4 in e3) {
              const r3 = e3[t4];
              for (const e4 of r3)
                s2[e4] = s2[e4] || [], s2[e4].push(t4);
            }
            const n2 = {}, a = [];
            for (let e4 = 0; e4 < this._items.length; ++e4) {
              let t4 = e4;
              if (s2[e4]) {
                t4 = null;
                for (let e5 = 0; e5 < this._items.length; ++e5) {
                  if (n2[e5] === true)
                    continue;
                  s2[e5] || (s2[e5] = []);
                  const r3 = s2[e5].length;
                  let a2 = 0;
                  for (let t5 = 0; t5 < r3; ++t5)
                    n2[s2[e5][t5]] && ++a2;
                  if (a2 === r3) {
                    t4 = e5;
                    break;
                  }
                }
              }
              t4 !== null && (n2[t4] = true, a.push(t4));
            }
            if (a.length !== this._items.length)
              return false;
            const o = {};
            for (const e4 of this._items)
              o[e4.seq] = e4;
            this._items = [], this.nodes = [];
            for (const e4 of a) {
              const t4 = o[e4];
              this.nodes.push(t4.node), this._items.push(t4);
            }
            return true;
          }
        }, n.mergeSort = (e3, t3) => e3.sort === t3.sort ? 0 : e3.sort < t3.sort ? -1 : 1;
      }, 5380: (e2, t2, r) => {
        "use strict";
        const s = r(443), n = r(2178), a = { minDomainSegments: 2, nonAsciiRx: /[^\x00-\x7f]/, domainControlRx: /[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/, tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/, domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/, URL: s.URL || URL };
        t2.analyze = function(e3, t3 = {}) {
          if (!e3)
            return n.code("DOMAIN_NON_EMPTY_STRING");
          if (typeof e3 != "string")
            throw new Error("Invalid input: domain must be a string");
          if (e3.length > 256)
            return n.code("DOMAIN_TOO_LONG");
          if (a.nonAsciiRx.test(e3)) {
            if (t3.allowUnicode === false)
              return n.code("DOMAIN_INVALID_UNICODE_CHARS");
            e3 = e3.normalize("NFC");
          }
          if (a.domainControlRx.test(e3))
            return n.code("DOMAIN_INVALID_CHARS");
          e3 = a.punycode(e3), t3.allowFullyQualified && e3[e3.length - 1] === "." && (e3 = e3.slice(0, -1));
          const r2 = t3.minDomainSegments || a.minDomainSegments, s2 = e3.split(".");
          if (s2.length < r2)
            return n.code("DOMAIN_SEGMENTS_COUNT");
          if (t3.maxDomainSegments && s2.length > t3.maxDomainSegments)
            return n.code("DOMAIN_SEGMENTS_COUNT_MAX");
          const o = t3.tlds;
          if (o) {
            const e4 = s2[s2.length - 1].toLowerCase();
            if (o.deny && o.deny.has(e4) || o.allow && !o.allow.has(e4))
              return n.code("DOMAIN_FORBIDDEN_TLDS");
          }
          for (let e4 = 0; e4 < s2.length; ++e4) {
            const t4 = s2[e4];
            if (!t4.length)
              return n.code("DOMAIN_EMPTY_SEGMENT");
            if (t4.length > 63)
              return n.code("DOMAIN_LONG_SEGMENT");
            if (e4 < s2.length - 1) {
              if (!a.domainSegmentRx.test(t4))
                return n.code("DOMAIN_INVALID_CHARS");
            } else if (!a.tldSegmentRx.test(t4))
              return n.code("DOMAIN_INVALID_TLDS_CHARS");
          }
          return null;
        }, t2.isValid = function(e3, r2) {
          return !t2.analyze(e3, r2);
        }, a.punycode = function(e3) {
          e3.includes("%") && (e3 = e3.replace(/%/g, "%25"));
          try {
            return new a.URL("http://".concat(e3)).host;
          } catch (t3) {
            return e3;
          }
        };
      }, 1745: (e2, t2, r) => {
        "use strict";
        const s = r(9848), n = r(5380), a = r(2178), o = { nonAsciiRx: /[^\x00-\x7f]/, encoder: new (s.TextEncoder || TextEncoder)() };
        t2.analyze = function(e3, t3) {
          return o.email(e3, t3);
        }, t2.isValid = function(e3, t3) {
          return !o.email(e3, t3);
        }, o.email = function(e3, t3 = {}) {
          if (typeof e3 != "string")
            throw new Error("Invalid input: email must be a string");
          if (!e3)
            return a.code("EMPTY_STRING");
          const r2 = !o.nonAsciiRx.test(e3);
          if (!r2) {
            if (t3.allowUnicode === false)
              return a.code("FORBIDDEN_UNICODE");
            e3 = e3.normalize("NFC");
          }
          const s2 = e3.split("@");
          if (s2.length !== 2)
            return s2.length > 2 ? a.code("MULTIPLE_AT_CHAR") : a.code("MISSING_AT_CHAR");
          const [i, l] = s2;
          if (!i)
            return a.code("EMPTY_LOCAL");
          if (!t3.ignoreLength) {
            if (e3.length > 254)
              return a.code("ADDRESS_TOO_LONG");
            if (o.encoder.encode(i).length > 64)
              return a.code("LOCAL_TOO_LONG");
          }
          return o.local(i, r2) || n.analyze(l, t3);
        }, o.local = function(e3, t3) {
          const r2 = e3.split(".");
          for (const e4 of r2) {
            if (!e4.length)
              return a.code("EMPTY_LOCAL_SEGMENT");
            if (t3) {
              if (!o.atextRx.test(e4))
                return a.code("INVALID_LOCAL_CHARS");
            } else
              for (const t4 of e4) {
                if (o.atextRx.test(t4))
                  continue;
                const e5 = o.binary(t4);
                if (!o.atomRx.test(e5))
                  return a.code("INVALID_LOCAL_CHARS");
              }
          }
        }, o.binary = function(e3) {
          return Array.from(o.encoder.encode(e3)).map((e4) => String.fromCharCode(e4)).join("");
        }, o.atextRx = /^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/, o.atomRx = new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])", "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})", "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"));
      }, 2178: (e2, t2) => {
        "use strict";
        t2.codes = { EMPTY_STRING: "Address must be a non-empty string", FORBIDDEN_UNICODE: "Address contains forbidden Unicode characters", MULTIPLE_AT_CHAR: "Address cannot contain more than one @ character", MISSING_AT_CHAR: "Address must contain one @ character", EMPTY_LOCAL: "Address local part cannot be empty", ADDRESS_TOO_LONG: "Address too long", LOCAL_TOO_LONG: "Address local part too long", EMPTY_LOCAL_SEGMENT: "Address local part contains empty dot-separated segment", INVALID_LOCAL_CHARS: "Address local part contains invalid character", DOMAIN_NON_EMPTY_STRING: "Domain must be a non-empty string", DOMAIN_TOO_LONG: "Domain too long", DOMAIN_INVALID_UNICODE_CHARS: "Domain contains forbidden Unicode characters", DOMAIN_INVALID_CHARS: "Domain contains invalid character", DOMAIN_INVALID_TLDS_CHARS: "Domain contains invalid tld character", DOMAIN_SEGMENTS_COUNT: "Domain lacks the minimum required number of segments", DOMAIN_SEGMENTS_COUNT_MAX: "Domain contains too many segments", DOMAIN_FORBIDDEN_TLDS: "Domain uses forbidden TLD", DOMAIN_EMPTY_SEGMENT: "Domain contains empty dot-separated segment", DOMAIN_LONG_SEGMENT: "Domain contains dot-separated segment that is too long" }, t2.code = function(e3) {
          return { code: e3, error: t2.codes[e3] };
        };
      }, 9959: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(5752);
        t2.regex = function(e3 = {}) {
          s(e3.cidr === void 0 || typeof e3.cidr == "string", "options.cidr must be a string");
          const t3 = e3.cidr ? e3.cidr.toLowerCase() : "optional";
          s(["required", "optional", "forbidden"].includes(t3), "options.cidr must be one of required, optional, forbidden"), s(e3.version === void 0 || typeof e3.version == "string" || Array.isArray(e3.version), "options.version must be a string or an array of string");
          let r2 = e3.version || ["ipv4", "ipv6", "ipvfuture"];
          Array.isArray(r2) || (r2 = [r2]), s(r2.length >= 1, "options.version must have at least 1 version specified");
          for (let e4 = 0; e4 < r2.length; ++e4)
            s(typeof r2[e4] == "string", "options.version must only contain strings"), r2[e4] = r2[e4].toLowerCase(), s(["ipv4", "ipv6", "ipvfuture"].includes(r2[e4]), "options.version contains unknown version " + r2[e4] + " - must be one of ipv4, ipv6, ipvfuture");
          r2 = Array.from(new Set(r2));
          const a = r2.map((e4) => {
            if (t3 === "forbidden")
              return n.ip[e4];
            const r3 = "\\/".concat(e4 === "ipv4" ? n.ip.v4Cidr : n.ip.v6Cidr);
            return t3 === "required" ? "".concat(n.ip[e4]).concat(r3) : "".concat(n.ip[e4], "(?:").concat(r3, ")?");
          }), o = "(?:".concat(a.join("|"), ")"), i = new RegExp("^".concat(o, "$"));
          return { cidr: t3, versions: r2, regex: i, raw: o };
        };
      }, 5752: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(6064), a = { generate: function() {
          const e3 = {}, t3 = "!\\$&'\\(\\)\\*\\+,;=", r2 = "\\w-\\.~%\\dA-Fa-f" + t3 + ":@", s2 = "[" + r2 + "]", n2 = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
          e3.ipv4address = "(?:" + n2 + "\\.){3}" + n2;
          const a2 = "[\\dA-Fa-f]{1,4}", o = "(?:" + a2 + ":" + a2 + "|" + e3.ipv4address + ")", i = "(?:" + a2 + ":){6}" + o, l = "::(?:" + a2 + ":){5}" + o, c = "(?:" + a2 + ")?::(?:" + a2 + ":){4}" + o, u = "(?:(?:" + a2 + ":){0,1}" + a2 + ")?::(?:" + a2 + ":){3}" + o, f = "(?:(?:" + a2 + ":){0,2}" + a2 + ")?::(?:" + a2 + ":){2}" + o, m = "(?:(?:" + a2 + ":){0,3}" + a2 + ")?::" + a2 + ":" + o, h = "(?:(?:" + a2 + ":){0,4}" + a2 + ")?::" + o;
          e3.ipv4Cidr = "(?:\\d|[1-2]\\d|3[0-2])", e3.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])", e3.ipv6address = "(?:" + i + "|" + l + "|" + c + "|" + u + "|" + f + "|" + m + "|" + h + "|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)", e3.ipvFuture = "v[\\dA-Fa-f]+\\.[\\w-\\.~" + t3 + ":]+", e3.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*", e3.schemeRegex = new RegExp(e3.scheme);
          const d = "[\\w-\\.~%\\dA-Fa-f" + t3 + ":]*", p = "(?:\\[(?:" + e3.ipv6address + "|" + e3.ipvFuture + ")\\]|" + e3.ipv4address + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})", g = "(?:" + d + "@)?" + p + "(?::\\d*)?", y = "(?:" + d + "@)?(" + p + ")(?::\\d*)?", b = s2 + "+", v = "(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*", _ = "\\/(?:" + b + v + ")?", w = b + v, $ = "[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+" + v;
          return e3.hierPart = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + w + "|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))", e3.hierPartCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + w + ")", e3.relativeRef = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + $ + "|)", e3.relativeRefCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + $ + "|)", e3.query = "[" + r2 + "\\/\\?]*(?=#|$)", e3.queryWithSquareBrackets = "[" + r2 + "\\[\\]\\/\\?]*(?=#|$)", e3.fragment = "[" + r2 + "\\/\\?]*", e3;
        } };
        a.rfc3986 = a.generate(), t2.ip = { v4Cidr: a.rfc3986.ipv4Cidr, v6Cidr: a.rfc3986.ipv6Cidr, ipv4: a.rfc3986.ipv4address, ipv6: a.rfc3986.ipv6address, ipvfuture: a.rfc3986.ipvFuture }, a.createRegex = function(e3) {
          const t3 = a.rfc3986, r2 = "(?:\\?" + (e3.allowQuerySquareBrackets ? t3.queryWithSquareBrackets : t3.query) + ")?(?:#" + t3.fragment + ")?", o = e3.domain ? t3.relativeRefCapture : t3.relativeRef;
          if (e3.relativeOnly)
            return a.wrap(o + r2);
          let i = "";
          if (e3.scheme) {
            s(e3.scheme instanceof RegExp || typeof e3.scheme == "string" || Array.isArray(e3.scheme), "scheme must be a RegExp, String, or Array");
            const r3 = [].concat(e3.scheme);
            s(r3.length >= 1, "scheme must have at least 1 scheme specified");
            const a2 = [];
            for (let e4 = 0; e4 < r3.length; ++e4) {
              const o2 = r3[e4];
              s(o2 instanceof RegExp || typeof o2 == "string", "scheme at position " + e4 + " must be a RegExp or String"), o2 instanceof RegExp ? a2.push(o2.source.toString()) : (s(t3.schemeRegex.test(o2), "scheme at position " + e4 + " must be a valid scheme"), a2.push(n(o2)));
            }
            i = a2.join("|");
          }
          const l = "(?:" + (i ? "(?:" + i + ")" : t3.scheme) + ":" + (e3.domain ? t3.hierPartCapture : t3.hierPart) + ")", c = e3.allowRelative ? "(?:" + l + "|" + o + ")" : l;
          return a.wrap(c + r2, i);
        }, a.wrap = function(e3, t3) {
          return { raw: e3 = "(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])".concat(e3), regex: new RegExp("^".concat(e3, "$")), scheme: t3 };
        }, a.uriRegex = a.createRegex({}), t2.regex = function(e3 = {}) {
          return e3.scheme || e3.allowRelative || e3.relativeOnly || e3.allowQuerySquareBrackets || e3.domain ? a.createRegex(e3) : a.uriRegex;
        };
      }, 1447: (e2, t2) => {
        "use strict";
        const r = { operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"], operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"], operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]], operatorsPrefix: ["!", "n"], literals: { '"': '"', "`": "`", "'": "'", "[": "]" }, numberRx: /^(?:[0-9]*\.?[0-9]*){1}$/, tokenRx: /^[\w\$\#\.\@\:\{\}]+$/, symbol: Symbol("formula"), settings: Symbol("settings") };
        t2.Parser = class {
          constructor(e3, t3 = {}) {
            if (!t3[r.settings] && t3.constants)
              for (const e4 in t3.constants) {
                const r2 = t3.constants[e4];
                if (r2 !== null && !["boolean", "number", "string"].includes(typeof r2))
                  throw new Error("Formula constant ".concat(e4, " contains invalid ").concat(typeof r2, " value type"));
              }
            this.settings = t3[r.settings] ? t3 : Object.assign({ [r.settings]: true, constants: {}, functions: {} }, t3), this.single = null, this._parts = null, this._parse(e3);
          }
          _parse(e3) {
            let s = [], n = "", a = 0, o = false;
            const i = (e4) => {
              if (a)
                throw new Error("Formula missing closing parenthesis");
              const i2 = s.length ? s[s.length - 1] : null;
              if (o || n || e4) {
                if (i2 && i2.type === "reference" && e4 === ")")
                  return i2.type = "function", i2.value = this._subFormula(n, i2.value), void (n = "");
                if (e4 === ")") {
                  const e5 = new t2.Parser(n, this.settings);
                  s.push({ type: "segment", value: e5 });
                } else if (o) {
                  if (o === "]")
                    return s.push({ type: "reference", value: n }), void (n = "");
                  s.push({ type: "literal", value: n });
                } else if (r.operatorCharacters.includes(n))
                  i2 && i2.type === "operator" && r.operators.includes(i2.value + n) ? i2.value += n : s.push({ type: "operator", value: n });
                else if (n.match(r.numberRx))
                  s.push({ type: "constant", value: parseFloat(n) });
                else if (this.settings.constants[n] !== void 0)
                  s.push({ type: "constant", value: this.settings.constants[n] });
                else {
                  if (!n.match(r.tokenRx))
                    throw new Error("Formula contains invalid token: ".concat(n));
                  s.push({ type: "reference", value: n });
                }
                n = "";
              }
            };
            for (const t3 of e3)
              o ? t3 === o ? (i(), o = false) : n += t3 : a ? t3 === "(" ? (n += t3, ++a) : t3 === ")" ? (--a, a ? n += t3 : i(t3)) : n += t3 : t3 in r.literals ? o = r.literals[t3] : t3 === "(" ? (i(), ++a) : r.operatorCharacters.includes(t3) ? (i(), n = t3, i()) : t3 !== " " ? n += t3 : i();
            i(), s = s.map((e4, t3) => e4.type !== "operator" || e4.value !== "-" || t3 && s[t3 - 1].type !== "operator" ? e4 : { type: "operator", value: "n" });
            let l = false;
            for (const e4 of s) {
              if (e4.type === "operator") {
                if (r.operatorsPrefix.includes(e4.value))
                  continue;
                if (!l)
                  throw new Error("Formula contains an operator in invalid position");
                if (!r.operators.includes(e4.value))
                  throw new Error("Formula contains an unknown operator ".concat(e4.value));
              } else if (l)
                throw new Error("Formula missing expected operator");
              l = !l;
            }
            if (!l)
              throw new Error("Formula contains invalid trailing operator");
            s.length === 1 && ["reference", "literal", "constant"].includes(s[0].type) && (this.single = { type: s[0].type === "reference" ? "reference" : "value", value: s[0].value }), this._parts = s.map((e4) => {
              if (e4.type === "operator")
                return r.operatorsPrefix.includes(e4.value) ? e4 : e4.value;
              if (e4.type !== "reference")
                return e4.value;
              if (this.settings.tokenRx && !this.settings.tokenRx.test(e4.value))
                throw new Error("Formula contains invalid reference ".concat(e4.value));
              return this.settings.reference ? this.settings.reference(e4.value) : r.reference(e4.value);
            });
          }
          _subFormula(e3, s) {
            const n = this.settings.functions[s];
            if (typeof n != "function")
              throw new Error("Formula contains unknown function ".concat(s));
            let a = [];
            if (e3) {
              let t3 = "", n2 = 0, o = false;
              const i = () => {
                if (!t3)
                  throw new Error("Formula contains function ".concat(s, " with invalid arguments ").concat(e3));
                a.push(t3), t3 = "";
              };
              for (let s2 = 0; s2 < e3.length; ++s2) {
                const a2 = e3[s2];
                o ? (t3 += a2, a2 === o && (o = false)) : a2 in r.literals && !n2 ? (t3 += a2, o = r.literals[a2]) : a2 !== "," || n2 ? (t3 += a2, a2 === "(" ? ++n2 : a2 === ")" && --n2) : i();
              }
              i();
            }
            return a = a.map((e4) => new t2.Parser(e4, this.settings)), function(e4) {
              const t3 = [];
              for (const r2 of a)
                t3.push(r2.evaluate(e4));
              return n.call(e4, ...t3);
            };
          }
          evaluate(e3) {
            const t3 = this._parts.slice();
            for (let s = t3.length - 2; s >= 0; --s) {
              const n = t3[s];
              if (n && n.type === "operator") {
                const a = t3[s + 1];
                t3.splice(s + 1, 1);
                const o = r.evaluate(a, e3);
                t3[s] = r.single(n.value, o);
              }
            }
            return r.operatorsOrder.forEach((s) => {
              for (let n = 1; n < t3.length - 1; )
                if (s.includes(t3[n])) {
                  const s2 = t3[n], a = r.evaluate(t3[n - 1], e3), o = r.evaluate(t3[n + 1], e3);
                  t3.splice(n, 2);
                  const i = r.calculate(s2, a, o);
                  t3[n - 1] = i === 0 ? 0 : i;
                } else
                  n += 2;
            }), r.evaluate(t3[0], e3);
          }
        }, t2.Parser.prototype[r.symbol] = true, r.reference = function(e3) {
          return function(t3) {
            return t3 && t3[e3] !== void 0 ? t3[e3] : null;
          };
        }, r.evaluate = function(e3, t3) {
          return e3 === null ? null : typeof e3 == "function" ? e3(t3) : e3[r.symbol] ? e3.evaluate(t3) : e3;
        }, r.single = function(e3, t3) {
          if (e3 === "!")
            return !t3;
          const r2 = -t3;
          return r2 === 0 ? 0 : r2;
        }, r.calculate = function(e3, t3, s) {
          if (e3 === "??")
            return r.exists(t3) ? t3 : s;
          if (typeof t3 == "string" || typeof s == "string") {
            if (e3 === "+")
              return (t3 = r.exists(t3) ? t3 : "") + (r.exists(s) ? s : "");
          } else
            switch (e3) {
              case "^":
                return Math.pow(t3, s);
              case "*":
                return t3 * s;
              case "/":
                return t3 / s;
              case "%":
                return t3 % s;
              case "+":
                return t3 + s;
              case "-":
                return t3 - s;
            }
          switch (e3) {
            case "<":
              return t3 < s;
            case "<=":
              return t3 <= s;
            case ">":
              return t3 > s;
            case ">=":
              return t3 >= s;
            case "==":
              return t3 === s;
            case "!=":
              return t3 !== s;
            case "&&":
              return t3 && s;
            case "||":
              return t3 || s;
          }
          return null;
        }, r.exists = function(e3) {
          return e3 != null;
        };
      }, 9926: () => {
      }, 5688: () => {
      }, 9708: () => {
      }, 1152: () => {
      }, 443: () => {
      }, 9848: () => {
      } }, t = {}, function r(s) {
        var n = t[s];
        if (n !== void 0)
          return n.exports;
        var a = t[s] = { exports: {} };
        return e[s](a, a.exports, r), a.exports;
      }(5107);
      var e, t;
    });
  }
});

// node_modules/@web3-onboard/common/dist/index.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/index.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Observable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscriber.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isFunction.js
init_define_process_env();
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscription.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
init_define_process_env();
function createErrorClass(createImpl) {
  var _super = function(instance2) {
    Error.call(instance2);
    instance2.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
init_define_process_env();
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty3 = new Subscription2();
    empty3.closed = true;
    return empty3;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/config.js
init_define_process_env();
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
init_define_process_env();
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/noop.js
init_define_process_env();
function noop() {
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
init_define_process_env();
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/errorContext.js
init_define_process_env();
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/symbol/observable.js
init_define_process_env();
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/pipe.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/identity.js
init_define_process_env();
function identity(x) {
  return x;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/lift.js
init_define_process_env();
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
init_define_process_env();
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
init_define_process_env();
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
init_define_process_env();
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  var schedule = animationFrameProvider.schedule;
  return new Observable(function(subscriber) {
    var subscription = new Subscription();
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var run2 = function(timestamp2) {
      var now2 = provider.now();
      subscriber.next({
        timestamp: timestampProvider ? now2 : timestamp2,
        elapsed: now2 - start
      });
      if (!subscriber.closed) {
        subscription.add(schedule(run2));
      }
    };
    subscription.add(schedule(run2));
    return subscription;
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subject.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
init_define_process_env();
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
init_define_process_env();
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
init_define_process_env();
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now2 = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now2; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
init_define_process_env();
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
init_define_process_env();
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
init_define_process_env();
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    intervalProvider.clearInterval(id);
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a = this, id = _a.id, scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/Immediate.js
init_define_process_env();
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      immediateProvider.clearImmediate(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Scheduler.js
init_define_process_env();
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now2) {
    if (now2 === void 0) {
      now2 = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now2;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now2) {
    if (now2 === void 0) {
      now2 = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now2) || this;
    _this.actions = [];
    _this._active = false;
    _this._scheduled = void 0;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/async.js
init_define_process_env();
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
init_define_process_env();
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    return scheduler.flush(this);
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
init_define_process_env();
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
init_define_process_env();
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
init_define_process_env();
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
init_define_process_env();
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return true;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Notification.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/empty.js
init_define_process_env();
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/of.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/args.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
init_define_process_env();
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/from.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
init_define_process_env();
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isPromise.js
init_define_process_env();
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
init_define_process_env();
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
init_define_process_env();
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
init_define_process_env();
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
init_define_process_env();
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
init_define_process_env();
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise2) {
  return new Observable(function(subscriber) {
    promise2.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
          _a.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
init_define_process_env();
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
init_define_process_env();
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
init_define_process_env();
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
init_define_process_env();
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
init_define_process_env();
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
init_define_process_env();
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
init_define_process_env();
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/throwError.js
init_define_process_env();
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init2 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init2, 0, subscriber);
  } : init2);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a;
    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isObservable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
init_define_process_env();
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
init_define_process_env();
function firstValueFrom(source, config2) {
  var hasConfig = typeof config2 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config2.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
init_define_process_env();
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
init_define_process_env();
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
init_define_process_env();
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isDate.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/map.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
init_define_process_env();
var isArray2 = Array.isArray;
var objectProto = Object.prototype;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/createObject.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/concat.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/connectable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/defer.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/generate.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/iif.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/interval.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/timer.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/merge.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/never.js
init_define_process_env();
var NEVER = new Observable(noop);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNext.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
init_define_process_env();
var isArray3 = Array.isArray;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/pairs.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/partition.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/not.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/filter.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/race.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/range.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/using.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/zip.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/types.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/audit.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/buffer.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/catchError.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/toArray.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/reduce.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concat.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/connect.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/count.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/debounce.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/delay.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/take.js
init_define_process_env();
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinct.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/endWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/every.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/expand.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/finalize.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/find.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/first.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/last.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/materialize.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/max.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/merge.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/min.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/multicast.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/pluck.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publish.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/repeat.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/retry.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sample.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/scan.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/share.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/single.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skip.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/startWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/tap.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throttle.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
init_define_process_env();
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/window.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
init_define_process_env();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zip.js
init_define_process_env();

// node_modules/@web3-onboard/common/dist/index.js
var import_joi = __toESM(require_joi_browser_min());
var ProviderRpcErrorCode;
(function(ProviderRpcErrorCode2) {
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_REJECTED"] = 4001] = "ACCOUNT_ACCESS_REJECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_ALREADY_REQUESTED"] = -32002] = "ACCOUNT_ACCESS_ALREADY_REQUESTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNAUTHORIZED"] = 4100] = "UNAUTHORIZED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNSUPPORTED_METHOD"] = 4200] = "UNSUPPORTED_METHOD";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DISCONNECTED"] = 4900] = "DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_DISCONNECTED"] = 4901] = "CHAIN_DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_NOT_ADDED"] = 4902] = "CHAIN_NOT_ADDED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DOES_NOT_EXIST"] = -32601] = "DOES_NOT_EXIST";
})(ProviderRpcErrorCode || (ProviderRpcErrorCode = {}));
var ProviderRpcError = class extends Error {
  constructor(error) {
    super(error.message);
    this.message = error.message;
    this.code = error.code;
    this.data = error.data;
  }
};
var createEIP1193Provider = (provider, requestPatch) => {
  let baseRequest;
  if (provider.request) {
    baseRequest = provider.request.bind(provider);
  } else if (provider.sendAsync) {
    baseRequest = createRequest(provider);
  }
  const request = async ({ method, params }) => {
    const key = method;
    if (requestPatch && requestPatch[key] === null) {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
    if (requestPatch && requestPatch[key]) {
      return requestPatch[key]({ baseRequest, params });
    } else if (baseRequest) {
      return baseRequest({ method, params });
    } else {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
  };
  provider.request = request;
  return provider;
};
var createRequest = (provider) => ({ method, params }) => new Promise((resolve, reject) => {
  provider.sendAsync({
    id: 0,
    jsonrpc: "2.0",
    method,
    params
  }, (error, { result }) => {
    if (error) {
      reject(JSON.parse(error));
    } else {
      resolve(result == void 0 ? null : result);
    }
  });
});
function noop2() {
}
var identity2 = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop2;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty2() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  select.selectedIndex = -1;
}
function select_value(select) {
  const selected_option = select.querySelector(":checked") || select.options[0];
  return selected_option && selected_option.__value;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay2, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay2}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1);
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
  let config2 = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay: delay2 = 0, duration = 300, easing = identity2, tick = noop2, css } = config2 || null_transition;
    const program = {
      start: now() + delay2,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay2, easing, css);
      }
      if (b)
        tick(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config2.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config2)) {
        wait().then(() => {
          config2 = config2();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function bind2(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop2,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop2;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function fade(node, { delay: delay2 = 0, duration = 400, easing = identity2 } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay: delay2,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
var closeIcon = `
  <svg width="100%" height="100%" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M11.6569 1.75736L7.41429 6L11.6569 10.2426L10.2427 11.6569L6.00008 7.41421L1.75744 11.6569L0.343227 10.2426L4.58587 6L0.343227 1.75736L1.75744 0.343146L6.00008 4.58579L10.2427 0.343146L11.6569 1.75736Z" fill="currentColor"/>
  </svg>
`;
function add_css$6(target) {
  append_styles(target, "svelte-h7wb50", ".close-button-container.svelte-h7wb50{cursor:pointer;display:flex;justify-content:center;align-items:center}.close-button.svelte-h7wb50{width:2rem;height:2rem;box-sizing:border-box;display:flex;justify-content:center;align-items:center;padding:0.4rem;border-radius:40px;color:var(--onboard-gray-400, var(--gray-400));background:var(--onboard-white, var(--white))}.close-icon.svelte-h7wb50{width:14px;display:flex;align-items:center}");
}
function create_fragment$6(ctx) {
  let div2;
  let div1;
  let div0;
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "close-icon svelte-h7wb50");
      attr(div1, "class", "close-button svelte-h7wb50");
      attr(div2, "class", "close-button-container svelte-h7wb50");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, div0);
      div0.innerHTML = closeIcon;
    },
    p: noop2,
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(div2);
    }
  };
}
var CloseButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$6, safe_not_equal, {}, add_css$6);
  }
};
function add_css$5(target) {
  append_styles(target, "svelte-7k9tph", "table.svelte-7k9tph.svelte-7k9tph{border-spacing:0px}table.svelte-7k9tph thead.svelte-7k9tph{position:sticky;inset-block-start:0;box-shadow:0px 1px 0px rgba(0, 0, 0, 0.1);background-color:var(--account-select-white, var(--white))}th.svelte-7k9tph.svelte-7k9tph,td.svelte-7k9tph.svelte-7k9tph{text-align:left;padding:0.5rem 0.5rem}td.svelte-7k9tph.svelte-7k9tph{font-family:var(\n      --account-select-font-family-normal,\n      var(--font-family-normal)\n    );font-style:normal;font-weight:normal;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(\n      --account-select-font-line-height-1,\n      var(--font-line-height-1)\n    )}tbody.svelte-7k9tph tr.svelte-7k9tph{box-shadow:0px 1px 0px rgba(0, 0, 0, 0.1)}tbody.svelte-7k9tph tr.svelte-7k9tph:hover{background-color:var(--account-select-primary-100, var(--primary-100));color:var(--account-select-black, var(--black))}.address-table.svelte-7k9tph.svelte-7k9tph{min-height:4.5rem;max-height:27rem;overflow:auto}.selected-row.svelte-7k9tph.svelte-7k9tph,.selected-row.svelte-7k9tph.svelte-7k9tph:hover{background-color:var(--account-select-primary-500, var(--primary-500));color:var(--account-select-primary-100, var(--primary-100))}.asset-td.svelte-7k9tph.svelte-7k9tph{font-weight:bold}.w-100.svelte-7k9tph.svelte-7k9tph{width:100%}.pointer.svelte-7k9tph.svelte-7k9tph{cursor:pointer}");
}
function get_each_context$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_if_block$4(ctx) {
  let each_1_anchor;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty2();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 7) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block$1(ctx) {
  let tr;
  let td0;
  let t0_value = ctx[6].address + "";
  let t0;
  let t1;
  let td1;
  let t2_value = ctx[6].derivationPath + "";
  let t2;
  let t3;
  let td2;
  let t4_value = utils_exports.formatEther(ctx[6].balance.value) + "";
  let t4;
  let t5;
  let t6_value = ctx[6].balance.asset + "";
  let t6;
  let t7;
  let mounted;
  let dispose;
  function click_handler2() {
    return ctx[5](ctx[6]);
  }
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      t0 = text(t0_value);
      t1 = space();
      td1 = element("td");
      t2 = text(t2_value);
      t3 = space();
      td2 = element("td");
      t4 = text(t4_value);
      t5 = space();
      t6 = text(t6_value);
      t7 = space();
      set_style(td0, "font-family", "'Courier New', Courier, monospace");
      attr(td0, "class", "svelte-7k9tph");
      attr(td1, "class", "svelte-7k9tph");
      attr(td2, "class", "asset-td svelte-7k9tph");
      attr(tr, "class", "pointer svelte-7k9tph");
      toggle_class(tr, "selected-row", ctx[0] && ctx[0].address === ctx[6].address);
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      append(td0, t0);
      append(tr, t1);
      append(tr, td1);
      append(td1, t2);
      append(tr, t3);
      append(tr, td2);
      append(td2, t4);
      append(td2, t5);
      append(td2, t6);
      append(tr, t7);
      if (!mounted) {
        dispose = listen(tr, "click", click_handler2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 2 && t0_value !== (t0_value = ctx[6].address + ""))
        set_data(t0, t0_value);
      if (dirty & 2 && t2_value !== (t2_value = ctx[6].derivationPath + ""))
        set_data(t2, t2_value);
      if (dirty & 2 && t4_value !== (t4_value = utils_exports.formatEther(ctx[6].balance.value) + ""))
        set_data(t4, t4_value);
      if (dirty & 2 && t6_value !== (t6_value = ctx[6].balance.asset + ""))
        set_data(t6, t6_value);
      if (dirty & 3) {
        toggle_class(tr, "selected-row", ctx[0] && ctx[0].address === ctx[6].address);
      }
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$5(ctx) {
  let div;
  let table;
  let colgroup;
  let t2;
  let thead;
  let t8;
  let tbody;
  let if_block = ctx[1] && ctx[1].length && create_if_block$4(ctx);
  return {
    c() {
      div = element("div");
      table = element("table");
      colgroup = element("colgroup");
      colgroup.innerHTML = `<col style="width: 50%;"/> 
      <col style="width: 28%;"/> 
      <col style="width: 22%;"/>`;
      t2 = space();
      thead = element("thead");
      thead.innerHTML = `<tr><th class="svelte-7k9tph">Address</th> 
        <th class="svelte-7k9tph">DPATH</th> 
        <th class="svelte-7k9tph">Asset</th></tr>`;
      t8 = space();
      tbody = element("tbody");
      if (if_block)
        if_block.c();
      attr(thead, "class", " svelte-7k9tph");
      attr(tbody, "class", "svelte-7k9tph");
      attr(table, "class", "w-100 svelte-7k9tph");
      attr(div, "class", "address-table svelte-7k9tph");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, table);
      append(table, colgroup);
      append(table, t2);
      append(table, thead);
      append(table, t8);
      append(table, tbody);
      if (if_block)
        if_block.m(tbody, null);
    },
    p(ctx2, [dirty]) {
      if (ctx2[1] && ctx2[1].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          if_block.m(tbody, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let accounts;
  let { accountsListObject } = $$props;
  let { accountSelected } = $$props;
  let { showEmptyAddresses } = $$props;
  const handleSelectedRow = (accountClicked) => {
    $$invalidate(0, accountSelected = accountClicked);
  };
  const click_handler2 = (account) => handleSelectedRow(account);
  $$self.$$set = ($$props2) => {
    if ("accountsListObject" in $$props2)
      $$invalidate(3, accountsListObject = $$props2.accountsListObject);
    if ("accountSelected" in $$props2)
      $$invalidate(0, accountSelected = $$props2.accountSelected);
    if ("showEmptyAddresses" in $$props2)
      $$invalidate(4, showEmptyAddresses = $$props2.showEmptyAddresses);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 24) {
      $$invalidate(1, accounts = showEmptyAddresses ? accountsListObject && accountsListObject.all : accountsListObject && accountsListObject.filtered);
    }
  };
  return [
    accountSelected,
    accounts,
    handleSelectedRow,
    accountsListObject,
    showEmptyAddresses,
    click_handler2
  ];
}
var AddressTable = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, {
      accountsListObject: 3,
      accountSelected: 0,
      showEmptyAddresses: 4
    }, add_css$5);
  }
};
function add_css$4(target) {
  append_styles(target, "svelte-14p0oc3", ".loading-container.svelte-14p0oc3.svelte-14p0oc3{display:flex;flex-direction:column;align-items:center;justify-content:center;font-family:inherit;font-size:inherit;color:inherit;margin-left:auto}span.svelte-14p0oc3.svelte-14p0oc3{font-family:inherit;font-size:0.889em;margin-top:1rem}.loading.svelte-14p0oc3.svelte-14p0oc3{display:inline-block;position:relative}.loading.svelte-14p0oc3 div.svelte-14p0oc3{box-sizing:border-box;font-size:inherit;display:block;position:absolute;border:3px solid;border-radius:50%;animation:svelte-14p0oc3-bn-loading 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;border-color:currentColor transparent transparent transparent}.loading.svelte-14p0oc3 .loading-first.svelte-14p0oc3{animation-delay:-0.45s}.loading.svelte-14p0oc3 .loading-second.svelte-14p0oc3{animation-delay:-0.3s}.loading.svelte-14p0oc3 .loading-third.svelte-14p0oc3{animation-delay:-0.15s}@keyframes svelte-14p0oc3-bn-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}");
}
function create_if_block$3(ctx) {
  let span;
  let t;
  return {
    c() {
      span = element("span");
      t = text(ctx[0]);
      attr(span, "class", "svelte-14p0oc3");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment$4(ctx) {
  let div4;
  let div3;
  let div0;
  let div0_style_value;
  let t0;
  let div1;
  let div1_style_value;
  let t1;
  let div2;
  let div2_style_value;
  let div3_style_value;
  let t2;
  let if_block = ctx[0] && create_if_block$3(ctx);
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      if (if_block)
        if_block.c();
      attr(div0, "class", "loading-first svelte-14p0oc3");
      attr(div0, "style", div0_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div1, "class", "loading-second svelte-14p0oc3");
      attr(div1, "style", div1_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div2, "class", "loading-third svelte-14p0oc3");
      attr(div2, "style", div2_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div3, "class", "loading svelte-14p0oc3");
      attr(div3, "style", div3_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div4, "class", "loading-container svelte-14p0oc3");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div4, t2);
      if (if_block)
        if_block.m(div4, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 2 && div0_style_value !== (div0_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div0, "style", div0_style_value);
      }
      if (dirty & 2 && div1_style_value !== (div1_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div1, "style", div1_style_value);
      }
      if (dirty & 2 && div2_style_value !== (div2_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div2, "style", div2_style_value);
      }
      if (dirty & 2 && div3_style_value !== (div3_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div3, "style", div3_style_value);
      }
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$3(ctx2);
          if_block.c();
          if_block.m(div4, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { description = "" } = $$props;
  let { size = "2rem" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("description" in $$props2)
      $$invalidate(0, description = $$props2.description);
    if ("size" in $$props2)
      $$invalidate(1, size = $$props2.size);
  };
  return [description, size];
}
var Spinner = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { description: 0, size: 1 }, add_css$4);
  }
};
function add_css$3(target) {
  append_styles(target, "svelte-1uv314g", `button.svelte-1uv314g{align-items:center;padding:0.75rem 1.5rem;color:var(--account-select-white, var(--white));border-radius:1.5rem;font-family:var(
      --account-select-font-family-normal,
      var(--font-family-normal)
    );font-style:normal;font-weight:bold;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(--account-select-font-line-height-1, var(--line-height-1));border:none}.scan-accounts-btn.svelte-1uv314g{line-height:var(--account-select-font-line-height-1, var(--line-height-1));background-color:var(--account-select-gray-500, var(--gray-500));color:var(--account-select-primary-100, var(--primary-100));display:flex;justify-content:center;align-items:center;cursor:pointer}input.svelte-1uv314g:hover{border-color:var(--account-select-primary-500, var(--primary-300))}input.svelte-1uv314g:focus{border-color:var(--primary-500);box-shadow:0 0 1px 1px var(--primary-500);box-shadow:0 0 0 1px -moz-mac-focusring;outline:none}input.svelte-1uv314g:disabled{background-color:var(--gray-100)}input[type='checkbox'].svelte-1uv314g{-webkit-appearance:none;width:auto;background-color:var(--account-select-white, var(--white));border:1px solid var(--account-select-gray-300, var(--gray-300));padding:0.5em;border-radius:3px;display:flex;justify-content:center;align-items:center;position:relative;cursor:pointer;height:1.5rem;width:1.5rem}input[type='checkbox'].svelte-1uv314g:hover{border-color:var(--account-select-primary-500, var(--primary-500))}input[type='checkbox'].svelte-1uv314g:checked{background-color:var(--account-select-primary-500, var(--primary-500));border-color:var(--account-select-primary-500, var(--primary-500));color:var(--account-select-white, var(--white))}input[type='checkbox'].svelte-1uv314g:checked:after{content:url("data:image/svg+xml,%3Csvg width='0.885em' height='0.6em' viewBox='0 0 14 11' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0 6L5 11L14 2L12.59 0.58L5 8.17L1.41 4.59L0 6Z' fill='white'/%3E%3C/svg%3E");font-size:var(--account-select-font-size-7, var(--font-size-7));position:absolute;color:var(--account-select-white, var(--white))}.checkbox-container.svelte-1uv314g{display:flex;align-items:center}.checkbox-input.svelte-1uv314g{margin-right:0.75rem}.error-msg.svelte-1uv314g{color:var(--account-select-danger-500, var(--danger-500));font-family:var(
      --account-select-font-family-light,
      var(--font-family-light)
    )}.table-controls.svelte-1uv314g{height:3.5rem;display:flex;flex-direction:row;justify-content:space-between;align-items:center;padding:0.5rem;border-radius:0.4rem 0.4rem 0 0;background:var(--account-select-gray-100, var(--gray-100));border-bottom:1px solid var(--account-select-gray-200, var(--gray-200))}.cursor-pointer.svelte-1uv314g{cursor:pointer}`);
}
function create_if_block_2$1(ctx) {
  let span;
  let t;
  return {
    c() {
      span = element("span");
      t = text(ctx[2]);
      attr(span, "class", "error-msg svelte-1uv314g");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 4)
        set_data(t, ctx2[2]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_1$1(ctx) {
  let t;
  let spinner;
  let current;
  spinner = new Spinner({ props: { size: "1.5rem" } });
  return {
    c() {
      t = text("Scanning...\n      ");
      create_component(spinner.$$.fragment);
    },
    m(target, anchor) {
      insert(target, t, anchor);
      mount_component(spinner, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(spinner.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(spinner.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(t);
      destroy_component(spinner, detaching);
    }
  };
}
function create_if_block$2(ctx) {
  let t;
  return {
    c() {
      t = text("Scan Accounts");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_fragment$3(ctx) {
  let div1;
  let div0;
  let input;
  let t0;
  let label;
  let t2;
  let t3;
  let button;
  let t4;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[2] && create_if_block_2$1(ctx);
  let if_block1 = ctx[1] && create_if_block_1$1();
  let if_block2 = !ctx[1] && create_if_block$2();
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      input = element("input");
      t0 = space();
      label = element("label");
      label.textContent = "Show Empty Addresses";
      t2 = space();
      if (if_block0)
        if_block0.c();
      t3 = space();
      button = element("button");
      if (if_block1)
        if_block1.c();
      t4 = space();
      if (if_block2)
        if_block2.c();
      attr(input, "id", "show-empty-addresses");
      attr(input, "type", "checkbox");
      attr(input, "class", "checkbox-input svelte-1uv314g");
      attr(label, "for", "show-empty-addresses");
      attr(label, "class", "ml2 cursor-pointer font-5 svelte-1uv314g");
      attr(div0, "class", "checkbox-container svelte-1uv314g");
      attr(button, "class", "scan-accounts-btn svelte-1uv314g");
      attr(button, "id", "scan-accounts");
      attr(div1, "class", "table-controls svelte-1uv314g");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, input);
      append(div0, t0);
      append(div0, label);
      append(div1, t2);
      if (if_block0)
        if_block0.m(div1, null);
      append(div1, t3);
      append(div1, button);
      if (if_block1)
        if_block1.m(button, null);
      append(button, t4);
      if (if_block2)
        if_block2.m(button, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(input, "change", ctx[3]),
          listen(button, "click", ctx[5])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (ctx2[2]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$1(ctx2);
          if_block0.c();
          if_block0.m(div1, t3);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (ctx2[1]) {
        if (if_block1) {
          if (dirty & 2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$1();
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(button, t4);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!ctx2[1]) {
        if (if_block2)
          ;
        else {
          if_block2 = create_if_block$2();
          if_block2.c();
          if_block2.m(button, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { scanAccounts } = $$props;
  let { loadingAccounts } = $$props;
  let { showEmptyAddresses } = $$props;
  let { errorFromScan } = $$props;
  const filterEmptyAccounts = () => {
    $$invalidate(4, showEmptyAddresses = !showEmptyAddresses);
  };
  const click_handler2 = async () => await scanAccounts();
  $$self.$$set = ($$props2) => {
    if ("scanAccounts" in $$props2)
      $$invalidate(0, scanAccounts = $$props2.scanAccounts);
    if ("loadingAccounts" in $$props2)
      $$invalidate(1, loadingAccounts = $$props2.loadingAccounts);
    if ("showEmptyAddresses" in $$props2)
      $$invalidate(4, showEmptyAddresses = $$props2.showEmptyAddresses);
    if ("errorFromScan" in $$props2)
      $$invalidate(2, errorFromScan = $$props2.errorFromScan);
  };
  return [
    scanAccounts,
    loadingAccounts,
    errorFromScan,
    filterEmptyAccounts,
    showEmptyAddresses,
    click_handler2
  ];
}
var TableHeader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {
      scanAccounts: 0,
      loadingAccounts: 1,
      showEmptyAddresses: 4,
      errorFromScan: 2
    }, add_css$3);
  }
};
function add_css$2(target) {
  append_styles(target, "svelte-pf9exk", "select.svelte-pf9exk{display:block;margin:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;font-family:inherit;background-image:url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23242835%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'),\n      linear-gradient(to bottom, transparent 0%, transparent 100%);background-repeat:no-repeat, repeat;background-position:right 1rem top 1rem, 0 0;background-size:0.65em auto, 100%;scrollbar-width:none;width:100%;padding:0.5rem 1.8rem 0.5rem 1rem;border-radius:8px;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(\n      --account-select-font-line-height-1,\n      var(--font-line-height-1)\n    );color:var(--account-select-gray-600, var(--gray-600));transition:all 200ms ease-in-out;border:2px solid var(--account-select-gray-200, var(--gray-200));box-sizing:border-box;height:3rem;-ms-overflow-style:none}select.svelte-pf9exk::-webkit-scrollbar,input.svelte-pf9exk::-webkit-scrollbar{display:none}select.svelte-pf9exk::-ms-expand,input.svelte-pf9exk::-ms-expand{display:none}input[type='text'].svelte-pf9exk{display:block;margin:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;scrollbar-width:none;width:100%;padding:0.5rem 2.6rem 0.5rem 1rem;border-radius:8px;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(\n      --account-select-font-line-height-1,\n      var(--font-line-height-1)\n    );color:var(--account-select-gray-600, var(--gray-600));transition:all 200ms ease-in-out;border:2px solid var(--account-select-gray-200, var(--gray-200));box-sizing:border-box;height:3rem;-ms-overflow-style:none}button.svelte-pf9exk{align-items:center;padding:0.75rem 1.5rem;color:var(--account-select-white, var(--white));border-radius:1.5rem;font-family:var(\n      --account-select-font-family-normal,\n      var(--font-family-normal)\n    );font-style:normal;font-weight:bold;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(--account-select-font-line-height-1, var(--line-height-1));border:none}.connect-btn.svelte-pf9exk:disabled{background-color:var(--account-select-primary-300, var(--primary-300));cursor:default}.connect-btn.svelte-pf9exk{background-color:var(--account-select-primary-500, var(--primary-500));cursor:pointer}.dismiss-action.svelte-pf9exk{color:var(--account-select-primary-500, var(--primary-500));cursor:pointer;margin-left:var(--account-select-margin-4, var(--margin-4))}select.svelte-pf9exk:hover,input.svelte-pf9exk:hover{border-color:var(--account-select-primary-300, var(--primary-300))}select.svelte-pf9exk:focus,input.svelte-pf9exk:focus{border-color:var(--account-select-primary-500, var(--primary-500));box-shadow:0 0 1px 1px\n      var(--account-select-primary-500, var(--primary-500));box-shadow:0 0 0 1px -moz-mac-focusring;outline:none}select.svelte-pf9exk:disabled{background-color:var(--account-select-gray-100, var(--gray-100))}option.svelte-pf9exk{font-weight:300}.close.svelte-pf9exk{cursor:pointer;padding:0.5rem}.container.svelte-pf9exk{font-family:var(\n      --account-select-font-family-normal,\n      var(--font-family-normal)\n    );color:var(--account-select-black, var(--black));position:absolute;top:0;right:0;z-index:20;display:flex;align-items:center;justify-content:center;width:100vw;height:100vh;backdrop-filter:blur(4px);background-color:rgba(0, 0, 0, 0.2)}.hardware-connect-modal.svelte-pf9exk{width:50rem;max-height:51.75rem;display:table;background:var(--account-select-white, var(--white));box-shadow:var(--account-select-shadow-1, var(--shadow-1));border-radius:1.5rem}.connect-wallet-header.svelte-pf9exk{position:relative;background-color:var(--account-select-gray-100, var(--gray-100));border-radius:1.5rem 1.5rem 0 0;display:flex;justify-content:space-between;align-items:center;width:100%}.modal-controls.svelte-pf9exk{display:flex;justify-content:space-between;align-items:center;padding:1rem;padding-top:0}.control-label.svelte-pf9exk{font-family:var(\n      --account-select-font-family-normal,\n      var(--font-family-normal)\n    );font-style:normal;font-weight:bold;font-size:var(--account-select-font-size-5, var(--font-size-5));line-height:var(\n      --account-select-font-line-height-1,\n      var(--font-line-height-1)\n    );margin-top:var(--account-select-margin-5, var(--margin-5));margin-bottom:var(--account-select-margin-5, var(--margin-5));color:var(--account-select-gray-700, var(--gray-700))}.base-path-select.svelte-pf9exk{min-width:20rem}.asset-select.svelte-pf9exk{width:6rem}.network-select.svelte-pf9exk{min-width:12rem}.w-100.svelte-pf9exk{width:100%}.base-path-container.svelte-pf9exk{position:relative;margin-right:var(--account-select-margin-5, var(--margin-5))}.input-select.svelte-pf9exk{background-image:url(data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23242835%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E),\n      linear-gradient(to bottom, transparent 0%, transparent 100%);background-repeat:no-repeat, repeat;background-position:center;background-size:0.65em auto, 100%;position:absolute;top:2.7rem;right:0.2rem;width:2.5rem;height:2.5rem;background-color:var(--account-select-white, var(--white));border-radius:1rem}.asset-container.svelte-pf9exk{margin-right:var(--account-select-margin-5, var(--margin-5))}.table-section.svelte-pf9exk{max-height:31.8rem;padding:1rem}.table-container.svelte-pf9exk{background:var(--account-select-white, var(--white));border:2px solid var(--account-select-gray-200, var(--gray-200));box-sizing:border-box;border-radius:0.5rem}.address-found-count.svelte-pf9exk{padding:1rem;color:var(--account-select-gray-500, var(--gray-500))}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[25] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[31] = list[i];
  return child_ctx;
}
function create_if_block_3(ctx) {
  let select;
  let each_1_anchor;
  let mounted;
  let dispose;
  let each_value_2 = ctx[7];
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  let if_block = ctx[10] && create_if_block_4();
  return {
    c() {
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty2();
      if (if_block)
        if_block.c();
      attr(select, "class", "base-path-select svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, select, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select, null);
      }
      append(select, each_1_anchor);
      if (if_block)
        if_block.m(select, null);
      if (!mounted) {
        dispose = listen(select, "change", ctx[11]);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 128) {
        each_value_2 = ctx2[7];
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(select);
      destroy_each(each_blocks, detaching);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2(ctx) {
  let input;
  let t;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      t = space();
      span = element("span");
      attr(input, "type", "text");
      attr(input, "class", "base-path-select svelte-pf9exk");
      attr(input, "placeholder", "type/your/custom/path...");
      attr(span, "class", "input-select svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, input, anchor);
      insert(target, t, anchor);
      insert(target, span, anchor);
      if (!mounted) {
        dispose = [
          listen(input, "change", ctx[13]),
          listen(span, "click", ctx[12])
        ];
        mounted = true;
      }
    },
    p: noop2,
    d(detaching) {
      if (detaching)
        detach(input);
      if (detaching)
        detach(t);
      if (detaching)
        detach(span);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block_2(ctx) {
  let option;
  let t0_value = ctx[31].label + "";
  let t0;
  let t1;
  let t2_value = ctx[31].value + "";
  let t2;
  let t3;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = text(" - ");
      t2 = text(t2_value);
      t3 = space();
      option.__value = option_value_value = ctx[31].value;
      option.value = option.__value;
      attr(option, "class", "svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
      append(option, t2);
      append(option, t3);
    },
    p: noop2,
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_if_block_4(ctx) {
  let option;
  return {
    c() {
      option = element("option");
      option.textContent = "Custom Derivation Path";
      option.__value = "customPath";
      option.value = option.__value;
      attr(option, "class", "svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, option, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_each_block_1(ctx) {
  let option;
  let t0_value = ctx[28].label + "";
  let t0;
  let t1;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = space();
      option.__value = option_value_value = ctx[28];
      option.value = option.__value;
      attr(option, "class", "svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
    },
    p: noop2,
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_each_block(ctx) {
  let option;
  let t0_value = ctx[25].label + "";
  let t0;
  let t1;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = space();
      option.__value = option_value_value = ctx[25].id;
      option.value = option.__value;
      attr(option, "class", "svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
    },
    p: noop2,
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_if_block_1(ctx) {
  let t0_value = (ctx[0] && ctx[0].all.length || 0) + "";
  let t0;
  let t1;
  let t2_value = ctx[0] && ctx[0].all.length !== 1 ? "es" : "";
  let t2;
  let t3;
  return {
    c() {
      t0 = text(t0_value);
      t1 = text(" total address");
      t2 = text(t2_value);
      t3 = text(" found");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 1 && t0_value !== (t0_value = (ctx2[0] && ctx2[0].all.length || 0) + ""))
        set_data(t0, t0_value);
      if (dirty[0] & 1 && t2_value !== (t2_value = ctx2[0] && ctx2[0].all.length !== 1 ? "es" : ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(t0);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(t3);
    }
  };
}
function create_if_block$1(ctx) {
  let t0_value = (ctx[0] && ctx[0].filtered.length || 0) + "";
  let t0;
  let t1;
  let t2_value = ctx[0] && ctx[0].filtered.length !== 1 ? "es" : "";
  let t2;
  let t3;
  return {
    c() {
      t0 = text(t0_value);
      t1 = text(" total\n          address");
      t2 = text(t2_value);
      t3 = text(" found");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 1 && t0_value !== (t0_value = (ctx2[0] && ctx2[0].filtered.length || 0) + ""))
        set_data(t0, t0_value);
      if (dirty[0] & 1 && t2_value !== (t2_value = ctx2[0] && ctx2[0].filtered.length !== 1 ? "es" : ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(t0);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(t3);
    }
  };
}
function create_fragment$2(ctx) {
  let div10;
  let div9;
  let header;
  let div0;
  let t0;
  let div1;
  let closebutton;
  let t1;
  let section0;
  let div2;
  let h40;
  let t3;
  let t4;
  let div3;
  let h41;
  let t6;
  let select0;
  let t7;
  let div4;
  let h42;
  let t9;
  let select1;
  let t10;
  let section1;
  let div5;
  let tableheader;
  let updating_showEmptyAddresses;
  let t11;
  let addresstable;
  let updating_accountSelected;
  let t12;
  let section2;
  let div6;
  let t13;
  let t14;
  let div8;
  let div7;
  let t16;
  let button;
  let t17;
  let button_disabled_value;
  let div9_transition;
  let current;
  let mounted;
  let dispose;
  closebutton = new CloseButton({});
  function select_block_type(ctx2, dirty) {
    if (ctx2[2])
      return create_if_block_2;
    if (!ctx2[2])
      return create_if_block_3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type && current_block_type(ctx);
  let each_value_1 = ctx[8];
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  let each_value = ctx[9];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  function tableheader_showEmptyAddresses_binding(value) {
    ctx[21](value);
  }
  let tableheader_props = {
    scanAccounts: ctx[14],
    loadingAccounts: ctx[4],
    errorFromScan: ctx[5]
  };
  if (ctx[3] !== void 0) {
    tableheader_props.showEmptyAddresses = ctx[3];
  }
  tableheader = new TableHeader({ props: tableheader_props });
  binding_callbacks.push(() => bind2(tableheader, "showEmptyAddresses", tableheader_showEmptyAddresses_binding));
  function addresstable_accountSelected_binding(value) {
    ctx[22](value);
  }
  let addresstable_props = {
    accountsListObject: ctx[0],
    showEmptyAddresses: ctx[3]
  };
  if (ctx[1] !== void 0) {
    addresstable_props.accountSelected = ctx[1];
  }
  addresstable = new AddressTable({ props: addresstable_props });
  binding_callbacks.push(() => bind2(addresstable, "accountSelected", addresstable_accountSelected_binding));
  let if_block1 = ctx[3] && create_if_block_1(ctx);
  let if_block2 = !ctx[3] && create_if_block$1(ctx);
  return {
    c() {
      div10 = element("div");
      div9 = element("div");
      header = element("header");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      create_component(closebutton.$$.fragment);
      t1 = space();
      section0 = element("section");
      div2 = element("div");
      h40 = element("h4");
      h40.textContent = "Select Base Path";
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      div3 = element("div");
      h41 = element("h4");
      h41.textContent = "Asset";
      t6 = space();
      select0 = element("select");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t7 = space();
      div4 = element("div");
      h42 = element("h4");
      h42.textContent = "Network";
      t9 = space();
      select1 = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t10 = space();
      section1 = element("section");
      div5 = element("div");
      create_component(tableheader.$$.fragment);
      t11 = space();
      create_component(addresstable.$$.fragment);
      t12 = space();
      section2 = element("section");
      div6 = element("div");
      if (if_block1)
        if_block1.c();
      t13 = space();
      if (if_block2)
        if_block2.c();
      t14 = space();
      div8 = element("div");
      div7 = element("div");
      div7.textContent = "Dismiss";
      t16 = space();
      button = element("button");
      t17 = text("Connect");
      attr(div1, "class", "close svelte-pf9exk");
      attr(header, "class", "connect-wallet-header svelte-pf9exk");
      attr(h40, "class", "control-label svelte-pf9exk");
      attr(div2, "class", "w-100 base-path-container svelte-pf9exk");
      attr(h41, "class", "control-label svelte-pf9exk");
      attr(select0, "class", "asset-select svelte-pf9exk");
      if (ctx[6]["asset"] === void 0)
        add_render_callback(() => ctx[19].call(select0));
      attr(div3, "class", "asset-container svelte-pf9exk");
      attr(h42, "class", "control-label svelte-pf9exk");
      attr(select1, "class", "network-select svelte-pf9exk");
      if (ctx[6]["chainId"] === void 0)
        add_render_callback(() => ctx[20].call(select1));
      attr(div4, "class", "network-container");
      attr(section0, "class", "modal-controls svelte-pf9exk");
      attr(div5, "class", "w-100 table-container svelte-pf9exk");
      attr(section1, "class", "table-section svelte-pf9exk");
      attr(div6, "class", "address-found-count svelte-pf9exk");
      attr(div7, "class", "dismiss-action svelte-pf9exk");
      attr(div7, "id", "dismiss-account-select");
      attr(button, "class", "connect-btn svelte-pf9exk");
      attr(button, "id", "connect-accounts");
      button.disabled = button_disabled_value = !ctx[1];
      attr(div8, "class", "modal-controls svelte-pf9exk");
      attr(div9, "class", "hardware-connect-modal svelte-pf9exk");
      attr(div10, "class", "container svelte-pf9exk");
    },
    m(target, anchor) {
      insert(target, div10, anchor);
      append(div10, div9);
      append(div9, header);
      append(header, div0);
      append(header, t0);
      append(header, div1);
      mount_component(closebutton, div1, null);
      append(div9, t1);
      append(div9, section0);
      append(section0, div2);
      append(div2, h40);
      append(div2, t3);
      if (if_block0)
        if_block0.m(div2, null);
      append(section0, t4);
      append(section0, div3);
      append(div3, h41);
      append(div3, t6);
      append(div3, select0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(select0, null);
      }
      select_option(select0, ctx[6]["asset"]);
      append(section0, t7);
      append(section0, div4);
      append(div4, h42);
      append(div4, t9);
      append(div4, select1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select1, null);
      }
      select_option(select1, ctx[6]["chainId"]);
      append(div9, t10);
      append(div9, section1);
      append(section1, div5);
      mount_component(tableheader, div5, null);
      append(div5, t11);
      mount_component(addresstable, div5, null);
      append(div9, t12);
      append(div9, section2);
      append(section2, div6);
      if (if_block1)
        if_block1.m(div6, null);
      append(div6, t13);
      if (if_block2)
        if_block2.m(div6, null);
      append(section2, t14);
      append(section2, div8);
      append(div8, div7);
      append(div8, t16);
      append(div8, button);
      append(button, t17);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[16]),
          listen(select0, "change", ctx[19]),
          listen(select1, "change", ctx[20]),
          listen(div7, "click", ctx[16]),
          listen(button, "click", ctx[15])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if (if_block0)
          if_block0.d(1);
        if_block0 = current_block_type && current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div2, null);
        }
      }
      if (dirty[0] & 256) {
        each_value_1 = ctx2[8];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(select0, null);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (dirty[0] & 320) {
        select_option(select0, ctx2[6]["asset"]);
      }
      if (dirty[0] & 512) {
        each_value = ctx2[9];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty[0] & 320) {
        select_option(select1, ctx2[6]["chainId"]);
      }
      const tableheader_changes = {};
      if (dirty[0] & 16)
        tableheader_changes.loadingAccounts = ctx2[4];
      if (dirty[0] & 32)
        tableheader_changes.errorFromScan = ctx2[5];
      if (!updating_showEmptyAddresses && dirty[0] & 8) {
        updating_showEmptyAddresses = true;
        tableheader_changes.showEmptyAddresses = ctx2[3];
        add_flush_callback(() => updating_showEmptyAddresses = false);
      }
      tableheader.$set(tableheader_changes);
      const addresstable_changes = {};
      if (dirty[0] & 1)
        addresstable_changes.accountsListObject = ctx2[0];
      if (dirty[0] & 8)
        addresstable_changes.showEmptyAddresses = ctx2[3];
      if (!updating_accountSelected && dirty[0] & 2) {
        updating_accountSelected = true;
        addresstable_changes.accountSelected = ctx2[1];
        add_flush_callback(() => updating_accountSelected = false);
      }
      addresstable.$set(addresstable_changes);
      if (ctx2[3]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1(ctx2);
          if_block1.c();
          if_block1.m(div6, t13);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!ctx2[3]) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block$1(ctx2);
          if_block2.c();
          if_block2.m(div6, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (!current || dirty[0] & 2 && button_disabled_value !== (button_disabled_value = !ctx2[1])) {
        button.disabled = button_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(tableheader.$$.fragment, local);
      transition_in(addresstable.$$.fragment, local);
      add_render_callback(() => {
        if (!div9_transition)
          div9_transition = create_bidirectional_transition(div9, fade, {}, true);
        div9_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(tableheader.$$.fragment, local);
      transition_out(addresstable.$$.fragment, local);
      if (!div9_transition)
        div9_transition = create_bidirectional_transition(div9, fade, {}, false);
      div9_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div10);
      destroy_component(closebutton);
      if (if_block0) {
        if_block0.d();
      }
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
      destroy_component(tableheader);
      destroy_component(addresstable);
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (detaching && div9_transition)
        div9_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let { selectAccountOptions: selectAccountOptions2 } = $$props;
  let { accounts$: accounts$2 } = $$props;
  const { basePaths: basePaths2, assets: assets2, chains: chains2, scanAccounts, supportsCustomPath = true } = selectAccountOptions2;
  let accountsListObject;
  let accountSelected;
  let customDerivationPath = false;
  let showEmptyAddresses = false;
  let loadingAccounts = false;
  let errorFromScan = "";
  let scanAccountOptions = {
    derivationPath: basePaths2[0] && basePaths2[0].value || "",
    chainId: chains2[0].id || "",
    asset: assets2[0] || null
  };
  const handleDerivationPathSelect = (e) => {
    let selectVal = e.target.value;
    if (selectVal === "customPath")
      return $$invalidate(2, customDerivationPath = true);
    $$invalidate(6, scanAccountOptions.derivationPath = selectVal, scanAccountOptions);
  };
  const toggleDerivationPathToDropdown = () => {
    $$invalidate(2, customDerivationPath = false);
    $$invalidate(6, scanAccountOptions.derivationPath = basePaths2[0].value, scanAccountOptions);
  };
  const handleCustomPath = (e) => {
    let inputVal = e.target.value;
    $$invalidate(6, scanAccountOptions.derivationPath = inputVal, scanAccountOptions);
  };
  const scanAccountsWrap = async () => {
    try {
      $$invalidate(5, errorFromScan = "");
      $$invalidate(4, loadingAccounts = true);
      const allAccounts = await scanAccounts(scanAccountOptions);
      $$invalidate(0, accountsListObject = {
        all: allAccounts,
        filtered: allAccounts.filter((account) => {
          return parseFloat(utils_exports.formatEther(account.balance.value)) > 0;
        })
      });
      $$invalidate(4, loadingAccounts = false);
    } catch (err) {
      const { message } = err;
      $$invalidate(5, errorFromScan = message || "There was an error scanning for accounts");
      $$invalidate(4, loadingAccounts = false);
    }
  };
  const connectAccounts = () => {
    if (!accountSelected)
      return;
    accounts$2.next([accountSelected]);
    resetModal();
  };
  const dismiss = () => {
    accounts$2.next([]);
    resetModal();
  };
  const resetModal = () => {
    $$invalidate(1, accountSelected = void 0);
    $$invalidate(0, accountsListObject = void 0);
    $$invalidate(3, showEmptyAddresses = false);
    $$invalidate(6, scanAccountOptions.derivationPath = basePaths2[0] && basePaths2[0].value || "", scanAccountOptions);
  };
  function select0_change_handler() {
    scanAccountOptions["asset"] = select_value(this);
    $$invalidate(6, scanAccountOptions);
    $$invalidate(8, assets2);
  }
  function select1_change_handler() {
    scanAccountOptions["chainId"] = select_value(this);
    $$invalidate(6, scanAccountOptions);
    $$invalidate(8, assets2);
  }
  function tableheader_showEmptyAddresses_binding(value) {
    showEmptyAddresses = value;
    $$invalidate(3, showEmptyAddresses);
  }
  function addresstable_accountSelected_binding(value) {
    accountSelected = value;
    $$invalidate(1, accountSelected);
  }
  $$self.$$set = ($$props2) => {
    if ("selectAccountOptions" in $$props2)
      $$invalidate(17, selectAccountOptions2 = $$props2.selectAccountOptions);
    if ("accounts$" in $$props2)
      $$invalidate(18, accounts$2 = $$props2.accounts$);
  };
  return [
    accountsListObject,
    accountSelected,
    customDerivationPath,
    showEmptyAddresses,
    loadingAccounts,
    errorFromScan,
    scanAccountOptions,
    basePaths2,
    assets2,
    chains2,
    supportsCustomPath,
    handleDerivationPathSelect,
    toggleDerivationPathToDropdown,
    handleCustomPath,
    scanAccountsWrap,
    connectAccounts,
    dismiss,
    selectAccountOptions2,
    accounts$2,
    select0_change_handler,
    select1_change_handler,
    tableheader_showEmptyAddresses_binding,
    addresstable_accountSelected_binding
  ];
}
var AccountSelect = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, { selectAccountOptions: 17, accounts$: 18 }, add_css$2, [-1, -1]);
  }
};
var accounts$ = new Subject();
var basePath = import_joi.default.object({
  label: import_joi.default.string().required(),
  value: import_joi.default.string().required()
});
var basePaths = import_joi.default.array().items(basePath);
var chain = import_joi.default.object({
  namespace: import_joi.default.string(),
  id: import_joi.default.string().required(),
  label: import_joi.default.string(),
  token: import_joi.default.string().required(),
  rpcUrl: import_joi.default.string()
});
var chains = import_joi.default.array().items(chain);
var asset = import_joi.default.object({
  label: import_joi.default.string().required(),
  address: import_joi.default.string()
});
var assets = import_joi.default.array().items(asset);
var selectAccountOptions = import_joi.default.object({
  basePaths,
  assets,
  chains,
  scanAccounts: import_joi.default.function().arity(1).required(),
  supportsCustomPath: import_joi.default.bool()
});
var validate = (validator, data) => {
  const result = validator.validate(data);
  return result.error ? result : null;
};
var validateSelectAccountOptions = (data) => {
  return validate(selectAccountOptions, data);
};
var SofiaProRegular = `
  @font-face {
    font-family: Sofia Pro;
    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),
        url(data:application/font-woff;charset=utf-8;base64,) format('woff'),
        url('sofiapro-regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;

  }
`;
var SofiaProLight = `
  @font-face {
    font-family: 'Sofia Pro Light';
    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),
        url(data:application/font-woff;charset=utf-8;base64,) format('woff'),
        url('sofiapro-light.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;

  }
`;
var SofiaProSemiBold = `
  @font-face {
    font-family: 'Sofia Pro Semibold';
    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),
        url(data:application/font-woff;charset=utf-8;base64,) format('woff'),
        url('sofiapro-semibold.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;

  }
`;
var accountSelect = async (options) => {
  if (options) {
    const error = validateSelectAccountOptions(options);
    if (error) {
      throw error;
    }
  }
  const app = mountAccountSelect(options, accounts$);
  accounts$.pipe(take(1)).subscribe(() => {
    app.$destroy();
  });
  return firstValueFrom(accounts$);
};
var mountAccountSelect = (selectAccountOptions2, accounts$2) => {
  class AccountSelectEl extends HTMLElement {
    constructor() {
      super();
    }
  }
  if (!customElements.get("account-select")) {
    customElements.define("account-select", AccountSelectEl);
  }
  const styleEl = document.createElement("style");
  styleEl.innerHTML = `
    ${SofiaProRegular}
    ${SofiaProSemiBold}
    ${SofiaProLight}
  `;
  document.body.appendChild(styleEl);
  const accountSelectDomElement = document.createElement("account-select");
  const target = accountSelectDomElement.attachShadow({ mode: "open" });
  accountSelectDomElement.style.all = "initial";
  target.innerHTML = `
    <style>
      :host {  
        /* COLORS */
        --white: white;
        --black: black;
        --primary-100: #eff1fc;
        --primary-200: #d0d4f7;
        --primary-300: #b1b8f2;
        --primary-500: #6370e5;
        --primary-600: #454ea0;
        --gray-100: #ebebed;
        --gray-200: #c2c4c9;
        --gray-300: #999ca5;
        --gray-500: #33394b;
        --gray-700: #1a1d26;
        --danger-500: #ff4f4f;

        /* FONTS */
        --font-family-normal: Sofia Pro;
        --font-family-light: Sofia Pro Light;
        --font-size-5: 1rem;
        --font-size-7: .75rem;
        --font-line-height-1: 24px;

        /* SPACING */
        --margin-4: 1rem;
        --margin-5: 0.5rem;

        /* MODAL POSITION */
        --top-1: 1rem;
        --right-1: 1rem;

        /* SHADOWS */
        --shadow-1: 0px 4px 12px rgba(0, 0, 0, 0.1);
      }

    </style>
  `;
  document.body.appendChild(accountSelectDomElement);
  const app = new AccountSelect({
    target,
    props: {
      selectAccountOptions: selectAccountOptions2,
      accounts$: accounts$2
    }
  });
  return app;
};
function add_css$1(target) {
  append_styles(target, "svelte-11nwsek", "aside.svelte-11nwsek{display:flex;font-family:'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;justify-content:center;align-items:center;position:fixed;font-size:16px;top:0;left:0;width:100vw;height:100vh;background:rgba(0, 0, 0, 0.3);z-index:20}@media screen and (max-width: 420px){aside.svelte-11nwsek{font-size:14px}}section.svelte-11nwsek{display:block;box-sizing:content-box;background:#ffffff;border-radius:10px;box-shadow:0 1px 5px 0 rgba(0, 0, 0, 0.1);font-family:inherit;font-size:inherit;padding:1.33em;position:relative;overflow:hidden;max-width:37em;color:#4a4a4a}div.svelte-11nwsek{height:0.66em;position:absolute;padding:0.25em;top:1.33em;right:1.33em;font-size:inherit;font-family:inherit;border-radius:5px;transition:background 200ms ease-in-out;display:flex;justify-content:center;align-items:center}div.svelte-11nwsek:hover{cursor:pointer;background:#eeeeee}svg.svelte-11nwsek{width:10px;height:10px}");
}
function create_if_block(ctx) {
  let div;
  let svg;
  let g0;
  let path;
  let g1;
  let g2;
  let g3;
  let g4;
  let g5;
  let g6;
  let g7;
  let g8;
  let g9;
  let g10;
  let g11;
  let g12;
  let g13;
  let g14;
  let g15;
  let svg_fill_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      svg = svg_element("svg");
      g0 = svg_element("g");
      path = svg_element("path");
      g1 = svg_element("g");
      g2 = svg_element("g");
      g3 = svg_element("g");
      g4 = svg_element("g");
      g5 = svg_element("g");
      g6 = svg_element("g");
      g7 = svg_element("g");
      g8 = svg_element("g");
      g9 = svg_element("g");
      g10 = svg_element("g");
      g11 = svg_element("g");
      g12 = svg_element("g");
      g13 = svg_element("g");
      g14 = svg_element("g");
      g15 = svg_element("g");
      attr(path, "d", "M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88\n              c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242\n              C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879\n              s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
      attr(svg, "x", "0px");
      attr(svg, "y", "0px");
      attr(svg, "viewBox", "0 0 47.971 47.971");
      set_style(svg, "enable-background", "new 0 0 47.971 47.971");
      set_style(svg, "transition", "fill 150ms ease-in-out");
      attr(svg, "fill", svg_fill_value = ctx[2] ? "#4a4a4a" : "#9B9B9B");
      attr(svg, "xml:space", "preserve");
      attr(svg, "class", "svelte-11nwsek");
      attr(div, "class", "bn-onboard-custom bn-onboard-modal-content-close svelte-11nwsek");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, svg);
      append(svg, g0);
      append(g0, path);
      append(svg, g1);
      append(svg, g2);
      append(svg, g3);
      append(svg, g4);
      append(svg, g5);
      append(svg, g6);
      append(svg, g7);
      append(svg, g8);
      append(svg, g9);
      append(svg, g10);
      append(svg, g11);
      append(svg, g12);
      append(svg, g13);
      append(svg, g14);
      append(svg, g15);
      if (!mounted) {
        dispose = [
          listen(div, "click", function() {
            if (is_function(ctx[0]))
              ctx[0].apply(this, arguments);
          }),
          listen(div, "mouseenter", ctx[5]),
          listen(div, "mouseleave", ctx[6])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 4 && svg_fill_value !== (svg_fill_value = ctx[2] ? "#4a4a4a" : "#9B9B9B")) {
        attr(svg, "fill", svg_fill_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$1(ctx) {
  let aside;
  let section;
  let t;
  let aside_transition;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[4].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[3], null);
  let if_block = ctx[1] && create_if_block(ctx);
  return {
    c() {
      aside = element("aside");
      section = element("section");
      if (default_slot)
        default_slot.c();
      t = space();
      if (if_block)
        if_block.c();
      attr(section, "class", "bn-onboard-custom bn-onboard-modal-content svelte-11nwsek");
      attr(aside, "class", "bn-onboard-custom bn-onboard-modal svelte-11nwsek");
    },
    m(target, anchor) {
      insert(target, aside, anchor);
      append(aside, section);
      if (default_slot) {
        default_slot.m(section, null);
      }
      append(section, t);
      if (if_block)
        if_block.m(section, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(section, "click", click_handler),
          listen(aside, "click", function() {
            if (is_function(ctx[0]))
              ctx[0].apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 8)) {
          update_slot_base(default_slot, default_slot_template, ctx, ctx[3], !current ? get_all_dirty_from_scope(ctx[3]) : get_slot_changes(default_slot_template, ctx[3], dirty, null), null);
        }
      }
      if (ctx[1]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(section, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      add_render_callback(() => {
        if (!aside_transition)
          aside_transition = create_bidirectional_transition(aside, fade, {}, true);
        aside_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      if (!aside_transition)
        aside_transition = create_bidirectional_transition(aside, fade, {}, false);
      aside_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(aside);
      if (default_slot)
        default_slot.d(detaching);
      if (if_block)
        if_block.d();
      if (detaching && aside_transition)
        aside_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
var click_handler = (e) => e.stopPropagation();
function instance$1($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { closeModal = () => {
  } } = $$props;
  let { closeable = true } = $$props;
  let closeHovered;
  const mouseenter_handler = () => $$invalidate(2, closeHovered = true);
  const mouseleave_handler = () => $$invalidate(2, closeHovered = false);
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
    if ("closeable" in $$props2)
      $$invalidate(1, closeable = $$props2.closeable);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [
    closeModal,
    closeable,
    closeHovered,
    $$scope,
    slots,
    mouseenter_handler,
    mouseleave_handler
  ];
}
var Modal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, { closeModal: 0, closeable: 1 }, add_css$1);
  }
};
function add_css(target) {
  append_styles(target, "svelte-3sw9wd", "button.svelte-3sw9wd{outline:none;background:inherit;font-size:0.889em;font-family:inherit;padding:0.55em 1.4em;cursor:pointer;color:#4a90e2;font-family:inherit;transition:background 150ms ease-in-out;line-height:1.15;opacity:1;transition:opacity 200ms}button.svelte-3sw9wd:focus{outline:none}.bn-onboard-prepare-button-right.svelte-3sw9wd{position:absolute;right:0}.bn-onboard-prepare-button-left.svelte-3sw9wd{position:absolute;left:0}.disabled.svelte-3sw9wd{cursor:inherit;pointer-events:none;opacity:0.4}.cta.svelte-3sw9wd{outline:1px solid #4a90e2;border-radius:40px}.cta.svelte-3sw9wd:hover{background:#ecf3fc}");
}
function create_fragment(ctx) {
  let button;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[5].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[4], null);
  return {
    c() {
      button = element("button");
      if (default_slot)
        default_slot.c();
      button.disabled = ctx[2];
      attr(button, "class", "bn-onboard-custom bn-onboard-prepare-button svelte-3sw9wd");
      toggle_class(button, "disabled", ctx[2]);
      toggle_class(button, "cta", ctx[3]);
      toggle_class(button, "bn-onboard-prepare-button-right", ctx[1] === "right");
      toggle_class(button, "bn-onboard-prepare-button-left", ctx[1] === "left");
      toggle_class(button, "bn-onboard-prepare-button-center", ctx[1] !== "left" && ctx[1] !== "right");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (default_slot) {
        default_slot.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(ctx[0]))
            ctx[0].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 16)) {
          update_slot_base(default_slot, default_slot_template, ctx, ctx[4], !current ? get_all_dirty_from_scope(ctx[4]) : get_slot_changes(default_slot_template, ctx[4], dirty, null), null);
        }
      }
      if (!current || dirty & 4) {
        button.disabled = ctx[2];
      }
      if (dirty & 4) {
        toggle_class(button, "disabled", ctx[2]);
      }
      if (dirty & 8) {
        toggle_class(button, "cta", ctx[3]);
      }
      if (dirty & 2) {
        toggle_class(button, "bn-onboard-prepare-button-right", ctx[1] === "right");
      }
      if (dirty & 2) {
        toggle_class(button, "bn-onboard-prepare-button-left", ctx[1] === "left");
      }
      if (dirty & 2) {
        toggle_class(button, "bn-onboard-prepare-button-center", ctx[1] !== "left" && ctx[1] !== "right");
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { onclick = () => {
  } } = $$props;
  let { position = "" } = $$props;
  let { disabled = false } = $$props;
  let { cta = true } = $$props;
  $$self.$$set = ($$props2) => {
    if ("onclick" in $$props2)
      $$invalidate(0, onclick = $$props2.onclick);
    if ("position" in $$props2)
      $$invalidate(1, position = $$props2.position);
    if ("disabled" in $$props2)
      $$invalidate(2, disabled = $$props2.disabled);
    if ("cta" in $$props2)
      $$invalidate(3, cta = $$props2.cta);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [onclick, position, disabled, cta, $$scope, slots];
}
var Button = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, {
      onclick: 0,
      position: 1,
      disabled: 2,
      cta: 3
    }, add_css);
  }
};
var HANDLE_PIN_PRESS = "handlePinPress";
var BUTTON_COLOR = `#EBEBED`;
var BUTTON_DOT_COLOR = `#33394B`;
var pinButton = (value, slot, width = "64px", height = "64px") => `
  <button
    class="pin-button"
    style="width: ${width}; height: ${height};"
    type="button"
    onclick="window.${HANDLE_PIN_PRESS}(${value})">
      ${slot || `<svg class="pin-button-dot" viewBox="0 0 18 18" width="18" height="18">
          <circle cx="9" cy="9" r="9" ></circle>
        </svg>`}
      <div class="pin-button-bg">
  </button>
`;
var pinButtons = `
  <div class="pin-pad-buttons">
    ${[7, 8, 9, 4, 5, 6, 1, 2, 3].map((val) => pinButton(val)).join("")}
  </div>
`;
var delButtonIcon = `<svg class="del-button-icon" viewBox="0 0 24 24" focusable="false" class="chakra-icon css-onkibi" aria-hidden="true"><path fill="currentColor" d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></svg>`;
var pinPhraseInput = (modalType) => `
<form id="pin-phrase-form" class="pin-phrase-input-container">
  <input
    id="pin-phrase-input"
    placeholder="${modalType === "pin" ? "PIN" : ""}"
    type="password"
    autocomplete="current-password"
  />
  ${modalType === "pin" ? ` <div class="del-button-wrapper">
            ${pinButton(-1, delButtonIcon, "38px", "38px")}
          </div>` : ""}
</form>
`;
var baseStyles = `
  .keepkey-modal {
    max-width: 22rem;
    padding: 20px 10px;
  }
  .pin-phrase-input-container {
    display: flex;
    position: relative;
    align-items: center;
    margin: 20px 0;
    width: 100%;
  }
  #pin-phrase-input {
    background: inherit;
    font-size: 0.889em;
    font-family: inherit;
    border-width: 1px;
    border-style: solid;
    border-color: #242835;
    border-radius: 4px;
    padding-left: 0.5rem;
    padding-right: 4.1rem;
    transition: opacity 150ms ease-in-out;
    height: 42px;
    width: 100%;
    opacity: 0.6;
    outline: none;
  }
  #pin-phrase-input:hover, #pin-phrase-input:focus {
    opacity: 1;
  }
  .unlock-button {
    height: 26px;
    display: flex;
    align-items: center;
    width: 100%;
    justify-content: center;
  }
  
  /* Overrides the branding on the modal*/
  .keepkey-modal + .bn-branding { visibility: hidden !important; }
  .keepkey-modal .bn-onboard-prepare-button {
    width: 100%;
  }
`;
var pinModalStyles = `
  #entry {
    align-items: center;
    display: flex;
    flex-flow: column;
    padding: 20px;
  }
  .pin-pad-buttons {
    display: grid;
    grid-template-columns: repeat(3, 75px);
    grid-template-rows: repeat(3, 75px);
    align-items: center;
    justify-items: center;
    margin-bottom: 15px;
  }
  .pin-button {
    align-items: center;
    border-radius: 6px;
    border: 1px solid ${BUTTON_COLOR};
    cursor: pointer;
    display: flex;
    justify-content: center;
    font-size: 18px;
    overflow: hidden;
    padding: 0;
    background-color: unset;
    overflow: hidden;
  }
  .pin-button-bg {
    width: 100%;
    height: 100%;
    display: flex;
    overflow: hidden;
    background-color: ${BUTTON_COLOR};
    transition: opacity 100ms ease-in;
  }
  .pin-button-bg:hover {
    opacity: .2;
  }
  .pin-button-dot {
    fill: ${BUTTON_DOT_COLOR};
    position: absolute;
    pointer-events: none;
    z-index: 2;
  }
  .del-button-wrapper {
    position: absolute;
    height: 42px;
    width: 42px;
    right: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .del-button-wrapper > .pin-button {
    border: none;
  }
  .del-button-icon {
    position: absolute;
    width: 20px;
    z-index: 2;
    pointer-events: none;
  }
  .del-button-icon + div {
    opacity: .5;
  }
  .del-button-icon + div:hover {
    opacity: 1;
  }
`;
var passphraseModalStyles = `
  .keepkey-modal {
    padding: 40px 30px;
  }
`;
var pinHTML = `
    <style>${baseStyles}${pinModalStyles}</style>
    <h2>Enter Your Pin</h2>
    <p>
      Use PIN layout shown on your device to find the location to press on this pin pad.
    </p>
    <div id="entry" class="bn-onboard-custom">
      ${pinButtons}
      ${pinPhraseInput("pin")}
    </div>
  `;
var passphraseHTML = `
  <style>${baseStyles}${passphraseModalStyles}</style>
  <h2 style="margin-bottom: 35px">Enter Your Passphrase</h2>
  <div id="entry" class="bn-onboard-custom">
    ${pinPhraseInput("passphrase")}
  </div>
`;
var entryModal = (modalType, submit, cancel) => {
  const modalHtml = modalType === "pin" ? pinHTML : passphraseHTML;
  const getInput = () => document.getElementById("pin-phrase-input");
  const deleteWindowProperties = () => {
    delete window[HANDLE_PIN_PRESS];
  };
  if (modalType === "pin") {
    window[HANDLE_PIN_PRESS] = (value) => {
      const input = getInput();
      input.value = value === -1 ? input.value.slice(0, -1) : input.value + value;
    };
  }
  const div = document.createElement("div");
  div.innerHTML = modalHtml;
  div.className = "keepkey-modal";
  const pinModal = new Modal({
    target: document.body,
    props: {
      closeModal: () => {
        cancel();
        deleteWindowProperties();
        pinModal.$destroy();
      },
      $$slots: createSlot(div),
      $$scope: {}
    }
  });
  const submitValue = async () => {
    const value = getInput().value;
    submit(value);
    pinModal.$destroy();
  };
  const pinPhraseForm = document.getElementById("pin-phrase-form");
  pinPhraseForm && pinPhraseForm.addEventListener("submit", (e) => {
    e.preventDefault();
    submitValue();
  });
  const entryEl = document.getElementById("entry");
  if (entryEl) {
    const span = document.createElement("span");
    span.innerHTML = `Unlock`;
    span.className = `unlock-button`;
    new Button({
      target: entryEl,
      props: {
        onclick: async () => {
          submitValue();
          deleteWindowProperties();
        },
        $$slots: createSlot(span),
        $$scope: {}
      }
    });
  }
};
function createSlot(element2) {
  return {
    default: [
      function() {
        return {
          c: noop2,
          m: function mount(target, anchor) {
            insert(target, element2, anchor);
          },
          d: function destroy(detaching) {
            if (detaching) {
              detach(element2);
            }
          },
          l: noop2
        };
      }
    ]
  };
}

export {
  require_joi_browser_min,
  ProviderRpcErrorCode,
  ProviderRpcError,
  createEIP1193Provider,
  SofiaProRegular,
  SofiaProLight,
  SofiaProSemiBold,
  accountSelect,
  entryModal
};
//# sourceMappingURL=chunk-QLIZTXI5.js.map
