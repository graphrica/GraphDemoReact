{
  "version": 3,
  "sources": ["dep:@web3-onboard_trezor", "../@web3-onboard/trezor/dist/index.js"],
  "sourcesContent": ["import d from \"./node_modules/@web3-onboard/trezor/dist/index.js\";export default d;", "// cannot be dynamically imported\nimport { Buffer } from 'buffer';\nconst TREZOR_DEFAULT_PATH = \"m/44'/60'/0'/0\";\nconst assets = [\n    {\n        label: 'ETH'\n    }\n];\nconst DEFAULT_BASE_PATHS = [\n    {\n        label: 'Ethereum Mainnet',\n        value: TREZOR_DEFAULT_PATH\n    }\n];\nconst getAccount = async ({ publicKey, chainCode, path }, asset, index, provider) => {\n    //@ts-ignore\n    const { default: HDKey } = await import('hdkey');\n    const ethUtil = await import('ethereumjs-util');\n    // @ts-ignore - Commonjs importing weirdness\n    const { publicToAddress, toChecksumAddress } = ethUtil.default || ethUtil;\n    const hdk = new HDKey();\n    hdk.publicKey = Buffer.from(publicKey, 'hex');\n    hdk.chainCode = Buffer.from(chainCode, 'hex');\n    const dkey = hdk.deriveChild(index);\n    const address = toChecksumAddress(`0x${publicToAddress(dkey.publicKey, true).toString('hex')}`);\n    return {\n        derivationPath: `${path}/${index}`,\n        address,\n        balance: {\n            asset: asset.label,\n            value: await provider.getBalance(address)\n        }\n    };\n};\nconst getAddresses = async (account, asset, provider) => {\n    const accounts = [];\n    let index = 0;\n    let zeroBalanceAccounts = 0;\n    // Iterates until a 0 balance account is found\n    // Then adds 4 more 0 balance accounts to the array\n    while (zeroBalanceAccounts < 5) {\n        const acc = await getAccount(account, asset, index, provider);\n        if (acc &&\n            acc.hasOwnProperty('balance') &&\n            acc.balance.hasOwnProperty('value') &&\n            acc.balance.value.isZero()) {\n            zeroBalanceAccounts++;\n            accounts.push(acc);\n        }\n        else {\n            accounts.push(acc);\n            // Reset the number of 0 balance accounts\n            zeroBalanceAccounts = 0;\n        }\n        index++;\n    }\n    return accounts;\n};\nfunction trezor(options) {\n    const getIcon = async () => (await import('./icon.js')).default;\n    return () => {\n        let accounts;\n        return {\n            label: 'Trezor',\n            getIcon,\n            getInterface: async ({ EventEmitter, chains }) => {\n                const { default: Trezor } = await import('trezor-connect');\n                const { Transaction } = await import('@ethereumjs/tx');\n                const { default: Common, Hardfork } = await import('@ethereumjs/common');\n                const { accountSelect, createEIP1193Provider, ProviderRpcError } = await import('@web3-onboard/common');\n                const ethUtil = await import('ethereumjs-util');\n                const { compress } = (await import('eth-crypto')).publicKey;\n                const { StaticJsonRpcProvider } = await import('@ethersproject/providers');\n                if (!options || !options.email || !options.appUrl) {\n                    throw new Error('Email and AppUrl required in Trezor options for Trezor Wallet Connection');\n                }\n                const { email, appUrl, customNetwork } = options;\n                // @ts-ignore\n                const TrezorConnect = Trezor.default || Trezor;\n                TrezorConnect.manifest({\n                    email: email,\n                    appUrl: appUrl\n                });\n                const eventEmitter = new EventEmitter();\n                let currentChain = chains[0];\n                let account;\n                const scanAccounts = async ({ derivationPath, chainId, asset }) => {\n                    currentChain = chains.find(({ id }) => id === chainId) || currentChain;\n                    const provider = new StaticJsonRpcProvider(currentChain.rpcUrl);\n                    const { publicKey, chainCode, path } = await getPublicKey(derivationPath);\n                    if (derivationPath !== TREZOR_DEFAULT_PATH) {\n                        const address = await getAddress(path);\n                        return [\n                            {\n                                derivationPath,\n                                address,\n                                balance: {\n                                    asset: asset.label,\n                                    value: await provider.getBalance(address)\n                                }\n                            }\n                        ];\n                    }\n                    return getAddresses({\n                        publicKey: compress(publicKey),\n                        chainCode: chainCode || '',\n                        path: derivationPath\n                    }, asset, provider);\n                };\n                const getAccountFromAccountSelect = async () => {\n                    accounts = await accountSelect({\n                        basePaths: DEFAULT_BASE_PATHS,\n                        assets,\n                        chains,\n                        scanAccounts\n                    });\n                    if (Array.isArray(accounts) &&\n                        accounts.length &&\n                        accounts[0].hasOwnProperty('address')) {\n                        eventEmitter.emit('accountsChanged', [accounts[0].address]);\n                    }\n                    return accounts;\n                };\n                async function getAddress(path) {\n                    const errorMsg = `Unable to derive address from path ${path}`;\n                    try {\n                        const result = await TrezorConnect.ethereumGetAddress({\n                            path,\n                            showOnTrezor: true\n                        });\n                        if (!result.success) {\n                            throw new Error(errorMsg);\n                        }\n                        return result.payload.address;\n                    }\n                    catch (error) {\n                        throw new Error(errorMsg);\n                    }\n                }\n                async function getPublicKey(dPath) {\n                    if (!dPath) {\n                        throw new Error('a derivation path is needed to get the public key');\n                    }\n                    try {\n                        const result = await TrezorConnect.getPublicKey({\n                            path: dPath,\n                            coin: 'ETH'\n                        });\n                        if (!result.success) {\n                            throw new Error(result.payload.error);\n                        }\n                        account = {\n                            publicKey: result.payload.publicKey,\n                            chainCode: result.payload.chainCode,\n                            path: result.payload.serializedPath\n                        };\n                        return account;\n                    }\n                    catch (error) {\n                        throw new Error(`There was an error accessing your Trezor accounts - Error: ${error}`);\n                    }\n                }\n                function createTrezorTransactionObject(transactionData) {\n                    if (!transactionData ||\n                        (!transactionData.hasOwnProperty('gasLimit') &&\n                            !transactionData.hasOwnProperty('gas'))) {\n                        throw new Error('There was no Transaction Object or both the gasLimit and gas property are missing');\n                    }\n                    const gasLimit = transactionData.gasLimit || transactionData.gas;\n                    if (transactionData.maxFeePerGas ||\n                        transactionData.maxPriorityFeePerGas) {\n                        return {\n                            to: transactionData.to,\n                            value: transactionData.value,\n                            gasLimit: gasLimit,\n                            maxFeePerGas: transactionData.maxFeePerGas,\n                            maxPriorityFeePerGas: transactionData.maxPriorityFeePerGas,\n                            nonce: transactionData.nonce,\n                            chainId: parseInt(currentChain.id),\n                            data: transactionData.hasOwnProperty('data')\n                                ? transactionData.data\n                                : ''\n                        };\n                    }\n                    return {\n                        to: transactionData.to,\n                        value: transactionData.value,\n                        gasPrice: transactionData.gasPrice,\n                        gasLimit: gasLimit,\n                        nonce: transactionData.nonce,\n                        chainId: parseInt(currentChain.id),\n                        data: transactionData.hasOwnProperty('data')\n                            ? transactionData.data\n                            : ''\n                    };\n                }\n                function trezorSignTransaction(path, transactionData) {\n                    try {\n                        return TrezorConnect.ethereumSignTransaction({\n                            path: path,\n                            transaction: transactionData\n                        });\n                    }\n                    catch (error) {\n                        throw new Error(`There was an error signing transaction - Error: ${error}`);\n                    }\n                }\n                async function signTransaction(transactionObject) {\n                    if (!Array.isArray(accounts) || !accounts.length)\n                        throw new Error('No account selected. Must call eth_requestAccounts first.');\n                    let signingAccount;\n                    if (transactionObject.hasOwnProperty('from')) {\n                        signingAccount = accounts.find(account => account.address === transactionObject.from);\n                    }\n                    signingAccount = signingAccount ? signingAccount : accounts[0];\n                    const { derivationPath } = signingAccount;\n                    // Set the `from` field to the currently selected account\n                    const transactionData = createTrezorTransactionObject(transactionObject);\n                    // @ts-ignore -- Due to weird commonjs exports\n                    const CommonConstructor = Common.default || Common;\n                    const common = new CommonConstructor({\n                        chain: customNetwork || Number.parseInt(currentChain.id) || 1,\n                        // Berlin is the minimum hardfork that will allow for EIP1559\n                        hardfork: Hardfork.Berlin,\n                        // List of supported EIPS\n                        eips: [1559]\n                    });\n                    const trezorResult = await trezorSignTransaction(derivationPath, transactionData);\n                    if (!trezorResult.success) {\n                        const message = trezorResult.payload.error === 'Unknown message'\n                            ? 'This type of transactions is not supported on this device'\n                            : trezorResult.payload.error;\n                        throw new Error(message);\n                    }\n                    const { r, s } = trezorResult.payload;\n                    let v = trezorResult.payload.v;\n                    // EIP155 support. check/recalc signature v value.\n                    const rv = parseInt(v, 16);\n                    let cv = parseInt(currentChain.id) * 2 + 35;\n                    if (rv !== cv && (rv & cv) !== rv) {\n                        cv += 1; // add signature v bit.\n                    }\n                    v = cv.toString(16);\n                    const signedTx = Transaction.fromTxData({\n                        ...transactionData,\n                        v: `0x${v}`,\n                        r: r,\n                        s: s\n                    }, { common });\n                    return signedTx ? `0x${signedTx.serialize().toString('hex')}` : '';\n                }\n                async function signMessage(address, message) {\n                    if (!Array.isArray(accounts) || !accounts.length)\n                        throw new Error('No account selected. Must call eth_requestAccounts first.');\n                    const accountToSign = accounts.find(account => account.address === address) || accounts[0];\n                    return new Promise((resolve, reject) => {\n                        TrezorConnect.ethereumSignMessage({\n                            path: accountToSign.derivationPath,\n                            message: ethUtil.stripHexPrefix(message.data),\n                            hex: true\n                        }).then((response) => {\n                            if (response.success) {\n                                if (response.payload.address !==\n                                    ethUtil.toChecksumAddress(address)) {\n                                    reject(new Error('signature doesnt match the right address'));\n                                }\n                                const signature = `0x${response.payload.signature}`;\n                                resolve(signature);\n                            }\n                            else {\n                                reject(new Error((response.payload && response.payload.error) ||\n                                    'There was an error signing a message'));\n                            }\n                        });\n                    });\n                }\n                const request = async ({ method, params }) => {\n                    const response = await fetch(currentChain.rpcUrl, {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            id: '42',\n                            method,\n                            params\n                        })\n                    }).then(res => res.json());\n                    if (response.result) {\n                        return response.result;\n                    }\n                    else {\n                        throw response.error;\n                    }\n                };\n                const trezorProvider = { request };\n                const provider = createEIP1193Provider(trezorProvider, {\n                    eth_requestAccounts: async () => {\n                        const accounts = await getAccountFromAccountSelect();\n                        if (!Array.isArray(accounts))\n                            throw new Error('No account selected. Must call eth_requestAccounts first.');\n                        if (accounts.length === 0) {\n                            throw new ProviderRpcError({\n                                code: 4001,\n                                message: 'User rejected the request.'\n                            });\n                        }\n                        if (!accounts[0].hasOwnProperty('address'))\n                            throw new Error('No address property associated with the selected account');\n                        return [accounts[0].address];\n                    },\n                    eth_selectAccounts: async () => {\n                        const accounts = await getAccountFromAccountSelect();\n                        return accounts.map(({ address }) => address);\n                    },\n                    eth_accounts: async () => {\n                        return Array.isArray(accounts) &&\n                            accounts.length &&\n                            accounts[0].hasOwnProperty('address')\n                            ? [accounts[0].address]\n                            : [];\n                    },\n                    eth_chainId: async () => {\n                        return currentChain.hasOwnProperty('id') ? currentChain.id : '';\n                    },\n                    eth_signTransaction: async ({ params: [transactionObject] }) => {\n                        return signTransaction(transactionObject);\n                    },\n                    eth_sendTransaction: async ({ baseRequest, params }) => {\n                        const signedTx = await provider.request({\n                            method: 'eth_signTransaction',\n                            params\n                        });\n                        const transactionHash = await baseRequest({\n                            method: 'eth_sendRawTransaction',\n                            params: [signedTx]\n                        });\n                        return transactionHash;\n                    },\n                    eth_sign: async ({ params: [address, message] }) => {\n                        let messageData = { data: message };\n                        return signMessage(address, messageData);\n                    },\n                    wallet_switchEthereumChain: async ({ params: [{ chainId }] }) => {\n                        currentChain =\n                            chains.find(({ id }) => id === chainId) || currentChain;\n                        if (!currentChain)\n                            throw new Error('chain must be set before switching');\n                        eventEmitter.emit('chainChanged', currentChain.id);\n                        return null;\n                    },\n                    eth_signTypedData: null,\n                    wallet_addEthereumChain: null\n                });\n                provider.on = eventEmitter.on.bind(eventEmitter);\n                return {\n                    provider\n                };\n            }\n        };\n    };\n}\nexport default trezor;\n"],
  "mappings": "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",
  "names": []
}
