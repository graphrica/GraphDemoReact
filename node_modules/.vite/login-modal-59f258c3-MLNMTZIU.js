import {
  SofiaProLight,
  SofiaProRegular,
  SofiaProSemiBold
} from "./chunk-QLIZTXI5.js";
import {
  __asyncGenerator,
  __asyncValues,
  __await,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values
} from "./chunk-BRDLAWJG.js";
import "./chunk-AAFDKQNN.js";
import "./chunk-YSJ6UD5Q.js";
import "./chunk-WBSSQYQH.js";
import "./chunk-GZNO4Y3K.js";
import "./chunk-77TI47IA.js";
import "./chunk-DJCW4LVW.js";
import "./chunk-VFG3R5NB.js";
import "./chunk-QLJNFGTT.js";
import "./chunk-HEQAI6WE.js";
import "./chunk-QMSD3UEV.js";
import "./chunk-27CSTQIU.js";
import "./chunk-VIQ6GMKA.js";
import "./chunk-PX4IM7JA.js";
import {
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/@web3-onboard/magic/dist/login-modal-59f258c3.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/index.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Observable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subscriber.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isFunction.js
init_define_process_env();
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subscription.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
init_define_process_env();
function createErrorClass(createImpl) {
  var _super = function(instance2) {
    Error.call(instance2);
    instance2.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
init_define_process_env();
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/config.js
init_define_process_env();
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
init_define_process_env();
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/noop.js
init_define_process_env();
function noop() {
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
init_define_process_env();
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/errorContext.js
init_define_process_env();
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/symbol/observable.js
init_define_process_env();
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/pipe.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/identity.js
init_define_process_env();
function identity(x) {
  return x;
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/lift.js
init_define_process_env();
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
init_define_process_env();
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
init_define_process_env();
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
init_define_process_env();
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  var schedule = animationFrameProvider.schedule;
  return new Observable(function(subscriber) {
    var subscription = new Subscription();
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var run2 = function(timestamp2) {
      var now2 = provider.now();
      subscriber.next({
        timestamp: timestampProvider ? now2 : timestamp2,
        elapsed: now2 - start
      });
      if (!subscriber.closed) {
        subscription.add(schedule(run2));
      }
    };
    subscription.add(schedule(run2));
    return subscription;
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subject.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
init_define_process_env();
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
init_define_process_env();
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
init_define_process_env();
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now2 = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now2; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
init_define_process_env();
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
init_define_process_env();
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
init_define_process_env();
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    intervalProvider.clearInterval(id);
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a = this, id = _a.id, scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/Immediate.js
init_define_process_env();
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      immediateProvider.clearImmediate(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Scheduler.js
init_define_process_env();
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now2) {
    if (now2 === void 0) {
      now2 = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now2;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now2) {
    if (now2 === void 0) {
      now2 = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now2) || this;
    _this.actions = [];
    _this._active = false;
    _this._scheduled = void 0;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/async.js
init_define_process_env();
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
init_define_process_env();
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    return scheduler.flush(this);
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
init_define_process_env();
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
init_define_process_env();
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
init_define_process_env();
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
init_define_process_env();
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return true;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Notification.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/empty.js
init_define_process_env();
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/of.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/args.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
init_define_process_env();
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/from.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
init_define_process_env();
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isPromise.js
init_define_process_env();
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
init_define_process_env();
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
init_define_process_env();
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
init_define_process_env();
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
init_define_process_env();
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
init_define_process_env();
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise2) {
  return new Observable(function(subscriber) {
    promise2.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
          _a.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
init_define_process_env();
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
init_define_process_env();
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
init_define_process_env();
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
init_define_process_env();
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
init_define_process_env();
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
init_define_process_env();
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
init_define_process_env();
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/throwError.js
init_define_process_env();
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init2 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init2, 0, subscriber);
  } : init2);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a;
    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isObservable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
init_define_process_env();
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
init_define_process_env();
function firstValueFrom(source, config2) {
  var hasConfig = typeof config2 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config2.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
init_define_process_env();
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
init_define_process_env();
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
init_define_process_env();
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/isDate.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/map.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
init_define_process_env();
var isArray2 = Array.isArray;
var objectProto = Object.prototype;

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/createObject.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/concat.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/connectable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/defer.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/generate.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/iif.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/interval.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/timer.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/merge.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/never.js
init_define_process_env();
var NEVER = new Observable(noop);

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNext.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
init_define_process_env();
var isArray3 = Array.isArray;

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/pairs.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/partition.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/util/not.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/filter.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/race.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/range.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/using.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/zip.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/types.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/audit.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/buffer.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/catchError.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/toArray.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/reduce.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/concat.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/connect.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/count.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/debounce.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/delay.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/take.js
init_define_process_env();
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/distinct.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/endWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/every.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/expand.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/finalize.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/find.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/first.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/last.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/materialize.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/max.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/merge.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/min.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/multicast.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/pluck.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/publish.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/repeat.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/retry.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/sample.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/scan.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/share.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/single.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/skip.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/startWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/tap.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/throttle.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
init_define_process_env();
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/window.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
init_define_process_env();

// node_modules/@web3-onboard/magic/node_modules/rxjs/dist/esm5/internal/operators/zip.js
init_define_process_env();

// node_modules/@web3-onboard/magic/dist/login-modal-59f258c3.js
function noop2() {
}
var identity2 = (x) => x;
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop2;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay2, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay2}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1);
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
  let config2 = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay: delay2 = 0, duration = 300, easing = identity2, tick = noop2, css } = config2 || null_transition;
    const program = {
      start: now() + delay2,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay2, easing, css);
      }
      if (b)
        tick(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config2.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config2)) {
        wait().then(() => {
          config2 = config2();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop2,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop2;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function fade(node, { delay: delay2 = 0, duration = 400, easing = identity2 } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay: delay2,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
var closeIcon = `
  <svg width="100%" height="100%" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M11.6569 1.75736L7.41429 6L11.6569 10.2426L10.2427 11.6569L6.00008 7.41421L1.75744 11.6569L0.343227 10.2426L4.58587 6L0.343227 1.75736L1.75744 0.343146L6.00008 4.58579L10.2427 0.343146L11.6569 1.75736Z" fill="currentColor"/>
  </svg>
`;
function add_css$2(target) {
  append_styles(target, "svelte-h7wb50", ".close-button-container.svelte-h7wb50{cursor:pointer;display:flex;justify-content:center;align-items:center}.close-button.svelte-h7wb50{width:2rem;height:2rem;box-sizing:border-box;display:flex;justify-content:center;align-items:center;padding:0.4rem;border-radius:40px;color:var(--onboard-gray-400, var(--gray-400));background:var(--onboard-white, var(--white))}.close-icon.svelte-h7wb50{width:14px;display:flex;align-items:center}");
}
function create_fragment$2(ctx) {
  let div2;
  let div1;
  let div0;
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "close-icon svelte-h7wb50");
      attr(div1, "class", "close-button svelte-h7wb50");
      attr(div2, "class", "close-button-container svelte-h7wb50");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, div0);
      div0.innerHTML = closeIcon;
    },
    p: noop2,
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(div2);
    }
  };
}
var CloseButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$2, safe_not_equal, {}, add_css$2);
  }
};
function add_css$1(target) {
  append_styles(target, "svelte-febrzt", ".loading-container.svelte-febrzt.svelte-febrzt{display:flex;flex-direction:column;align-items:center;justify-content:center;font-family:inherit;font-size:inherit;color:inherit;margin:auto}span.svelte-febrzt.svelte-febrzt{font-family:inherit;font-size:0.889em;margin-top:1rem}.loading.svelte-febrzt.svelte-febrzt{display:inline-block;position:relative}.loading.svelte-febrzt div.svelte-febrzt{box-sizing:border-box;font-size:inherit;display:block;position:absolute;border:3px solid;border-radius:50%;animation:svelte-febrzt-bn-loading 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;border-color:currentColor transparent transparent transparent}.loading.svelte-febrzt .loading-first.svelte-febrzt{animation-delay:-0.45s}.loading.svelte-febrzt .loading-second.svelte-febrzt{animation-delay:-0.3s}.loading.svelte-febrzt .loading-third.svelte-febrzt{animation-delay:-0.15s}@keyframes svelte-febrzt-bn-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}");
}
function create_if_block$1(ctx) {
  let span;
  let t;
  return {
    c() {
      span = element("span");
      t = text(ctx[0]);
      attr(span, "class", "svelte-febrzt");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment$1(ctx) {
  let div4;
  let div3;
  let div0;
  let div0_style_value;
  let t0;
  let div1;
  let div1_style_value;
  let t1;
  let div2;
  let div2_style_value;
  let div3_style_value;
  let t2;
  let if_block = ctx[0] && create_if_block$1(ctx);
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      if (if_block)
        if_block.c();
      attr(div0, "class", "loading-first svelte-febrzt");
      attr(div0, "style", div0_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div1, "class", "loading-second svelte-febrzt");
      attr(div1, "style", div1_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div2, "class", "loading-third svelte-febrzt");
      attr(div2, "style", div2_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div3, "class", "loading svelte-febrzt");
      attr(div3, "style", div3_style_value = `height: ${ctx[1]}; width: ${ctx[1]};`);
      attr(div4, "class", "loading-container svelte-febrzt");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div4, t2);
      if (if_block)
        if_block.m(div4, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 2 && div0_style_value !== (div0_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div0, "style", div0_style_value);
      }
      if (dirty & 2 && div1_style_value !== (div1_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div1, "style", div1_style_value);
      }
      if (dirty & 2 && div2_style_value !== (div2_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div2, "style", div2_style_value);
      }
      if (dirty & 2 && div3_style_value !== (div3_style_value = `height: ${ctx2[1]}; width: ${ctx2[1]};`)) {
        attr(div3, "style", div3_style_value);
      }
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          if_block.m(div4, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let { description = "" } = $$props;
  let { size = "2rem" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("description" in $$props2)
      $$invalidate(0, description = $$props2.description);
    if ("size" in $$props2)
      $$invalidate(1, size = $$props2.size);
  };
  return [description, size];
}
var Spinner = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, { description: 0, size: 1 }, add_css$1);
  }
};
function add_css(target) {
  append_styles(target, "svelte-1vvihut", "input[type='text'].svelte-1vvihut{display:block;margin:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;scrollbar-width:none;width:32rem;padding:0.5rem 2.6rem 0.5rem 1rem;border-radius:8px;font-size:var(--login-modal-font-size-5, var(--font-size-5));line-height:var(\n      --login-modal-font-line-height-1,\n      var(--font-line-height-1)\n    );color:var(--login-modal-gray-500, var(--gray-500));transition:all 200ms ease-in-out;border:2px solid var(--login-modal-gray-200, var(--gray-200));box-sizing:border-box;height:3rem;-ms-overflow-style:none}.close-action-container.svelte-1vvihut{position:absolute;right:0;padding:0.5rem 0.75rem}button.svelte-1vvihut{align-items:center;padding:0.75rem 1.5rem;color:var(--login-modal-white, var(--white));border-radius:1.5rem;font-family:var(\n      --login-modal-font-family-normal,\n      var(--font-family-normal)\n    );font-style:normal;font-weight:bold;font-size:var(--login-modal-font-size-5, var(--font-size-5));line-height:var(--login-modal-font-line-height-1, var(--line-height-1));border:none}.login-btn.svelte-1vvihut:disabled{background-color:var(--login-modal-primary-300, var(--primary-300));cursor:default}.login-btn.svelte-1vvihut{background-color:var(--login-modal-primary-500, var(--primary-500));cursor:pointer;display:inline-flex;justify-content:space-around;width:6rem}.close.svelte-1vvihut{cursor:pointer}.form-element.svelte-1vvihut{margin:1rem 0}.container.svelte-1vvihut{font-family:var(\n      --login-modal-font-family-normal,\n      var(--font-family-normal)\n    );color:var(--login-modal-black, var(--black));position:absolute;top:0;right:0;z-index:20;display:flex;align-items:center;justify-content:center;width:100vw;height:100vh;backdrop-filter:blur(4px);background-color:rgba(0, 0, 0, 0.2)}.login-modal.svelte-1vvihut{min-width:36rem;max-height:51.75rem;display:table;background:var(--login-modal-white, var(--white));box-shadow:var(--login-modal-shadow-1, var(--shadow-1));border-radius:1.5rem;text-align:center;position:relative;background-color:var(--login-modal-white, var(--white));color:var(--login-modal-black, var(--black))}.modal-controls.svelte-1vvihut{display:flex;justify-content:space-between;align-items:center;padding:1rem;padding-top:0;flex-direction:column}.branding.svelte-1vvihut{margin:var(--login-modal-margin-5, var(--margin-5));display:flex;align-items:center;justify-content:center}.error-msg.svelte-1vvihut{color:var(--login-modal-danger-500, var(--danger-500));font-family:var(--login-modal-font-family-light, var(--font-family-light))}");
}
function create_if_block_1(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Please enter a valid email address";
      attr(span, "class", "error-msg svelte-1vvihut");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_else_block(ctx) {
  let t;
  return {
    c() {
      t = text("Login");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    i: noop2,
    o: noop2,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block(ctx) {
  let spinner;
  let current;
  spinner = new Spinner({ props: { size: "1.5rem" } });
  return {
    c() {
      create_component(spinner.$$.fragment);
    },
    m(target, anchor) {
      mount_component(spinner, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(spinner.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(spinner.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(spinner, detaching);
    }
  };
}
function create_fragment(ctx) {
  let div3;
  let div2;
  let div0;
  let closebutton;
  let t0;
  let h2;
  let t3;
  let section;
  let input;
  let t4;
  let t5;
  let button;
  let current_block_type_index;
  let if_block1;
  let button_disabled_value;
  let t6;
  let div1;
  let div2_transition;
  let current;
  let mounted;
  let dispose;
  closebutton = new CloseButton({});
  let if_block0 = ctx[1] && create_if_block_1();
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      create_component(closebutton.$$.fragment);
      t0 = space();
      h2 = element("h2");
      h2.textContent = `${ctx[3]} Login`;
      t3 = space();
      section = element("section");
      input = element("input");
      t4 = space();
      if (if_block0)
        if_block0.c();
      t5 = space();
      button = element("button");
      if_block1.c();
      t6 = space();
      div1 = element("div");
      attr(div0, "class", "close-action-container close svelte-1vvihut");
      attr(input, "type", "text");
      attr(input, "class", "login-credentials form-element svelte-1vvihut");
      attr(input, "placeholder", "Email address");
      attr(button, "class", "login-btn form-element svelte-1vvihut");
      attr(button, "id", "connect-accounts");
      button.disabled = button_disabled_value = !ctx[0];
      attr(section, "class", "modal-controls svelte-1vvihut");
      attr(div1, "class", "branding svelte-1vvihut");
      attr(div2, "class", "login-modal svelte-1vvihut");
      attr(div3, "class", "container svelte-1vvihut");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div0);
      mount_component(closebutton, div0, null);
      append(div2, t0);
      append(div2, h2);
      append(div2, t3);
      append(div2, section);
      append(section, input);
      set_input_value(input, ctx[0]);
      append(section, t4);
      if (if_block0)
        if_block0.m(section, null);
      append(section, t5);
      append(section, button);
      if_blocks[current_block_type_index].m(button, null);
      append(div2, t6);
      append(div2, div1);
      div1.innerHTML = ctx[4];
      current = true;
      if (!mounted) {
        dispose = [
          listen(div0, "click", ctx[7]),
          listen(input, "input", ctx[10]),
          listen(input, "input", ctx[11]),
          listen(button, "click", ctx[12])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && input.value !== ctx2[0]) {
        set_input_value(input, ctx2[0]);
      }
      if (ctx2[1]) {
        if (if_block0)
          ;
        else {
          if_block0 = create_if_block_1();
          if_block0.c();
          if_block0.m(section, t5);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        }
        transition_in(if_block1, 1);
        if_block1.m(button, null);
      }
      if (!current || dirty & 1 && button_disabled_value !== (button_disabled_value = !ctx2[0])) {
        button.disabled = button_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(if_block1);
      add_render_callback(() => {
        if (!div2_transition)
          div2_transition = create_bidirectional_transition(div2, fade, {}, true);
        div2_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(if_block1);
      if (!div2_transition)
        div2_transition = create_bidirectional_transition(div2, fade, {}, false);
      div2_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(closebutton);
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      if (detaching && div2_transition)
        div2_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
var emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
function instance($$self, $$props, $$invalidate) {
  let credentials = "";
  let { loginOptions } = $$props;
  let { loggedIn$: loggedIn$2 } = $$props;
  const { walletName, brandingHTMLString, emailLoginFunction } = loginOptions;
  let errorInEmail = false;
  let loading = false;
  const setErrorInEmail = () => {
    if (!errorInEmail)
      return;
    $$invalidate(1, errorInEmail = false);
  };
  const validateEmail = (value) => {
    return emailRegex.test(value);
  };
  const login = async () => {
    $$invalidate(2, loading = true);
    if (!validateEmail(credentials)) {
      $$invalidate(1, errorInEmail = true);
      $$invalidate(2, loading = false);
      return;
    }
    const loginResponse = await emailLoginFunction(credentials);
    $$invalidate(2, loading = false);
    loggedIn$2.next(loginResponse);
  };
  const dismiss = () => {
    loggedIn$2.next(false);
    $$invalidate(2, loading = false);
  };
  function input_input_handler() {
    credentials = this.value;
    $$invalidate(0, credentials);
  }
  const input_handler = () => setErrorInEmail();
  const click_handler = () => login();
  $$self.$$set = ($$props2) => {
    if ("loginOptions" in $$props2)
      $$invalidate(8, loginOptions = $$props2.loginOptions);
    if ("loggedIn$" in $$props2)
      $$invalidate(9, loggedIn$2 = $$props2.loggedIn$);
  };
  return [
    credentials,
    errorInEmail,
    loading,
    walletName,
    brandingHTMLString,
    setErrorInEmail,
    login,
    dismiss,
    loginOptions,
    loggedIn$2,
    input_input_handler,
    input_handler,
    click_handler
  ];
}
var LoginModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { loginOptions: 8, loggedIn$: 9 }, add_css);
  }
};
var loggedIn$ = new Subject();
var loginModal = async (options) => {
  if (options) {
    const error = !options;
    if (error) {
      throw error;
    }
  }
  const app = mountLoginModal(options, loggedIn$);
  loggedIn$.pipe(take(1)).subscribe(() => {
    app.$destroy();
    const modalEl = document.body.querySelector("onboard-magic-login-modal");
    modalEl && document.body.removeChild(modalEl);
  });
  return firstValueFrom(loggedIn$);
};
var mountLoginModal = (loginOptions, loggedIn$2) => {
  class loginModalEl extends HTMLElement {
    constructor() {
      super();
    }
  }
  if (!customElements.get("onboard-magic-login-modal")) {
    customElements.define("onboard-magic-login-modal", loginModalEl);
  }
  const styleEl = document.createElement("style");
  styleEl.innerHTML = `
    ${SofiaProRegular}
    ${SofiaProSemiBold}
    ${SofiaProLight}
  `;
  document.body.appendChild(styleEl);
  const loginModalDomElement = document.createElement("onboard-magic-login-modal");
  const target = loginModalDomElement.attachShadow({ mode: "open" });
  loginModalDomElement.style.all = "initial";
  target.innerHTML = `
    <style>
      :host {  
        /* COLORS */
        --white: white;
        --black: black;
        --primary-300: #b1b8f2;
        --primary-500: #6370e5;
        --gray-200: #c2c4c9;
        --gray-500: #33394b;
        --danger-500: #ff4f4f;

        /* FONTS */
        --font-family-normal: Sofia Pro;
        --font-family-light: Sofia Pro Light;
        --font-size-5: 1rem;
        --font-line-height-1: 24px;

        /* SPACING */
        --margin-4: 1rem;
        --margin-5: 0.5rem;
      }

    </style>
  `;
  document.body.appendChild(loginModalDomElement);
  const app = new LoginModal({
    target,
    props: {
      loginOptions,
      loggedIn$: loggedIn$2
    }
  });
  return app;
};
export {
  loginModal as default
};
//# sourceMappingURL=login-modal-59f258c3-MLNMTZIU.js.map
