import {
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// dep:@web3-onboard_gnosis
init_define_process_env();

// node_modules/@web3-onboard/gnosis/dist/index.js
init_define_process_env();
function gnosis(options) {
  const { whitelistedDomains = [/gnosis-safe.io/] } = options || {};
  return () => {
    const loadedInIframe = window.self !== window.top;
    return loadedInIframe ? {
      label: "Gnosis Safe",
      getIcon: async () => (await import("./icon-RIMINA4U.js")).default,
      getInterface: async () => {
        const { default: SafeAppsSDK } = await import("./src-EYAWUDCX.js");
        const { SafeAppProvider } = await import("./dist-VV3Q63PF.js");
        const { createEIP1193Provider } = await import("./dist-3LUD4YRJ.js");
        const SafeAppProviderConstructor = SafeAppsSDK.default || SafeAppsSDK;
        const opts = {
          whitelistedDomains
        };
        const appsSdk = new SafeAppProviderConstructor(opts);
        const safe = await Promise.race([
          appsSdk.safe.getInfo(),
          new Promise((resolve) => setTimeout(resolve, 200))
        ]);
        if (!safe) {
          throw new Error(`App must be loaded in a Safe App context, head to <a href="https://gnosis-safe.io/app">the Gnosis Safe App<a/> and open this website as an app.`);
        }
        const provider = new SafeAppProvider(safe, appsSdk);
        const patchedProvider = createEIP1193Provider(provider, {
          eth_requestAccounts: () => Promise.resolve([safe.safeAddress])
        });
        return {
          provider: patchedProvider,
          instance: appsSdk
        };
      }
    } : [];
  };
}
var dist_default = gnosis;

// dep:@web3-onboard_gnosis
var web3_onboard_gnosis_default = dist_default;
export {
  web3_onboard_gnosis_default as default
};
//# sourceMappingURL=@web3-onboard_gnosis.js.map
