{
  "version": 3,
  "sources": ["dep:@web3-onboard_fortmatic", "../@web3-onboard/fortmatic/dist/index.js"],
  "sourcesContent": ["import d from \"./node_modules/@web3-onboard/fortmatic/dist/index.js\";export default d;", "function fortmatic(options) {\n    const { apiKey } = options;\n    return () => {\n        return {\n            label: 'Fortmatic',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ EventEmitter, BigNumber, chains }) => {\n                const { default: Fortmatic } = await import('fortmatic');\n                const { createEIP1193Provider, ProviderRpcErrorCode, ProviderRpcError } = await import('@web3-onboard/common');\n                const emitter = new EventEmitter();\n                let instance = new Fortmatic(apiKey, {\n                    chainId: parseInt(chains[0].id),\n                    rpcUrl: chains[0].rpcUrl\n                });\n                let fortmaticProvider = instance.getProvider();\n                let provider;\n                function patchProvider() {\n                    const patchedProvider = createEIP1193Provider(fortmaticProvider, {\n                        eth_requestAccounts: async () => {\n                            try {\n                                const accounts = await instance.user.login();\n                                return accounts;\n                            }\n                            catch (error) {\n                                const { code } = error;\n                                if (code === -32603) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.ACCOUNT_ACCESS_REJECTED,\n                                        message: 'Account access rejected'\n                                    });\n                                }\n                                return [];\n                            }\n                        },\n                        eth_selectAccounts: null,\n                        eth_getBalance: async () => {\n                            const [balance] = await instance.user.getBalances();\n                            return balance\n                                ? BigNumber.from(balance.crypto_amount)\n                                    .mul('1000000000000000000')\n                                    .toString()\n                                : '0';\n                        },\n                        wallet_switchEthereumChain: async ({ params }) => {\n                            const chain = chains.find(({ id }) => id === params[0].chainId);\n                            if (!chain)\n                                throw new Error('chain must be set before switching');\n                            // re-instantiate instance with new network\n                            instance = new Fortmatic(apiKey, {\n                                chainId: parseInt(chain.id),\n                                rpcUrl: chain.rpcUrl\n                            });\n                            // get the provider again\n                            fortmaticProvider = instance.getProvider();\n                            emitter.emit('chainChanged', chain.id);\n                            // patch the provider\n                            patchProvider();\n                            return null;\n                        }\n                    });\n                    if (!provider) {\n                        patchedProvider.on = emitter.on.bind(emitter);\n                        patchedProvider.disconnect = () => () => instance.user.logout();\n                        return patchedProvider;\n                    }\n                    else {\n                        provider.request = patchedProvider.request.bind(patchedProvider);\n                        // @ts-ignore - bind old methods for backwards compat\n                        provider.send = patchedProvider.send.bind(patchedProvider);\n                        // @ts-ignore - bind old methods for backwards compat\n                        provider.sendAsync = patchedProvider.sendAsync.bind(patchedProvider);\n                        return provider;\n                    }\n                }\n                provider = patchProvider();\n                return {\n                    provider,\n                    instance\n                };\n            }\n        };\n    };\n}\nexport default fortmatic;\n"],
  "mappings": ";;;;;AAAA;;;ACAA;AAAA,mBAAmB,SAAS;AACxB,QAAM,EAAE,WAAW;AACnB,SAAO,MAAM;AACT,WAAO;AAAA,MACH,OAAO;AAAA,MACP,SAAS,YAAa,OAAM,OAAO,uBAAc;AAAA,MACjD,cAAc,OAAO,EAAE,cAAc,WAAW,aAAa;AACzD,cAAM,EAAE,SAAS,cAAc,MAAM,OAAO;AAC5C,cAAM,EAAE,uBAAuB,sBAAsB,qBAAqB,MAAM,OAAO;AACvF,cAAM,UAAU,IAAI,aAAa;AACjC,YAAI,WAAW,IAAI,UAAU,QAAQ;AAAA,UACjC,SAAS,SAAS,OAAO,GAAG,EAAE;AAAA,UAC9B,QAAQ,OAAO,GAAG;AAAA,QACtB,CAAC;AACD,YAAI,oBAAoB,SAAS,YAAY;AAC7C,YAAI;AACJ,iCAAyB;AACrB,gBAAM,kBAAkB,sBAAsB,mBAAmB;AAAA,YAC7D,qBAAqB,YAAY;AAC7B,kBAAI;AACA,sBAAM,WAAW,MAAM,SAAS,KAAK,MAAM;AAC3C,uBAAO;AAAA,cACX,SACO,OAAP;AACI,sBAAM,EAAE,SAAS;AACjB,oBAAI,SAAS,QAAQ;AACjB,wBAAM,IAAI,iBAAiB;AAAA,oBACvB,MAAM,qBAAqB;AAAA,oBAC3B,SAAS;AAAA,kBACb,CAAC;AAAA,gBACL;AACA,uBAAO,CAAC;AAAA,cACZ;AAAA,YACJ;AAAA,YACA,oBAAoB;AAAA,YACpB,gBAAgB,YAAY;AACxB,oBAAM,CAAC,WAAW,MAAM,SAAS,KAAK,YAAY;AAClD,qBAAO,UACD,UAAU,KAAK,QAAQ,aAAa,EACjC,IAAI,qBAAqB,EACzB,SAAS,IACZ;AAAA,YACV;AAAA,YACA,4BAA4B,OAAO,EAAE,aAAa;AAC9C,oBAAM,QAAQ,OAAO,KAAK,CAAC,EAAE,SAAS,OAAO,OAAO,GAAG,OAAO;AAC9D,kBAAI,CAAC;AACD,sBAAM,IAAI,MAAM,oCAAoC;AAExD,yBAAW,IAAI,UAAU,QAAQ;AAAA,gBAC7B,SAAS,SAAS,MAAM,EAAE;AAAA,gBAC1B,QAAQ,MAAM;AAAA,cAClB,CAAC;AAED,kCAAoB,SAAS,YAAY;AACzC,sBAAQ,KAAK,gBAAgB,MAAM,EAAE;AAErC,4BAAc;AACd,qBAAO;AAAA,YACX;AAAA,UACJ,CAAC;AACD,cAAI,CAAC,UAAU;AACX,4BAAgB,KAAK,QAAQ,GAAG,KAAK,OAAO;AAC5C,4BAAgB,aAAa,MAAM,MAAM,SAAS,KAAK,OAAO;AAC9D,mBAAO;AAAA,UACX,OACK;AACD,qBAAS,UAAU,gBAAgB,QAAQ,KAAK,eAAe;AAE/D,qBAAS,OAAO,gBAAgB,KAAK,KAAK,eAAe;AAEzD,qBAAS,YAAY,gBAAgB,UAAU,KAAK,eAAe;AACnE,mBAAO;AAAA,UACX;AAAA,QACJ;AACA,mBAAW,cAAc;AACzB,eAAO;AAAA,UACH;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAO,eAAQ;;;ADnFsD,IAAO,iCAAQ;",
  "names": []
}
