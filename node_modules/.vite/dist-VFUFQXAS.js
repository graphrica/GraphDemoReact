"use strict";
import {
  require_end_of_stream,
  require_pump,
  require_readable_browser,
  require_through2
} from "./chunk-GTULRFOP.js";
import {
  require_assertThisInitialized,
  require_asyncToGenerator,
  require_defineProperty,
  require_getPrototypeOf,
  require_setPrototypeOf
} from "./chunk-6UXVEZIO.js";
import {
  require_regenerator
} from "./chunk-5P5FTJNK.js";
import {
  bignumber_exports,
  init_bignumber
} from "./chunk-56PJVFJW.js";
import {
  require_bip66
} from "./chunk-Y3PG3TJL.js";
import {
  require_dist as require_dist3,
  require_lodash
} from "./chunk-WCNB7ICX.js";
import "./chunk-HHAXRAX5.js";
import "./chunk-PB6RPZVB.js";
import {
  require_bs58,
  require_bs58check
} from "./chunk-LM3A5ETM.js";
import "./chunk-FYCSNTBQ.js";
import {
  require_interopRequireDefault
} from "./chunk-ESPIRCFT.js";
import {
  require_browser as require_browser4,
  require_browser2 as require_browser5,
  require_crypto_browserify,
  require_varint
} from "./chunk-PE7DEUGY.js";
import {
  init_os,
  os_exports,
  require_url
} from "./chunk-SSQCKGNF.js";
import "./chunk-7RFKSBT2.js";
import "./chunk-3L2QOU6N.js";
import {
  require_dist as require_dist2
} from "./chunk-6DQSUYFA.js";
import {
  require_dist
} from "./chunk-P7FZ3CER.js";
import "./chunk-GY2U6V7C.js";
import {
  require_browser
} from "./chunk-6XVHBKXF.js";
import "./chunk-QJBX42KY.js";
import {
  crypto_exports,
  init_crypto,
  init_stream,
  require_browser as require_browser3,
  require_elliptic,
  require_string_decoder,
  stream_exports
} from "./chunk-UTWHOSAQ.js";
import {
  require_browser as require_browser2,
  require_safe_buffer,
  require_util
} from "./chunk-BTG65MVN.js";
import {
  require_events
} from "./chunk-K2K3O27I.js";
import {
  require_buffer
} from "./chunk-557FO4FU.js";
import "./chunk-S5NSXQRL.js";
import {
  require_bech32
} from "./chunk-77TI47IA.js";
import "./chunk-QMSD3UEV.js";
import {
  require_inherits_browser
} from "./chunk-27CSTQIU.js";
import {
  require_bn
} from "./chunk-VIQ6GMKA.js";
import "./chunk-PX4IM7JA.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  define_process_env_default,
  init_define_process_env
} from "./chunk-KJE66DWM.js";

// node_modules/google-protobuf/google-protobuf.js
var require_google_protobuf = __commonJS({
  "node_modules/google-protobuf/google-protobuf.js"(exports, module) {
    init_define_process_env();
    var $jscomp = $jscomp || {};
    $jscomp.scope = {};
    $jscomp.findInternal = function(a2, b2, c2) {
      a2 instanceof String && (a2 = String(a2));
      for (var d2 = a2.length, e2 = 0; e2 < d2; e2++) {
        var f2 = a2[e2];
        if (b2.call(c2, f2, e2, a2))
          return { i: e2, v: f2 };
      }
      return { i: -1, v: void 0 };
    };
    $jscomp.ASSUME_ES5 = false;
    $jscomp.ASSUME_NO_NATIVE_MAP = false;
    $jscomp.ASSUME_NO_NATIVE_SET = false;
    $jscomp.SIMPLE_FROUND_POLYFILL = false;
    $jscomp.defineProperty = $jscomp.ASSUME_ES5 || typeof Object.defineProperties == "function" ? Object.defineProperty : function(a2, b2, c2) {
      a2 != Array.prototype && a2 != Object.prototype && (a2[b2] = c2.value);
    };
    $jscomp.getGlobal = function(a2) {
      return typeof window != "undefined" && window === a2 ? a2 : typeof global != "undefined" && global != null ? global : a2;
    };
    $jscomp.global = $jscomp.getGlobal(exports);
    $jscomp.polyfill = function(a2, b2, c2, d2) {
      if (b2) {
        c2 = $jscomp.global;
        a2 = a2.split(".");
        for (d2 = 0; d2 < a2.length - 1; d2++) {
          var e2 = a2[d2];
          e2 in c2 || (c2[e2] = {});
          c2 = c2[e2];
        }
        a2 = a2[a2.length - 1];
        d2 = c2[a2];
        b2 = b2(d2);
        b2 != d2 && b2 != null && $jscomp.defineProperty(c2, a2, { configurable: true, writable: true, value: b2 });
      }
    };
    $jscomp.polyfill("Array.prototype.findIndex", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        return $jscomp.findInternal(this, a3, c2).i;
      };
    }, "es6", "es3");
    $jscomp.checkStringArgs = function(a2, b2, c2) {
      if (a2 == null)
        throw new TypeError("The 'this' value for String.prototype." + c2 + " must not be null or undefined");
      if (b2 instanceof RegExp)
        throw new TypeError("First argument to String.prototype." + c2 + " must not be a regular expression");
      return a2 + "";
    };
    $jscomp.polyfill("String.prototype.endsWith", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        var b2 = $jscomp.checkStringArgs(this, a3, "endsWith");
        a3 += "";
        c2 === void 0 && (c2 = b2.length);
        c2 = Math.max(0, Math.min(c2 | 0, b2.length));
        for (var e2 = a3.length; 0 < e2 && 0 < c2; )
          if (b2[--c2] != a3[--e2])
            return false;
        return 0 >= e2;
      };
    }, "es6", "es3");
    $jscomp.polyfill("Array.prototype.find", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        return $jscomp.findInternal(this, a3, c2).v;
      };
    }, "es6", "es3");
    $jscomp.polyfill("String.prototype.startsWith", function(a2) {
      return a2 ? a2 : function(a3, c2) {
        var b2 = $jscomp.checkStringArgs(this, a3, "startsWith");
        a3 += "";
        var e2 = b2.length, f2 = a3.length;
        c2 = Math.max(0, Math.min(c2 | 0, b2.length));
        for (var g = 0; g < f2 && c2 < e2; )
          if (b2[c2++] != a3[g++])
            return false;
        return g >= f2;
      };
    }, "es6", "es3");
    $jscomp.polyfill("String.prototype.repeat", function(a2) {
      return a2 ? a2 : function(a3) {
        var b2 = $jscomp.checkStringArgs(this, null, "repeat");
        if (0 > a3 || 1342177279 < a3)
          throw new RangeError("Invalid count value");
        a3 |= 0;
        for (var d2 = ""; a3; )
          if (a3 & 1 && (d2 += b2), a3 >>>= 1)
            b2 += b2;
        return d2;
      };
    }, "es6", "es3");
    var COMPILED = true;
    var goog = goog || {};
    goog.global = exports || self;
    goog.isDef = function(a2) {
      return a2 !== void 0;
    };
    goog.isString = function(a2) {
      return typeof a2 == "string";
    };
    goog.isBoolean = function(a2) {
      return typeof a2 == "boolean";
    };
    goog.isNumber = function(a2) {
      return typeof a2 == "number";
    };
    goog.exportPath_ = function(a2, b2, c2) {
      a2 = a2.split(".");
      c2 = c2 || goog.global;
      a2[0] in c2 || typeof c2.execScript == "undefined" || c2.execScript("var " + a2[0]);
      for (var d2; a2.length && (d2 = a2.shift()); )
        !a2.length && goog.isDef(b2) ? c2[d2] = b2 : c2 = c2[d2] && c2[d2] !== Object.prototype[d2] ? c2[d2] : c2[d2] = {};
    };
    goog.define = function(a2, b2) {
      if (!COMPILED) {
        var c2 = goog.global.CLOSURE_UNCOMPILED_DEFINES, d2 = goog.global.CLOSURE_DEFINES;
        c2 && c2.nodeType === void 0 && Object.prototype.hasOwnProperty.call(c2, a2) ? b2 = c2[a2] : d2 && d2.nodeType === void 0 && Object.prototype.hasOwnProperty.call(d2, a2) && (b2 = d2[a2]);
      }
      return b2;
    };
    goog.FEATURESET_YEAR = 2012;
    goog.DEBUG = true;
    goog.LOCALE = "en";
    goog.TRUSTED_SITE = true;
    goog.STRICT_MODE_COMPATIBLE = false;
    goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
    goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = false;
    goog.provide = function(a2) {
      if (goog.isInModuleLoader_())
        throw Error("goog.provide cannot be used within a module.");
      if (!COMPILED && goog.isProvided_(a2))
        throw Error('Namespace "' + a2 + '" already declared.');
      goog.constructNamespace_(a2);
    };
    goog.constructNamespace_ = function(a2, b2) {
      if (!COMPILED) {
        delete goog.implicitNamespaces_[a2];
        for (var c2 = a2; (c2 = c2.substring(0, c2.lastIndexOf("."))) && !goog.getObjectByName(c2); )
          goog.implicitNamespaces_[c2] = true;
      }
      goog.exportPath_(a2, b2);
    };
    goog.getScriptNonce = function(a2) {
      if (a2 && a2 != goog.global)
        return goog.getScriptNonce_(a2.document);
      goog.cspNonce_ === null && (goog.cspNonce_ = goog.getScriptNonce_(goog.global.document));
      return goog.cspNonce_;
    };
    goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
    goog.cspNonce_ = null;
    goog.getScriptNonce_ = function(a2) {
      return (a2 = a2.querySelector && a2.querySelector("script[nonce]")) && (a2 = a2.nonce || a2.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(a2) ? a2 : "";
    };
    goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
    goog.module = function(a2) {
      if (!goog.isString(a2) || !a2 || a2.search(goog.VALID_MODULE_RE_) == -1)
        throw Error("Invalid module identifier");
      if (!goog.isInGoogModuleLoader_())
        throw Error("Module " + a2 + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
      if (goog.moduleLoaderState_.moduleName)
        throw Error("goog.module may only be called once per module.");
      goog.moduleLoaderState_.moduleName = a2;
      if (!COMPILED) {
        if (goog.isProvided_(a2))
          throw Error('Namespace "' + a2 + '" already declared.');
        delete goog.implicitNamespaces_[a2];
      }
    };
    goog.module.get = function(a2) {
      return goog.module.getInternal_(a2);
    };
    goog.module.getInternal_ = function(a2) {
      if (!COMPILED) {
        if (a2 in goog.loadedModules_)
          return goog.loadedModules_[a2].exports;
        if (!goog.implicitNamespaces_[a2])
          return a2 = goog.getObjectByName(a2), a2 != null ? a2 : null;
      }
      return null;
    };
    goog.ModuleType = { ES6: "es6", GOOG: "goog" };
    goog.moduleLoaderState_ = null;
    goog.isInModuleLoader_ = function() {
      return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
    };
    goog.isInGoogModuleLoader_ = function() {
      return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
    };
    goog.isInEs6ModuleLoader_ = function() {
      if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6)
        return true;
      var a2 = goog.global.$jscomp;
      return a2 ? typeof a2.getCurrentModulePath != "function" ? false : !!a2.getCurrentModulePath() : false;
    };
    goog.module.declareLegacyNamespace = function() {
      if (!COMPILED && !goog.isInGoogModuleLoader_())
        throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
      if (!COMPILED && !goog.moduleLoaderState_.moduleName)
        throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
      goog.moduleLoaderState_.declareLegacyNamespace = true;
    };
    goog.declareModuleId = function(a2) {
      if (!COMPILED) {
        if (!goog.isInEs6ModuleLoader_())
          throw Error("goog.declareModuleId may only be called from within an ES6 module");
        if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName)
          throw Error("goog.declareModuleId may only be called once per module.");
        if (a2 in goog.loadedModules_)
          throw Error('Module with namespace "' + a2 + '" already exists.');
      }
      if (goog.moduleLoaderState_)
        goog.moduleLoaderState_.moduleName = a2;
      else {
        var b2 = goog.global.$jscomp;
        if (!b2 || typeof b2.getCurrentModulePath != "function")
          throw Error('Module with namespace "' + a2 + '" has been loaded incorrectly.');
        b2 = b2.require(b2.getCurrentModulePath());
        goog.loadedModules_[a2] = { exports: b2, type: goog.ModuleType.ES6, moduleId: a2 };
      }
    };
    goog.setTestOnly = function(a2) {
      if (goog.DISALLOW_TEST_ONLY_CODE)
        throw a2 = a2 || "", Error("Importing test-only code into non-debug environment" + (a2 ? ": " + a2 : "."));
    };
    goog.forwardDeclare = function(a2) {
    };
    COMPILED || (goog.isProvided_ = function(a2) {
      return a2 in goog.loadedModules_ || !goog.implicitNamespaces_[a2] && goog.isDefAndNotNull(goog.getObjectByName(a2));
    }, goog.implicitNamespaces_ = { "goog.module": true });
    goog.getObjectByName = function(a2, b2) {
      a2 = a2.split(".");
      b2 = b2 || goog.global;
      for (var c2 = 0; c2 < a2.length; c2++)
        if (b2 = b2[a2[c2]], !goog.isDefAndNotNull(b2))
          return null;
      return b2;
    };
    goog.globalize = function(a2, b2) {
      b2 = b2 || goog.global;
      for (var c2 in a2)
        b2[c2] = a2[c2];
    };
    goog.addDependency = function(a2, b2, c2, d2) {
      !COMPILED && goog.DEPENDENCIES_ENABLED && goog.debugLoader_.addDependency(a2, b2, c2, d2);
    };
    goog.ENABLE_DEBUG_LOADER = true;
    goog.logToConsole_ = function(a2) {
      goog.global.console && goog.global.console.error(a2);
    };
    goog.require = function(a2) {
      if (!COMPILED) {
        goog.ENABLE_DEBUG_LOADER && goog.debugLoader_.requested(a2);
        if (goog.isProvided_(a2)) {
          if (goog.isInModuleLoader_())
            return goog.module.getInternal_(a2);
        } else if (goog.ENABLE_DEBUG_LOADER) {
          var b2 = goog.moduleLoaderState_;
          goog.moduleLoaderState_ = null;
          try {
            goog.debugLoader_.load_(a2);
          } finally {
            goog.moduleLoaderState_ = b2;
          }
        }
        return null;
      }
    };
    goog.requireType = function(a2) {
      return {};
    };
    goog.basePath = "";
    goog.nullFunction = function() {
    };
    goog.abstractMethod = function() {
      throw Error("unimplemented abstract method");
    };
    goog.addSingletonGetter = function(a2) {
      a2.instance_ = void 0;
      a2.getInstance = function() {
        if (a2.instance_)
          return a2.instance_;
        goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a2);
        return a2.instance_ = new a2();
      };
    };
    goog.instantiatedSingletons_ = [];
    goog.LOAD_MODULE_USING_EVAL = true;
    goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
    goog.loadedModules_ = {};
    goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
    goog.TRANSPILE = "detect";
    goog.ASSUME_ES_MODULES_TRANSPILED = false;
    goog.TRANSPILE_TO_LANGUAGE = "";
    goog.TRANSPILER = "transpile.js";
    goog.hasBadLetScoping = null;
    goog.useSafari10Workaround = function() {
      if (goog.hasBadLetScoping == null) {
        try {
          var a = !eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";');
        } catch (b2) {
          a = false;
        }
        goog.hasBadLetScoping = a;
      }
      return goog.hasBadLetScoping;
    };
    goog.workaroundSafari10EvalBug = function(a2) {
      return "(function(){" + a2 + "\n;})();\n";
    };
    goog.loadModule = function(a2) {
      var b2 = goog.moduleLoaderState_;
      try {
        goog.moduleLoaderState_ = { moduleName: "", declareLegacyNamespace: false, type: goog.ModuleType.GOOG };
        if (goog.isFunction(a2))
          var c2 = a2.call(void 0, {});
        else if (goog.isString(a2))
          goog.useSafari10Workaround() && (a2 = goog.workaroundSafari10EvalBug(a2)), c2 = goog.loadModuleFromSource_.call(void 0, a2);
        else
          throw Error("Invalid module definition");
        var d2 = goog.moduleLoaderState_.moduleName;
        if (goog.isString(d2) && d2)
          goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d2, c2) : goog.SEAL_MODULE_EXPORTS && Object.seal && typeof c2 == "object" && c2 != null && Object.seal(c2), goog.loadedModules_[d2] = { exports: c2, type: goog.ModuleType.GOOG, moduleId: goog.moduleLoaderState_.moduleName };
        else
          throw Error('Invalid module name "' + d2 + '"');
      } finally {
        goog.moduleLoaderState_ = b2;
      }
    };
    goog.loadModuleFromSource_ = function(a) {
      eval(a);
      return {};
    };
    goog.normalizePath_ = function(a2) {
      a2 = a2.split("/");
      for (var b2 = 0; b2 < a2.length; )
        a2[b2] == "." ? a2.splice(b2, 1) : b2 && a2[b2] == ".." && a2[b2 - 1] && a2[b2 - 1] != ".." ? a2.splice(--b2, 2) : b2++;
      return a2.join("/");
    };
    goog.loadFileSync_ = function(a2) {
      if (goog.global.CLOSURE_LOAD_FILE_SYNC)
        return goog.global.CLOSURE_LOAD_FILE_SYNC(a2);
      try {
        var b2 = new goog.global.XMLHttpRequest();
        b2.open("get", a2, false);
        b2.send();
        return b2.status == 0 || b2.status == 200 ? b2.responseText : null;
      } catch (c2) {
        return null;
      }
    };
    goog.transpile_ = function(a2, b2, c2) {
      var d2 = goog.global.$jscomp;
      d2 || (goog.global.$jscomp = d2 = {});
      var e2 = d2.transpile;
      if (!e2) {
        var f2 = goog.basePath + goog.TRANSPILER, g = goog.loadFileSync_(f2);
        if (g) {
          (function() {
            (0, eval)(g + "\n//# sourceURL=" + f2);
          }).call(goog.global);
          if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile)
            throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
          goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
          d2 = goog.global.$jscomp;
          e2 = d2.transpile;
        }
      }
      e2 || (e2 = d2.transpile = function(a3, b3) {
        goog.logToConsole_(b3 + " requires transpilation but no transpiler was found.");
        return a3;
      });
      return e2(a2, b2, c2);
    };
    goog.typeOf = function(a2) {
      var b2 = typeof a2;
      if (b2 == "object")
        if (a2) {
          if (a2 instanceof Array)
            return "array";
          if (a2 instanceof Object)
            return b2;
          var c2 = Object.prototype.toString.call(a2);
          if (c2 == "[object Window]")
            return "object";
          if (c2 == "[object Array]" || typeof a2.length == "number" && typeof a2.splice != "undefined" && typeof a2.propertyIsEnumerable != "undefined" && !a2.propertyIsEnumerable("splice"))
            return "array";
          if (c2 == "[object Function]" || typeof a2.call != "undefined" && typeof a2.propertyIsEnumerable != "undefined" && !a2.propertyIsEnumerable("call"))
            return "function";
        } else
          return "null";
      else if (b2 == "function" && typeof a2.call == "undefined")
        return "object";
      return b2;
    };
    goog.isNull = function(a2) {
      return a2 === null;
    };
    goog.isDefAndNotNull = function(a2) {
      return a2 != null;
    };
    goog.isArray = function(a2) {
      return goog.typeOf(a2) == "array";
    };
    goog.isArrayLike = function(a2) {
      var b2 = goog.typeOf(a2);
      return b2 == "array" || b2 == "object" && typeof a2.length == "number";
    };
    goog.isDateLike = function(a2) {
      return goog.isObject(a2) && typeof a2.getFullYear == "function";
    };
    goog.isFunction = function(a2) {
      return goog.typeOf(a2) == "function";
    };
    goog.isObject = function(a2) {
      var b2 = typeof a2;
      return b2 == "object" && a2 != null || b2 == "function";
    };
    goog.getUid = function(a2) {
      return a2[goog.UID_PROPERTY_] || (a2[goog.UID_PROPERTY_] = ++goog.uidCounter_);
    };
    goog.hasUid = function(a2) {
      return !!a2[goog.UID_PROPERTY_];
    };
    goog.removeUid = function(a2) {
      a2 !== null && "removeAttribute" in a2 && a2.removeAttribute(goog.UID_PROPERTY_);
      try {
        delete a2[goog.UID_PROPERTY_];
      } catch (b2) {
      }
    };
    goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0);
    goog.uidCounter_ = 0;
    goog.getHashCode = goog.getUid;
    goog.removeHashCode = goog.removeUid;
    goog.cloneObject = function(a2) {
      var b2 = goog.typeOf(a2);
      if (b2 == "object" || b2 == "array") {
        if (typeof a2.clone === "function")
          return a2.clone();
        b2 = b2 == "array" ? [] : {};
        for (var c2 in a2)
          b2[c2] = goog.cloneObject(a2[c2]);
        return b2;
      }
      return a2;
    };
    goog.bindNative_ = function(a2, b2, c2) {
      return a2.call.apply(a2.bind, arguments);
    };
    goog.bindJs_ = function(a2, b2, c2) {
      if (!a2)
        throw Error();
      if (2 < arguments.length) {
        var d2 = Array.prototype.slice.call(arguments, 2);
        return function() {
          var c3 = Array.prototype.slice.call(arguments);
          Array.prototype.unshift.apply(c3, d2);
          return a2.apply(b2, c3);
        };
      }
      return function() {
        return a2.apply(b2, arguments);
      };
    };
    goog.bind = function(a2, b2, c2) {
      Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
      return goog.bind.apply(null, arguments);
    };
    goog.partial = function(a2, b2) {
      var c2 = Array.prototype.slice.call(arguments, 1);
      return function() {
        var b3 = c2.slice();
        b3.push.apply(b3, arguments);
        return a2.apply(this, b3);
      };
    };
    goog.mixin = function(a2, b2) {
      for (var c2 in b2)
        a2[c2] = b2[c2];
    };
    goog.now = goog.TRUSTED_SITE && Date.now || function() {
      return +new Date();
    };
    goog.globalEval = function(a2) {
      if (goog.global.execScript)
        goog.global.execScript(a2, "JavaScript");
      else if (goog.global.eval) {
        if (goog.evalWorksForGlobals_ == null) {
          try {
            goog.global.eval("var _evalTest_ = 1;");
          } catch (d2) {
          }
          if (typeof goog.global._evalTest_ != "undefined") {
            try {
              delete goog.global._evalTest_;
            } catch (d2) {
            }
            goog.evalWorksForGlobals_ = true;
          } else
            goog.evalWorksForGlobals_ = false;
        }
        if (goog.evalWorksForGlobals_)
          goog.global.eval(a2);
        else {
          var b2 = goog.global.document, c2 = b2.createElement("SCRIPT");
          c2.type = "text/javascript";
          c2.defer = false;
          c2.appendChild(b2.createTextNode(a2));
          b2.head.appendChild(c2);
          b2.head.removeChild(c2);
        }
      } else
        throw Error("goog.globalEval not available");
    };
    goog.evalWorksForGlobals_ = null;
    goog.getCssName = function(a2, b2) {
      if (String(a2).charAt(0) == ".")
        throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + a2);
      var c2 = function(a3) {
        return goog.cssNameMapping_[a3] || a3;
      }, d2 = function(a3) {
        a3 = a3.split("-");
        for (var b3 = [], d3 = 0; d3 < a3.length; d3++)
          b3.push(c2(a3[d3]));
        return b3.join("-");
      };
      d2 = goog.cssNameMapping_ ? goog.cssNameMappingStyle_ == "BY_WHOLE" ? c2 : d2 : function(a3) {
        return a3;
      };
      a2 = b2 ? a2 + "-" + d2(b2) : d2(a2);
      return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(a2) : a2;
    };
    goog.setCssNameMapping = function(a2, b2) {
      goog.cssNameMapping_ = a2;
      goog.cssNameMappingStyle_ = b2;
    };
    !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
    goog.getMsg = function(a2, b2, c2) {
      c2 && c2.html && (a2 = a2.replace(/</g, "&lt;"));
      b2 && (a2 = a2.replace(/\{\$([^}]+)}/g, function(a3, c3) {
        return b2 != null && c3 in b2 ? b2[c3] : a3;
      }));
      return a2;
    };
    goog.getMsgWithFallback = function(a2, b2) {
      return a2;
    };
    goog.exportSymbol = function(a2, b2, c2) {
      goog.exportPath_(a2, b2, c2);
    };
    goog.exportProperty = function(a2, b2, c2) {
      a2[b2] = c2;
    };
    goog.inherits = function(a2, b2) {
      function c2() {
      }
      c2.prototype = b2.prototype;
      a2.superClass_ = b2.prototype;
      a2.prototype = new c2();
      a2.prototype.constructor = a2;
      a2.base = function(a3, c3, f2) {
        for (var d2 = Array(arguments.length - 2), e2 = 2; e2 < arguments.length; e2++)
          d2[e2 - 2] = arguments[e2];
        return b2.prototype[c3].apply(a3, d2);
      };
    };
    goog.base = function(a2, b2, c2) {
      var d2 = arguments.callee.caller;
      if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d2)
        throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");
      if (typeof d2.superClass_ !== "undefined") {
        for (var e2 = Array(arguments.length - 1), f2 = 1; f2 < arguments.length; f2++)
          e2[f2 - 1] = arguments[f2];
        return d2.superClass_.constructor.apply(a2, e2);
      }
      if (typeof b2 != "string" && typeof b2 != "symbol")
        throw Error("method names provided to goog.base must be a string or a symbol");
      e2 = Array(arguments.length - 2);
      for (f2 = 2; f2 < arguments.length; f2++)
        e2[f2 - 2] = arguments[f2];
      f2 = false;
      for (var g = a2.constructor.prototype; g; g = Object.getPrototypeOf(g))
        if (g[b2] === d2)
          f2 = true;
        else if (f2)
          return g[b2].apply(a2, e2);
      if (a2[b2] === d2)
        return a2.constructor.prototype[b2].apply(a2, e2);
      throw Error("goog.base called from a method of one name to a method of a different name");
    };
    goog.scope = function(a2) {
      if (goog.isInModuleLoader_())
        throw Error("goog.scope is not supported within a module.");
      a2.call(goog.global);
    };
    COMPILED || (goog.global.COMPILED = COMPILED);
    goog.defineClass = function(a2, b2) {
      var c2 = b2.constructor, d2 = b2.statics;
      c2 && c2 != Object.prototype.constructor || (c2 = function() {
        throw Error("cannot instantiate an interface (no constructor defined).");
      });
      c2 = goog.defineClass.createSealingConstructor_(c2, a2);
      a2 && goog.inherits(c2, a2);
      delete b2.constructor;
      delete b2.statics;
      goog.defineClass.applyProperties_(c2.prototype, b2);
      d2 != null && (d2 instanceof Function ? d2(c2) : goog.defineClass.applyProperties_(c2, d2));
      return c2;
    };
    goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
    goog.defineClass.createSealingConstructor_ = function(a2, b2) {
      if (!goog.defineClass.SEAL_CLASS_INSTANCES)
        return a2;
      var c2 = !goog.defineClass.isUnsealable_(b2), d2 = function() {
        var b3 = a2.apply(this, arguments) || this;
        b3[goog.UID_PROPERTY_] = b3[goog.UID_PROPERTY_];
        this.constructor === d2 && c2 && Object.seal instanceof Function && Object.seal(b3);
        return b3;
      };
      return d2;
    };
    goog.defineClass.isUnsealable_ = function(a2) {
      return a2 && a2.prototype && a2.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
    };
    goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    goog.defineClass.applyProperties_ = function(a2, b2) {
      for (var c2 in b2)
        Object.prototype.hasOwnProperty.call(b2, c2) && (a2[c2] = b2[c2]);
      for (var d2 = 0; d2 < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d2++)
        c2 = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d2], Object.prototype.hasOwnProperty.call(b2, c2) && (a2[c2] = b2[c2]);
    };
    goog.tagUnsealableClass = function(a2) {
      !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (a2.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true);
    };
    goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
    !COMPILED && goog.DEPENDENCIES_ENABLED && (goog.inHtmlDocument_ = function() {
      var a2 = goog.global.document;
      return a2 != null && "write" in a2;
    }, goog.isDocumentLoading_ = function() {
      var a2 = goog.global.document;
      return a2.attachEvent ? a2.readyState != "complete" : a2.readyState == "loading";
    }, goog.findBasePath_ = function() {
      if (goog.isDef(goog.global.CLOSURE_BASE_PATH) && goog.isString(goog.global.CLOSURE_BASE_PATH))
        goog.basePath = goog.global.CLOSURE_BASE_PATH;
      else if (goog.inHtmlDocument_()) {
        var a2 = goog.global.document, b2 = a2.currentScript;
        a2 = b2 ? [b2] : a2.getElementsByTagName("SCRIPT");
        for (b2 = a2.length - 1; 0 <= b2; --b2) {
          var c2 = a2[b2].src, d2 = c2.lastIndexOf("?");
          d2 = d2 == -1 ? c2.length : d2;
          if (c2.substr(d2 - 7, 7) == "base.js") {
            goog.basePath = c2.substr(0, d2 - 7);
            break;
          }
        }
      }
    }, goog.findBasePath_(), goog.Transpiler = function() {
      this.requiresTranspilation_ = null;
      this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;
    }, goog.Transpiler.prototype.createRequiresTranspilation_ = function() {
      function a(a2, b2) {
        e ? d[a2] = true : b2() ? (c = a2, d[a2] = false) : e = d[a2] = true;
      }
      function b(a) {
        try {
          return !!eval(a);
        } catch (h) {
          return false;
        }
      }
      var c = "es3", d = { es3: false }, e = false, f = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : "";
      a("es5", function() {
        return b("[1,].length==1");
      });
      a("es6", function() {
        return f.match(/Edge\/(\d+)(\.\d)*/i) ? false : b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()');
      });
      a("es7", function() {
        return b("2 ** 2 == 4");
      });
      a("es8", function() {
        return b("async () => 1, true");
      });
      a("es9", function() {
        return b("({...rest} = {}), true");
      });
      a("es_next", function() {
        return false;
      });
      return { target: c, map: d };
    }, goog.Transpiler.prototype.needsTranspile = function(a2, b2) {
      if (goog.TRANSPILE == "always")
        return true;
      if (goog.TRANSPILE == "never")
        return false;
      if (!this.requiresTranspilation_) {
        var c2 = this.createRequiresTranspilation_();
        this.requiresTranspilation_ = c2.map;
        this.transpilationTarget_ = this.transpilationTarget_ || c2.target;
      }
      if (a2 in this.requiresTranspilation_)
        return this.requiresTranspilation_[a2] ? true : !goog.inHtmlDocument_() || b2 != "es6" || "noModule" in goog.global.document.createElement("script") ? false : true;
      throw Error("Unknown language mode: " + a2);
    }, goog.Transpiler.prototype.transpile = function(a2, b2) {
      return goog.transpile_(a2, b2, this.transpilationTarget_);
    }, goog.transpiler_ = new goog.Transpiler(), goog.protectScriptTag_ = function(a2) {
      return a2.replace(/<\/(SCRIPT)/ig, "\\x3c/$1");
    }, goog.DebugLoader_ = function() {
      this.dependencies_ = {};
      this.idToPath_ = {};
      this.written_ = {};
      this.loadingDeps_ = [];
      this.depsToLoad_ = [];
      this.paused_ = false;
      this.factory_ = new goog.DependencyFactory(goog.transpiler_);
      this.deferredCallbacks_ = {};
      this.deferredQueue_ = [];
    }, goog.DebugLoader_.prototype.bootstrap = function(a2, b2) {
      function c2() {
        d2 && (goog.global.setTimeout(d2, 0), d2 = null);
      }
      var d2 = b2;
      if (a2.length) {
        b2 = [];
        for (var e2 = 0; e2 < a2.length; e2++) {
          var f2 = this.getPathFromDeps_(a2[e2]);
          if (!f2)
            throw Error("Unregonized namespace: " + a2[e2]);
          b2.push(this.dependencies_[f2]);
        }
        f2 = goog.require;
        var g = 0;
        for (e2 = 0; e2 < a2.length; e2++)
          f2(a2[e2]), b2[e2].onLoad(function() {
            ++g == a2.length && c2();
          });
      } else
        c2();
    }, goog.DebugLoader_.prototype.loadClosureDeps = function() {
      this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + "deps.js"), "deps.js", [], [], {}, false));
      this.loadDeps_();
    }, goog.DebugLoader_.prototype.requested = function(a2, b2) {
      (a2 = this.getPathFromDeps_(a2)) && (b2 || this.areDepsLoaded_(this.dependencies_[a2].requires)) && (b2 = this.deferredCallbacks_[a2]) && (delete this.deferredCallbacks_[a2], b2());
    }, goog.DebugLoader_.prototype.setDependencyFactory = function(a2) {
      this.factory_ = a2;
    }, goog.DebugLoader_.prototype.load_ = function(a2) {
      if (this.getPathFromDeps_(a2)) {
        var b2 = this, c2 = [], d2 = function(a3) {
          var e2 = b2.getPathFromDeps_(a3);
          if (!e2)
            throw Error("Bad dependency path or symbol: " + a3);
          if (!b2.written_[e2]) {
            b2.written_[e2] = true;
            a3 = b2.dependencies_[e2];
            for (e2 = 0; e2 < a3.requires.length; e2++)
              goog.isProvided_(a3.requires[e2]) || d2(a3.requires[e2]);
            c2.push(a3);
          }
        };
        d2(a2);
        a2 = !!this.depsToLoad_.length;
        this.depsToLoad_ = this.depsToLoad_.concat(c2);
        this.paused_ || a2 || this.loadDeps_();
      } else
        throw a2 = "goog.require could not find: " + a2, goog.logToConsole_(a2), Error(a2);
    }, goog.DebugLoader_.prototype.loadDeps_ = function() {
      for (var a2 = this, b2 = this.paused_; this.depsToLoad_.length && !b2; )
        (function() {
          var c2 = false, d2 = a2.depsToLoad_.shift(), e2 = false;
          a2.loading_(d2);
          var f2 = { pause: function() {
            if (c2)
              throw Error("Cannot call pause after the call to load.");
            b2 = true;
          }, resume: function() {
            c2 ? a2.resume_() : b2 = false;
          }, loaded: function() {
            if (e2)
              throw Error("Double call to loaded.");
            e2 = true;
            a2.loaded_(d2);
          }, pending: function() {
            for (var b3 = [], c3 = 0; c3 < a2.loadingDeps_.length; c3++)
              b3.push(a2.loadingDeps_[c3]);
            return b3;
          }, setModuleState: function(a3) {
            goog.moduleLoaderState_ = { type: a3, moduleName: "", declareLegacyNamespace: false };
          }, registerEs6ModuleExports: function(a3, b3, c3) {
            c3 && (goog.loadedModules_[c3] = { exports: b3, type: goog.ModuleType.ES6, moduleId: c3 || "" });
          }, registerGoogModuleExports: function(a3, b3) {
            goog.loadedModules_[a3] = { exports: b3, type: goog.ModuleType.GOOG, moduleId: a3 };
          }, clearModuleState: function() {
            goog.moduleLoaderState_ = null;
          }, defer: function(b3) {
            if (c2)
              throw Error("Cannot register with defer after the call to load.");
            a2.defer_(d2, b3);
          }, areDepsLoaded: function() {
            return a2.areDepsLoaded_(d2.requires);
          } };
          try {
            d2.load(f2);
          } finally {
            c2 = true;
          }
        })();
      b2 && this.pause_();
    }, goog.DebugLoader_.prototype.pause_ = function() {
      this.paused_ = true;
    }, goog.DebugLoader_.prototype.resume_ = function() {
      this.paused_ && (this.paused_ = false, this.loadDeps_());
    }, goog.DebugLoader_.prototype.loading_ = function(a2) {
      this.loadingDeps_.push(a2);
    }, goog.DebugLoader_.prototype.loaded_ = function(a2) {
      for (var b2 = 0; b2 < this.loadingDeps_.length; b2++)
        if (this.loadingDeps_[b2] == a2) {
          this.loadingDeps_.splice(b2, 1);
          break;
        }
      for (b2 = 0; b2 < this.deferredQueue_.length; b2++)
        if (this.deferredQueue_[b2] == a2.path) {
          this.deferredQueue_.splice(b2, 1);
          break;
        }
      if (this.loadingDeps_.length == this.deferredQueue_.length && !this.depsToLoad_.length)
        for (; this.deferredQueue_.length; )
          this.requested(this.deferredQueue_.shift(), true);
      a2.loaded();
    }, goog.DebugLoader_.prototype.areDepsLoaded_ = function(a2) {
      for (var b2 = 0; b2 < a2.length; b2++) {
        var c2 = this.getPathFromDeps_(a2[b2]);
        if (!c2 || !(c2 in this.deferredCallbacks_ || goog.isProvided_(a2[b2])))
          return false;
      }
      return true;
    }, goog.DebugLoader_.prototype.getPathFromDeps_ = function(a2) {
      return a2 in this.idToPath_ ? this.idToPath_[a2] : a2 in this.dependencies_ ? a2 : null;
    }, goog.DebugLoader_.prototype.defer_ = function(a2, b2) {
      this.deferredCallbacks_[a2.path] = b2;
      this.deferredQueue_.push(a2.path);
    }, goog.LoadController = function() {
    }, goog.LoadController.prototype.pause = function() {
    }, goog.LoadController.prototype.resume = function() {
    }, goog.LoadController.prototype.loaded = function() {
    }, goog.LoadController.prototype.pending = function() {
    }, goog.LoadController.prototype.registerEs6ModuleExports = function(a2, b2, c2) {
    }, goog.LoadController.prototype.setModuleState = function(a2) {
    }, goog.LoadController.prototype.clearModuleState = function() {
    }, goog.LoadController.prototype.defer = function(a2) {
    }, goog.LoadController.prototype.areDepsLoaded = function() {
    }, goog.Dependency = function(a2, b2, c2, d2, e2) {
      this.path = a2;
      this.relativePath = b2;
      this.provides = c2;
      this.requires = d2;
      this.loadFlags = e2;
      this.loaded_ = false;
      this.loadCallbacks_ = [];
    }, goog.Dependency.prototype.getPathName = function() {
      var a2 = this.path, b2 = a2.indexOf("://");
      0 <= b2 && (a2 = a2.substring(b2 + 3), b2 = a2.indexOf("/"), 0 <= b2 && (a2 = a2.substring(b2 + 1)));
      return a2;
    }, goog.Dependency.prototype.onLoad = function(a2) {
      this.loaded_ ? a2() : this.loadCallbacks_.push(a2);
    }, goog.Dependency.prototype.loaded = function() {
      this.loaded_ = true;
      var a2 = this.loadCallbacks_;
      this.loadCallbacks_ = [];
      for (var b2 = 0; b2 < a2.length; b2++)
        a2[b2]();
    }, goog.Dependency.defer_ = false, goog.Dependency.callbackMap_ = {}, goog.Dependency.registerCallback_ = function(a2) {
      var b2 = Math.random().toString(32);
      goog.Dependency.callbackMap_[b2] = a2;
      return b2;
    }, goog.Dependency.unregisterCallback_ = function(a2) {
      delete goog.Dependency.callbackMap_[a2];
    }, goog.Dependency.callback_ = function(a2, b2) {
      if (a2 in goog.Dependency.callbackMap_) {
        for (var c2 = goog.Dependency.callbackMap_[a2], d2 = [], e2 = 1; e2 < arguments.length; e2++)
          d2.push(arguments[e2]);
        c2.apply(void 0, d2);
      } else
        throw Error("Callback key " + a2 + " does not exist (was base.js loaded more than once?).");
    }, goog.Dependency.prototype.load = function(a2) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
      else if (goog.inHtmlDocument_()) {
        var b2 = goog.global.document;
        if (b2.readyState == "complete" && !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
          if (/\bdeps.js$/.test(this.path)) {
            a2.loaded();
            return;
          }
          throw Error('Cannot write "' + this.path + '" after document load');
        }
        if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && goog.isDocumentLoading_()) {
          var c2 = goog.Dependency.registerCallback_(function(b3) {
            goog.DebugLoader_.IS_OLD_IE_ && b3.readyState != "complete" || (goog.Dependency.unregisterCallback_(c2), a2.loaded());
          }), d2 = !goog.DebugLoader_.IS_OLD_IE_ && goog.getScriptNonce() ? ' nonce="' + goog.getScriptNonce() + '"' : "";
          d2 = '<script src="' + this.path + '" ' + (goog.DebugLoader_.IS_OLD_IE_ ? "onreadystatechange" : "onload") + `="goog.Dependency.callback_('` + c2 + `', this)" type="text/javascript" ` + (goog.Dependency.defer_ ? "defer" : "") + d2 + "><\/script>";
          b2.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d2) : d2);
        } else {
          var e2 = b2.createElement("script");
          e2.defer = goog.Dependency.defer_;
          e2.async = false;
          e2.type = "text/javascript";
          (d2 = goog.getScriptNonce()) && e2.setAttribute("nonce", d2);
          goog.DebugLoader_.IS_OLD_IE_ ? (a2.pause(), e2.onreadystatechange = function() {
            if (e2.readyState == "loaded" || e2.readyState == "complete")
              a2.loaded(), a2.resume();
          }) : e2.onload = function() {
            e2.onload = null;
            a2.loaded();
          };
          e2.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) : this.path;
          b2.head.appendChild(e2);
        }
      } else
        goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), this.relativePath == "deps.js" ? (goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."), a2.loaded()) : a2.pause();
    }, goog.Es6ModuleDependency = function(a2, b2, c2, d2, e2) {
      goog.Dependency.call(this, a2, b2, c2, d2, e2);
    }, goog.inherits(goog.Es6ModuleDependency, goog.Dependency), goog.Es6ModuleDependency.prototype.load = function(a2) {
      function b2(a3, b3) {
        a3 = b3 ? '<script type="module" crossorigin>' + b3 + "<\/script>" : '<script type="module" crossorigin src="' + a3 + '"><\/script>';
        d2.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(a3) : a3);
      }
      function c2(a3, b3) {
        var c3 = d2.createElement("script");
        c3.defer = true;
        c3.async = false;
        c3.type = "module";
        c3.setAttribute("crossorigin", true);
        var e3 = goog.getScriptNonce();
        e3 && c3.setAttribute("nonce", e3);
        b3 ? c3.textContent = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScript(b3) : b3 : c3.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(a3) : a3;
        d2.head.appendChild(c3);
      }
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a2.loaded() : a2.pause();
      else if (goog.inHtmlDocument_()) {
        var d2 = goog.global.document, e2 = this;
        if (goog.isDocumentLoading_()) {
          var f2 = b2;
          goog.Dependency.defer_ = true;
        } else
          f2 = c2;
        var g = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(g);
          a2.setModuleState(goog.ModuleType.ES6);
        });
        f2(void 0, 'goog.Dependency.callback_("' + g + '")');
        f2(this.path, void 0);
        var h = goog.Dependency.registerCallback_(function(b3) {
          goog.Dependency.unregisterCallback_(h);
          a2.registerEs6ModuleExports(e2.path, b3, goog.moduleLoaderState_.moduleName);
        });
        f2(void 0, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' + h + '", m)');
        var k = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(k);
          a2.clearModuleState();
          a2.loaded();
        });
        f2(void 0, 'goog.Dependency.callback_("' + k + '")');
      } else
        goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), a2.pause();
    }, goog.TransformedDependency = function(a2, b2, c2, d2, e2) {
      goog.Dependency.call(this, a2, b2, c2, d2, e2);
      this.contents_ = null;
      this.lazyFetch_ = !goog.inHtmlDocument_() || !("noModule" in goog.global.document.createElement("script"));
    }, goog.inherits(goog.TransformedDependency, goog.Dependency), goog.TransformedDependency.prototype.load = function(a2) {
      function b2() {
        e2.contents_ = goog.loadFileSync_(e2.path);
        e2.contents_ && (e2.contents_ = e2.transform(e2.contents_), e2.contents_ && (e2.contents_ += "\n//# sourceURL=" + e2.path));
      }
      function c2() {
        e2.lazyFetch_ && b2();
        if (e2.contents_) {
          f2 && a2.setModuleState(goog.ModuleType.ES6);
          try {
            var c3 = e2.contents_;
            e2.contents_ = null;
            goog.globalEval(c3);
            if (f2)
              var d3 = goog.moduleLoaderState_.moduleName;
          } finally {
            f2 && a2.clearModuleState();
          }
          f2 && goog.global.$jscomp.require.ensure([e2.getPathName()], function() {
            a2.registerEs6ModuleExports(e2.path, goog.global.$jscomp.require(e2.getPathName()), d3);
          });
          a2.loaded();
        }
      }
      function d2() {
        var a3 = goog.global.document, b3 = goog.Dependency.registerCallback_(function() {
          goog.Dependency.unregisterCallback_(b3);
          c2();
        }), d3 = '<script type="text/javascript">' + goog.protectScriptTag_('goog.Dependency.callback_("' + b3 + '");') + "<\/script>";
        a3.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d3) : d3);
      }
      var e2 = this;
      if (goog.global.CLOSURE_IMPORT_SCRIPT)
        b2(), this.contents_ && goog.global.CLOSURE_IMPORT_SCRIPT("", this.contents_) ? (this.contents_ = null, a2.loaded()) : a2.pause();
      else {
        var f2 = this.loadFlags.module == goog.ModuleType.ES6;
        this.lazyFetch_ || b2();
        var g = 1 < a2.pending().length, h = g && goog.DebugLoader_.IS_OLD_IE_;
        g = goog.Dependency.defer_ && (g || goog.isDocumentLoading_());
        if (h || g)
          a2.defer(function() {
            c2();
          });
        else {
          var k = goog.global.document;
          h = goog.inHtmlDocument_() && "ActiveXObject" in goog.global;
          if (f2 && goog.inHtmlDocument_() && goog.isDocumentLoading_() && !h) {
            goog.Dependency.defer_ = true;
            a2.pause();
            var l = k.onreadystatechange;
            k.onreadystatechange = function() {
              k.readyState == "interactive" && (k.onreadystatechange = l, c2(), a2.resume());
              goog.isFunction(l) && l.apply(void 0, arguments);
            };
          } else
            !goog.DebugLoader_.IS_OLD_IE_ && goog.inHtmlDocument_() && goog.isDocumentLoading_() ? d2() : c2();
        }
      }
    }, goog.TransformedDependency.prototype.transform = function(a2) {
    }, goog.TranspiledDependency = function(a2, b2, c2, d2, e2, f2) {
      goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
      this.transpiler = f2;
    }, goog.inherits(goog.TranspiledDependency, goog.TransformedDependency), goog.TranspiledDependency.prototype.transform = function(a2) {
      return this.transpiler.transpile(a2, this.getPathName());
    }, goog.PreTranspiledEs6ModuleDependency = function(a2, b2, c2, d2, e2) {
      goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
    }, goog.inherits(goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency), goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(a2) {
      return a2;
    }, goog.GoogModuleDependency = function(a2, b2, c2, d2, e2, f2, g) {
      goog.TransformedDependency.call(this, a2, b2, c2, d2, e2);
      this.needsTranspile_ = f2;
      this.transpiler_ = g;
    }, goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency), goog.GoogModuleDependency.prototype.transform = function(a2) {
      this.needsTranspile_ && (a2 = this.transpiler_.transpile(a2, this.getPathName()));
      return goog.LOAD_MODULE_USING_EVAL && goog.isDef(goog.global.JSON) ? "goog.loadModule(" + goog.global.JSON.stringify(a2 + "\n//# sourceURL=" + this.path + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + a2 + "\n;return exports});\n//# sourceURL=" + this.path + "\n";
    }, goog.DebugLoader_.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), goog.DebugLoader_.prototype.addDependency = function(a2, b2, c2, d2) {
      b2 = b2 || [];
      a2 = a2.replace(/\\/g, "/");
      var e2 = goog.normalizePath_(goog.basePath + a2);
      d2 && typeof d2 !== "boolean" || (d2 = d2 ? { module: goog.ModuleType.GOOG } : {});
      c2 = this.factory_.createDependency(e2, a2, b2, c2, d2, goog.transpiler_.needsTranspile(d2.lang || "es3", d2.module));
      this.dependencies_[e2] = c2;
      for (c2 = 0; c2 < b2.length; c2++)
        this.idToPath_[b2[c2]] = e2;
      this.idToPath_[a2] = e2;
    }, goog.DependencyFactory = function(a2) {
      this.transpiler = a2;
    }, goog.DependencyFactory.prototype.createDependency = function(a2, b2, c2, d2, e2, f2) {
      return e2.module == goog.ModuleType.GOOG ? new goog.GoogModuleDependency(a2, b2, c2, d2, e2, f2, this.transpiler) : f2 ? new goog.TranspiledDependency(a2, b2, c2, d2, e2, this.transpiler) : e2.module == goog.ModuleType.ES6 ? goog.TRANSPILE == "never" && goog.ASSUME_ES_MODULES_TRANSPILED ? new goog.PreTranspiledEs6ModuleDependency(a2, b2, c2, d2, e2) : new goog.Es6ModuleDependency(a2, b2, c2, d2, e2) : new goog.Dependency(a2, b2, c2, d2, e2);
    }, goog.debugLoader_ = new goog.DebugLoader_(), goog.loadClosureDeps = function() {
      goog.debugLoader_.loadClosureDeps();
    }, goog.setDependencyFactory = function(a2) {
      goog.debugLoader_.setDependencyFactory(a2);
    }, goog.global.CLOSURE_NO_DEPS || goog.debugLoader_.loadClosureDeps(), goog.bootstrap = function(a2, b2) {
      goog.debugLoader_.bootstrap(a2, b2);
    });
    goog.TRUSTED_TYPES_POLICY_NAME = "";
    goog.identity_ = function(a2) {
      return a2;
    };
    goog.createTrustedTypesPolicy = function(a2) {
      var b2 = null;
      if (typeof TrustedTypes === "undefined" || !TrustedTypes.createPolicy)
        return b2;
      try {
        b2 = TrustedTypes.createPolicy(a2, { createHTML: goog.identity_, createScript: goog.identity_, createScriptURL: goog.identity_, createURL: goog.identity_ });
      } catch (c2) {
        goog.logToConsole_(c2.message);
      }
      return b2;
    };
    goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#base") : null;
    goog.object = {};
    goog.object.is = function(a2, b2) {
      return a2 === b2 ? a2 !== 0 || 1 / a2 === 1 / b2 : a2 !== a2 && b2 !== b2;
    };
    goog.object.forEach = function(a2, b2, c2) {
      for (var d2 in a2)
        b2.call(c2, a2[d2], d2, a2);
    };
    goog.object.filter = function(a2, b2, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        b2.call(c2, a2[e2], e2, a2) && (d2[e2] = a2[e2]);
      return d2;
    };
    goog.object.map = function(a2, b2, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        d2[e2] = b2.call(c2, a2[e2], e2, a2);
      return d2;
    };
    goog.object.some = function(a2, b2, c2) {
      for (var d2 in a2)
        if (b2.call(c2, a2[d2], d2, a2))
          return true;
      return false;
    };
    goog.object.every = function(a2, b2, c2) {
      for (var d2 in a2)
        if (!b2.call(c2, a2[d2], d2, a2))
          return false;
      return true;
    };
    goog.object.getCount = function(a2) {
      var b2 = 0, c2;
      for (c2 in a2)
        b2++;
      return b2;
    };
    goog.object.getAnyKey = function(a2) {
      for (var b2 in a2)
        return b2;
    };
    goog.object.getAnyValue = function(a2) {
      for (var b2 in a2)
        return a2[b2];
    };
    goog.object.contains = function(a2, b2) {
      return goog.object.containsValue(a2, b2);
    };
    goog.object.getValues = function(a2) {
      var b2 = [], c2 = 0, d2;
      for (d2 in a2)
        b2[c2++] = a2[d2];
      return b2;
    };
    goog.object.getKeys = function(a2) {
      var b2 = [], c2 = 0, d2;
      for (d2 in a2)
        b2[c2++] = d2;
      return b2;
    };
    goog.object.getValueByKeys = function(a2, b2) {
      var c2 = goog.isArrayLike(b2), d2 = c2 ? b2 : arguments;
      for (c2 = c2 ? 0 : 1; c2 < d2.length; c2++) {
        if (a2 == null)
          return;
        a2 = a2[d2[c2]];
      }
      return a2;
    };
    goog.object.containsKey = function(a2, b2) {
      return a2 !== null && b2 in a2;
    };
    goog.object.containsValue = function(a2, b2) {
      for (var c2 in a2)
        if (a2[c2] == b2)
          return true;
      return false;
    };
    goog.object.findKey = function(a2, b2, c2) {
      for (var d2 in a2)
        if (b2.call(c2, a2[d2], d2, a2))
          return d2;
    };
    goog.object.findValue = function(a2, b2, c2) {
      return (b2 = goog.object.findKey(a2, b2, c2)) && a2[b2];
    };
    goog.object.isEmpty = function(a2) {
      for (var b2 in a2)
        return false;
      return true;
    };
    goog.object.clear = function(a2) {
      for (var b2 in a2)
        delete a2[b2];
    };
    goog.object.remove = function(a2, b2) {
      var c2;
      (c2 = b2 in a2) && delete a2[b2];
      return c2;
    };
    goog.object.add = function(a2, b2, c2) {
      if (a2 !== null && b2 in a2)
        throw Error('The object already contains the key "' + b2 + '"');
      goog.object.set(a2, b2, c2);
    };
    goog.object.get = function(a2, b2, c2) {
      return a2 !== null && b2 in a2 ? a2[b2] : c2;
    };
    goog.object.set = function(a2, b2, c2) {
      a2[b2] = c2;
    };
    goog.object.setIfUndefined = function(a2, b2, c2) {
      return b2 in a2 ? a2[b2] : a2[b2] = c2;
    };
    goog.object.setWithReturnValueIfNotSet = function(a2, b2, c2) {
      if (b2 in a2)
        return a2[b2];
      c2 = c2();
      return a2[b2] = c2;
    };
    goog.object.equals = function(a2, b2) {
      for (var c2 in a2)
        if (!(c2 in b2) || a2[c2] !== b2[c2])
          return false;
      for (var d2 in b2)
        if (!(d2 in a2))
          return false;
      return true;
    };
    goog.object.clone = function(a2) {
      var b2 = {}, c2;
      for (c2 in a2)
        b2[c2] = a2[c2];
      return b2;
    };
    goog.object.unsafeClone = function(a2) {
      var b2 = goog.typeOf(a2);
      if (b2 == "object" || b2 == "array") {
        if (goog.isFunction(a2.clone))
          return a2.clone();
        b2 = b2 == "array" ? [] : {};
        for (var c2 in a2)
          b2[c2] = goog.object.unsafeClone(a2[c2]);
        return b2;
      }
      return a2;
    };
    goog.object.transpose = function(a2) {
      var b2 = {}, c2;
      for (c2 in a2)
        b2[a2[c2]] = c2;
      return b2;
    };
    goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    goog.object.extend = function(a2, b2) {
      for (var c2, d2, e2 = 1; e2 < arguments.length; e2++) {
        d2 = arguments[e2];
        for (c2 in d2)
          a2[c2] = d2[c2];
        for (var f2 = 0; f2 < goog.object.PROTOTYPE_FIELDS_.length; f2++)
          c2 = goog.object.PROTOTYPE_FIELDS_[f2], Object.prototype.hasOwnProperty.call(d2, c2) && (a2[c2] = d2[c2]);
      }
    };
    goog.object.create = function(a2) {
      var b2 = arguments.length;
      if (b2 == 1 && goog.isArray(arguments[0]))
        return goog.object.create.apply(null, arguments[0]);
      if (b2 % 2)
        throw Error("Uneven number of arguments");
      for (var c2 = {}, d2 = 0; d2 < b2; d2 += 2)
        c2[arguments[d2]] = arguments[d2 + 1];
      return c2;
    };
    goog.object.createSet = function(a2) {
      var b2 = arguments.length;
      if (b2 == 1 && goog.isArray(arguments[0]))
        return goog.object.createSet.apply(null, arguments[0]);
      for (var c2 = {}, d2 = 0; d2 < b2; d2++)
        c2[arguments[d2]] = true;
      return c2;
    };
    goog.object.createImmutableView = function(a2) {
      var b2 = a2;
      Object.isFrozen && !Object.isFrozen(a2) && (b2 = Object.create(a2), Object.freeze(b2));
      return b2;
    };
    goog.object.isImmutableView = function(a2) {
      return !!Object.isFrozen && Object.isFrozen(a2);
    };
    goog.object.getAllPropertyNames = function(a2, b2, c2) {
      if (!a2)
        return [];
      if (!Object.getOwnPropertyNames || !Object.getPrototypeOf)
        return goog.object.getKeys(a2);
      for (var d2 = {}; a2 && (a2 !== Object.prototype || b2) && (a2 !== Function.prototype || c2); ) {
        for (var e2 = Object.getOwnPropertyNames(a2), f2 = 0; f2 < e2.length; f2++)
          d2[e2[f2]] = true;
        a2 = Object.getPrototypeOf(a2);
      }
      return goog.object.getKeys(d2);
    };
    goog.object.getSuperClass = function(a2) {
      return (a2 = Object.getPrototypeOf(a2.prototype)) && a2.constructor;
    };
    goog.debug = {};
    goog.debug.Error = function(a2) {
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, goog.debug.Error);
      else {
        var b2 = Error().stack;
        b2 && (this.stack = b2);
      }
      a2 && (this.message = String(a2));
      this.reportErrorToServer = true;
    };
    goog.inherits(goog.debug.Error, Error);
    goog.debug.Error.prototype.name = "CustomError";
    goog.dom = {};
    goog.dom.NodeType = { ELEMENT: 1, ATTRIBUTE: 2, TEXT: 3, CDATA_SECTION: 4, ENTITY_REFERENCE: 5, ENTITY: 6, PROCESSING_INSTRUCTION: 7, COMMENT: 8, DOCUMENT: 9, DOCUMENT_TYPE: 10, DOCUMENT_FRAGMENT: 11, NOTATION: 12 };
    goog.asserts = {};
    goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
    goog.asserts.AssertionError = function(a2, b2) {
      goog.debug.Error.call(this, goog.asserts.subs_(a2, b2));
      this.messagePattern = a2;
    };
    goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
    goog.asserts.AssertionError.prototype.name = "AssertionError";
    goog.asserts.DEFAULT_ERROR_HANDLER = function(a2) {
      throw a2;
    };
    goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
    goog.asserts.subs_ = function(a2, b2) {
      a2 = a2.split("%s");
      for (var c2 = "", d2 = a2.length - 1, e2 = 0; e2 < d2; e2++)
        c2 += a2[e2] + (e2 < b2.length ? b2[e2] : "%s");
      return c2 + a2[d2];
    };
    goog.asserts.doAssertFailure_ = function(a2, b2, c2, d2) {
      var e2 = "Assertion failed";
      if (c2) {
        e2 += ": " + c2;
        var f2 = d2;
      } else
        a2 && (e2 += ": " + a2, f2 = b2);
      a2 = new goog.asserts.AssertionError("" + e2, f2 || []);
      goog.asserts.errorHandler_(a2);
    };
    goog.asserts.setErrorHandler = function(a2) {
      goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a2);
    };
    goog.asserts.assert = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !a2 && goog.asserts.doAssertFailure_("", null, b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertExists = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && a2 == null && goog.asserts.doAssertFailure_("Expected to exist: %s.", [a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.fail = function(a2, b2) {
      goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (a2 ? ": " + a2 : ""), Array.prototype.slice.call(arguments, 1)));
    };
    goog.asserts.assertNumber = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isNumber(a2) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertString = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isString(a2) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertFunction = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a2) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertObject = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isObject(a2) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertArray = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isArray(a2) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertBoolean = function(a2, b2, c2) {
      goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(a2) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertElement = function(a2, b2, c2) {
      !goog.asserts.ENABLE_ASSERTS || goog.isObject(a2) && a2.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(a2), a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertInstanceof = function(a2, b2, c2, d2) {
      !goog.asserts.ENABLE_ASSERTS || a2 instanceof b2 || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(b2), goog.asserts.getType_(a2)], c2, Array.prototype.slice.call(arguments, 3));
      return a2;
    };
    goog.asserts.assertFinite = function(a2, b2, c2) {
      !goog.asserts.ENABLE_ASSERTS || typeof a2 == "number" && isFinite(a2) || goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [a2], b2, Array.prototype.slice.call(arguments, 2));
      return a2;
    };
    goog.asserts.assertObjectPrototypeIsIntact = function() {
      for (var a2 in Object.prototype)
        goog.asserts.fail(a2 + " should not be enumerable in Object.prototype.");
    };
    goog.asserts.getType_ = function(a2) {
      return a2 instanceof Function ? a2.displayName || a2.name || "unknown type name" : a2 instanceof Object ? a2.constructor.displayName || a2.constructor.name || Object.prototype.toString.call(a2) : a2 === null ? "null" : typeof a2;
    };
    var jspb = { BinaryConstants: {}, ConstBinaryMessage: function() {
    }, BinaryMessage: function() {
    } };
    jspb.BinaryConstants.FieldType = { INVALID: -1, DOUBLE: 1, FLOAT: 2, INT64: 3, UINT64: 4, INT32: 5, FIXED64: 6, FIXED32: 7, BOOL: 8, STRING: 9, GROUP: 10, MESSAGE: 11, BYTES: 12, UINT32: 13, ENUM: 14, SFIXED32: 15, SFIXED64: 16, SINT32: 17, SINT64: 18, FHASH64: 30, VHASH64: 31 };
    jspb.BinaryConstants.WireType = { INVALID: -1, VARINT: 0, FIXED64: 1, DELIMITED: 2, START_GROUP: 3, END_GROUP: 4, FIXED32: 5 };
    jspb.BinaryConstants.FieldTypeToWireType = function(a2) {
      var b2 = jspb.BinaryConstants.FieldType, c2 = jspb.BinaryConstants.WireType;
      switch (a2) {
        case b2.INT32:
        case b2.INT64:
        case b2.UINT32:
        case b2.UINT64:
        case b2.SINT32:
        case b2.SINT64:
        case b2.BOOL:
        case b2.ENUM:
        case b2.VHASH64:
          return c2.VARINT;
        case b2.DOUBLE:
        case b2.FIXED64:
        case b2.SFIXED64:
        case b2.FHASH64:
          return c2.FIXED64;
        case b2.STRING:
        case b2.MESSAGE:
        case b2.BYTES:
          return c2.DELIMITED;
        case b2.FLOAT:
        case b2.FIXED32:
        case b2.SFIXED32:
          return c2.FIXED32;
        default:
          return c2.INVALID;
      }
    };
    jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1;
    jspb.BinaryConstants.FLOAT32_EPS = 1401298464324817e-60;
    jspb.BinaryConstants.FLOAT32_MIN = 11754943508222875e-54;
    jspb.BinaryConstants.FLOAT32_MAX = 34028234663852886e22;
    jspb.BinaryConstants.FLOAT64_EPS = 5e-324;
    jspb.BinaryConstants.FLOAT64_MIN = 22250738585072014e-324;
    jspb.BinaryConstants.FLOAT64_MAX = 17976931348623157e292;
    jspb.BinaryConstants.TWO_TO_20 = 1048576;
    jspb.BinaryConstants.TWO_TO_23 = 8388608;
    jspb.BinaryConstants.TWO_TO_31 = 2147483648;
    jspb.BinaryConstants.TWO_TO_32 = 4294967296;
    jspb.BinaryConstants.TWO_TO_52 = 4503599627370496;
    jspb.BinaryConstants.TWO_TO_63 = 9223372036854776e3;
    jspb.BinaryConstants.TWO_TO_64 = 18446744073709552e3;
    jspb.BinaryConstants.ZERO_HASH = "\0\0\0\0\0\0\0\0";
    goog.array = {};
    goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
    goog.array.ASSUME_NATIVE_FUNCTIONS = 2012 < goog.FEATURESET_YEAR;
    goog.array.peek = function(a2) {
      return a2[a2.length - 1];
    };
    goog.array.last = goog.array.peek;
    goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.indexOf.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      c2 = c2 == null ? 0 : 0 > c2 ? Math.max(0, a2.length + c2) : c2;
      if (goog.isString(a2))
        return goog.isString(b2) && b2.length == 1 ? a2.indexOf(b2, c2) : -1;
      for (; c2 < a2.length; c2++)
        if (c2 in a2 && a2[c2] === b2)
          return c2;
      return -1;
    };
    goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.lastIndexOf.call(a2, b2, c2 == null ? a2.length - 1 : c2);
    } : function(a2, b2, c2) {
      c2 = c2 == null ? a2.length - 1 : c2;
      0 > c2 && (c2 = Math.max(0, a2.length + c2));
      if (goog.isString(a2))
        return goog.isString(b2) && b2.length == 1 ? a2.lastIndexOf(b2, c2) : -1;
      for (; 0 <= c2; c2--)
        if (c2 in a2 && a2[c2] === b2)
          return c2;
      return -1;
    };
    goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      Array.prototype.forEach.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f2 = 0; f2 < d2; f2++)
        f2 in e2 && b2.call(c2, e2[f2], f2, a2);
    };
    goog.array.forEachRight = function(a2, b2, c2) {
      var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2;
      for (--d2; 0 <= d2; --d2)
        d2 in e2 && b2.call(c2, e2[d2], d2, a2);
    };
    goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.filter.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = [], f2 = 0, g = goog.isString(a2) ? a2.split("") : a2, h = 0; h < d2; h++)
        if (h in g) {
          var k = g[h];
          b2.call(c2, k, h, a2) && (e2[f2++] = k);
        }
      return e2;
    };
    goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.map.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = Array(d2), f2 = goog.isString(a2) ? a2.split("") : a2, g = 0; g < d2; g++)
        g in f2 && (e2[g] = b2.call(c2, f2[g], g, a2));
      return e2;
    };
    goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(a2, b2, c2, d2) {
      goog.asserts.assert(a2.length != null);
      d2 && (b2 = goog.bind(b2, d2));
      return Array.prototype.reduce.call(a2, b2, c2);
    } : function(a2, b2, c2, d2) {
      var e2 = c2;
      goog.array.forEach(a2, function(c3, g) {
        e2 = b2.call(d2, e2, c3, g, a2);
      });
      return e2;
    };
    goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(a2, b2, c2, d2) {
      goog.asserts.assert(a2.length != null);
      goog.asserts.assert(b2 != null);
      d2 && (b2 = goog.bind(b2, d2));
      return Array.prototype.reduceRight.call(a2, b2, c2);
    } : function(a2, b2, c2, d2) {
      var e2 = c2;
      goog.array.forEachRight(a2, function(c3, g) {
        e2 = b2.call(d2, e2, c3, g, a2);
      });
      return e2;
    };
    goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.some.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f2 = 0; f2 < d2; f2++)
        if (f2 in e2 && b2.call(c2, e2[f2], f2, a2))
          return true;
      return false;
    };
    goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.every.call(a2, b2, c2);
    } : function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f2 = 0; f2 < d2; f2++)
        if (f2 in e2 && !b2.call(c2, e2[f2], f2, a2))
          return false;
      return true;
    };
    goog.array.count = function(a2, b2, c2) {
      var d2 = 0;
      goog.array.forEach(a2, function(a3, f2, g) {
        b2.call(c2, a3, f2, g) && ++d2;
      }, c2);
      return d2;
    };
    goog.array.find = function(a2, b2, c2) {
      b2 = goog.array.findIndex(a2, b2, c2);
      return 0 > b2 ? null : goog.isString(a2) ? a2.charAt(b2) : a2[b2];
    };
    goog.array.findIndex = function(a2, b2, c2) {
      for (var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2, f2 = 0; f2 < d2; f2++)
        if (f2 in e2 && b2.call(c2, e2[f2], f2, a2))
          return f2;
      return -1;
    };
    goog.array.findRight = function(a2, b2, c2) {
      b2 = goog.array.findIndexRight(a2, b2, c2);
      return 0 > b2 ? null : goog.isString(a2) ? a2.charAt(b2) : a2[b2];
    };
    goog.array.findIndexRight = function(a2, b2, c2) {
      var d2 = a2.length, e2 = goog.isString(a2) ? a2.split("") : a2;
      for (--d2; 0 <= d2; d2--)
        if (d2 in e2 && b2.call(c2, e2[d2], d2, a2))
          return d2;
      return -1;
    };
    goog.array.contains = function(a2, b2) {
      return 0 <= goog.array.indexOf(a2, b2);
    };
    goog.array.isEmpty = function(a2) {
      return a2.length == 0;
    };
    goog.array.clear = function(a2) {
      if (!goog.isArray(a2))
        for (var b2 = a2.length - 1; 0 <= b2; b2--)
          delete a2[b2];
      a2.length = 0;
    };
    goog.array.insert = function(a2, b2) {
      goog.array.contains(a2, b2) || a2.push(b2);
    };
    goog.array.insertAt = function(a2, b2, c2) {
      goog.array.splice(a2, c2, 0, b2);
    };
    goog.array.insertArrayAt = function(a2, b2, c2) {
      goog.partial(goog.array.splice, a2, c2, 0).apply(null, b2);
    };
    goog.array.insertBefore = function(a2, b2, c2) {
      var d2;
      arguments.length == 2 || 0 > (d2 = goog.array.indexOf(a2, c2)) ? a2.push(b2) : goog.array.insertAt(a2, b2, d2);
    };
    goog.array.remove = function(a2, b2) {
      b2 = goog.array.indexOf(a2, b2);
      var c2;
      (c2 = 0 <= b2) && goog.array.removeAt(a2, b2);
      return c2;
    };
    goog.array.removeLast = function(a2, b2) {
      b2 = goog.array.lastIndexOf(a2, b2);
      return 0 <= b2 ? (goog.array.removeAt(a2, b2), true) : false;
    };
    goog.array.removeAt = function(a2, b2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.splice.call(a2, b2, 1).length == 1;
    };
    goog.array.removeIf = function(a2, b2, c2) {
      b2 = goog.array.findIndex(a2, b2, c2);
      return 0 <= b2 ? (goog.array.removeAt(a2, b2), true) : false;
    };
    goog.array.removeAllIf = function(a2, b2, c2) {
      var d2 = 0;
      goog.array.forEachRight(a2, function(e2, f2) {
        b2.call(c2, e2, f2, a2) && goog.array.removeAt(a2, f2) && d2++;
      });
      return d2;
    };
    goog.array.concat = function(a2) {
      return Array.prototype.concat.apply([], arguments);
    };
    goog.array.join = function(a2) {
      return Array.prototype.concat.apply([], arguments);
    };
    goog.array.toArray = function(a2) {
      var b2 = a2.length;
      if (0 < b2) {
        for (var c2 = Array(b2), d2 = 0; d2 < b2; d2++)
          c2[d2] = a2[d2];
        return c2;
      }
      return [];
    };
    goog.array.clone = goog.array.toArray;
    goog.array.extend = function(a2, b2) {
      for (var c2 = 1; c2 < arguments.length; c2++) {
        var d2 = arguments[c2];
        if (goog.isArrayLike(d2)) {
          var e2 = a2.length || 0, f2 = d2.length || 0;
          a2.length = e2 + f2;
          for (var g = 0; g < f2; g++)
            a2[e2 + g] = d2[g];
        } else
          a2.push(d2);
      }
    };
    goog.array.splice = function(a2, b2, c2, d2) {
      goog.asserts.assert(a2.length != null);
      return Array.prototype.splice.apply(a2, goog.array.slice(arguments, 1));
    };
    goog.array.slice = function(a2, b2, c2) {
      goog.asserts.assert(a2.length != null);
      return 2 >= arguments.length ? Array.prototype.slice.call(a2, b2) : Array.prototype.slice.call(a2, b2, c2);
    };
    goog.array.removeDuplicates = function(a2, b2, c2) {
      b2 = b2 || a2;
      var d2 = function(a3) {
        return goog.isObject(a3) ? "o" + goog.getUid(a3) : (typeof a3).charAt(0) + a3;
      };
      c2 = c2 || d2;
      d2 = {};
      for (var e2 = 0, f2 = 0; f2 < a2.length; ) {
        var g = a2[f2++], h = c2(g);
        Object.prototype.hasOwnProperty.call(d2, h) || (d2[h] = true, b2[e2++] = g);
      }
      b2.length = e2;
    };
    goog.array.binarySearch = function(a2, b2, c2) {
      return goog.array.binarySearch_(a2, c2 || goog.array.defaultCompare, false, b2);
    };
    goog.array.binarySelect = function(a2, b2, c2) {
      return goog.array.binarySearch_(a2, b2, true, void 0, c2);
    };
    goog.array.binarySearch_ = function(a2, b2, c2, d2, e2) {
      for (var f2 = 0, g = a2.length, h; f2 < g; ) {
        var k = f2 + g >> 1;
        var l = c2 ? b2.call(e2, a2[k], k, a2) : b2(d2, a2[k]);
        0 < l ? f2 = k + 1 : (g = k, h = !l);
      }
      return h ? f2 : ~f2;
    };
    goog.array.sort = function(a2, b2) {
      a2.sort(b2 || goog.array.defaultCompare);
    };
    goog.array.stableSort = function(a2, b2) {
      for (var c2 = Array(a2.length), d2 = 0; d2 < a2.length; d2++)
        c2[d2] = { index: d2, value: a2[d2] };
      var e2 = b2 || goog.array.defaultCompare;
      goog.array.sort(c2, function(a3, b3) {
        return e2(a3.value, b3.value) || a3.index - b3.index;
      });
      for (d2 = 0; d2 < a2.length; d2++)
        a2[d2] = c2[d2].value;
    };
    goog.array.sortByKey = function(a2, b2, c2) {
      var d2 = c2 || goog.array.defaultCompare;
      goog.array.sort(a2, function(a3, c3) {
        return d2(b2(a3), b2(c3));
      });
    };
    goog.array.sortObjectsByKey = function(a2, b2, c2) {
      goog.array.sortByKey(a2, function(a3) {
        return a3[b2];
      }, c2);
    };
    goog.array.isSorted = function(a2, b2, c2) {
      b2 = b2 || goog.array.defaultCompare;
      for (var d2 = 1; d2 < a2.length; d2++) {
        var e2 = b2(a2[d2 - 1], a2[d2]);
        if (0 < e2 || e2 == 0 && c2)
          return false;
      }
      return true;
    };
    goog.array.equals = function(a2, b2, c2) {
      if (!goog.isArrayLike(a2) || !goog.isArrayLike(b2) || a2.length != b2.length)
        return false;
      var d2 = a2.length;
      c2 = c2 || goog.array.defaultCompareEquality;
      for (var e2 = 0; e2 < d2; e2++)
        if (!c2(a2[e2], b2[e2]))
          return false;
      return true;
    };
    goog.array.compare3 = function(a2, b2, c2) {
      c2 = c2 || goog.array.defaultCompare;
      for (var d2 = Math.min(a2.length, b2.length), e2 = 0; e2 < d2; e2++) {
        var f2 = c2(a2[e2], b2[e2]);
        if (f2 != 0)
          return f2;
      }
      return goog.array.defaultCompare(a2.length, b2.length);
    };
    goog.array.defaultCompare = function(a2, b2) {
      return a2 > b2 ? 1 : a2 < b2 ? -1 : 0;
    };
    goog.array.inverseDefaultCompare = function(a2, b2) {
      return -goog.array.defaultCompare(a2, b2);
    };
    goog.array.defaultCompareEquality = function(a2, b2) {
      return a2 === b2;
    };
    goog.array.binaryInsert = function(a2, b2, c2) {
      c2 = goog.array.binarySearch(a2, b2, c2);
      return 0 > c2 ? (goog.array.insertAt(a2, b2, -(c2 + 1)), true) : false;
    };
    goog.array.binaryRemove = function(a2, b2, c2) {
      b2 = goog.array.binarySearch(a2, b2, c2);
      return 0 <= b2 ? goog.array.removeAt(a2, b2) : false;
    };
    goog.array.bucket = function(a2, b2, c2) {
      for (var d2 = {}, e2 = 0; e2 < a2.length; e2++) {
        var f2 = a2[e2], g = b2.call(c2, f2, e2, a2);
        goog.isDef(g) && (d2[g] || (d2[g] = [])).push(f2);
      }
      return d2;
    };
    goog.array.toObject = function(a2, b2, c2) {
      var d2 = {};
      goog.array.forEach(a2, function(e2, f2) {
        d2[b2.call(c2, e2, f2, a2)] = e2;
      });
      return d2;
    };
    goog.array.range = function(a2, b2, c2) {
      var d2 = [], e2 = 0, f2 = a2;
      c2 = c2 || 1;
      b2 !== void 0 && (e2 = a2, f2 = b2);
      if (0 > c2 * (f2 - e2))
        return [];
      if (0 < c2)
        for (a2 = e2; a2 < f2; a2 += c2)
          d2.push(a2);
      else
        for (a2 = e2; a2 > f2; a2 += c2)
          d2.push(a2);
      return d2;
    };
    goog.array.repeat = function(a2, b2) {
      for (var c2 = [], d2 = 0; d2 < b2; d2++)
        c2[d2] = a2;
      return c2;
    };
    goog.array.flatten = function(a2) {
      for (var b2 = [], c2 = 0; c2 < arguments.length; c2++) {
        var d2 = arguments[c2];
        if (goog.isArray(d2))
          for (var e2 = 0; e2 < d2.length; e2 += 8192) {
            var f2 = goog.array.slice(d2, e2, e2 + 8192);
            f2 = goog.array.flatten.apply(null, f2);
            for (var g = 0; g < f2.length; g++)
              b2.push(f2[g]);
          }
        else
          b2.push(d2);
      }
      return b2;
    };
    goog.array.rotate = function(a2, b2) {
      goog.asserts.assert(a2.length != null);
      a2.length && (b2 %= a2.length, 0 < b2 ? Array.prototype.unshift.apply(a2, a2.splice(-b2, b2)) : 0 > b2 && Array.prototype.push.apply(a2, a2.splice(0, -b2)));
      return a2;
    };
    goog.array.moveItem = function(a2, b2, c2) {
      goog.asserts.assert(0 <= b2 && b2 < a2.length);
      goog.asserts.assert(0 <= c2 && c2 < a2.length);
      b2 = Array.prototype.splice.call(a2, b2, 1);
      Array.prototype.splice.call(a2, c2, 0, b2[0]);
    };
    goog.array.zip = function(a2) {
      if (!arguments.length)
        return [];
      for (var b2 = [], c2 = arguments[0].length, d2 = 1; d2 < arguments.length; d2++)
        arguments[d2].length < c2 && (c2 = arguments[d2].length);
      for (d2 = 0; d2 < c2; d2++) {
        for (var e2 = [], f2 = 0; f2 < arguments.length; f2++)
          e2.push(arguments[f2][d2]);
        b2.push(e2);
      }
      return b2;
    };
    goog.array.shuffle = function(a2, b2) {
      b2 = b2 || Math.random;
      for (var c2 = a2.length - 1; 0 < c2; c2--) {
        var d2 = Math.floor(b2() * (c2 + 1)), e2 = a2[c2];
        a2[c2] = a2[d2];
        a2[d2] = e2;
      }
    };
    goog.array.copyByIndex = function(a2, b2) {
      var c2 = [];
      goog.array.forEach(b2, function(b3) {
        c2.push(a2[b3]);
      });
      return c2;
    };
    goog.array.concatMap = function(a2, b2, c2) {
      return goog.array.concat.apply([], goog.array.map(a2, b2, c2));
    };
    goog.crypt = {};
    goog.crypt.stringToByteArray = function(a2) {
      for (var b2 = [], c2 = 0, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charCodeAt(d2);
        255 < e2 && (b2[c2++] = e2 & 255, e2 >>= 8);
        b2[c2++] = e2;
      }
      return b2;
    };
    goog.crypt.byteArrayToString = function(a2) {
      if (8192 >= a2.length)
        return String.fromCharCode.apply(null, a2);
      for (var b2 = "", c2 = 0; c2 < a2.length; c2 += 8192) {
        var d2 = goog.array.slice(a2, c2, c2 + 8192);
        b2 += String.fromCharCode.apply(null, d2);
      }
      return b2;
    };
    goog.crypt.byteArrayToHex = function(a2, b2) {
      return goog.array.map(a2, function(a3) {
        a3 = a3.toString(16);
        return 1 < a3.length ? a3 : "0" + a3;
      }).join(b2 || "");
    };
    goog.crypt.hexToByteArray = function(a2) {
      goog.asserts.assert(a2.length % 2 == 0, "Key string length must be multiple of 2");
      for (var b2 = [], c2 = 0; c2 < a2.length; c2 += 2)
        b2.push(parseInt(a2.substring(c2, c2 + 2), 16));
      return b2;
    };
    goog.crypt.stringToUtf8ByteArray = function(a2) {
      for (var b2 = [], c2 = 0, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charCodeAt(d2);
        128 > e2 ? b2[c2++] = e2 : (2048 > e2 ? b2[c2++] = e2 >> 6 | 192 : ((e2 & 64512) == 55296 && d2 + 1 < a2.length && (a2.charCodeAt(d2 + 1) & 64512) == 56320 ? (e2 = 65536 + ((e2 & 1023) << 10) + (a2.charCodeAt(++d2) & 1023), b2[c2++] = e2 >> 18 | 240, b2[c2++] = e2 >> 12 & 63 | 128) : b2[c2++] = e2 >> 12 | 224, b2[c2++] = e2 >> 6 & 63 | 128), b2[c2++] = e2 & 63 | 128);
      }
      return b2;
    };
    goog.crypt.utf8ByteArrayToString = function(a2) {
      for (var b2 = [], c2 = 0, d2 = 0; c2 < a2.length; ) {
        var e2 = a2[c2++];
        if (128 > e2)
          b2[d2++] = String.fromCharCode(e2);
        else if (191 < e2 && 224 > e2) {
          var f2 = a2[c2++];
          b2[d2++] = String.fromCharCode((e2 & 31) << 6 | f2 & 63);
        } else if (239 < e2 && 365 > e2) {
          f2 = a2[c2++];
          var g = a2[c2++], h = a2[c2++];
          e2 = ((e2 & 7) << 18 | (f2 & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
          b2[d2++] = String.fromCharCode(55296 + (e2 >> 10));
          b2[d2++] = String.fromCharCode(56320 + (e2 & 1023));
        } else
          f2 = a2[c2++], g = a2[c2++], b2[d2++] = String.fromCharCode((e2 & 15) << 12 | (f2 & 63) << 6 | g & 63);
      }
      return b2.join("");
    };
    goog.crypt.xorByteArray = function(a2, b2) {
      goog.asserts.assert(a2.length == b2.length, "XOR array lengths must match");
      for (var c2 = [], d2 = 0; d2 < a2.length; d2++)
        c2.push(a2[d2] ^ b2[d2]);
      return c2;
    };
    goog.dom.asserts = {};
    goog.dom.asserts.assertIsLocation = function(a2) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var b2 = goog.dom.asserts.getWindow_(a2);
        b2 && (!a2 || !(a2 instanceof b2.Location) && a2 instanceof b2.Element) && goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s", goog.dom.asserts.debugStringForType_(a2));
      }
      return a2;
    };
    goog.dom.asserts.assertIsElementType_ = function(a2, b2) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var c2 = goog.dom.asserts.getWindow_(a2);
        c2 && typeof c2[b2] != "undefined" && (a2 && (a2 instanceof c2[b2] || !(a2 instanceof c2.Location || a2 instanceof c2.Element)) || goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b2, goog.dom.asserts.debugStringForType_(a2)));
      }
      return a2;
    };
    goog.dom.asserts.assertIsHTMLAnchorElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLAnchorElement");
    };
    goog.dom.asserts.assertIsHTMLButtonElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLButtonElement");
    };
    goog.dom.asserts.assertIsHTMLLinkElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLLinkElement");
    };
    goog.dom.asserts.assertIsHTMLImageElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLImageElement");
    };
    goog.dom.asserts.assertIsHTMLAudioElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLAudioElement");
    };
    goog.dom.asserts.assertIsHTMLVideoElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLVideoElement");
    };
    goog.dom.asserts.assertIsHTMLInputElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLInputElement");
    };
    goog.dom.asserts.assertIsHTMLTextAreaElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLTextAreaElement");
    };
    goog.dom.asserts.assertIsHTMLCanvasElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLCanvasElement");
    };
    goog.dom.asserts.assertIsHTMLEmbedElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLEmbedElement");
    };
    goog.dom.asserts.assertIsHTMLFormElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLFormElement");
    };
    goog.dom.asserts.assertIsHTMLFrameElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLFrameElement");
    };
    goog.dom.asserts.assertIsHTMLIFrameElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLIFrameElement");
    };
    goog.dom.asserts.assertIsHTMLObjectElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLObjectElement");
    };
    goog.dom.asserts.assertIsHTMLScriptElement = function(a2) {
      return goog.dom.asserts.assertIsElementType_(a2, "HTMLScriptElement");
    };
    goog.dom.asserts.debugStringForType_ = function(a2) {
      if (goog.isObject(a2))
        try {
          return a2.constructor.displayName || a2.constructor.name || Object.prototype.toString.call(a2);
        } catch (b2) {
          return "<object could not be stringified>";
        }
      else
        return a2 === void 0 ? "undefined" : a2 === null ? "null" : typeof a2;
    };
    goog.dom.asserts.getWindow_ = function(a2) {
      try {
        var b2 = a2 && a2.ownerDocument, c2 = b2 && (b2.defaultView || b2.parentWindow);
        c2 = c2 || goog.global;
        if (c2.Element && c2.Location)
          return c2;
      } catch (d2) {
      }
      return null;
    };
    goog.functions = {};
    goog.functions.constant = function(a2) {
      return function() {
        return a2;
      };
    };
    goog.functions.FALSE = function() {
      return false;
    };
    goog.functions.TRUE = function() {
      return true;
    };
    goog.functions.NULL = function() {
      return null;
    };
    goog.functions.identity = function(a2, b2) {
      return a2;
    };
    goog.functions.error = function(a2) {
      return function() {
        throw Error(a2);
      };
    };
    goog.functions.fail = function(a2) {
      return function() {
        throw a2;
      };
    };
    goog.functions.lock = function(a2, b2) {
      b2 = b2 || 0;
      return function() {
        return a2.apply(this, Array.prototype.slice.call(arguments, 0, b2));
      };
    };
    goog.functions.nth = function(a2) {
      return function() {
        return arguments[a2];
      };
    };
    goog.functions.partialRight = function(a2, b2) {
      var c2 = Array.prototype.slice.call(arguments, 1);
      return function() {
        var b3 = Array.prototype.slice.call(arguments);
        b3.push.apply(b3, c2);
        return a2.apply(this, b3);
      };
    };
    goog.functions.withReturnValue = function(a2, b2) {
      return goog.functions.sequence(a2, goog.functions.constant(b2));
    };
    goog.functions.equalTo = function(a2, b2) {
      return function(c2) {
        return b2 ? a2 == c2 : a2 === c2;
      };
    };
    goog.functions.compose = function(a2, b2) {
      var c2 = arguments, d2 = c2.length;
      return function() {
        var a3;
        d2 && (a3 = c2[d2 - 1].apply(this, arguments));
        for (var b3 = d2 - 2; 0 <= b3; b3--)
          a3 = c2[b3].call(this, a3);
        return a3;
      };
    };
    goog.functions.sequence = function(a2) {
      var b2 = arguments, c2 = b2.length;
      return function() {
        for (var a3, e2 = 0; e2 < c2; e2++)
          a3 = b2[e2].apply(this, arguments);
        return a3;
      };
    };
    goog.functions.and = function(a2) {
      var b2 = arguments, c2 = b2.length;
      return function() {
        for (var a3 = 0; a3 < c2; a3++)
          if (!b2[a3].apply(this, arguments))
            return false;
        return true;
      };
    };
    goog.functions.or = function(a2) {
      var b2 = arguments, c2 = b2.length;
      return function() {
        for (var a3 = 0; a3 < c2; a3++)
          if (b2[a3].apply(this, arguments))
            return true;
        return false;
      };
    };
    goog.functions.not = function(a2) {
      return function() {
        return !a2.apply(this, arguments);
      };
    };
    goog.functions.create = function(a2, b2) {
      var c2 = function() {
      };
      c2.prototype = a2.prototype;
      c2 = new c2();
      a2.apply(c2, Array.prototype.slice.call(arguments, 1));
      return c2;
    };
    goog.functions.CACHE_RETURN_VALUE = true;
    goog.functions.cacheReturnValue = function(a2) {
      var b2 = false, c2;
      return function() {
        if (!goog.functions.CACHE_RETURN_VALUE)
          return a2();
        b2 || (c2 = a2(), b2 = true);
        return c2;
      };
    };
    goog.functions.once = function(a2) {
      var b2 = a2;
      return function() {
        if (b2) {
          var a3 = b2;
          b2 = null;
          a3();
        }
      };
    };
    goog.functions.debounce = function(a2, b2, c2) {
      var d2 = 0;
      return function(e2) {
        goog.global.clearTimeout(d2);
        var f2 = arguments;
        d2 = goog.global.setTimeout(function() {
          a2.apply(c2, f2);
        }, b2);
      };
    };
    goog.functions.throttle = function(a2, b2, c2) {
      var d2 = 0, e2 = false, f2 = [], g = function() {
        d2 = 0;
        e2 && (e2 = false, h());
      }, h = function() {
        d2 = goog.global.setTimeout(g, b2);
        a2.apply(c2, f2);
      };
      return function(a3) {
        f2 = arguments;
        d2 ? e2 = true : h();
      };
    };
    goog.functions.rateLimit = function(a2, b2, c2) {
      var d2 = 0, e2 = function() {
        d2 = 0;
      };
      return function(f2) {
        d2 || (d2 = goog.global.setTimeout(e2, b2), a2.apply(c2, arguments));
      };
    };
    goog.dom.HtmlElement = function() {
    };
    goog.dom.TagName = function(a2) {
      this.tagName_ = a2;
    };
    goog.dom.TagName.prototype.toString = function() {
      return this.tagName_;
    };
    goog.dom.TagName.A = new goog.dom.TagName("A");
    goog.dom.TagName.ABBR = new goog.dom.TagName("ABBR");
    goog.dom.TagName.ACRONYM = new goog.dom.TagName("ACRONYM");
    goog.dom.TagName.ADDRESS = new goog.dom.TagName("ADDRESS");
    goog.dom.TagName.APPLET = new goog.dom.TagName("APPLET");
    goog.dom.TagName.AREA = new goog.dom.TagName("AREA");
    goog.dom.TagName.ARTICLE = new goog.dom.TagName("ARTICLE");
    goog.dom.TagName.ASIDE = new goog.dom.TagName("ASIDE");
    goog.dom.TagName.AUDIO = new goog.dom.TagName("AUDIO");
    goog.dom.TagName.B = new goog.dom.TagName("B");
    goog.dom.TagName.BASE = new goog.dom.TagName("BASE");
    goog.dom.TagName.BASEFONT = new goog.dom.TagName("BASEFONT");
    goog.dom.TagName.BDI = new goog.dom.TagName("BDI");
    goog.dom.TagName.BDO = new goog.dom.TagName("BDO");
    goog.dom.TagName.BIG = new goog.dom.TagName("BIG");
    goog.dom.TagName.BLOCKQUOTE = new goog.dom.TagName("BLOCKQUOTE");
    goog.dom.TagName.BODY = new goog.dom.TagName("BODY");
    goog.dom.TagName.BR = new goog.dom.TagName("BR");
    goog.dom.TagName.BUTTON = new goog.dom.TagName("BUTTON");
    goog.dom.TagName.CANVAS = new goog.dom.TagName("CANVAS");
    goog.dom.TagName.CAPTION = new goog.dom.TagName("CAPTION");
    goog.dom.TagName.CENTER = new goog.dom.TagName("CENTER");
    goog.dom.TagName.CITE = new goog.dom.TagName("CITE");
    goog.dom.TagName.CODE = new goog.dom.TagName("CODE");
    goog.dom.TagName.COL = new goog.dom.TagName("COL");
    goog.dom.TagName.COLGROUP = new goog.dom.TagName("COLGROUP");
    goog.dom.TagName.COMMAND = new goog.dom.TagName("COMMAND");
    goog.dom.TagName.DATA = new goog.dom.TagName("DATA");
    goog.dom.TagName.DATALIST = new goog.dom.TagName("DATALIST");
    goog.dom.TagName.DD = new goog.dom.TagName("DD");
    goog.dom.TagName.DEL = new goog.dom.TagName("DEL");
    goog.dom.TagName.DETAILS = new goog.dom.TagName("DETAILS");
    goog.dom.TagName.DFN = new goog.dom.TagName("DFN");
    goog.dom.TagName.DIALOG = new goog.dom.TagName("DIALOG");
    goog.dom.TagName.DIR = new goog.dom.TagName("DIR");
    goog.dom.TagName.DIV = new goog.dom.TagName("DIV");
    goog.dom.TagName.DL = new goog.dom.TagName("DL");
    goog.dom.TagName.DT = new goog.dom.TagName("DT");
    goog.dom.TagName.EM = new goog.dom.TagName("EM");
    goog.dom.TagName.EMBED = new goog.dom.TagName("EMBED");
    goog.dom.TagName.FIELDSET = new goog.dom.TagName("FIELDSET");
    goog.dom.TagName.FIGCAPTION = new goog.dom.TagName("FIGCAPTION");
    goog.dom.TagName.FIGURE = new goog.dom.TagName("FIGURE");
    goog.dom.TagName.FONT = new goog.dom.TagName("FONT");
    goog.dom.TagName.FOOTER = new goog.dom.TagName("FOOTER");
    goog.dom.TagName.FORM = new goog.dom.TagName("FORM");
    goog.dom.TagName.FRAME = new goog.dom.TagName("FRAME");
    goog.dom.TagName.FRAMESET = new goog.dom.TagName("FRAMESET");
    goog.dom.TagName.H1 = new goog.dom.TagName("H1");
    goog.dom.TagName.H2 = new goog.dom.TagName("H2");
    goog.dom.TagName.H3 = new goog.dom.TagName("H3");
    goog.dom.TagName.H4 = new goog.dom.TagName("H4");
    goog.dom.TagName.H5 = new goog.dom.TagName("H5");
    goog.dom.TagName.H6 = new goog.dom.TagName("H6");
    goog.dom.TagName.HEAD = new goog.dom.TagName("HEAD");
    goog.dom.TagName.HEADER = new goog.dom.TagName("HEADER");
    goog.dom.TagName.HGROUP = new goog.dom.TagName("HGROUP");
    goog.dom.TagName.HR = new goog.dom.TagName("HR");
    goog.dom.TagName.HTML = new goog.dom.TagName("HTML");
    goog.dom.TagName.I = new goog.dom.TagName("I");
    goog.dom.TagName.IFRAME = new goog.dom.TagName("IFRAME");
    goog.dom.TagName.IMG = new goog.dom.TagName("IMG");
    goog.dom.TagName.INPUT = new goog.dom.TagName("INPUT");
    goog.dom.TagName.INS = new goog.dom.TagName("INS");
    goog.dom.TagName.ISINDEX = new goog.dom.TagName("ISINDEX");
    goog.dom.TagName.KBD = new goog.dom.TagName("KBD");
    goog.dom.TagName.KEYGEN = new goog.dom.TagName("KEYGEN");
    goog.dom.TagName.LABEL = new goog.dom.TagName("LABEL");
    goog.dom.TagName.LEGEND = new goog.dom.TagName("LEGEND");
    goog.dom.TagName.LI = new goog.dom.TagName("LI");
    goog.dom.TagName.LINK = new goog.dom.TagName("LINK");
    goog.dom.TagName.MAIN = new goog.dom.TagName("MAIN");
    goog.dom.TagName.MAP = new goog.dom.TagName("MAP");
    goog.dom.TagName.MARK = new goog.dom.TagName("MARK");
    goog.dom.TagName.MATH = new goog.dom.TagName("MATH");
    goog.dom.TagName.MENU = new goog.dom.TagName("MENU");
    goog.dom.TagName.MENUITEM = new goog.dom.TagName("MENUITEM");
    goog.dom.TagName.META = new goog.dom.TagName("META");
    goog.dom.TagName.METER = new goog.dom.TagName("METER");
    goog.dom.TagName.NAV = new goog.dom.TagName("NAV");
    goog.dom.TagName.NOFRAMES = new goog.dom.TagName("NOFRAMES");
    goog.dom.TagName.NOSCRIPT = new goog.dom.TagName("NOSCRIPT");
    goog.dom.TagName.OBJECT = new goog.dom.TagName("OBJECT");
    goog.dom.TagName.OL = new goog.dom.TagName("OL");
    goog.dom.TagName.OPTGROUP = new goog.dom.TagName("OPTGROUP");
    goog.dom.TagName.OPTION = new goog.dom.TagName("OPTION");
    goog.dom.TagName.OUTPUT = new goog.dom.TagName("OUTPUT");
    goog.dom.TagName.P = new goog.dom.TagName("P");
    goog.dom.TagName.PARAM = new goog.dom.TagName("PARAM");
    goog.dom.TagName.PICTURE = new goog.dom.TagName("PICTURE");
    goog.dom.TagName.PRE = new goog.dom.TagName("PRE");
    goog.dom.TagName.PROGRESS = new goog.dom.TagName("PROGRESS");
    goog.dom.TagName.Q = new goog.dom.TagName("Q");
    goog.dom.TagName.RP = new goog.dom.TagName("RP");
    goog.dom.TagName.RT = new goog.dom.TagName("RT");
    goog.dom.TagName.RTC = new goog.dom.TagName("RTC");
    goog.dom.TagName.RUBY = new goog.dom.TagName("RUBY");
    goog.dom.TagName.S = new goog.dom.TagName("S");
    goog.dom.TagName.SAMP = new goog.dom.TagName("SAMP");
    goog.dom.TagName.SCRIPT = new goog.dom.TagName("SCRIPT");
    goog.dom.TagName.SECTION = new goog.dom.TagName("SECTION");
    goog.dom.TagName.SELECT = new goog.dom.TagName("SELECT");
    goog.dom.TagName.SMALL = new goog.dom.TagName("SMALL");
    goog.dom.TagName.SOURCE = new goog.dom.TagName("SOURCE");
    goog.dom.TagName.SPAN = new goog.dom.TagName("SPAN");
    goog.dom.TagName.STRIKE = new goog.dom.TagName("STRIKE");
    goog.dom.TagName.STRONG = new goog.dom.TagName("STRONG");
    goog.dom.TagName.STYLE = new goog.dom.TagName("STYLE");
    goog.dom.TagName.SUB = new goog.dom.TagName("SUB");
    goog.dom.TagName.SUMMARY = new goog.dom.TagName("SUMMARY");
    goog.dom.TagName.SUP = new goog.dom.TagName("SUP");
    goog.dom.TagName.SVG = new goog.dom.TagName("SVG");
    goog.dom.TagName.TABLE = new goog.dom.TagName("TABLE");
    goog.dom.TagName.TBODY = new goog.dom.TagName("TBODY");
    goog.dom.TagName.TD = new goog.dom.TagName("TD");
    goog.dom.TagName.TEMPLATE = new goog.dom.TagName("TEMPLATE");
    goog.dom.TagName.TEXTAREA = new goog.dom.TagName("TEXTAREA");
    goog.dom.TagName.TFOOT = new goog.dom.TagName("TFOOT");
    goog.dom.TagName.TH = new goog.dom.TagName("TH");
    goog.dom.TagName.THEAD = new goog.dom.TagName("THEAD");
    goog.dom.TagName.TIME = new goog.dom.TagName("TIME");
    goog.dom.TagName.TITLE = new goog.dom.TagName("TITLE");
    goog.dom.TagName.TR = new goog.dom.TagName("TR");
    goog.dom.TagName.TRACK = new goog.dom.TagName("TRACK");
    goog.dom.TagName.TT = new goog.dom.TagName("TT");
    goog.dom.TagName.U = new goog.dom.TagName("U");
    goog.dom.TagName.UL = new goog.dom.TagName("UL");
    goog.dom.TagName.VAR = new goog.dom.TagName("VAR");
    goog.dom.TagName.VIDEO = new goog.dom.TagName("VIDEO");
    goog.dom.TagName.WBR = new goog.dom.TagName("WBR");
    goog.dom.tags = {};
    goog.dom.tags.VOID_TAGS_ = { area: true, base: true, br: true, col: true, command: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true };
    goog.dom.tags.isVoidTag = function(a2) {
      return goog.dom.tags.VOID_TAGS_[a2] === true;
    };
    goog.html = {};
    goog.html.trustedtypes = {};
    goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#html") : null;
    goog.string = {};
    goog.string.TypedString = function() {
    };
    goog.string.Const = function(a2, b2) {
      this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = a2 === goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ && b2 || "";
      this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
    };
    goog.string.Const.prototype.implementsGoogStringTypedString = true;
    goog.string.Const.prototype.getTypedStringValue = function() {
      return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
    };
    goog.string.Const.prototype.toString = function() {
      return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
    };
    goog.string.Const.unwrap = function(a2) {
      if (a2 instanceof goog.string.Const && a2.constructor === goog.string.Const && a2.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_)
        return a2.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
      goog.asserts.fail("expected object of type Const, got '" + a2 + "'");
      return "type_error:Const";
    };
    goog.string.Const.from = function(a2) {
      return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, a2);
    };
    goog.string.Const.TYPE_MARKER_ = {};
    goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};
    goog.string.Const.EMPTY = goog.string.Const.from("");
    goog.html.SafeScript = function() {
      this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
      this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeScript.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      return a2.length === 0 ? goog.html.SafeScript.EMPTY : goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeScript.fromConstantAndArgs = function(a2, b2) {
      for (var c2 = [], d2 = 1; d2 < arguments.length; d2++)
        c2.push(goog.html.SafeScript.stringify_(arguments[d2]));
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("(" + goog.string.Const.unwrap(a2) + ")(" + c2.join(", ") + ");");
    };
    goog.html.SafeScript.fromJson = function(a2) {
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a2));
    };
    goog.html.SafeScript.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
    };
    goog.DEBUG && (goog.html.SafeScript.prototype.toString = function() {
      return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
    });
    goog.html.SafeScript.unwrap = function(a2) {
      return goog.html.SafeScript.unwrapTrustedScript(a2).toString();
    };
    goog.html.SafeScript.unwrapTrustedScript = function(a2) {
      if (a2 instanceof goog.html.SafeScript && a2.constructor === goog.html.SafeScript && a2.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeScriptWrappedValue_;
      goog.asserts.fail("expected object of type SafeScript, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeScript";
    };
    goog.html.SafeScript.stringify_ = function(a2) {
      return JSON.stringify(a2).replace(/</g, "\\x3c");
    };
    goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeScript().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a2) : a2;
      return this;
    };
    goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
    goog.fs = {};
    goog.fs.url = {};
    goog.fs.url.createObjectUrl = function(a2) {
      return goog.fs.url.getUrlObject_().createObjectURL(a2);
    };
    goog.fs.url.revokeObjectUrl = function(a2) {
      goog.fs.url.getUrlObject_().revokeObjectURL(a2);
    };
    goog.fs.url.getUrlObject_ = function() {
      var a2 = goog.fs.url.findUrlObject_();
      if (a2 != null)
        return a2;
      throw Error("This browser doesn't seem to support blob URLs");
    };
    goog.fs.url.findUrlObject_ = function() {
      return goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL) ? goog.global.URL : goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL) ? goog.global.webkitURL : goog.isDef(goog.global.createObjectURL) ? goog.global : null;
    };
    goog.fs.url.browserSupportsObjectUrls = function() {
      return goog.fs.url.findUrlObject_() != null;
    };
    goog.i18n = {};
    goog.i18n.bidi = {};
    goog.i18n.bidi.FORCE_RTL = false;
    goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || 3 <= goog.LOCALE.length && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") || 7 <= goog.LOCALE.length && (goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") && (goog.LOCALE.substring(3, 7).toLowerCase() == "adlm" || goog.LOCALE.substring(3, 7).toLowerCase() == "arab" || goog.LOCALE.substring(3, 7).toLowerCase() == "hebr" || goog.LOCALE.substring(3, 7).toLowerCase() == "nkoo" || goog.LOCALE.substring(3, 7).toLowerCase() == "rohg" || goog.LOCALE.substring(3, 7).toLowerCase() == "thaa") || 8 <= goog.LOCALE.length && (goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_") && (goog.LOCALE.substring(4, 8).toLowerCase() == "adlm" || goog.LOCALE.substring(4, 8).toLowerCase() == "arab" || goog.LOCALE.substring(4, 8).toLowerCase() == "hebr" || goog.LOCALE.substring(4, 8).toLowerCase() == "nkoo" || goog.LOCALE.substring(4, 8).toLowerCase() == "rohg" || goog.LOCALE.substring(4, 8).toLowerCase() == "thaa");
    goog.i18n.bidi.Format = { LRE: "\u202A", RLE: "\u202B", PDF: "\u202C", LRM: "\u200E", RLM: "\u200F" };
    goog.i18n.bidi.Dir = { LTR: 1, RTL: -1, NEUTRAL: 0 };
    goog.i18n.bidi.RIGHT = "right";
    goog.i18n.bidi.LEFT = "left";
    goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
    goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
    goog.i18n.bidi.toDir = function(a2, b2) {
      return typeof a2 == "number" ? 0 < a2 ? goog.i18n.bidi.Dir.LTR : 0 > a2 ? goog.i18n.bidi.Dir.RTL : b2 ? null : goog.i18n.bidi.Dir.NEUTRAL : a2 == null ? null : a2 ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    };
    goog.i18n.bidi.ltrChars_ = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0900-\u1FFF\u200E\u2C00-\uD801\uD804-\uD839\uD83C-\uDBFF\uF900-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
    goog.i18n.bidi.rtlChars_ = "\u0591-\u06EF\u06FA-\u08FF\u200F\uD802-\uD803\uD83A-\uD83B\uFB1D-\uFDFF\uFE70-\uFEFC";
    goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
    goog.i18n.bidi.stripHtmlIfNeeded_ = function(a2, b2) {
      return b2 ? a2.replace(goog.i18n.bidi.htmlSkipReg_, "") : a2;
    };
    goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.hasAnyRtl = function(a2, b2) {
      return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
    goog.i18n.bidi.hasAnyLtr = function(a2, b2) {
      return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.isRtlChar = function(a2) {
      return goog.i18n.bidi.rtlRe_.test(a2);
    };
    goog.i18n.bidi.isLtrChar = function(a2) {
      return goog.i18n.bidi.ltrRe_.test(a2);
    };
    goog.i18n.bidi.isNeutralChar = function(a2) {
      return !goog.i18n.bidi.isLtrChar(a2) && !goog.i18n.bidi.isRtlChar(a2);
    };
    goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
    goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
    goog.i18n.bidi.startsWithRtl = function(a2, b2) {
      return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
    goog.i18n.bidi.startsWithLtr = function(a2, b2) {
      return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
    goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
    goog.i18n.bidi.isNeutralText = function(a2, b2) {
      a2 = goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2);
      return goog.i18n.bidi.isRequiredLtrRe_.test(a2) || !goog.i18n.bidi.hasAnyLtr(a2) && !goog.i18n.bidi.hasAnyRtl(a2);
    };
    goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
    goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
    goog.i18n.bidi.endsWithLtr = function(a2, b2) {
      return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
    goog.i18n.bidi.endsWithRtl = function(a2, b2) {
      return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2));
    };
    goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
    goog.i18n.bidi.rtlLocalesRe_ = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
    goog.i18n.bidi.isRtlLanguage = function(a2) {
      return goog.i18n.bidi.rtlLocalesRe_.test(a2);
    };
    goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
    goog.i18n.bidi.guardBracketInText = function(a2, b2) {
      b2 = (b2 === void 0 ? goog.i18n.bidi.hasAnyRtl(a2) : b2) ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
      return a2.replace(goog.i18n.bidi.bracketGuardTextRe_, b2 + "$&" + b2);
    };
    goog.i18n.bidi.enforceRtlInHtml = function(a2) {
      return a2.charAt(0) == "<" ? a2.replace(/<\w+/, "$& dir=rtl") : "\n<span dir=rtl>" + a2 + "</span>";
    };
    goog.i18n.bidi.enforceRtlInText = function(a2) {
      return goog.i18n.bidi.Format.RLE + a2 + goog.i18n.bidi.Format.PDF;
    };
    goog.i18n.bidi.enforceLtrInHtml = function(a2) {
      return a2.charAt(0) == "<" ? a2.replace(/<\w+/, "$& dir=ltr") : "\n<span dir=ltr>" + a2 + "</span>";
    };
    goog.i18n.bidi.enforceLtrInText = function(a2) {
      return goog.i18n.bidi.Format.LRE + a2 + goog.i18n.bidi.Format.PDF;
    };
    goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
    goog.i18n.bidi.leftRe_ = /left/gi;
    goog.i18n.bidi.rightRe_ = /right/gi;
    goog.i18n.bidi.tempRe_ = /%%%%/g;
    goog.i18n.bidi.mirrorCSS = function(a2) {
      return a2.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
    };
    goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
    goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
    goog.i18n.bidi.normalizeHebrewQuote = function(a2) {
      return a2.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05F4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05F3");
    };
    goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
    goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
    goog.i18n.bidi.rtlDetectionThreshold_ = 0.4;
    goog.i18n.bidi.estimateDirection = function(a2, b2) {
      var c2 = 0, d2 = 0, e2 = false;
      a2 = goog.i18n.bidi.stripHtmlIfNeeded_(a2, b2).split(goog.i18n.bidi.wordSeparatorRe_);
      for (b2 = 0; b2 < a2.length; b2++) {
        var f2 = a2[b2];
        goog.i18n.bidi.startsWithRtl(f2) ? (c2++, d2++) : goog.i18n.bidi.isRequiredLtrRe_.test(f2) ? e2 = true : goog.i18n.bidi.hasAnyLtr(f2) ? d2++ : goog.i18n.bidi.hasNumeralsRe_.test(f2) && (e2 = true);
      }
      return d2 == 0 ? e2 ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : c2 / d2 > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    };
    goog.i18n.bidi.detectRtlDirectionality = function(a2, b2) {
      return goog.i18n.bidi.estimateDirection(a2, b2) == goog.i18n.bidi.Dir.RTL;
    };
    goog.i18n.bidi.setElementDirAndAlign = function(a2, b2) {
      a2 && (b2 = goog.i18n.bidi.toDir(b2)) && (a2.style.textAlign = b2 == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT, a2.dir = b2 == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr");
    };
    goog.i18n.bidi.setElementDirByTextDirectionality = function(a2, b2) {
      switch (goog.i18n.bidi.estimateDirection(b2)) {
        case goog.i18n.bidi.Dir.LTR:
          a2.dir = "ltr";
          break;
        case goog.i18n.bidi.Dir.RTL:
          a2.dir = "rtl";
          break;
        default:
          a2.removeAttribute("dir");
      }
    };
    goog.i18n.bidi.DirectionalString = function() {
    };
    goog.html.TrustedResourceUrl = function() {
      this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
      this.trustedURL_ = null;
      this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
    goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString();
    };
    goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.TrustedResourceUrl.prototype.getDirection = function() {
      return goog.i18n.bidi.Dir.LTR;
    };
    goog.html.TrustedResourceUrl.prototype.cloneWithParams = function(a2, b2) {
      var c2 = goog.html.TrustedResourceUrl.unwrap(this);
      c2 = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c2);
      var d2 = c2[3] || "";
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c2[1] + goog.html.TrustedResourceUrl.stringifyParams_("?", c2[2] || "", a2) + goog.html.TrustedResourceUrl.stringifyParams_("#", d2, b2));
    };
    goog.DEBUG && (goog.html.TrustedResourceUrl.prototype.toString = function() {
      return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
    });
    goog.html.TrustedResourceUrl.unwrap = function(a2) {
      return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a2).toString();
    };
    goog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(a2) {
      if (a2 instanceof goog.html.TrustedResourceUrl && a2.constructor === goog.html.TrustedResourceUrl && a2.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
      goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:TrustedResourceUrl";
    };
    goog.html.TrustedResourceUrl.unwrapTrustedURL = function(a2) {
      return a2.trustedURL_ ? a2.trustedURL_ : goog.html.TrustedResourceUrl.unwrap(a2);
    };
    goog.html.TrustedResourceUrl.format = function(a2, b2) {
      var c2 = goog.string.Const.unwrap(a2);
      if (!goog.html.TrustedResourceUrl.BASE_URL_.test(c2))
        throw Error("Invalid TrustedResourceUrl format: " + c2);
      a2 = c2.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(a3, e2) {
        if (!Object.prototype.hasOwnProperty.call(b2, e2))
          throw Error('Found marker, "' + e2 + '", in format string, "' + c2 + '", but no valid label mapping found in args: ' + JSON.stringify(b2));
        a3 = b2[e2];
        return a3 instanceof goog.string.Const ? goog.string.Const.unwrap(a3) : encodeURIComponent(String(a3));
      });
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;
    goog.html.TrustedResourceUrl.BASE_URL_ = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;
    goog.html.TrustedResourceUrl.URL_PARAM_PARSER_ = /^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
    goog.html.TrustedResourceUrl.formatWithParams = function(a2, b2, c2, d2) {
      return goog.html.TrustedResourceUrl.format(a2, b2).cloneWithParams(c2, d2);
    };
    goog.html.TrustedResourceUrl.fromConstant = function(a2) {
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a2));
    };
    goog.html.TrustedResourceUrl.fromConstants = function(a2) {
      for (var b2 = "", c2 = 0; c2 < a2.length; c2++)
        b2 += goog.string.Const.unwrap(a2[c2]);
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(a2) {
      var b2 = new goog.html.TrustedResourceUrl();
      b2.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a2) : a2;
      goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY && (b2.trustedURL_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a2));
      return b2;
    };
    goog.html.TrustedResourceUrl.stringifyParams_ = function(a2, b2, c2) {
      if (c2 == null)
        return b2;
      if (goog.isString(c2))
        return c2 ? a2 + encodeURIComponent(c2) : "";
      for (var d2 in c2) {
        var e2 = c2[d2];
        e2 = goog.isArray(e2) ? e2 : [e2];
        for (var f2 = 0; f2 < e2.length; f2++) {
          var g = e2[f2];
          g != null && (b2 || (b2 = a2), b2 += (b2.length > a2.length ? "&" : "") + encodeURIComponent(d2) + "=" + encodeURIComponent(String(g)));
        }
      }
      return b2;
    };
    goog.string.internal = {};
    goog.string.internal.startsWith = function(a2, b2) {
      return a2.lastIndexOf(b2, 0) == 0;
    };
    goog.string.internal.endsWith = function(a2, b2) {
      var c2 = a2.length - b2.length;
      return 0 <= c2 && a2.indexOf(b2, c2) == c2;
    };
    goog.string.internal.caseInsensitiveStartsWith = function(a2, b2) {
      return goog.string.internal.caseInsensitiveCompare(b2, a2.substr(0, b2.length)) == 0;
    };
    goog.string.internal.caseInsensitiveEndsWith = function(a2, b2) {
      return goog.string.internal.caseInsensitiveCompare(b2, a2.substr(a2.length - b2.length, b2.length)) == 0;
    };
    goog.string.internal.caseInsensitiveEquals = function(a2, b2) {
      return a2.toLowerCase() == b2.toLowerCase();
    };
    goog.string.internal.isEmptyOrWhitespace = function(a2) {
      return /^[\s\xa0]*$/.test(a2);
    };
    goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(a2) {
      return a2.trim();
    } : function(a2) {
      return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a2)[1];
    };
    goog.string.internal.caseInsensitiveCompare = function(a2, b2) {
      a2 = String(a2).toLowerCase();
      b2 = String(b2).toLowerCase();
      return a2 < b2 ? -1 : a2 == b2 ? 0 : 1;
    };
    goog.string.internal.newLineToBr = function(a2, b2) {
      return a2.replace(/(\r\n|\r|\n)/g, b2 ? "<br />" : "<br>");
    };
    goog.string.internal.htmlEscape = function(a2, b2) {
      if (b2)
        a2 = a2.replace(goog.string.internal.AMP_RE_, "&amp;").replace(goog.string.internal.LT_RE_, "&lt;").replace(goog.string.internal.GT_RE_, "&gt;").replace(goog.string.internal.QUOT_RE_, "&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.internal.NULL_RE_, "&#0;");
      else {
        if (!goog.string.internal.ALL_RE_.test(a2))
          return a2;
        a2.indexOf("&") != -1 && (a2 = a2.replace(goog.string.internal.AMP_RE_, "&amp;"));
        a2.indexOf("<") != -1 && (a2 = a2.replace(goog.string.internal.LT_RE_, "&lt;"));
        a2.indexOf(">") != -1 && (a2 = a2.replace(goog.string.internal.GT_RE_, "&gt;"));
        a2.indexOf('"') != -1 && (a2 = a2.replace(goog.string.internal.QUOT_RE_, "&quot;"));
        a2.indexOf("'") != -1 && (a2 = a2.replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;"));
        a2.indexOf("\0") != -1 && (a2 = a2.replace(goog.string.internal.NULL_RE_, "&#0;"));
      }
      return a2;
    };
    goog.string.internal.AMP_RE_ = /&/g;
    goog.string.internal.LT_RE_ = /</g;
    goog.string.internal.GT_RE_ = />/g;
    goog.string.internal.QUOT_RE_ = /"/g;
    goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
    goog.string.internal.NULL_RE_ = /\x00/g;
    goog.string.internal.ALL_RE_ = /[\x00&<>"']/;
    goog.string.internal.whitespaceEscape = function(a2, b2) {
      return goog.string.internal.newLineToBr(a2.replace(/  /g, " &#160;"), b2);
    };
    goog.string.internal.contains = function(a2, b2) {
      return a2.indexOf(b2) != -1;
    };
    goog.string.internal.caseInsensitiveContains = function(a2, b2) {
      return goog.string.internal.contains(a2.toLowerCase(), b2.toLowerCase());
    };
    goog.string.internal.compareVersions = function(a2, b2) {
      var c2 = 0;
      a2 = goog.string.internal.trim(String(a2)).split(".");
      b2 = goog.string.internal.trim(String(b2)).split(".");
      for (var d2 = Math.max(a2.length, b2.length), e2 = 0; c2 == 0 && e2 < d2; e2++) {
        var f2 = a2[e2] || "", g = b2[e2] || "";
        do {
          f2 = /(\d*)(\D*)(.*)/.exec(f2) || ["", "", "", ""];
          g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
          if (f2[0].length == 0 && g[0].length == 0)
            break;
          c2 = f2[1].length == 0 ? 0 : parseInt(f2[1], 10);
          var h = g[1].length == 0 ? 0 : parseInt(g[1], 10);
          c2 = goog.string.internal.compareElements_(c2, h) || goog.string.internal.compareElements_(f2[2].length == 0, g[2].length == 0) || goog.string.internal.compareElements_(f2[2], g[2]);
          f2 = f2[3];
          g = g[3];
        } while (c2 == 0);
      }
      return c2;
    };
    goog.string.internal.compareElements_ = function(a2, b2) {
      return a2 < b2 ? -1 : a2 > b2 ? 1 : 0;
    };
    goog.html.SafeUrl = function() {
      this.privateDoNotAccessOrElseSafeUrlWrappedValue_ = "";
      this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
    goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeUrl.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
    };
    goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.SafeUrl.prototype.getDirection = function() {
      return goog.i18n.bidi.Dir.LTR;
    };
    goog.DEBUG && (goog.html.SafeUrl.prototype.toString = function() {
      return "SafeUrl{" + this.privateDoNotAccessOrElseSafeUrlWrappedValue_ + "}";
    });
    goog.html.SafeUrl.unwrap = function(a2) {
      return goog.html.SafeUrl.unwrapTrustedURL(a2).toString();
    };
    goog.html.SafeUrl.unwrapTrustedURL = function(a2) {
      if (a2 instanceof goog.html.SafeUrl && a2.constructor === goog.html.SafeUrl && a2.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeUrlWrappedValue_;
      goog.asserts.fail("expected object of type SafeUrl, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeUrl";
    };
    goog.html.SafeUrl.fromConstant = function(a2) {
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a2));
    };
    goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i;
    goog.html.SafeUrl.isSafeMimeType = function(a2) {
      return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a2);
    };
    goog.html.SafeUrl.fromBlob = function(a2) {
      a2 = goog.html.SAFE_MIME_TYPE_PATTERN_.test(a2.type) ? goog.fs.url.createObjectUrl(a2) : goog.html.SafeUrl.INNOCUOUS_STRING;
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.DATA_URL_PATTERN_ = /^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;
    goog.html.SafeUrl.fromDataUrl = function(a2) {
      a2 = a2.replace(/(%0A|%0D)/g, "");
      var b2 = a2.match(goog.html.DATA_URL_PATTERN_);
      b2 = b2 && goog.html.SAFE_MIME_TYPE_PATTERN_.test(b2[1]);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b2 ? a2 : goog.html.SafeUrl.INNOCUOUS_STRING);
    };
    goog.html.SafeUrl.fromTelUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "tel:") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SIP_URL_PATTERN_ = /^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;
    goog.html.SafeUrl.fromSipUrl = function(a2) {
      goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a2)) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromFacebookMessengerUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "fb-messenger://share") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromWhatsAppUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "whatsapp://send") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.fromSmsUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "sms:") && goog.html.SafeUrl.isSmsUrlBodyValid_(a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.isSmsUrlBodyValid_ = function(a2) {
      var b2 = a2.indexOf("#");
      0 < b2 && (a2 = a2.substring(0, b2));
      b2 = a2.match(/[?&]body=/gi);
      if (!b2)
        return true;
      if (1 < b2.length)
        return false;
      a2 = a2.match(/[?&]body=([^&]*)/)[1];
      if (!a2)
        return true;
      try {
        decodeURIComponent(a2);
      } catch (c2) {
        return false;
      }
      return /^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a2);
    };
    goog.html.SafeUrl.fromSshUrl = function(a2) {
      goog.string.internal.caseInsensitiveStartsWith(a2, "ssh://") || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.sanitizeChromeExtensionUrl = function(a2, b2) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//, a2, b2);
    };
    goog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(a2, b2) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//, a2, b2);
    };
    goog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(a2, b2) {
      return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//, a2, b2);
    };
    goog.html.SafeUrl.sanitizeExtensionUrl_ = function(a2, b2, c2) {
      (a2 = a2.exec(b2)) ? (a2 = a2[1], (c2 instanceof goog.string.Const ? [goog.string.Const.unwrap(c2)] : c2.map(function(a3) {
        return goog.string.Const.unwrap(a3);
      })).indexOf(a2) == -1 && (b2 = goog.html.SafeUrl.INNOCUOUS_STRING)) : b2 = goog.html.SafeUrl.INNOCUOUS_STRING;
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.SafeUrl.fromTrustedResourceUrl = function(a2) {
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a2));
    };
    goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    goog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;
    goog.html.SafeUrl.sanitize = function(a2) {
      if (a2 instanceof goog.html.SafeUrl)
        return a2;
      a2 = typeof a2 == "object" && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      goog.html.SAFE_URL_PATTERN_.test(a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.sanitizeAssertUnchanged = function(a2, b2) {
      if (a2 instanceof goog.html.SafeUrl)
        return a2;
      a2 = typeof a2 == "object" && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      if (b2 && /^data:/i.test(a2) && (b2 = goog.html.SafeUrl.fromDataUrl(a2), b2.getTypedStringValue() == a2))
        return b2;
      goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a2), "%s does not match the safe URL pattern", a2) || (a2 = goog.html.SafeUrl.INNOCUOUS_STRING);
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(a2) {
      var b2 = new goog.html.SafeUrl();
      b2.privateDoNotAccessOrElseSafeUrlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a2) : a2;
      return b2;
    };
    goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
    goog.html.SafeStyle = function() {
      this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
      this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeStyle.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      if (a2.length === 0)
        return goog.html.SafeStyle.EMPTY;
      goog.asserts.assert(goog.string.internal.endsWith(a2, ";"), "Last character of style string is not ';': " + a2);
      goog.asserts.assert(goog.string.internal.contains(a2, ":"), `Style string must contain at least one ':', to specify a "name: value" pair: ` + a2);
      return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyle.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
    };
    goog.DEBUG && (goog.html.SafeStyle.prototype.toString = function() {
      return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
    });
    goog.html.SafeStyle.unwrap = function(a2) {
      if (a2 instanceof goog.html.SafeStyle && a2.constructor === goog.html.SafeStyle && a2.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeStyleWrappedValue_;
      goog.asserts.fail("expected object of type SafeStyle, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeStyle";
    };
    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = a2;
      return this;
    };
    goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
    goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
    goog.html.SafeStyle.create = function(a2) {
      var b2 = "", c2;
      for (c2 in a2) {
        if (!/^[-_a-zA-Z0-9]+$/.test(c2))
          throw Error("Name allows only [-_a-zA-Z0-9], got: " + c2);
        var d2 = a2[c2];
        d2 != null && (d2 = goog.isArray(d2) ? goog.array.map(d2, goog.html.SafeStyle.sanitizePropertyValue_).join(" ") : goog.html.SafeStyle.sanitizePropertyValue_(d2), b2 += c2 + ":" + d2 + ";");
      }
      return b2 ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b2) : goog.html.SafeStyle.EMPTY;
    };
    goog.html.SafeStyle.sanitizePropertyValue_ = function(a2) {
      if (a2 instanceof goog.html.SafeUrl)
        return 'url("' + goog.html.SafeUrl.unwrap(a2).replace(/</g, "%3c").replace(/[\\"]/g, "\\$&") + '")';
      a2 = a2 instanceof goog.string.Const ? goog.string.Const.unwrap(a2) : goog.html.SafeStyle.sanitizePropertyValueString_(String(a2));
      if (/[{;}]/.test(a2))
        throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.", [a2]);
      return a2;
    };
    goog.html.SafeStyle.sanitizePropertyValueString_ = function(a2) {
      var b2 = a2.replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.URL_RE_, "url");
      if (goog.html.SafeStyle.VALUE_RE_.test(b2)) {
        if (goog.html.SafeStyle.COMMENT_RE_.test(a2))
          return goog.asserts.fail("String value disallows comments, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedQuotes_(a2))
          return goog.asserts.fail("String value requires balanced quotes, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(a2))
          return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
      } else
        return goog.asserts.fail("String value allows only " + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + " and simple functions, got: " + a2), goog.html.SafeStyle.INNOCUOUS_STRING;
      return goog.html.SafeStyle.sanitizeUrl_(a2);
    };
    goog.html.SafeStyle.hasBalancedQuotes_ = function(a2) {
      for (var b2 = true, c2 = true, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charAt(d2);
        e2 == "'" && c2 ? b2 = !b2 : e2 == '"' && b2 && (c2 = !c2);
      }
      return b2 && c2;
    };
    goog.html.SafeStyle.hasBalancedSquareBrackets_ = function(a2) {
      for (var b2 = true, c2 = /^[-_a-zA-Z0-9]$/, d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2.charAt(d2);
        if (e2 == "]") {
          if (b2)
            return false;
          b2 = true;
        } else if (e2 == "[") {
          if (!b2)
            return false;
          b2 = false;
        } else if (!b2 && !c2.test(e2))
          return false;
      }
      return b2;
    };
    goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = `[-,."'%_!# a-zA-Z0-9\\[\\]]`;
    goog.html.SafeStyle.VALUE_RE_ = new RegExp("^" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + "+$");
    goog.html.SafeStyle.URL_RE_ = /\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;
    goog.html.SafeStyle.FUNCTIONS_RE_ = /\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g;
    goog.html.SafeStyle.COMMENT_RE_ = /\/\*/;
    goog.html.SafeStyle.sanitizeUrl_ = function(a2) {
      return a2.replace(goog.html.SafeStyle.URL_RE_, function(a3, c2, d2, e2) {
        var b2 = "";
        d2 = d2.replace(/^(['"])(.*)\1$/, function(a4, c3, d3) {
          b2 = c3;
          return d3;
        });
        a3 = goog.html.SafeUrl.sanitize(d2).getTypedStringValue();
        return c2 + b2 + a3 + b2 + e2;
      });
    };
    goog.html.SafeStyle.concat = function(a2) {
      var b2 = "", c2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, c2) : b2 += goog.html.SafeStyle.unwrap(a3);
      };
      goog.array.forEach(arguments, c2);
      return b2 ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b2) : goog.html.SafeStyle.EMPTY;
    };
    goog.html.SafeStyleSheet = function() {
      this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
      this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    };
    goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeStyleSheet.createRule = function(a2, b2) {
      if (goog.string.internal.contains(a2, "<"))
        throw Error("Selector does not allow '<', got: " + a2);
      var c2 = a2.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, "");
      if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c2))
        throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: " + a2);
      if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(c2))
        throw Error("() and [] in selector must be balanced, got: " + a2);
      b2 instanceof goog.html.SafeStyle || (b2 = goog.html.SafeStyle.create(b2));
      a2 = a2 + "{" + goog.html.SafeStyle.unwrap(b2).replace(/</g, "\\3C ") + "}";
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyleSheet.hasBalancedBrackets_ = function(a2) {
      for (var b2 = { "(": ")", "[": "]" }, c2 = [], d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2[d2];
        if (b2[e2])
          c2.push(b2[e2]);
        else if (goog.object.contains(b2, e2) && c2.pop() != e2)
          return false;
      }
      return c2.length == 0;
    };
    goog.html.SafeStyleSheet.concat = function(a2) {
      var b2 = "", c2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, c2) : b2 += goog.html.SafeStyleSheet.unwrap(a3);
      };
      goog.array.forEach(arguments, c2);
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.SafeStyleSheet.fromConstant = function(a2) {
      a2 = goog.string.Const.unwrap(a2);
      if (a2.length === 0)
        return goog.html.SafeStyleSheet.EMPTY;
      goog.asserts.assert(!goog.string.internal.contains(a2, "<"), "Forbidden '<' character in style sheet string: " + a2);
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a2);
    };
    goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
    };
    goog.DEBUG && (goog.html.SafeStyleSheet.prototype.toString = function() {
      return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
    });
    goog.html.SafeStyleSheet.unwrap = function(a2) {
      if (a2 instanceof goog.html.SafeStyleSheet && a2.constructor === goog.html.SafeStyleSheet && a2.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
      goog.asserts.fail("expected object of type SafeStyleSheet, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeStyleSheet";
    };
    goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(a2) {
      return new goog.html.SafeStyleSheet().initSecurityPrivateDoNotAccessOrElse_(a2);
    };
    goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2) {
      this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = a2;
      return this;
    };
    goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
    goog.labs = {};
    goog.labs.userAgent = {};
    goog.labs.userAgent.util = {};
    goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
      var a2 = goog.labs.userAgent.util.getNavigator_();
      return a2 && (a2 = a2.userAgent) ? a2 : "";
    };
    goog.labs.userAgent.util.getNavigator_ = function() {
      return goog.global.navigator;
    };
    goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
    goog.labs.userAgent.util.setUserAgent = function(a2) {
      goog.labs.userAgent.util.userAgent_ = a2 || goog.labs.userAgent.util.getNativeUserAgentString_();
    };
    goog.labs.userAgent.util.getUserAgent = function() {
      return goog.labs.userAgent.util.userAgent_;
    };
    goog.labs.userAgent.util.matchUserAgent = function(a2) {
      var b2 = goog.labs.userAgent.util.getUserAgent();
      return goog.string.internal.contains(b2, a2);
    };
    goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(a2) {
      var b2 = goog.labs.userAgent.util.getUserAgent();
      return goog.string.internal.caseInsensitiveContains(b2, a2);
    };
    goog.labs.userAgent.util.extractVersionTuples = function(a2) {
      for (var b2 = /(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g, c2 = [], d2; d2 = b2.exec(a2); )
        c2.push([d2[1], d2[2], d2[3] || void 0]);
      return c2;
    };
    goog.labs.userAgent.browser = {};
    goog.labs.userAgent.browser.matchOpera_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Opera");
    };
    goog.labs.userAgent.browser.matchIE_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
    };
    goog.labs.userAgent.browser.matchEdgeHtml_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edge");
    };
    goog.labs.userAgent.browser.matchEdgeChromium_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edg/");
    };
    goog.labs.userAgent.browser.matchOperaChromium_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("OPR");
    };
    goog.labs.userAgent.browser.matchFirefox_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Firefox") || goog.labs.userAgent.util.matchUserAgent("FxiOS");
    };
    goog.labs.userAgent.browser.matchSafari_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdgeHtml_() || goog.labs.userAgent.browser.matchEdgeChromium_() || goog.labs.userAgent.browser.matchOperaChromium_() || goog.labs.userAgent.browser.matchFirefox_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
    };
    goog.labs.userAgent.browser.matchCoast_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Coast");
    };
    goog.labs.userAgent.browser.matchIosWebview_ = function() {
      return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && !goog.labs.userAgent.browser.matchFirefox_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
    };
    goog.labs.userAgent.browser.matchChrome_ = function() {
      return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdgeHtml_();
    };
    goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
      return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
    };
    goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
    goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
    goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdgeHtml_;
    goog.labs.userAgent.browser.isEdgeChromium = goog.labs.userAgent.browser.matchEdgeChromium_;
    goog.labs.userAgent.browser.isOperaChromium = goog.labs.userAgent.browser.matchOperaChromium_;
    goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
    goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
    goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
    goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
    goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
    goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
    goog.labs.userAgent.browser.isSilk = function() {
      return goog.labs.userAgent.util.matchUserAgent("Silk");
    };
    goog.labs.userAgent.browser.getVersion = function() {
      function a2(a3) {
        a3 = goog.array.find(a3, d2);
        return c2[a3] || "";
      }
      var b2 = goog.labs.userAgent.util.getUserAgent();
      if (goog.labs.userAgent.browser.isIE())
        return goog.labs.userAgent.browser.getIEVersion_(b2);
      b2 = goog.labs.userAgent.util.extractVersionTuples(b2);
      var c2 = {};
      goog.array.forEach(b2, function(a3) {
        c2[a3[0]] = a3[1];
      });
      var d2 = goog.partial(goog.object.containsKey, c2);
      return goog.labs.userAgent.browser.isOpera() ? a2(["Version", "Opera"]) : goog.labs.userAgent.browser.isEdge() ? a2(["Edge"]) : goog.labs.userAgent.browser.isEdgeChromium() ? a2(["Edg"]) : goog.labs.userAgent.browser.isChrome() ? a2(["Chrome", "CriOS"]) : (b2 = b2[2]) && b2[1] || "";
    };
    goog.labs.userAgent.browser.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(), a2);
    };
    goog.labs.userAgent.browser.getIEVersion_ = function(a2) {
      var b2 = /rv: *([\d\.]*)/.exec(a2);
      if (b2 && b2[1])
        return b2[1];
      b2 = "";
      var c2 = /MSIE +([\d\.]+)/.exec(a2);
      if (c2 && c2[1])
        if (a2 = /Trident\/(\d.\d)/.exec(a2), c2[1] == "7.0")
          if (a2 && a2[1])
            switch (a2[1]) {
              case "4.0":
                b2 = "8.0";
                break;
              case "5.0":
                b2 = "9.0";
                break;
              case "6.0":
                b2 = "10.0";
                break;
              case "7.0":
                b2 = "11.0";
            }
          else
            b2 = "7.0";
        else
          b2 = c2[1];
      return b2;
    };
    goog.html.SafeHtml = function() {
      this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
      this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
      this.dir_ = null;
    };
    goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
    goog.html.SafeHtml.prototype.getDirection = function() {
      return this.dir_;
    };
    goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
    goog.html.SafeHtml.prototype.getTypedStringValue = function() {
      return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
    };
    goog.DEBUG && (goog.html.SafeHtml.prototype.toString = function() {
      return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
    });
    goog.html.SafeHtml.unwrap = function(a2) {
      return goog.html.SafeHtml.unwrapTrustedHTML(a2).toString();
    };
    goog.html.SafeHtml.unwrapTrustedHTML = function(a2) {
      if (a2 instanceof goog.html.SafeHtml && a2.constructor === goog.html.SafeHtml && a2.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)
        return a2.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
      goog.asserts.fail("expected object of type SafeHtml, got '" + a2 + "' of type " + goog.typeOf(a2));
      return "type_error:SafeHtml";
    };
    goog.html.SafeHtml.htmlEscape = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      var b2 = typeof a2 == "object", c2 = null;
      b2 && a2.implementsGoogI18nBidiDirectionalString && (c2 = a2.getDirection());
      a2 = b2 && a2.implementsGoogStringTypedString ? a2.getTypedStringValue() : String(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a2), c2);
    };
    goog.html.SafeHtml.htmlEscapePreservingNewlines = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a2)), a2.getDirection());
    };
    goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(a2) {
      if (a2 instanceof goog.html.SafeHtml)
        return a2;
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a2)), a2.getDirection());
    };
    goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
    goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
    goog.html.SafeHtml.URL_ATTRIBUTES_ = { action: true, cite: true, data: true, formaction: true, href: true, manifest: true, poster: true, src: true };
    goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = { APPLET: true, BASE: true, EMBED: true, IFRAME: true, LINK: true, MATH: true, META: true, OBJECT: true, SCRIPT: true, STYLE: true, SVG: true, TEMPLATE: true };
    goog.html.SafeHtml.create = function(a2, b2, c2) {
      goog.html.SafeHtml.verifyTagName(String(a2));
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a2), b2, c2);
    };
    goog.html.SafeHtml.verifyTagName = function(a2) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a2))
        throw Error("Invalid tag name <" + a2 + ">.");
      if (a2.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)
        throw Error("Tag name <" + a2 + "> is not allowed for SafeHtml.");
    };
    goog.html.SafeHtml.createIframe = function(a2, b2, c2, d2) {
      a2 && goog.html.TrustedResourceUrl.unwrap(a2);
      var e2 = {};
      e2.src = a2 || null;
      e2.srcdoc = b2 && goog.html.SafeHtml.unwrap(b2);
      a2 = goog.html.SafeHtml.combineAttributes(e2, { sandbox: "" }, c2);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a2, d2);
    };
    goog.html.SafeHtml.createSandboxIframe = function(a2, b2, c2, d2) {
      if (!goog.html.SafeHtml.canUseSandboxIframe())
        throw Error("The browser does not support sandboxed iframes.");
      var e2 = {};
      e2.src = a2 ? goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a2)) : null;
      e2.srcdoc = b2 || null;
      e2.sandbox = "";
      a2 = goog.html.SafeHtml.combineAttributes(e2, {}, c2);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a2, d2);
    };
    goog.html.SafeHtml.canUseSandboxIframe = function() {
      return goog.global.HTMLIFrameElement && "sandbox" in goog.global.HTMLIFrameElement.prototype;
    };
    goog.html.SafeHtml.createScriptSrc = function(a2, b2) {
      goog.html.TrustedResourceUrl.unwrap(a2);
      a2 = goog.html.SafeHtml.combineAttributes({ src: a2 }, {}, b2);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", a2);
    };
    goog.html.SafeHtml.createScript = function(a2, b2) {
      for (var c2 in b2) {
        var d2 = c2.toLowerCase();
        if (d2 == "language" || d2 == "src" || d2 == "text" || d2 == "type")
          throw Error('Cannot set "' + d2 + '" attribute');
      }
      c2 = "";
      a2 = goog.array.concat(a2);
      for (d2 = 0; d2 < a2.length; d2++)
        c2 += goog.html.SafeScript.unwrap(a2[d2]);
      a2 = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c2, goog.i18n.bidi.Dir.NEUTRAL);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", b2, a2);
    };
    goog.html.SafeHtml.createStyle = function(a2, b2) {
      b2 = goog.html.SafeHtml.combineAttributes({ type: "text/css" }, {}, b2);
      var c2 = "";
      a2 = goog.array.concat(a2);
      for (var d2 = 0; d2 < a2.length; d2++)
        c2 += goog.html.SafeStyleSheet.unwrap(a2[d2]);
      a2 = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c2, goog.i18n.bidi.Dir.NEUTRAL);
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", b2, a2);
    };
    goog.html.SafeHtml.createMetaRefresh = function(a2, b2) {
      a2 = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a2));
      (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) && goog.string.internal.contains(a2, ";") && (a2 = "'" + a2.replace(/'/g, "%27") + "'");
      return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", { "http-equiv": "refresh", content: (b2 || 0) + "; url=" + a2 });
    };
    goog.html.SafeHtml.getAttrNameAndValue_ = function(a2, b2, c2) {
      if (c2 instanceof goog.string.Const)
        c2 = goog.string.Const.unwrap(c2);
      else if (b2.toLowerCase() == "style")
        c2 = goog.html.SafeHtml.getStyleValue_(c2);
      else {
        if (/^on/i.test(b2))
          throw Error('Attribute "' + b2 + '" requires goog.string.Const value, "' + c2 + '" given.');
        if (b2.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_)
          if (c2 instanceof goog.html.TrustedResourceUrl)
            c2 = goog.html.TrustedResourceUrl.unwrap(c2);
          else if (c2 instanceof goog.html.SafeUrl)
            c2 = goog.html.SafeUrl.unwrap(c2);
          else if (goog.isString(c2))
            c2 = goog.html.SafeUrl.sanitize(c2).getTypedStringValue();
          else
            throw Error('Attribute "' + b2 + '" on tag "' + a2 + '" requires goog.html.SafeUrl, goog.string.Const, or string, value "' + c2 + '" given.');
      }
      c2.implementsGoogStringTypedString && (c2 = c2.getTypedStringValue());
      goog.asserts.assert(goog.isString(c2) || goog.isNumber(c2), "String or number value expected, got " + typeof c2 + " with value: " + c2);
      return b2 + '="' + goog.string.internal.htmlEscape(String(c2)) + '"';
    };
    goog.html.SafeHtml.getStyleValue_ = function(a2) {
      if (!goog.isObject(a2))
        throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, ' + typeof a2 + " given: " + a2);
      a2 instanceof goog.html.SafeStyle || (a2 = goog.html.SafeStyle.create(a2));
      return goog.html.SafeStyle.unwrap(a2);
    };
    goog.html.SafeHtml.createWithDir = function(a2, b2, c2, d2) {
      b2 = goog.html.SafeHtml.create(b2, c2, d2);
      b2.dir_ = a2;
      return b2;
    };
    goog.html.SafeHtml.join = function(a2, b2) {
      a2 = goog.html.SafeHtml.htmlEscape(a2);
      var c2 = a2.getDirection(), d2 = [], e2 = function(a3) {
        goog.isArray(a3) ? goog.array.forEach(a3, e2) : (a3 = goog.html.SafeHtml.htmlEscape(a3), d2.push(goog.html.SafeHtml.unwrap(a3)), a3 = a3.getDirection(), c2 == goog.i18n.bidi.Dir.NEUTRAL ? c2 = a3 : a3 != goog.i18n.bidi.Dir.NEUTRAL && c2 != a3 && (c2 = null));
      };
      goog.array.forEach(b2, e2);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d2.join(goog.html.SafeHtml.unwrap(a2)), c2);
    };
    goog.html.SafeHtml.concat = function(a2) {
      return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY, Array.prototype.slice.call(arguments));
    };
    goog.html.SafeHtml.concatWithDir = function(a2, b2) {
      var c2 = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
      c2.dir_ = a2;
      return c2;
    };
    goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(a2, b2) {
      return new goog.html.SafeHtml().initSecurityPrivateDoNotAccessOrElse_(a2, b2);
    };
    goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a2, b2) {
      this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a2) : a2;
      this.dir_ = b2;
      return this;
    };
    goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(a2, b2, c2) {
      var d2 = null;
      var e2 = "<" + a2 + goog.html.SafeHtml.stringifyAttributes(a2, b2);
      goog.isDefAndNotNull(c2) ? goog.isArray(c2) || (c2 = [c2]) : c2 = [];
      goog.dom.tags.isVoidTag(a2.toLowerCase()) ? (goog.asserts.assert(!c2.length, "Void tag <" + a2 + "> does not allow content."), e2 += ">") : (d2 = goog.html.SafeHtml.concat(c2), e2 += ">" + goog.html.SafeHtml.unwrap(d2) + "</" + a2 + ">", d2 = d2.getDirection());
      (a2 = b2 && b2.dir) && (d2 = /^(ltr|rtl|auto)$/i.test(a2) ? goog.i18n.bidi.Dir.NEUTRAL : null);
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e2, d2);
    };
    goog.html.SafeHtml.stringifyAttributes = function(a2, b2) {
      var c2 = "";
      if (b2)
        for (var d2 in b2) {
          if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d2))
            throw Error('Invalid attribute name "' + d2 + '".');
          var e2 = b2[d2];
          goog.isDefAndNotNull(e2) && (c2 += " " + goog.html.SafeHtml.getAttrNameAndValue_(a2, d2, e2));
        }
      return c2;
    };
    goog.html.SafeHtml.combineAttributes = function(a2, b2, c2) {
      var d2 = {}, e2;
      for (e2 in a2)
        goog.asserts.assert(e2.toLowerCase() == e2, "Must be lower case"), d2[e2] = a2[e2];
      for (e2 in b2)
        goog.asserts.assert(e2.toLowerCase() == e2, "Must be lower case"), d2[e2] = b2[e2];
      for (e2 in c2) {
        var f2 = e2.toLowerCase();
        if (f2 in a2)
          throw Error('Cannot override "' + f2 + '" attribute, got "' + e2 + '" with value "' + c2[e2] + '"');
        f2 in b2 && delete d2[f2];
        d2[e2] = c2[e2];
      }
      return d2;
    };
    goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>", goog.i18n.bidi.Dir.NEUTRAL);
    goog.html.uncheckedconversions = {};
    goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(a2, b2, c2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b2, c2 || null);
    };
    goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(a2, b2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(a2, b2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(a2, b2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(a2, b2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(a2, b2) {
      goog.asserts.assertString(goog.string.Const.unwrap(a2), "must provide justification");
      goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a2)), "must provide non-empty justification");
      return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b2);
    };
    goog.dom.safe = {};
    goog.dom.safe.InsertAdjacentHtmlPosition = { AFTERBEGIN: "afterbegin", AFTEREND: "afterend", BEFOREBEGIN: "beforebegin", BEFOREEND: "beforeend" };
    goog.dom.safe.insertAdjacentHtml = function(a2, b2, c2) {
      a2.insertAdjacentHTML(b2, goog.html.SafeHtml.unwrapTrustedHTML(c2));
    };
    goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = { MATH: true, SCRIPT: true, STYLE: true, SVG: true, TEMPLATE: true };
    goog.dom.safe.isInnerHtmlCleanupRecursive_ = goog.functions.cacheReturnValue(function() {
      if (goog.DEBUG && typeof document === "undefined")
        return false;
      var a2 = document.createElement("div"), b2 = document.createElement("div");
      b2.appendChild(document.createElement("div"));
      a2.appendChild(b2);
      if (goog.DEBUG && !a2.firstChild)
        return false;
      b2 = a2.firstChild.firstChild;
      a2.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);
      return !b2.parentElement;
    });
    goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(a2, b2) {
      if (goog.dom.safe.isInnerHtmlCleanupRecursive_())
        for (; a2.lastChild; )
          a2.removeChild(a2.lastChild);
      a2.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b2);
    };
    goog.dom.safe.setInnerHtml = function(a2, b2) {
      if (goog.asserts.ENABLE_ASSERTS) {
        var c2 = a2.tagName.toUpperCase();
        if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c2])
          throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of " + a2.tagName + ".");
      }
      goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a2, b2);
    };
    goog.dom.safe.setOuterHtml = function(a2, b2) {
      a2.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b2);
    };
    goog.dom.safe.setFormElementAction = function(a2, b2) {
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      goog.dom.asserts.assertIsHTMLFormElement(a2).action = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setButtonFormAction = function(a2, b2) {
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      goog.dom.asserts.assertIsHTMLButtonElement(a2).formAction = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setInputFormAction = function(a2, b2) {
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      goog.dom.asserts.assertIsHTMLInputElement(a2).formAction = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setStyle = function(a2, b2) {
      a2.style.cssText = goog.html.SafeStyle.unwrap(b2);
    };
    goog.dom.safe.documentWrite = function(a2, b2) {
      a2.write(goog.html.SafeHtml.unwrapTrustedHTML(b2));
    };
    goog.dom.safe.setAnchorHref = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLAnchorElement(a2);
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      a2.href = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setImageSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLImageElement(a2);
      if (!(b2 instanceof goog.html.SafeUrl)) {
        var c2 = /^data:image\//i.test(b2);
        b2 = goog.html.SafeUrl.sanitizeAssertUnchanged(b2, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setAudioSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLAudioElement(a2);
      if (!(b2 instanceof goog.html.SafeUrl)) {
        var c2 = /^data:audio\//i.test(b2);
        b2 = goog.html.SafeUrl.sanitizeAssertUnchanged(b2, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setVideoSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLVideoElement(a2);
      if (!(b2 instanceof goog.html.SafeUrl)) {
        var c2 = /^data:video\//i.test(b2);
        b2 = goog.html.SafeUrl.sanitizeAssertUnchanged(b2, c2);
      }
      a2.src = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setEmbedSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLEmbedElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b2);
    };
    goog.dom.safe.setFrameSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLFrameElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setIframeSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLIFrameElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.setIframeSrcdoc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLIFrameElement(a2);
      a2.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(b2);
    };
    goog.dom.safe.setLinkHrefAndRel = function(a2, b2, c2) {
      goog.dom.asserts.assertIsHTMLLinkElement(a2);
      a2.rel = c2;
      goog.string.internal.caseInsensitiveContains(c2, "stylesheet") ? (goog.asserts.assert(b2 instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'), a2.href = goog.html.TrustedResourceUrl.unwrapTrustedURL(b2)) : a2.href = b2 instanceof goog.html.TrustedResourceUrl ? goog.html.TrustedResourceUrl.unwrapTrustedURL(b2) : b2 instanceof goog.html.SafeUrl ? goog.html.SafeUrl.unwrapTrustedURL(b2) : goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(b2));
    };
    goog.dom.safe.setObjectData = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLObjectElement(a2);
      a2.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b2);
    };
    goog.dom.safe.setScriptSrc = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLScriptElement(a2);
      a2.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b2);
      (b2 = goog.getScriptNonce()) && a2.setAttribute("nonce", b2);
    };
    goog.dom.safe.setScriptContent = function(a2, b2) {
      goog.dom.asserts.assertIsHTMLScriptElement(a2);
      a2.text = goog.html.SafeScript.unwrapTrustedScript(b2);
      (b2 = goog.getScriptNonce()) && a2.setAttribute("nonce", b2);
    };
    goog.dom.safe.setLocationHref = function(a2, b2) {
      goog.dom.asserts.assertIsLocation(a2);
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      a2.href = goog.html.SafeUrl.unwrapTrustedURL(b2);
    };
    goog.dom.safe.assignLocation = function(a2, b2) {
      goog.dom.asserts.assertIsLocation(a2);
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      a2.assign(goog.html.SafeUrl.unwrapTrustedURL(b2));
    };
    goog.dom.safe.replaceLocation = function(a2, b2) {
      goog.dom.asserts.assertIsLocation(a2);
      b2 = b2 instanceof goog.html.SafeUrl ? b2 : goog.html.SafeUrl.sanitizeAssertUnchanged(b2);
      a2.replace(goog.html.SafeUrl.unwrapTrustedURL(b2));
    };
    goog.dom.safe.openInWindow = function(a2, b2, c2, d2, e2) {
      a2 = a2 instanceof goog.html.SafeUrl ? a2 : goog.html.SafeUrl.sanitizeAssertUnchanged(a2);
      return (b2 || goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(a2), c2 ? goog.string.Const.unwrap(c2) : "", d2, e2);
    };
    goog.dom.safe.parseFromStringHtml = function(a2, b2) {
      return goog.dom.safe.parseFromString(a2, b2, "text/html");
    };
    goog.dom.safe.parseFromString = function(a2, b2, c2) {
      return a2.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b2), c2);
    };
    goog.dom.safe.createImageFromBlob = function(a2) {
      if (!/^image\/.*/g.test(a2.type))
        throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");
      var b2 = goog.global.URL.createObjectURL(a2);
      a2 = new goog.global.Image();
      a2.onload = function() {
        goog.global.URL.revokeObjectURL(b2);
      };
      goog.dom.safe.setImageSrc(a2, goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."), b2));
      return a2;
    };
    goog.string.DETECT_DOUBLE_ESCAPING = false;
    goog.string.FORCE_NON_DOM_HTML_UNESCAPING = false;
    goog.string.Unicode = { NBSP: "\xA0" };
    goog.string.startsWith = goog.string.internal.startsWith;
    goog.string.endsWith = goog.string.internal.endsWith;
    goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
    goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
    goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;
    goog.string.subs = function(a2, b2) {
      for (var c2 = a2.split("%s"), d2 = "", e2 = Array.prototype.slice.call(arguments, 1); e2.length && 1 < c2.length; )
        d2 += c2.shift() + e2.shift();
      return d2 + c2.join("%s");
    };
    goog.string.collapseWhitespace = function(a2) {
      return a2.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
    };
    goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;
    goog.string.isEmptyString = function(a2) {
      return a2.length == 0;
    };
    goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
    goog.string.isEmptyOrWhitespaceSafe = function(a2) {
      return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a2));
    };
    goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
    goog.string.isBreakingWhitespace = function(a2) {
      return !/[^\t\n\r ]/.test(a2);
    };
    goog.string.isAlpha = function(a2) {
      return !/[^a-zA-Z]/.test(a2);
    };
    goog.string.isNumeric = function(a2) {
      return !/[^0-9]/.test(a2);
    };
    goog.string.isAlphaNumeric = function(a2) {
      return !/[^a-zA-Z0-9]/.test(a2);
    };
    goog.string.isSpace = function(a2) {
      return a2 == " ";
    };
    goog.string.isUnicodeChar = function(a2) {
      return a2.length == 1 && " " <= a2 && "~" >= a2 || "\x80" <= a2 && "\uFFFD" >= a2;
    };
    goog.string.stripNewlines = function(a2) {
      return a2.replace(/(\r\n|\r|\n)+/g, " ");
    };
    goog.string.canonicalizeNewlines = function(a2) {
      return a2.replace(/(\r\n|\r|\n)/g, "\n");
    };
    goog.string.normalizeWhitespace = function(a2) {
      return a2.replace(/\xa0|\s/g, " ");
    };
    goog.string.normalizeSpaces = function(a2) {
      return a2.replace(/\xa0|[ \t]+/g, " ");
    };
    goog.string.collapseBreakingSpaces = function(a2) {
      return a2.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
    };
    goog.string.trim = goog.string.internal.trim;
    goog.string.trimLeft = function(a2) {
      return a2.replace(/^[\s\xa0]+/, "");
    };
    goog.string.trimRight = function(a2) {
      return a2.replace(/[\s\xa0]+$/, "");
    };
    goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;
    goog.string.numberAwareCompare_ = function(a2, b2, c2) {
      if (a2 == b2)
        return 0;
      if (!a2)
        return -1;
      if (!b2)
        return 1;
      for (var d2 = a2.toLowerCase().match(c2), e2 = b2.toLowerCase().match(c2), f2 = Math.min(d2.length, e2.length), g = 0; g < f2; g++) {
        c2 = d2[g];
        var h = e2[g];
        if (c2 != h)
          return a2 = parseInt(c2, 10), !isNaN(a2) && (b2 = parseInt(h, 10), !isNaN(b2) && a2 - b2) ? a2 - b2 : c2 < h ? -1 : 1;
      }
      return d2.length != e2.length ? d2.length - e2.length : a2 < b2 ? -1 : 1;
    };
    goog.string.intAwareCompare = function(a2, b2) {
      return goog.string.numberAwareCompare_(a2, b2, /\d+|\D+/g);
    };
    goog.string.floatAwareCompare = function(a2, b2) {
      return goog.string.numberAwareCompare_(a2, b2, /\d+|\.\d+|\D+/g);
    };
    goog.string.numerateCompare = goog.string.floatAwareCompare;
    goog.string.urlEncode = function(a2) {
      return encodeURIComponent(String(a2));
    };
    goog.string.urlDecode = function(a2) {
      return decodeURIComponent(a2.replace(/\+/g, " "));
    };
    goog.string.newLineToBr = goog.string.internal.newLineToBr;
    goog.string.htmlEscape = function(a2, b2) {
      a2 = goog.string.internal.htmlEscape(a2, b2);
      goog.string.DETECT_DOUBLE_ESCAPING && (a2 = a2.replace(goog.string.E_RE_, "&#101;"));
      return a2;
    };
    goog.string.E_RE_ = /e/g;
    goog.string.unescapeEntities = function(a2) {
      return goog.string.contains(a2, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a2) : goog.string.unescapePureXmlEntities_(a2) : a2;
    };
    goog.string.unescapeEntitiesWithDocument = function(a2, b2) {
      return goog.string.contains(a2, "&") ? goog.string.unescapeEntitiesUsingDom_(a2, b2) : a2;
    };
    goog.string.unescapeEntitiesUsingDom_ = function(a2, b2) {
      var c2 = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"' };
      var d2 = b2 ? b2.createElement("div") : goog.global.document.createElement("div");
      return a2.replace(goog.string.HTML_ENTITY_PATTERN_, function(a3, b3) {
        var e2 = c2[a3];
        if (e2)
          return e2;
        b3.charAt(0) == "#" && (b3 = Number("0" + b3.substr(1)), isNaN(b3) || (e2 = String.fromCharCode(b3)));
        e2 || (goog.dom.safe.setInnerHtml(d2, goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."), a3 + " ")), e2 = d2.firstChild.nodeValue.slice(0, -1));
        return c2[a3] = e2;
      });
    };
    goog.string.unescapePureXmlEntities_ = function(a2) {
      return a2.replace(/&([^;]+);/g, function(a3, c2) {
        switch (c2) {
          case "amp":
            return "&";
          case "lt":
            return "<";
          case "gt":
            return ">";
          case "quot":
            return '"';
          default:
            return c2.charAt(0) != "#" || (c2 = Number("0" + c2.substr(1)), isNaN(c2)) ? a3 : String.fromCharCode(c2);
        }
      });
    };
    goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
    goog.string.whitespaceEscape = function(a2, b2) {
      return goog.string.newLineToBr(a2.replace(/  /g, " &#160;"), b2);
    };
    goog.string.preserveSpaces = function(a2) {
      return a2.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
    };
    goog.string.stripQuotes = function(a2, b2) {
      for (var c2 = b2.length, d2 = 0; d2 < c2; d2++) {
        var e2 = c2 == 1 ? b2 : b2.charAt(d2);
        if (a2.charAt(0) == e2 && a2.charAt(a2.length - 1) == e2)
          return a2.substring(1, a2.length - 1);
      }
      return a2;
    };
    goog.string.truncate = function(a2, b2, c2) {
      c2 && (a2 = goog.string.unescapeEntities(a2));
      a2.length > b2 && (a2 = a2.substring(0, b2 - 3) + "...");
      c2 && (a2 = goog.string.htmlEscape(a2));
      return a2;
    };
    goog.string.truncateMiddle = function(a2, b2, c2, d2) {
      c2 && (a2 = goog.string.unescapeEntities(a2));
      if (d2 && a2.length > b2) {
        d2 > b2 && (d2 = b2);
        var e2 = a2.length - d2;
        a2 = a2.substring(0, b2 - d2) + "..." + a2.substring(e2);
      } else
        a2.length > b2 && (d2 = Math.floor(b2 / 2), e2 = a2.length - d2, a2 = a2.substring(0, d2 + b2 % 2) + "..." + a2.substring(e2));
      c2 && (a2 = goog.string.htmlEscape(a2));
      return a2;
    };
    goog.string.specialEscapeChars_ = { "\0": "\\0", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\x0B", '"': '\\"', "\\": "\\\\", "<": "\\u003C" };
    goog.string.jsEscapeCache_ = { "'": "\\'" };
    goog.string.quote = function(a2) {
      a2 = String(a2);
      for (var b2 = ['"'], c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charAt(c2), e2 = d2.charCodeAt(0);
        b2[c2 + 1] = goog.string.specialEscapeChars_[d2] || (31 < e2 && 127 > e2 ? d2 : goog.string.escapeChar(d2));
      }
      b2.push('"');
      return b2.join("");
    };
    goog.string.escapeString = function(a2) {
      for (var b2 = [], c2 = 0; c2 < a2.length; c2++)
        b2[c2] = goog.string.escapeChar(a2.charAt(c2));
      return b2.join("");
    };
    goog.string.escapeChar = function(a2) {
      if (a2 in goog.string.jsEscapeCache_)
        return goog.string.jsEscapeCache_[a2];
      if (a2 in goog.string.specialEscapeChars_)
        return goog.string.jsEscapeCache_[a2] = goog.string.specialEscapeChars_[a2];
      var b2 = a2.charCodeAt(0);
      if (31 < b2 && 127 > b2)
        var c2 = a2;
      else {
        if (256 > b2) {
          if (c2 = "\\x", 16 > b2 || 256 < b2)
            c2 += "0";
        } else
          c2 = "\\u", 4096 > b2 && (c2 += "0");
        c2 += b2.toString(16).toUpperCase();
      }
      return goog.string.jsEscapeCache_[a2] = c2;
    };
    goog.string.contains = goog.string.internal.contains;
    goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;
    goog.string.countOf = function(a2, b2) {
      return a2 && b2 ? a2.split(b2).length - 1 : 0;
    };
    goog.string.removeAt = function(a2, b2, c2) {
      var d2 = a2;
      0 <= b2 && b2 < a2.length && 0 < c2 && (d2 = a2.substr(0, b2) + a2.substr(b2 + c2, a2.length - b2 - c2));
      return d2;
    };
    goog.string.remove = function(a2, b2) {
      return a2.replace(b2, "");
    };
    goog.string.removeAll = function(a2, b2) {
      b2 = new RegExp(goog.string.regExpEscape(b2), "g");
      return a2.replace(b2, "");
    };
    goog.string.replaceAll = function(a2, b2, c2) {
      b2 = new RegExp(goog.string.regExpEscape(b2), "g");
      return a2.replace(b2, c2.replace(/\$/g, "$$$$"));
    };
    goog.string.regExpEscape = function(a2) {
      return String(a2).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    };
    goog.string.repeat = String.prototype.repeat ? function(a2, b2) {
      return a2.repeat(b2);
    } : function(a2, b2) {
      return Array(b2 + 1).join(a2);
    };
    goog.string.padNumber = function(a2, b2, c2) {
      a2 = goog.isDef(c2) ? a2.toFixed(c2) : String(a2);
      c2 = a2.indexOf(".");
      c2 == -1 && (c2 = a2.length);
      return goog.string.repeat("0", Math.max(0, b2 - c2)) + a2;
    };
    goog.string.makeSafe = function(a2) {
      return a2 == null ? "" : String(a2);
    };
    goog.string.buildString = function(a2) {
      return Array.prototype.join.call(arguments, "");
    };
    goog.string.getRandomString = function() {
      return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
    };
    goog.string.compareVersions = goog.string.internal.compareVersions;
    goog.string.hashCode = function(a2) {
      for (var b2 = 0, c2 = 0; c2 < a2.length; ++c2)
        b2 = 31 * b2 + a2.charCodeAt(c2) >>> 0;
      return b2;
    };
    goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
    goog.string.createUniqueString = function() {
      return "goog_" + goog.string.uniqueStringCounter_++;
    };
    goog.string.toNumber = function(a2) {
      var b2 = Number(a2);
      return b2 == 0 && goog.string.isEmptyOrWhitespace(a2) ? NaN : b2;
    };
    goog.string.isLowerCamelCase = function(a2) {
      return /^[a-z]+([A-Z][a-z]*)*$/.test(a2);
    };
    goog.string.isUpperCamelCase = function(a2) {
      return /^([A-Z][a-z]*)+$/.test(a2);
    };
    goog.string.toCamelCase = function(a2) {
      return String(a2).replace(/\-([a-z])/g, function(a3, c2) {
        return c2.toUpperCase();
      });
    };
    goog.string.toSelectorCase = function(a2) {
      return String(a2).replace(/([A-Z])/g, "-$1").toLowerCase();
    };
    goog.string.toTitleCase = function(a2, b2) {
      b2 = goog.isString(b2) ? goog.string.regExpEscape(b2) : "\\s";
      return a2.replace(new RegExp("(^" + (b2 ? "|[" + b2 + "]+" : "") + ")([a-z])", "g"), function(a3, b3, e2) {
        return b3 + e2.toUpperCase();
      });
    };
    goog.string.capitalize = function(a2) {
      return String(a2.charAt(0)).toUpperCase() + String(a2.substr(1)).toLowerCase();
    };
    goog.string.parseInt = function(a2) {
      isFinite(a2) && (a2 = String(a2));
      return goog.isString(a2) ? /^\s*-?0x/i.test(a2) ? parseInt(a2, 16) : parseInt(a2, 10) : NaN;
    };
    goog.string.splitLimit = function(a2, b2, c2) {
      a2 = a2.split(b2);
      for (var d2 = []; 0 < c2 && a2.length; )
        d2.push(a2.shift()), c2--;
      a2.length && d2.push(a2.join(b2));
      return d2;
    };
    goog.string.lastComponent = function(a2, b2) {
      if (b2)
        typeof b2 == "string" && (b2 = [b2]);
      else
        return a2;
      for (var c2 = -1, d2 = 0; d2 < b2.length; d2++)
        if (b2[d2] != "") {
          var e2 = a2.lastIndexOf(b2[d2]);
          e2 > c2 && (c2 = e2);
        }
      return c2 == -1 ? a2 : a2.slice(c2 + 1);
    };
    goog.string.editDistance = function(a2, b2) {
      var c2 = [], d2 = [];
      if (a2 == b2)
        return 0;
      if (!a2.length || !b2.length)
        return Math.max(a2.length, b2.length);
      for (var e2 = 0; e2 < b2.length + 1; e2++)
        c2[e2] = e2;
      for (e2 = 0; e2 < a2.length; e2++) {
        d2[0] = e2 + 1;
        for (var f2 = 0; f2 < b2.length; f2++)
          d2[f2 + 1] = Math.min(d2[f2] + 1, c2[f2 + 1] + 1, c2[f2] + Number(a2[e2] != b2[f2]));
        for (f2 = 0; f2 < c2.length; f2++)
          c2[f2] = d2[f2];
      }
      return d2[b2.length];
    };
    goog.labs.userAgent.engine = {};
    goog.labs.userAgent.engine.isPresto = function() {
      return goog.labs.userAgent.util.matchUserAgent("Presto");
    };
    goog.labs.userAgent.engine.isTrident = function() {
      return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
    };
    goog.labs.userAgent.engine.isEdge = function() {
      return goog.labs.userAgent.util.matchUserAgent("Edge");
    };
    goog.labs.userAgent.engine.isWebKit = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
    };
    goog.labs.userAgent.engine.isGecko = function() {
      return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
    };
    goog.labs.userAgent.engine.getVersion = function() {
      var a2 = goog.labs.userAgent.util.getUserAgent();
      if (a2) {
        a2 = goog.labs.userAgent.util.extractVersionTuples(a2);
        var b2 = goog.labs.userAgent.engine.getEngineTuple_(a2);
        if (b2)
          return b2[0] == "Gecko" ? goog.labs.userAgent.engine.getVersionForKey_(a2, "Firefox") : b2[1];
        a2 = a2[0];
        var c2;
        if (a2 && (c2 = a2[2]) && (c2 = /Trident\/([^\s;]+)/.exec(c2)))
          return c2[1];
      }
      return "";
    };
    goog.labs.userAgent.engine.getEngineTuple_ = function(a2) {
      if (!goog.labs.userAgent.engine.isEdge())
        return a2[1];
      for (var b2 = 0; b2 < a2.length; b2++) {
        var c2 = a2[b2];
        if (c2[0] == "Edge")
          return c2;
      }
    };
    goog.labs.userAgent.engine.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), a2);
    };
    goog.labs.userAgent.engine.getVersionForKey_ = function(a2, b2) {
      return (a2 = goog.array.find(a2, function(a3) {
        return b2 == a3[0];
      })) && a2[1] || "";
    };
    goog.labs.userAgent.platform = {};
    goog.labs.userAgent.platform.isAndroid = function() {
      return goog.labs.userAgent.util.matchUserAgent("Android");
    };
    goog.labs.userAgent.platform.isIpod = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPod");
    };
    goog.labs.userAgent.platform.isIphone = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
    };
    goog.labs.userAgent.platform.isIpad = function() {
      return goog.labs.userAgent.util.matchUserAgent("iPad");
    };
    goog.labs.userAgent.platform.isIos = function() {
      return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
    };
    goog.labs.userAgent.platform.isMacintosh = function() {
      return goog.labs.userAgent.util.matchUserAgent("Macintosh");
    };
    goog.labs.userAgent.platform.isLinux = function() {
      return goog.labs.userAgent.util.matchUserAgent("Linux");
    };
    goog.labs.userAgent.platform.isWindows = function() {
      return goog.labs.userAgent.util.matchUserAgent("Windows");
    };
    goog.labs.userAgent.platform.isChromeOS = function() {
      return goog.labs.userAgent.util.matchUserAgent("CrOS");
    };
    goog.labs.userAgent.platform.isChromecast = function() {
      return goog.labs.userAgent.util.matchUserAgent("CrKey");
    };
    goog.labs.userAgent.platform.isKaiOS = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS");
    };
    goog.labs.userAgent.platform.isGo2Phone = function() {
      return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP");
    };
    goog.labs.userAgent.platform.getVersion = function() {
      var a2 = goog.labs.userAgent.util.getUserAgent(), b2 = "";
      goog.labs.userAgent.platform.isWindows() ? (b2 = /Windows (?:NT|Phone) ([0-9.]+)/, b2 = (a2 = b2.exec(a2)) ? a2[1] : "0.0") : goog.labs.userAgent.platform.isIos() ? (b2 = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/, b2 = (a2 = b2.exec(a2)) && a2[1].replace(/_/g, ".")) : goog.labs.userAgent.platform.isMacintosh() ? (b2 = /Mac OS X ([0-9_.]+)/, b2 = (a2 = b2.exec(a2)) ? a2[1].replace(/_/g, ".") : "10") : goog.labs.userAgent.platform.isKaiOS() ? (b2 = /(?:KaiOS)\/(\S+)/i, b2 = (a2 = b2.exec(a2)) && a2[1]) : goog.labs.userAgent.platform.isAndroid() ? (b2 = /Android\s+([^\);]+)(\)|;)/, b2 = (a2 = b2.exec(a2)) && a2[1]) : goog.labs.userAgent.platform.isChromeOS() && (b2 = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/, b2 = (a2 = b2.exec(a2)) && a2[1]);
      return b2 || "";
    };
    goog.labs.userAgent.platform.isVersionOrHigher = function(a2) {
      return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), a2);
    };
    goog.reflect = {};
    goog.reflect.object = function(a2, b2) {
      return b2;
    };
    goog.reflect.objectProperty = function(a2, b2) {
      return a2;
    };
    goog.reflect.sinkValue = function(a2) {
      goog.reflect.sinkValue[" "](a2);
      return a2;
    };
    goog.reflect.sinkValue[" "] = goog.nullFunction;
    goog.reflect.canAccessProperty = function(a2, b2) {
      try {
        return goog.reflect.sinkValue(a2[b2]), true;
      } catch (c2) {
      }
      return false;
    };
    goog.reflect.cache = function(a2, b2, c2, d2) {
      d2 = d2 ? d2(b2) : b2;
      return Object.prototype.hasOwnProperty.call(a2, d2) ? a2[d2] : a2[d2] = c2(b2);
    };
    goog.userAgent = {};
    goog.userAgent.ASSUME_IE = false;
    goog.userAgent.ASSUME_EDGE = false;
    goog.userAgent.ASSUME_GECKO = false;
    goog.userAgent.ASSUME_WEBKIT = false;
    goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
    goog.userAgent.ASSUME_OPERA = false;
    goog.userAgent.ASSUME_ANY_VERSION = false;
    goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
    goog.userAgent.getUserAgentString = function() {
      return goog.labs.userAgent.util.getUserAgent();
    };
    goog.userAgent.getNavigatorTyped = function() {
      return goog.global.navigator || null;
    };
    goog.userAgent.getNavigator = function() {
      return goog.userAgent.getNavigatorTyped();
    };
    goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
    goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
    goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
    goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
    goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
    goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
    goog.userAgent.isMobile_ = function() {
      return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
    };
    goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
    goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
    goog.userAgent.determinePlatform_ = function() {
      var a2 = goog.userAgent.getNavigatorTyped();
      return a2 && a2.platform || "";
    };
    goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
    goog.userAgent.ASSUME_MAC = false;
    goog.userAgent.ASSUME_WINDOWS = false;
    goog.userAgent.ASSUME_LINUX = false;
    goog.userAgent.ASSUME_X11 = false;
    goog.userAgent.ASSUME_ANDROID = false;
    goog.userAgent.ASSUME_IPHONE = false;
    goog.userAgent.ASSUME_IPAD = false;
    goog.userAgent.ASSUME_IPOD = false;
    goog.userAgent.ASSUME_KAIOS = false;
    goog.userAgent.ASSUME_GO2PHONE = false;
    goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
    goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
    goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
    goog.userAgent.isLegacyLinux_ = function() {
      return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
    };
    goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
    goog.userAgent.isX11_ = function() {
      var a2 = goog.userAgent.getNavigatorTyped();
      return !!a2 && goog.string.contains(a2.appVersion || "", "X11");
    };
    goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
    goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
    goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
    goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
    goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
    goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
    goog.userAgent.KAIOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_KAIOS : goog.labs.userAgent.platform.isKaiOS();
    goog.userAgent.GO2PHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_GO2PHONE : goog.labs.userAgent.platform.isGo2Phone();
    goog.userAgent.determineVersion_ = function() {
      var a2 = "", b2 = goog.userAgent.getVersionRegexResult_();
      b2 && (a2 = b2 ? b2[1] : "");
      return goog.userAgent.IE && (b2 = goog.userAgent.getDocumentMode_(), b2 != null && b2 > parseFloat(a2)) ? String(b2) : a2;
    };
    goog.userAgent.getVersionRegexResult_ = function() {
      var a2 = goog.userAgent.getUserAgentString();
      if (goog.userAgent.GECKO)
        return /rv:([^\);]+)(\)|;)/.exec(a2);
      if (goog.userAgent.EDGE)
        return /Edge\/([\d\.]+)/.exec(a2);
      if (goog.userAgent.IE)
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a2);
      if (goog.userAgent.WEBKIT)
        return /WebKit\/(\S+)/.exec(a2);
      if (goog.userAgent.OPERA)
        return /(?:Version)[ \/]?(\S+)/.exec(a2);
    };
    goog.userAgent.getDocumentMode_ = function() {
      var a2 = goog.global.document;
      return a2 ? a2.documentMode : void 0;
    };
    goog.userAgent.VERSION = goog.userAgent.determineVersion_();
    goog.userAgent.compare = function(a2, b2) {
      return goog.string.compareVersions(a2, b2);
    };
    goog.userAgent.isVersionOrHigherCache_ = {};
    goog.userAgent.isVersionOrHigher = function(a2) {
      return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, a2, function() {
        return 0 <= goog.string.compareVersions(goog.userAgent.VERSION, a2);
      });
    };
    goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
    goog.userAgent.isDocumentModeOrHigher = function(a2) {
      return Number(goog.userAgent.DOCUMENT_MODE) >= a2;
    };
    goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
    goog.userAgent.DOCUMENT_MODE = function() {
      if (goog.global.document && goog.userAgent.IE)
        return goog.userAgent.getDocumentMode_();
    }();
    goog.userAgent.product = {};
    goog.userAgent.product.ASSUME_FIREFOX = false;
    goog.userAgent.product.ASSUME_IPHONE = false;
    goog.userAgent.product.ASSUME_IPAD = false;
    goog.userAgent.product.ASSUME_ANDROID = false;
    goog.userAgent.product.ASSUME_CHROME = false;
    goog.userAgent.product.ASSUME_SAFARI = false;
    goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
    goog.userAgent.product.OPERA = goog.userAgent.OPERA;
    goog.userAgent.product.IE = goog.userAgent.IE;
    goog.userAgent.product.EDGE = goog.userAgent.EDGE;
    goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
    goog.userAgent.product.isIphoneOrIpod_ = function() {
      return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
    };
    goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
    goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
    goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
    goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
    goog.userAgent.product.isSafariDesktop_ = function() {
      return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
    };
    goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
    goog.crypt.base64 = {};
    goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "+/=";
    goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "-_.";
    goog.crypt.base64.Alphabet = { DEFAULT: 0, NO_PADDING: 1, WEBSAFE: 2, WEBSAFE_DOT_PADDING: 3, WEBSAFE_NO_PADDING: 4 };
    goog.crypt.base64.paddingChars_ = "=.";
    goog.crypt.base64.isPadding_ = function(a2) {
      return goog.string.contains(goog.crypt.base64.paddingChars_, a2);
    };
    goog.crypt.base64.byteToCharMaps_ = {};
    goog.crypt.base64.charToByteMap_ = null;
    goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
    goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || typeof goog.global.btoa == "function";
    goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && typeof goog.global.atob == "function";
    goog.crypt.base64.encodeByteArray = function(a2, b2) {
      goog.asserts.assert(goog.isArrayLike(a2), "encodeByteArray takes an array as a parameter");
      b2 === void 0 && (b2 = goog.crypt.base64.Alphabet.DEFAULT);
      goog.crypt.base64.init_();
      b2 = goog.crypt.base64.byteToCharMaps_[b2];
      for (var c2 = [], d2 = 0; d2 < a2.length; d2 += 3) {
        var e2 = a2[d2], f2 = d2 + 1 < a2.length, g = f2 ? a2[d2 + 1] : 0, h = d2 + 2 < a2.length, k = h ? a2[d2 + 2] : 0, l = e2 >> 2;
        e2 = (e2 & 3) << 4 | g >> 4;
        g = (g & 15) << 2 | k >> 6;
        k &= 63;
        h || (k = 64, f2 || (g = 64));
        c2.push(b2[l], b2[e2], b2[g] || "", b2[k] || "");
      }
      return c2.join("");
    };
    goog.crypt.base64.encodeString = function(a2, b2) {
      return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !b2 ? goog.global.btoa(a2) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a2), b2);
    };
    goog.crypt.base64.decodeString = function(a2, b2) {
      if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !b2)
        return goog.global.atob(a2);
      var c2 = "";
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        c2 += String.fromCharCode(a3);
      });
      return c2;
    };
    goog.crypt.base64.decodeStringToByteArray = function(a2, b2) {
      var c2 = [];
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        c2.push(a3);
      });
      return c2;
    };
    goog.crypt.base64.decodeStringToUint8Array = function(a2) {
      goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
      var b2 = a2.length, c2 = 3 * b2 / 4;
      c2 % 3 ? c2 = Math.floor(c2) : goog.crypt.base64.isPadding_(a2[b2 - 1]) && (c2 = goog.crypt.base64.isPadding_(a2[b2 - 2]) ? c2 - 2 : c2 - 1);
      var d2 = new Uint8Array(c2), e2 = 0;
      goog.crypt.base64.decodeStringInternal_(a2, function(a3) {
        d2[e2++] = a3;
      });
      return d2.subarray(0, e2);
    };
    goog.crypt.base64.decodeStringInternal_ = function(a2, b2) {
      function c2(b3) {
        for (; d2 < a2.length; ) {
          var c3 = a2.charAt(d2++), e3 = goog.crypt.base64.charToByteMap_[c3];
          if (e3 != null)
            return e3;
          if (!goog.string.isEmptyOrWhitespace(c3))
            throw Error("Unknown base64 encoding at char: " + c3);
        }
        return b3;
      }
      goog.crypt.base64.init_();
      for (var d2 = 0; ; ) {
        var e2 = c2(-1), f2 = c2(0), g = c2(64), h = c2(64);
        if (h === 64 && e2 === -1)
          break;
        b2(e2 << 2 | f2 >> 4);
        g != 64 && (b2(f2 << 4 & 240 | g >> 2), h != 64 && b2(g << 6 & 192 | h));
      }
    };
    goog.crypt.base64.init_ = function() {
      if (!goog.crypt.base64.charToByteMap_) {
        goog.crypt.base64.charToByteMap_ = {};
        for (var a2 = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""), b2 = ["+/=", "+/", "-_=", "-_.", "-_"], c2 = 0; 5 > c2; c2++) {
          var d2 = a2.concat(b2[c2].split(""));
          goog.crypt.base64.byteToCharMaps_[c2] = d2;
          for (var e2 = 0; e2 < d2.length; e2++) {
            var f2 = d2[e2], g = goog.crypt.base64.charToByteMap_[f2];
            g === void 0 ? goog.crypt.base64.charToByteMap_[f2] = e2 : goog.asserts.assert(g === e2);
          }
        }
      }
    };
    jspb.utils = {};
    jspb.utils.split64Low = 0;
    jspb.utils.split64High = 0;
    jspb.utils.splitUint64 = function(a2) {
      var b2 = a2 >>> 0;
      a2 = Math.floor((a2 - b2) / jspb.BinaryConstants.TWO_TO_32) >>> 0;
      jspb.utils.split64Low = b2;
      jspb.utils.split64High = a2;
    };
    jspb.utils.splitInt64 = function(a2) {
      var b2 = 0 > a2;
      a2 = Math.abs(a2);
      var c2 = a2 >>> 0;
      a2 = Math.floor((a2 - c2) / jspb.BinaryConstants.TWO_TO_32);
      a2 >>>= 0;
      b2 && (a2 = ~a2 >>> 0, c2 = (~c2 >>> 0) + 1, 4294967295 < c2 && (c2 = 0, a2++, 4294967295 < a2 && (a2 = 0)));
      jspb.utils.split64Low = c2;
      jspb.utils.split64High = a2;
    };
    jspb.utils.splitZigzag64 = function(a2) {
      var b2 = 0 > a2;
      a2 = 2 * Math.abs(a2);
      jspb.utils.splitUint64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      b2 && (a2 == 0 ? c2 == 0 ? c2 = a2 = 4294967295 : (c2--, a2 = 4294967295) : a2--);
      jspb.utils.split64Low = a2;
      jspb.utils.split64High = c2;
    };
    jspb.utils.splitFloat32 = function(a2) {
      var b2 = 0 > a2 ? 1 : 0;
      a2 = b2 ? -a2 : a2;
      if (a2 === 0)
        0 < 1 / a2 ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483648);
      else if (isNaN(a2))
        jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647;
      else if (a2 > jspb.BinaryConstants.FLOAT32_MAX)
        jspb.utils.split64High = 0, jspb.utils.split64Low = (b2 << 31 | 2139095040) >>> 0;
      else if (a2 < jspb.BinaryConstants.FLOAT32_MIN)
        a2 = Math.round(a2 / Math.pow(2, -149)), jspb.utils.split64High = 0, jspb.utils.split64Low = (b2 << 31 | a2) >>> 0;
      else {
        var c2 = Math.floor(Math.log(a2) / Math.LN2);
        a2 *= Math.pow(2, -c2);
        a2 = Math.round(a2 * jspb.BinaryConstants.TWO_TO_23);
        16777216 <= a2 && ++c2;
        jspb.utils.split64High = 0;
        jspb.utils.split64Low = (b2 << 31 | c2 + 127 << 23 | a2 & 8388607) >>> 0;
      }
    };
    jspb.utils.splitFloat64 = function(a2) {
      var b2 = 0 > a2 ? 1 : 0;
      a2 = b2 ? -a2 : a2;
      if (a2 === 0)
        jspb.utils.split64High = 0 < 1 / a2 ? 0 : 2147483648, jspb.utils.split64Low = 0;
      else if (isNaN(a2))
        jspb.utils.split64High = 2147483647, jspb.utils.split64Low = 4294967295;
      else if (a2 > jspb.BinaryConstants.FLOAT64_MAX)
        jspb.utils.split64High = (b2 << 31 | 2146435072) >>> 0, jspb.utils.split64Low = 0;
      else if (a2 < jspb.BinaryConstants.FLOAT64_MIN) {
        var c2 = a2 / Math.pow(2, -1074);
        a2 = c2 / jspb.BinaryConstants.TWO_TO_32;
        jspb.utils.split64High = (b2 << 31 | a2) >>> 0;
        jspb.utils.split64Low = c2 >>> 0;
      } else {
        c2 = a2;
        var d2 = 0;
        if (2 <= c2)
          for (; 2 <= c2 && 1023 > d2; )
            d2++, c2 /= 2;
        else
          for (; 1 > c2 && -1022 < d2; )
            c2 *= 2, d2--;
        c2 = a2 * Math.pow(2, -d2);
        a2 = c2 * jspb.BinaryConstants.TWO_TO_20 & 1048575;
        c2 = c2 * jspb.BinaryConstants.TWO_TO_52 >>> 0;
        jspb.utils.split64High = (b2 << 31 | d2 + 1023 << 20 | a2) >>> 0;
        jspb.utils.split64Low = c2;
      }
    };
    jspb.utils.splitHash64 = function(a2) {
      var b2 = a2.charCodeAt(0), c2 = a2.charCodeAt(1), d2 = a2.charCodeAt(2), e2 = a2.charCodeAt(3), f2 = a2.charCodeAt(4), g = a2.charCodeAt(5), h = a2.charCodeAt(6);
      a2 = a2.charCodeAt(7);
      jspb.utils.split64Low = b2 + (c2 << 8) + (d2 << 16) + (e2 << 24) >>> 0;
      jspb.utils.split64High = f2 + (g << 8) + (h << 16) + (a2 << 24) >>> 0;
    };
    jspb.utils.joinUint64 = function(a2, b2) {
      return b2 * jspb.BinaryConstants.TWO_TO_32 + (a2 >>> 0);
    };
    jspb.utils.joinInt64 = function(a2, b2) {
      var c2 = b2 & 2147483648;
      c2 && (a2 = ~a2 + 1 >>> 0, b2 = ~b2 >>> 0, a2 == 0 && (b2 = b2 + 1 >>> 0));
      a2 = jspb.utils.joinUint64(a2, b2);
      return c2 ? -a2 : a2;
    };
    jspb.utils.toZigzag64 = function(a2, b2, c2) {
      var d2 = b2 >> 31;
      return c2(a2 << 1 ^ d2, (b2 << 1 | a2 >>> 31) ^ d2);
    };
    jspb.utils.joinZigzag64 = function(a2, b2) {
      return jspb.utils.fromZigzag64(a2, b2, jspb.utils.joinInt64);
    };
    jspb.utils.fromZigzag64 = function(a2, b2, c2) {
      var d2 = -(a2 & 1);
      return c2((a2 >>> 1 | b2 << 31) ^ d2, b2 >>> 1 ^ d2);
    };
    jspb.utils.joinFloat32 = function(a2, b2) {
      b2 = 2 * (a2 >> 31) + 1;
      var c2 = a2 >>> 23 & 255;
      a2 &= 8388607;
      return c2 == 255 ? a2 ? NaN : Infinity * b2 : c2 == 0 ? b2 * Math.pow(2, -149) * a2 : b2 * Math.pow(2, c2 - 150) * (a2 + Math.pow(2, 23));
    };
    jspb.utils.joinFloat64 = function(a2, b2) {
      var c2 = 2 * (b2 >> 31) + 1, d2 = b2 >>> 20 & 2047;
      a2 = jspb.BinaryConstants.TWO_TO_32 * (b2 & 1048575) + a2;
      return d2 == 2047 ? a2 ? NaN : Infinity * c2 : d2 == 0 ? c2 * Math.pow(2, -1074) * a2 : c2 * Math.pow(2, d2 - 1075) * (a2 + jspb.BinaryConstants.TWO_TO_52);
    };
    jspb.utils.joinHash64 = function(a2, b2) {
      return String.fromCharCode(a2 >>> 0 & 255, a2 >>> 8 & 255, a2 >>> 16 & 255, a2 >>> 24 & 255, b2 >>> 0 & 255, b2 >>> 8 & 255, b2 >>> 16 & 255, b2 >>> 24 & 255);
    };
    jspb.utils.DIGITS = "0123456789abcdef".split("");
    jspb.utils.ZERO_CHAR_CODE_ = 48;
    jspb.utils.A_CHAR_CODE_ = 97;
    jspb.utils.joinUnsignedDecimalString = function(a2, b2) {
      function c2(a3, b3) {
        a3 = a3 ? String(a3) : "";
        return b3 ? "0000000".slice(a3.length) + a3 : a3;
      }
      if (2097151 >= b2)
        return "" + jspb.utils.joinUint64(a2, b2);
      var d2 = (a2 >>> 24 | b2 << 8) >>> 0 & 16777215;
      b2 = b2 >> 16 & 65535;
      a2 = (a2 & 16777215) + 6777216 * d2 + 6710656 * b2;
      d2 += 8147497 * b2;
      b2 *= 2;
      1e7 <= a2 && (d2 += Math.floor(a2 / 1e7), a2 %= 1e7);
      1e7 <= d2 && (b2 += Math.floor(d2 / 1e7), d2 %= 1e7);
      return c2(b2, 0) + c2(d2, b2) + c2(a2, 1);
    };
    jspb.utils.joinSignedDecimalString = function(a2, b2) {
      var c2 = b2 & 2147483648;
      c2 && (a2 = ~a2 + 1 >>> 0, b2 = ~b2 + (a2 == 0 ? 1 : 0) >>> 0);
      a2 = jspb.utils.joinUnsignedDecimalString(a2, b2);
      return c2 ? "-" + a2 : a2;
    };
    jspb.utils.hash64ToDecimalString = function(a2, b2) {
      jspb.utils.splitHash64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      return b2 ? jspb.utils.joinSignedDecimalString(a2, c2) : jspb.utils.joinUnsignedDecimalString(a2, c2);
    };
    jspb.utils.hash64ArrayToDecimalStrings = function(a2, b2) {
      for (var c2 = Array(a2.length), d2 = 0; d2 < a2.length; d2++)
        c2[d2] = jspb.utils.hash64ToDecimalString(a2[d2], b2);
      return c2;
    };
    jspb.utils.decimalStringToHash64 = function(a2) {
      function b2(a3, b3) {
        for (var c3 = 0; 8 > c3 && (a3 !== 1 || 0 < b3); c3++)
          b3 = a3 * e2[c3] + b3, e2[c3] = b3 & 255, b3 >>>= 8;
      }
      function c2() {
        for (var a3 = 0; 8 > a3; a3++)
          e2[a3] = ~e2[a3] & 255;
      }
      goog.asserts.assert(0 < a2.length);
      var d2 = false;
      a2[0] === "-" && (d2 = true, a2 = a2.slice(1));
      for (var e2 = [0, 0, 0, 0, 0, 0, 0, 0], f2 = 0; f2 < a2.length; f2++)
        b2(10, a2.charCodeAt(f2) - jspb.utils.ZERO_CHAR_CODE_);
      d2 && (c2(), b2(1, 1));
      return goog.crypt.byteArrayToString(e2);
    };
    jspb.utils.splitDecimalString = function(a2) {
      jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a2));
    };
    jspb.utils.toHexDigit_ = function(a2) {
      return String.fromCharCode(10 > a2 ? jspb.utils.ZERO_CHAR_CODE_ + a2 : jspb.utils.A_CHAR_CODE_ - 10 + a2);
    };
    jspb.utils.fromHexCharCode_ = function(a2) {
      return a2 >= jspb.utils.A_CHAR_CODE_ ? a2 - jspb.utils.A_CHAR_CODE_ + 10 : a2 - jspb.utils.ZERO_CHAR_CODE_;
    };
    jspb.utils.hash64ToHexString = function(a2) {
      var b2 = Array(18);
      b2[0] = "0";
      b2[1] = "x";
      for (var c2 = 0; 8 > c2; c2++) {
        var d2 = a2.charCodeAt(7 - c2);
        b2[2 * c2 + 2] = jspb.utils.toHexDigit_(d2 >> 4);
        b2[2 * c2 + 3] = jspb.utils.toHexDigit_(d2 & 15);
      }
      return b2.join("");
    };
    jspb.utils.hexStringToHash64 = function(a2) {
      a2 = a2.toLowerCase();
      goog.asserts.assert(a2.length == 18);
      goog.asserts.assert(a2[0] == "0");
      goog.asserts.assert(a2[1] == "x");
      for (var b2 = "", c2 = 0; 8 > c2; c2++) {
        var d2 = jspb.utils.fromHexCharCode_(a2.charCodeAt(2 * c2 + 2)), e2 = jspb.utils.fromHexCharCode_(a2.charCodeAt(2 * c2 + 3));
        b2 = String.fromCharCode(16 * d2 + e2) + b2;
      }
      return b2;
    };
    jspb.utils.hash64ToNumber = function(a2, b2) {
      jspb.utils.splitHash64(a2);
      a2 = jspb.utils.split64Low;
      var c2 = jspb.utils.split64High;
      return b2 ? jspb.utils.joinInt64(a2, c2) : jspb.utils.joinUint64(a2, c2);
    };
    jspb.utils.numberToHash64 = function(a2) {
      jspb.utils.splitInt64(a2);
      return jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.utils.countVarints = function(a2, b2, c2) {
      for (var d2 = 0, e2 = b2; e2 < c2; e2++)
        d2 += a2[e2] >> 7;
      return c2 - b2 - d2;
    };
    jspb.utils.countVarintFields = function(a2, b2, c2, d2) {
      var e2 = 0;
      d2 = 8 * d2 + jspb.BinaryConstants.WireType.VARINT;
      if (128 > d2)
        for (; b2 < c2 && a2[b2++] == d2; )
          for (e2++; ; ) {
            var f2 = a2[b2++];
            if ((f2 & 128) == 0)
              break;
          }
      else
        for (; b2 < c2; ) {
          for (f2 = d2; 128 < f2; ) {
            if (a2[b2] != (f2 & 127 | 128))
              return e2;
            b2++;
            f2 >>= 7;
          }
          if (a2[b2++] != f2)
            break;
          for (e2++; f2 = a2[b2++], (f2 & 128) != 0; )
            ;
        }
      return e2;
    };
    jspb.utils.countFixedFields_ = function(a2, b2, c2, d2, e2) {
      var f2 = 0;
      if (128 > d2)
        for (; b2 < c2 && a2[b2++] == d2; )
          f2++, b2 += e2;
      else
        for (; b2 < c2; ) {
          for (var g = d2; 128 < g; ) {
            if (a2[b2++] != (g & 127 | 128))
              return f2;
            g >>= 7;
          }
          if (a2[b2++] != g)
            break;
          f2++;
          b2 += e2;
        }
      return f2;
    };
    jspb.utils.countFixed32Fields = function(a2, b2, c2, d2) {
      return jspb.utils.countFixedFields_(a2, b2, c2, 8 * d2 + jspb.BinaryConstants.WireType.FIXED32, 4);
    };
    jspb.utils.countFixed64Fields = function(a2, b2, c2, d2) {
      return jspb.utils.countFixedFields_(a2, b2, c2, 8 * d2 + jspb.BinaryConstants.WireType.FIXED64, 8);
    };
    jspb.utils.countDelimitedFields = function(a2, b2, c2, d2) {
      var e2 = 0;
      for (d2 = 8 * d2 + jspb.BinaryConstants.WireType.DELIMITED; b2 < c2; ) {
        for (var f2 = d2; 128 < f2; ) {
          if (a2[b2++] != (f2 & 127 | 128))
            return e2;
          f2 >>= 7;
        }
        if (a2[b2++] != f2)
          break;
        e2++;
        for (var g = 0, h = 1; f2 = a2[b2++], g += (f2 & 127) * h, h *= 128, (f2 & 128) != 0; )
          ;
        b2 += g;
      }
      return e2;
    };
    jspb.utils.debugBytesToTextFormat = function(a2) {
      var b2 = '"';
      if (a2) {
        a2 = jspb.utils.byteSourceToUint8Array(a2);
        for (var c2 = 0; c2 < a2.length; c2++)
          b2 += "\\x", 16 > a2[c2] && (b2 += "0"), b2 += a2[c2].toString(16);
      }
      return b2 + '"';
    };
    jspb.utils.debugScalarToTextFormat = function(a2) {
      return typeof a2 === "string" ? goog.string.quote(a2) : a2.toString();
    };
    jspb.utils.stringToByteArray = function(a2) {
      for (var b2 = new Uint8Array(a2.length), c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charCodeAt(c2);
        if (255 < d2)
          throw Error("Conversion error: string contains codepoint outside of byte range");
        b2[c2] = d2;
      }
      return b2;
    };
    jspb.utils.byteSourceToUint8Array = function(a2) {
      if (a2.constructor === Uint8Array)
        return a2;
      if (a2.constructor === ArrayBuffer || typeof Buffer != "undefined" && a2.constructor === Buffer || a2.constructor === Array)
        return new Uint8Array(a2);
      if (a2.constructor === String)
        return goog.crypt.base64.decodeStringToUint8Array(a2);
      goog.asserts.fail("Type not convertible to Uint8Array.");
      return new Uint8Array(0);
    };
    jspb.BinaryDecoder = function(a2, b2, c2) {
      this.bytes_ = null;
      this.cursor_ = this.end_ = this.start_ = 0;
      this.error_ = false;
      a2 && this.setBlock(a2, b2, c2);
    };
    jspb.BinaryDecoder.instanceCache_ = [];
    jspb.BinaryDecoder.alloc = function(a2, b2, c2) {
      if (jspb.BinaryDecoder.instanceCache_.length) {
        var d2 = jspb.BinaryDecoder.instanceCache_.pop();
        a2 && d2.setBlock(a2, b2, c2);
        return d2;
      }
      return new jspb.BinaryDecoder(a2, b2, c2);
    };
    jspb.BinaryDecoder.prototype.free = function() {
      this.clear();
      100 > jspb.BinaryDecoder.instanceCache_.length && jspb.BinaryDecoder.instanceCache_.push(this);
    };
    jspb.BinaryDecoder.prototype.clone = function() {
      return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
    };
    jspb.BinaryDecoder.prototype.clear = function() {
      this.bytes_ = null;
      this.cursor_ = this.end_ = this.start_ = 0;
      this.error_ = false;
    };
    jspb.BinaryDecoder.prototype.getBuffer = function() {
      return this.bytes_;
    };
    jspb.BinaryDecoder.prototype.setBlock = function(a2, b2, c2) {
      this.bytes_ = jspb.utils.byteSourceToUint8Array(a2);
      this.start_ = b2 !== void 0 ? b2 : 0;
      this.end_ = c2 !== void 0 ? this.start_ + c2 : this.bytes_.length;
      this.cursor_ = this.start_;
    };
    jspb.BinaryDecoder.prototype.getEnd = function() {
      return this.end_;
    };
    jspb.BinaryDecoder.prototype.setEnd = function(a2) {
      this.end_ = a2;
    };
    jspb.BinaryDecoder.prototype.reset = function() {
      this.cursor_ = this.start_;
    };
    jspb.BinaryDecoder.prototype.getCursor = function() {
      return this.cursor_;
    };
    jspb.BinaryDecoder.prototype.setCursor = function(a2) {
      this.cursor_ = a2;
    };
    jspb.BinaryDecoder.prototype.advance = function(a2) {
      this.cursor_ += a2;
      goog.asserts.assert(this.cursor_ <= this.end_);
    };
    jspb.BinaryDecoder.prototype.atEnd = function() {
      return this.cursor_ == this.end_;
    };
    jspb.BinaryDecoder.prototype.pastEnd = function() {
      return this.cursor_ > this.end_;
    };
    jspb.BinaryDecoder.prototype.getError = function() {
      return this.error_ || 0 > this.cursor_ || this.cursor_ > this.end_;
    };
    jspb.BinaryDecoder.prototype.readSplitVarint64 = function(a2) {
      for (var b2 = 128, c2 = 0, d2 = 0, e2 = 0; 4 > e2 && 128 <= b2; e2++)
        b2 = this.bytes_[this.cursor_++], c2 |= (b2 & 127) << 7 * e2;
      128 <= b2 && (b2 = this.bytes_[this.cursor_++], c2 |= (b2 & 127) << 28, d2 |= (b2 & 127) >> 4);
      if (128 <= b2)
        for (e2 = 0; 5 > e2 && 128 <= b2; e2++)
          b2 = this.bytes_[this.cursor_++], d2 |= (b2 & 127) << 7 * e2 + 3;
      if (128 > b2)
        return a2(c2 >>> 0, d2 >>> 0);
      goog.asserts.fail("Failed to read varint, encoding is invalid.");
      this.error_ = true;
    };
    jspb.BinaryDecoder.prototype.readSplitZigzagVarint64 = function(a2) {
      return this.readSplitVarint64(function(b2, c2) {
        return jspb.utils.fromZigzag64(b2, c2, a2);
      });
    };
    jspb.BinaryDecoder.prototype.readSplitFixed64 = function(a2) {
      var b2 = this.bytes_, c2 = this.cursor_;
      this.cursor_ += 8;
      for (var d2 = 0, e2 = 0, f2 = c2 + 7; f2 >= c2; f2--)
        d2 = d2 << 8 | b2[f2], e2 = e2 << 8 | b2[f2 + 4];
      return a2(d2, e2);
    };
    jspb.BinaryDecoder.prototype.skipVarint = function() {
      for (; this.bytes_[this.cursor_] & 128; )
        this.cursor_++;
      this.cursor_++;
    };
    jspb.BinaryDecoder.prototype.unskipVarint = function(a2) {
      for (; 128 < a2; )
        this.cursor_--, a2 >>>= 7;
      this.cursor_--;
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function() {
      var a2 = this.bytes_;
      var b2 = a2[this.cursor_ + 0];
      var c2 = b2 & 127;
      if (128 > b2)
        return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b2 = a2[this.cursor_ + 1];
      c2 |= (b2 & 127) << 7;
      if (128 > b2)
        return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b2 = a2[this.cursor_ + 2];
      c2 |= (b2 & 127) << 14;
      if (128 > b2)
        return this.cursor_ += 3, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b2 = a2[this.cursor_ + 3];
      c2 |= (b2 & 127) << 21;
      if (128 > b2)
        return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), c2;
      b2 = a2[this.cursor_ + 4];
      c2 |= (b2 & 15) << 28;
      if (128 > b2)
        return this.cursor_ += 5, goog.asserts.assert(this.cursor_ <= this.end_), c2 >>> 0;
      this.cursor_ += 5;
      128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && 128 <= a2[this.cursor_++] && goog.asserts.assert(false);
      goog.asserts.assert(this.cursor_ <= this.end_);
      return c2;
    };
    jspb.BinaryDecoder.prototype.readSignedVarint32 = jspb.BinaryDecoder.prototype.readUnsignedVarint32;
    jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function() {
      return this.readUnsignedVarint32().toString();
    };
    jspb.BinaryDecoder.prototype.readSignedVarint32String = function() {
      return this.readSignedVarint32().toString();
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint32 = function() {
      var a2 = this.readUnsignedVarint32();
      return a2 >>> 1 ^ -(a2 & 1);
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinUint64);
    };
    jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function() {
      return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readSignedVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinInt64);
    };
    jspb.BinaryDecoder.prototype.readSignedVarint64String = function() {
      return this.readSplitVarint64(jspb.utils.joinSignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint64 = function() {
      return this.readSplitVarint64(jspb.utils.joinZigzag64);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarintHash64 = function() {
      return this.readSplitZigzagVarint64(jspb.utils.joinHash64);
    };
    jspb.BinaryDecoder.prototype.readZigzagVarint64String = function() {
      return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString);
    };
    jspb.BinaryDecoder.prototype.readUint8 = function() {
      var a2 = this.bytes_[this.cursor_ + 0];
      this.cursor_ += 1;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2;
    };
    jspb.BinaryDecoder.prototype.readUint16 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b2 = this.bytes_[this.cursor_ + 1];
      this.cursor_ += 2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 0 | b2 << 8;
    };
    jspb.BinaryDecoder.prototype.readUint32 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b2 = this.bytes_[this.cursor_ + 1], c2 = this.bytes_[this.cursor_ + 2], d2 = this.bytes_[this.cursor_ + 3];
      this.cursor_ += 4;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return (a2 << 0 | b2 << 8 | c2 << 16 | d2 << 24) >>> 0;
    };
    jspb.BinaryDecoder.prototype.readUint64 = function() {
      var a2 = this.readUint32(), b2 = this.readUint32();
      return jspb.utils.joinUint64(a2, b2);
    };
    jspb.BinaryDecoder.prototype.readUint64String = function() {
      var a2 = this.readUint32(), b2 = this.readUint32();
      return jspb.utils.joinUnsignedDecimalString(a2, b2);
    };
    jspb.BinaryDecoder.prototype.readInt8 = function() {
      var a2 = this.bytes_[this.cursor_ + 0];
      this.cursor_ += 1;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 24 >> 24;
    };
    jspb.BinaryDecoder.prototype.readInt16 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b2 = this.bytes_[this.cursor_ + 1];
      this.cursor_ += 2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return (a2 << 0 | b2 << 8) << 16 >> 16;
    };
    jspb.BinaryDecoder.prototype.readInt32 = function() {
      var a2 = this.bytes_[this.cursor_ + 0], b2 = this.bytes_[this.cursor_ + 1], c2 = this.bytes_[this.cursor_ + 2], d2 = this.bytes_[this.cursor_ + 3];
      this.cursor_ += 4;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return a2 << 0 | b2 << 8 | c2 << 16 | d2 << 24;
    };
    jspb.BinaryDecoder.prototype.readInt64 = function() {
      var a2 = this.readUint32(), b2 = this.readUint32();
      return jspb.utils.joinInt64(a2, b2);
    };
    jspb.BinaryDecoder.prototype.readInt64String = function() {
      var a2 = this.readUint32(), b2 = this.readUint32();
      return jspb.utils.joinSignedDecimalString(a2, b2);
    };
    jspb.BinaryDecoder.prototype.readFloat = function() {
      var a2 = this.readUint32();
      return jspb.utils.joinFloat32(a2, 0);
    };
    jspb.BinaryDecoder.prototype.readDouble = function() {
      var a2 = this.readUint32(), b2 = this.readUint32();
      return jspb.utils.joinFloat64(a2, b2);
    };
    jspb.BinaryDecoder.prototype.readBool = function() {
      return !!this.bytes_[this.cursor_++];
    };
    jspb.BinaryDecoder.prototype.readEnum = function() {
      return this.readSignedVarint32();
    };
    jspb.BinaryDecoder.prototype.readString = function(a2) {
      var b2 = this.bytes_, c2 = this.cursor_;
      a2 = c2 + a2;
      for (var d2 = [], e2 = ""; c2 < a2; ) {
        var f2 = b2[c2++];
        if (128 > f2)
          d2.push(f2);
        else if (192 > f2)
          continue;
        else if (224 > f2) {
          var g = b2[c2++];
          d2.push((f2 & 31) << 6 | g & 63);
        } else if (240 > f2) {
          g = b2[c2++];
          var h = b2[c2++];
          d2.push((f2 & 15) << 12 | (g & 63) << 6 | h & 63);
        } else if (248 > f2) {
          g = b2[c2++];
          h = b2[c2++];
          var k = b2[c2++];
          f2 = (f2 & 7) << 18 | (g & 63) << 12 | (h & 63) << 6 | k & 63;
          f2 -= 65536;
          d2.push((f2 >> 10 & 1023) + 55296, (f2 & 1023) + 56320);
        }
        8192 <= d2.length && (e2 += String.fromCharCode.apply(null, d2), d2.length = 0);
      }
      e2 += goog.crypt.byteArrayToString(d2);
      this.cursor_ = c2;
      return e2;
    };
    jspb.BinaryDecoder.prototype.readStringWithLength = function() {
      var a2 = this.readUnsignedVarint32();
      return this.readString(a2);
    };
    jspb.BinaryDecoder.prototype.readBytes = function(a2) {
      if (0 > a2 || this.cursor_ + a2 > this.bytes_.length)
        return this.error_ = true, goog.asserts.fail("Invalid byte length!"), new Uint8Array(0);
      var b2 = this.bytes_.subarray(this.cursor_, this.cursor_ + a2);
      this.cursor_ += a2;
      goog.asserts.assert(this.cursor_ <= this.end_);
      return b2;
    };
    jspb.BinaryDecoder.prototype.readVarintHash64 = function() {
      return this.readSplitVarint64(jspb.utils.joinHash64);
    };
    jspb.BinaryDecoder.prototype.readFixedHash64 = function() {
      var a2 = this.bytes_, b2 = this.cursor_, c2 = a2[b2 + 0], d2 = a2[b2 + 1], e2 = a2[b2 + 2], f2 = a2[b2 + 3], g = a2[b2 + 4], h = a2[b2 + 5], k = a2[b2 + 6];
      a2 = a2[b2 + 7];
      this.cursor_ += 8;
      return String.fromCharCode(c2, d2, e2, f2, g, h, k, a2);
    };
    jspb.BinaryReader = function(a2, b2, c2) {
      this.decoder_ = jspb.BinaryDecoder.alloc(a2, b2, c2);
      this.fieldCursor_ = this.decoder_.getCursor();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      this.error_ = false;
      this.readCallbacks_ = null;
    };
    jspb.BinaryReader.instanceCache_ = [];
    jspb.BinaryReader.alloc = function(a2, b2, c2) {
      if (jspb.BinaryReader.instanceCache_.length) {
        var d2 = jspb.BinaryReader.instanceCache_.pop();
        a2 && d2.decoder_.setBlock(a2, b2, c2);
        return d2;
      }
      return new jspb.BinaryReader(a2, b2, c2);
    };
    jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc;
    jspb.BinaryReader.prototype.free = function() {
      this.decoder_.clear();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      this.error_ = false;
      this.readCallbacks_ = null;
      100 > jspb.BinaryReader.instanceCache_.length && jspb.BinaryReader.instanceCache_.push(this);
    };
    jspb.BinaryReader.prototype.getFieldCursor = function() {
      return this.fieldCursor_;
    };
    jspb.BinaryReader.prototype.getCursor = function() {
      return this.decoder_.getCursor();
    };
    jspb.BinaryReader.prototype.getBuffer = function() {
      return this.decoder_.getBuffer();
    };
    jspb.BinaryReader.prototype.getFieldNumber = function() {
      return this.nextField_;
    };
    jspb.BinaryReader.prototype.getWireType = function() {
      return this.nextWireType_;
    };
    jspb.BinaryReader.prototype.isDelimited = function() {
      return this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED;
    };
    jspb.BinaryReader.prototype.isEndGroup = function() {
      return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
    };
    jspb.BinaryReader.prototype.getError = function() {
      return this.error_ || this.decoder_.getError();
    };
    jspb.BinaryReader.prototype.setBlock = function(a2, b2, c2) {
      this.decoder_.setBlock(a2, b2, c2);
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    };
    jspb.BinaryReader.prototype.reset = function() {
      this.decoder_.reset();
      this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
      this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    };
    jspb.BinaryReader.prototype.advance = function(a2) {
      this.decoder_.advance(a2);
    };
    jspb.BinaryReader.prototype.nextField = function() {
      if (this.decoder_.atEnd())
        return false;
      if (this.getError())
        return goog.asserts.fail("Decoder hit an error"), false;
      this.fieldCursor_ = this.decoder_.getCursor();
      var a2 = this.decoder_.readUnsignedVarint32(), b2 = a2 >>> 3;
      a2 &= 7;
      if (a2 != jspb.BinaryConstants.WireType.VARINT && a2 != jspb.BinaryConstants.WireType.FIXED32 && a2 != jspb.BinaryConstants.WireType.FIXED64 && a2 != jspb.BinaryConstants.WireType.DELIMITED && a2 != jspb.BinaryConstants.WireType.START_GROUP && a2 != jspb.BinaryConstants.WireType.END_GROUP)
        return goog.asserts.fail("Invalid wire type: %s (at position %s)", a2, this.fieldCursor_), this.error_ = true, false;
      this.nextField_ = b2;
      this.nextWireType_ = a2;
      return true;
    };
    jspb.BinaryReader.prototype.unskipHeader = function() {
      this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
    };
    jspb.BinaryReader.prototype.skipMatchingFields = function() {
      var a2 = this.nextField_;
      for (this.unskipHeader(); this.nextField() && this.getFieldNumber() == a2; )
        this.skipField();
      this.decoder_.atEnd() || this.unskipHeader();
    };
    jspb.BinaryReader.prototype.skipVarintField = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (goog.asserts.fail("Invalid wire type for skipVarintField"), this.skipField()) : this.decoder_.skipVarint();
    };
    jspb.BinaryReader.prototype.skipDelimitedField = function() {
      if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED)
        goog.asserts.fail("Invalid wire type for skipDelimitedField"), this.skipField();
      else {
        var a2 = this.decoder_.readUnsignedVarint32();
        this.decoder_.advance(a2);
      }
    };
    jspb.BinaryReader.prototype.skipFixed32Field = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (goog.asserts.fail("Invalid wire type for skipFixed32Field"), this.skipField()) : this.decoder_.advance(4);
    };
    jspb.BinaryReader.prototype.skipFixed64Field = function() {
      this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (goog.asserts.fail("Invalid wire type for skipFixed64Field"), this.skipField()) : this.decoder_.advance(8);
    };
    jspb.BinaryReader.prototype.skipGroup = function() {
      var a2 = this.nextField_;
      do {
        if (!this.nextField()) {
          goog.asserts.fail("Unmatched start-group tag: stream EOF");
          this.error_ = true;
          break;
        }
        if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP) {
          this.nextField_ != a2 && (goog.asserts.fail("Unmatched end-group tag"), this.error_ = true);
          break;
        }
        this.skipField();
      } while (1);
    };
    jspb.BinaryReader.prototype.skipField = function() {
      switch (this.nextWireType_) {
        case jspb.BinaryConstants.WireType.VARINT:
          this.skipVarintField();
          break;
        case jspb.BinaryConstants.WireType.FIXED64:
          this.skipFixed64Field();
          break;
        case jspb.BinaryConstants.WireType.DELIMITED:
          this.skipDelimitedField();
          break;
        case jspb.BinaryConstants.WireType.FIXED32:
          this.skipFixed32Field();
          break;
        case jspb.BinaryConstants.WireType.START_GROUP:
          this.skipGroup();
          break;
        default:
          goog.asserts.fail("Invalid wire encoding for field.");
      }
    };
    jspb.BinaryReader.prototype.registerReadCallback = function(a2, b2) {
      this.readCallbacks_ === null && (this.readCallbacks_ = {});
      goog.asserts.assert(!this.readCallbacks_[a2]);
      this.readCallbacks_[a2] = b2;
    };
    jspb.BinaryReader.prototype.runReadCallback = function(a2) {
      goog.asserts.assert(this.readCallbacks_ !== null);
      a2 = this.readCallbacks_[a2];
      goog.asserts.assert(a2);
      return a2(this);
    };
    jspb.BinaryReader.prototype.readAny = function(a2) {
      this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(a2);
      var b2 = jspb.BinaryConstants.FieldType;
      switch (a2) {
        case b2.DOUBLE:
          return this.readDouble();
        case b2.FLOAT:
          return this.readFloat();
        case b2.INT64:
          return this.readInt64();
        case b2.UINT64:
          return this.readUint64();
        case b2.INT32:
          return this.readInt32();
        case b2.FIXED64:
          return this.readFixed64();
        case b2.FIXED32:
          return this.readFixed32();
        case b2.BOOL:
          return this.readBool();
        case b2.STRING:
          return this.readString();
        case b2.GROUP:
          goog.asserts.fail("Group field type not supported in readAny()");
        case b2.MESSAGE:
          goog.asserts.fail("Message field type not supported in readAny()");
        case b2.BYTES:
          return this.readBytes();
        case b2.UINT32:
          return this.readUint32();
        case b2.ENUM:
          return this.readEnum();
        case b2.SFIXED32:
          return this.readSfixed32();
        case b2.SFIXED64:
          return this.readSfixed64();
        case b2.SINT32:
          return this.readSint32();
        case b2.SINT64:
          return this.readSint64();
        case b2.FHASH64:
          return this.readFixedHash64();
        case b2.VHASH64:
          return this.readVarintHash64();
        default:
          goog.asserts.fail("Invalid field type in readAny()");
      }
      return 0;
    };
    jspb.BinaryReader.prototype.readMessage = function(a2, b2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var c2 = this.decoder_.getEnd(), d2 = this.decoder_.readUnsignedVarint32();
      d2 = this.decoder_.getCursor() + d2;
      this.decoder_.setEnd(d2);
      b2(a2, this);
      this.decoder_.setCursor(d2);
      this.decoder_.setEnd(c2);
    };
    jspb.BinaryReader.prototype.readGroup = function(a2, b2, c2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP);
      goog.asserts.assert(this.nextField_ == a2);
      c2(b2, this);
      this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (goog.asserts.fail("Group submessage did not end with an END_GROUP tag"), this.error_ = true);
    };
    jspb.BinaryReader.prototype.getFieldDecoder = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32(), b2 = this.decoder_.getCursor(), c2 = b2 + a2;
      a2 = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), b2, a2);
      this.decoder_.setCursor(c2);
      return a2;
    };
    jspb.BinaryReader.prototype.readInt32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint32();
    };
    jspb.BinaryReader.prototype.readInt32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint32String();
    };
    jspb.BinaryReader.prototype.readInt64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64();
    };
    jspb.BinaryReader.prototype.readInt64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64String();
    };
    jspb.BinaryReader.prototype.readUint32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint32();
    };
    jspb.BinaryReader.prototype.readUint32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint32String();
    };
    jspb.BinaryReader.prototype.readUint64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint64();
    };
    jspb.BinaryReader.prototype.readUint64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readUnsignedVarint64String();
    };
    jspb.BinaryReader.prototype.readSint32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint32();
    };
    jspb.BinaryReader.prototype.readSint64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint64();
    };
    jspb.BinaryReader.prototype.readSint64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarint64String();
    };
    jspb.BinaryReader.prototype.readFixed32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readUint32();
    };
    jspb.BinaryReader.prototype.readFixed64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readUint64();
    };
    jspb.BinaryReader.prototype.readFixed64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readUint64String();
    };
    jspb.BinaryReader.prototype.readSfixed32 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readInt32();
    };
    jspb.BinaryReader.prototype.readSfixed32String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readInt32().toString();
    };
    jspb.BinaryReader.prototype.readSfixed64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readInt64();
    };
    jspb.BinaryReader.prototype.readSfixed64String = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readInt64String();
    };
    jspb.BinaryReader.prototype.readFloat = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
      return this.decoder_.readFloat();
    };
    jspb.BinaryReader.prototype.readDouble = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readDouble();
    };
    jspb.BinaryReader.prototype.readBool = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return !!this.decoder_.readUnsignedVarint32();
    };
    jspb.BinaryReader.prototype.readEnum = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSignedVarint64();
    };
    jspb.BinaryReader.prototype.readString = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32();
      return this.decoder_.readString(a2);
    };
    jspb.BinaryReader.prototype.readBytes = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var a2 = this.decoder_.readUnsignedVarint32();
      return this.decoder_.readBytes(a2);
    };
    jspb.BinaryReader.prototype.readVarintHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readVarintHash64();
    };
    jspb.BinaryReader.prototype.readSintHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readZigzagVarintHash64();
    };
    jspb.BinaryReader.prototype.readSplitVarint64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSplitVarint64(a2);
    };
    jspb.BinaryReader.prototype.readSplitZigzagVarint64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
      return this.decoder_.readSplitVarint64(function(b2, c2) {
        return jspb.utils.fromZigzag64(b2, c2, a2);
      });
    };
    jspb.BinaryReader.prototype.readFixedHash64 = function() {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readFixedHash64();
    };
    jspb.BinaryReader.prototype.readSplitFixed64 = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
      return this.decoder_.readSplitFixed64(a2);
    };
    jspb.BinaryReader.prototype.readPackedField_ = function(a2) {
      goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
      var b2 = this.decoder_.readUnsignedVarint32();
      b2 = this.decoder_.getCursor() + b2;
      for (var c2 = []; this.decoder_.getCursor() < b2; )
        c2.push(a2.call(this.decoder_));
      return c2;
    };
    jspb.BinaryReader.prototype.readPackedInt32 = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint32);
    };
    jspb.BinaryReader.prototype.readPackedInt32String = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint32String);
    };
    jspb.BinaryReader.prototype.readPackedInt64 = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint64);
    };
    jspb.BinaryReader.prototype.readPackedInt64String = function() {
      return this.readPackedField_(this.decoder_.readSignedVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedUint32 = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint32);
    };
    jspb.BinaryReader.prototype.readPackedUint32String = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
    };
    jspb.BinaryReader.prototype.readPackedUint64 = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint64);
    };
    jspb.BinaryReader.prototype.readPackedUint64String = function() {
      return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedSint32 = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint32);
    };
    jspb.BinaryReader.prototype.readPackedSint64 = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint64);
    };
    jspb.BinaryReader.prototype.readPackedSint64String = function() {
      return this.readPackedField_(this.decoder_.readZigzagVarint64String);
    };
    jspb.BinaryReader.prototype.readPackedFixed32 = function() {
      return this.readPackedField_(this.decoder_.readUint32);
    };
    jspb.BinaryReader.prototype.readPackedFixed64 = function() {
      return this.readPackedField_(this.decoder_.readUint64);
    };
    jspb.BinaryReader.prototype.readPackedFixed64String = function() {
      return this.readPackedField_(this.decoder_.readUint64String);
    };
    jspb.BinaryReader.prototype.readPackedSfixed32 = function() {
      return this.readPackedField_(this.decoder_.readInt32);
    };
    jspb.BinaryReader.prototype.readPackedSfixed64 = function() {
      return this.readPackedField_(this.decoder_.readInt64);
    };
    jspb.BinaryReader.prototype.readPackedSfixed64String = function() {
      return this.readPackedField_(this.decoder_.readInt64String);
    };
    jspb.BinaryReader.prototype.readPackedFloat = function() {
      return this.readPackedField_(this.decoder_.readFloat);
    };
    jspb.BinaryReader.prototype.readPackedDouble = function() {
      return this.readPackedField_(this.decoder_.readDouble);
    };
    jspb.BinaryReader.prototype.readPackedBool = function() {
      return this.readPackedField_(this.decoder_.readBool);
    };
    jspb.BinaryReader.prototype.readPackedEnum = function() {
      return this.readPackedField_(this.decoder_.readEnum);
    };
    jspb.BinaryReader.prototype.readPackedVarintHash64 = function() {
      return this.readPackedField_(this.decoder_.readVarintHash64);
    };
    jspb.BinaryReader.prototype.readPackedFixedHash64 = function() {
      return this.readPackedField_(this.decoder_.readFixedHash64);
    };
    jspb.BinaryEncoder = function() {
      this.buffer_ = [];
    };
    jspb.BinaryEncoder.prototype.length = function() {
      return this.buffer_.length;
    };
    jspb.BinaryEncoder.prototype.end = function() {
      var a2 = this.buffer_;
      this.buffer_ = [];
      return a2;
    };
    jspb.BinaryEncoder.prototype.writeSplitVarint64 = function(a2, b2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(b2 == Math.floor(b2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      for (goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_32); 0 < b2 || 127 < a2; )
        this.buffer_.push(a2 & 127 | 128), a2 = (a2 >>> 7 | b2 << 25) >>> 0, b2 >>>= 7;
      this.buffer_.push(a2);
    };
    jspb.BinaryEncoder.prototype.writeSplitFixed64 = function(a2, b2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(b2 == Math.floor(b2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_32);
      this.writeUint32(a2);
      this.writeUint32(b2);
    };
    jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      for (goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32); 127 < a2; )
        this.buffer_.push(a2 & 127 | 128), a2 >>>= 7;
      this.buffer_.push(a2);
    };
    jspb.BinaryEncoder.prototype.writeSignedVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      if (0 <= a2)
        this.writeUnsignedVarint32(a2);
      else {
        for (var b2 = 0; 9 > b2; b2++)
          this.buffer_.push(a2 & 127 | 128), a2 >>= 7;
        this.buffer_.push(1);
      }
    };
    jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_64);
      jspb.utils.splitInt64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeSignedVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitInt64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.writeUnsignedVarint32((a2 << 1 ^ a2 >> 31) >>> 0);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitZigzag64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function(a2) {
      this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a2));
    };
    jspb.BinaryEncoder.prototype.writeZigzagVarintHash64 = function(a2) {
      var b2 = this;
      jspb.utils.splitHash64(a2);
      jspb.utils.toZigzag64(jspb.utils.split64Low, jspb.utils.split64High, function(a3, d2) {
        b2.writeSplitVarint64(a3 >>> 0, d2 >>> 0);
      });
    };
    jspb.BinaryEncoder.prototype.writeUint8 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && 256 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint16 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && 65536 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_32);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
      this.buffer_.push(a2 >>> 16 & 255);
      this.buffer_.push(a2 >>> 24 & 255);
    };
    jspb.BinaryEncoder.prototype.writeUint64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(0 <= a2 && a2 < jspb.BinaryConstants.TWO_TO_64);
      jspb.utils.splitUint64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeInt8 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(-128 <= a2 && 128 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt16 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(-32768 <= a2 && 32768 > a2);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt32 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.buffer_.push(a2 >>> 0 & 255);
      this.buffer_.push(a2 >>> 8 & 255);
      this.buffer_.push(a2 >>> 16 & 255);
      this.buffer_.push(a2 >>> 24 & 255);
    };
    jspb.BinaryEncoder.prototype.writeInt64 = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_63 && a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitInt64(a2);
      this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeInt64String = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(+a2 >= -jspb.BinaryConstants.TWO_TO_63 && +a2 < jspb.BinaryConstants.TWO_TO_63);
      jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a2));
      this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeFloat = function(a2) {
      goog.asserts.assert(a2 === Infinity || a2 === -Infinity || isNaN(a2) || a2 >= -jspb.BinaryConstants.FLOAT32_MAX && a2 <= jspb.BinaryConstants.FLOAT32_MAX);
      jspb.utils.splitFloat32(a2);
      this.writeUint32(jspb.utils.split64Low);
    };
    jspb.BinaryEncoder.prototype.writeDouble = function(a2) {
      goog.asserts.assert(a2 === Infinity || a2 === -Infinity || isNaN(a2) || a2 >= -jspb.BinaryConstants.FLOAT64_MAX && a2 <= jspb.BinaryConstants.FLOAT64_MAX);
      jspb.utils.splitFloat64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeBool = function(a2) {
      goog.asserts.assert(typeof a2 === "boolean" || typeof a2 === "number");
      this.buffer_.push(a2 ? 1 : 0);
    };
    jspb.BinaryEncoder.prototype.writeEnum = function(a2) {
      goog.asserts.assert(a2 == Math.floor(a2));
      goog.asserts.assert(a2 >= -jspb.BinaryConstants.TWO_TO_31 && a2 < jspb.BinaryConstants.TWO_TO_31);
      this.writeSignedVarint32(a2);
    };
    jspb.BinaryEncoder.prototype.writeBytes = function(a2) {
      this.buffer_.push.apply(this.buffer_, a2);
    };
    jspb.BinaryEncoder.prototype.writeVarintHash64 = function(a2) {
      jspb.utils.splitHash64(a2);
      this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeFixedHash64 = function(a2) {
      jspb.utils.splitHash64(a2);
      this.writeUint32(jspb.utils.split64Low);
      this.writeUint32(jspb.utils.split64High);
    };
    jspb.BinaryEncoder.prototype.writeString = function(a2) {
      for (var b2 = this.buffer_.length, c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2.charCodeAt(c2);
        if (128 > d2)
          this.buffer_.push(d2);
        else if (2048 > d2)
          this.buffer_.push(d2 >> 6 | 192), this.buffer_.push(d2 & 63 | 128);
        else if (65536 > d2)
          if (55296 <= d2 && 56319 >= d2 && c2 + 1 < a2.length) {
            var e2 = a2.charCodeAt(c2 + 1);
            56320 <= e2 && 57343 >= e2 && (d2 = 1024 * (d2 - 55296) + e2 - 56320 + 65536, this.buffer_.push(d2 >> 18 | 240), this.buffer_.push(d2 >> 12 & 63 | 128), this.buffer_.push(d2 >> 6 & 63 | 128), this.buffer_.push(d2 & 63 | 128), c2++);
          } else
            this.buffer_.push(d2 >> 12 | 224), this.buffer_.push(d2 >> 6 & 63 | 128), this.buffer_.push(d2 & 63 | 128);
      }
      return this.buffer_.length - b2;
    };
    jspb.arith = {};
    jspb.arith.UInt64 = function(a2, b2) {
      this.lo = a2;
      this.hi = b2;
    };
    jspb.arith.UInt64.prototype.cmp = function(a2) {
      return this.hi < a2.hi || this.hi == a2.hi && this.lo < a2.lo ? -1 : this.hi == a2.hi && this.lo == a2.lo ? 0 : 1;
    };
    jspb.arith.UInt64.prototype.rightShift = function() {
      return new jspb.arith.UInt64((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
    };
    jspb.arith.UInt64.prototype.leftShift = function() {
      return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
    };
    jspb.arith.UInt64.prototype.msb = function() {
      return !!(this.hi & 2147483648);
    };
    jspb.arith.UInt64.prototype.lsb = function() {
      return !!(this.lo & 1);
    };
    jspb.arith.UInt64.prototype.zero = function() {
      return this.lo == 0 && this.hi == 0;
    };
    jspb.arith.UInt64.prototype.add = function(a2) {
      return new jspb.arith.UInt64((this.lo + a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a2.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.UInt64.prototype.sub = function(a2) {
      return new jspb.arith.UInt64((this.lo - a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a2.hi & 4294967295) >>> 0) - (0 > this.lo - a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.UInt64.mul32x32 = function(a2, b2) {
      var c2 = a2 & 65535;
      a2 >>>= 16;
      var d2 = b2 & 65535, e2 = b2 >>> 16;
      b2 = c2 * d2 + 65536 * (c2 * e2 & 65535) + 65536 * (a2 * d2 & 65535);
      for (c2 = a2 * e2 + (c2 * e2 >>> 16) + (a2 * d2 >>> 16); 4294967296 <= b2; )
        b2 -= 4294967296, c2 += 1;
      return new jspb.arith.UInt64(b2 >>> 0, c2 >>> 0);
    };
    jspb.arith.UInt64.prototype.mul = function(a2) {
      var b2 = jspb.arith.UInt64.mul32x32(this.lo, a2);
      a2 = jspb.arith.UInt64.mul32x32(this.hi, a2);
      a2.hi = a2.lo;
      a2.lo = 0;
      return b2.add(a2);
    };
    jspb.arith.UInt64.prototype.div = function(a2) {
      if (a2 == 0)
        return [];
      var b2 = new jspb.arith.UInt64(0, 0), c2 = new jspb.arith.UInt64(this.lo, this.hi);
      a2 = new jspb.arith.UInt64(a2, 0);
      for (var d2 = new jspb.arith.UInt64(1, 0); !a2.msb(); )
        a2 = a2.leftShift(), d2 = d2.leftShift();
      for (; !d2.zero(); )
        0 >= a2.cmp(c2) && (b2 = b2.add(d2), c2 = c2.sub(a2)), a2 = a2.rightShift(), d2 = d2.rightShift();
      return [b2, c2];
    };
    jspb.arith.UInt64.prototype.toString = function() {
      for (var a2 = "", b2 = this; !b2.zero(); ) {
        b2 = b2.div(10);
        var c2 = b2[0];
        a2 = b2[1].lo + a2;
        b2 = c2;
      }
      a2 == "" && (a2 = "0");
      return a2;
    };
    jspb.arith.UInt64.fromString = function(a2) {
      for (var b2 = new jspb.arith.UInt64(0, 0), c2 = new jspb.arith.UInt64(0, 0), d2 = 0; d2 < a2.length; d2++) {
        if ("0" > a2[d2] || "9" < a2[d2])
          return null;
        var e2 = parseInt(a2[d2], 10);
        c2.lo = e2;
        b2 = b2.mul(10).add(c2);
      }
      return b2;
    };
    jspb.arith.UInt64.prototype.clone = function() {
      return new jspb.arith.UInt64(this.lo, this.hi);
    };
    jspb.arith.Int64 = function(a2, b2) {
      this.lo = a2;
      this.hi = b2;
    };
    jspb.arith.Int64.prototype.add = function(a2) {
      return new jspb.arith.Int64((this.lo + a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a2.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.Int64.prototype.sub = function(a2) {
      return new jspb.arith.Int64((this.lo - a2.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a2.hi & 4294967295) >>> 0) - (0 > this.lo - a2.lo ? 1 : 0) >>> 0);
    };
    jspb.arith.Int64.prototype.clone = function() {
      return new jspb.arith.Int64(this.lo, this.hi);
    };
    jspb.arith.Int64.prototype.toString = function() {
      var a2 = (this.hi & 2147483648) != 0, b2 = new jspb.arith.UInt64(this.lo, this.hi);
      a2 && (b2 = new jspb.arith.UInt64(0, 0).sub(b2));
      return (a2 ? "-" : "") + b2.toString();
    };
    jspb.arith.Int64.fromString = function(a2) {
      var b2 = 0 < a2.length && a2[0] == "-";
      b2 && (a2 = a2.substring(1));
      a2 = jspb.arith.UInt64.fromString(a2);
      if (a2 === null)
        return null;
      b2 && (a2 = new jspb.arith.UInt64(0, 0).sub(a2));
      return new jspb.arith.Int64(a2.lo, a2.hi);
    };
    jspb.BinaryWriter = function() {
      this.blocks_ = [];
      this.totalLength_ = 0;
      this.encoder_ = new jspb.BinaryEncoder();
      this.bookmarks_ = [];
    };
    jspb.BinaryWriter.prototype.appendUint8Array_ = function(a2) {
      var b2 = this.encoder_.end();
      this.blocks_.push(b2);
      this.blocks_.push(a2);
      this.totalLength_ += b2.length + a2.length;
    };
    jspb.BinaryWriter.prototype.beginDelimited_ = function(a2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED);
      a2 = this.encoder_.end();
      this.blocks_.push(a2);
      this.totalLength_ += a2.length;
      a2.push(this.totalLength_);
      return a2;
    };
    jspb.BinaryWriter.prototype.endDelimited_ = function(a2) {
      var b2 = a2.pop();
      b2 = this.totalLength_ + this.encoder_.length() - b2;
      for (goog.asserts.assert(0 <= b2); 127 < b2; )
        a2.push(b2 & 127 | 128), b2 >>>= 7, this.totalLength_++;
      a2.push(b2);
      this.totalLength_++;
    };
    jspb.BinaryWriter.prototype.writeSerializedMessage = function(a2, b2, c2) {
      this.appendUint8Array_(a2.subarray(b2, c2));
    };
    jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function(a2, b2, c2) {
      a2 != null && b2 != null && c2 != null && this.writeSerializedMessage(a2, b2, c2);
    };
    jspb.BinaryWriter.prototype.reset = function() {
      this.blocks_ = [];
      this.encoder_.end();
      this.totalLength_ = 0;
      this.bookmarks_ = [];
    };
    jspb.BinaryWriter.prototype.getResultBuffer = function() {
      goog.asserts.assert(this.bookmarks_.length == 0);
      for (var a2 = new Uint8Array(this.totalLength_ + this.encoder_.length()), b2 = this.blocks_, c2 = b2.length, d2 = 0, e2 = 0; e2 < c2; e2++) {
        var f2 = b2[e2];
        a2.set(f2, d2);
        d2 += f2.length;
      }
      b2 = this.encoder_.end();
      a2.set(b2, d2);
      d2 += b2.length;
      goog.asserts.assert(d2 == a2.length);
      this.blocks_ = [a2];
      return a2;
    };
    jspb.BinaryWriter.prototype.getResultBase64String = function(a2) {
      return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), a2);
    };
    jspb.BinaryWriter.prototype.beginSubMessage = function(a2) {
      this.bookmarks_.push(this.beginDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.endSubMessage = function() {
      goog.asserts.assert(0 <= this.bookmarks_.length);
      this.endDelimited_(this.bookmarks_.pop());
    };
    jspb.BinaryWriter.prototype.writeFieldHeader_ = function(a2, b2) {
      goog.asserts.assert(1 <= a2 && a2 == Math.floor(a2));
      this.encoder_.writeUnsignedVarint32(8 * a2 + b2);
    };
    jspb.BinaryWriter.prototype.writeAny = function(a2, b2, c2) {
      var d2 = jspb.BinaryConstants.FieldType;
      switch (a2) {
        case d2.DOUBLE:
          this.writeDouble(b2, c2);
          break;
        case d2.FLOAT:
          this.writeFloat(b2, c2);
          break;
        case d2.INT64:
          this.writeInt64(b2, c2);
          break;
        case d2.UINT64:
          this.writeUint64(b2, c2);
          break;
        case d2.INT32:
          this.writeInt32(b2, c2);
          break;
        case d2.FIXED64:
          this.writeFixed64(b2, c2);
          break;
        case d2.FIXED32:
          this.writeFixed32(b2, c2);
          break;
        case d2.BOOL:
          this.writeBool(b2, c2);
          break;
        case d2.STRING:
          this.writeString(b2, c2);
          break;
        case d2.GROUP:
          goog.asserts.fail("Group field type not supported in writeAny()");
          break;
        case d2.MESSAGE:
          goog.asserts.fail("Message field type not supported in writeAny()");
          break;
        case d2.BYTES:
          this.writeBytes(b2, c2);
          break;
        case d2.UINT32:
          this.writeUint32(b2, c2);
          break;
        case d2.ENUM:
          this.writeEnum(b2, c2);
          break;
        case d2.SFIXED32:
          this.writeSfixed32(b2, c2);
          break;
        case d2.SFIXED64:
          this.writeSfixed64(b2, c2);
          break;
        case d2.SINT32:
          this.writeSint32(b2, c2);
          break;
        case d2.SINT64:
          this.writeSint64(b2, c2);
          break;
        case d2.FHASH64:
          this.writeFixedHash64(b2, c2);
          break;
        case d2.VHASH64:
          this.writeVarintHash64(b2, c2);
          break;
        default:
          goog.asserts.fail("Invalid field type in writeAny()");
      }
    };
    jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(b2));
    };
    jspb.BinaryWriter.prototype.writeSignedVarint32_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b2));
    };
    jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(b2));
    };
    jspb.BinaryWriter.prototype.writeSignedVarint64_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(b2));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(b2));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(b2));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(b2));
    };
    jspb.BinaryWriter.prototype.writeZigzagVarintHash64_ = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarintHash64(b2));
    };
    jspb.BinaryWriter.prototype.writeInt32 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_31 && b2 < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeInt32String = function(a2, b2) {
      b2 != null && (b2 = parseInt(b2, 10), goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_31 && b2 < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeInt64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_63 && b2 < jspb.BinaryConstants.TWO_TO_63), this.writeSignedVarint64_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeInt64String = function(a2, b2) {
      b2 != null && (b2 = jspb.arith.Int64.fromString(b2), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b2.lo, b2.hi));
    };
    jspb.BinaryWriter.prototype.writeUint32 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeUint32String = function(a2, b2) {
      b2 != null && (b2 = parseInt(b2, 10), goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeUint64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_64), this.writeUnsignedVarint64_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeUint64String = function(a2, b2) {
      b2 != null && (b2 = jspb.arith.UInt64.fromString(b2), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b2.lo, b2.hi));
    };
    jspb.BinaryWriter.prototype.writeSint32 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_31 && b2 < jspb.BinaryConstants.TWO_TO_31), this.writeZigzagVarint32_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeSint64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_63 && b2 < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64_(a2, b2));
    };
    jspb.BinaryWriter.prototype.writeSintHash64 = function(a2, b2) {
      b2 != null && this.writeZigzagVarintHash64_(a2, b2);
    };
    jspb.BinaryWriter.prototype.writeSint64String = function(a2, b2) {
      b2 != null && this.writeZigzagVarint64String_(a2, b2);
    };
    jspb.BinaryWriter.prototype.writeFixed32 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_32), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(b2));
    };
    jspb.BinaryWriter.prototype.writeFixed64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(0 <= b2 && b2 < jspb.BinaryConstants.TWO_TO_64), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(b2));
    };
    jspb.BinaryWriter.prototype.writeFixed64String = function(a2, b2) {
      b2 != null && (b2 = jspb.arith.UInt64.fromString(b2), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b2.lo, b2.hi));
    };
    jspb.BinaryWriter.prototype.writeSfixed32 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_31 && b2 < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(b2));
    };
    jspb.BinaryWriter.prototype.writeSfixed64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_63 && b2 < jspb.BinaryConstants.TWO_TO_63), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(b2));
    };
    jspb.BinaryWriter.prototype.writeSfixed64String = function(a2, b2) {
      b2 != null && (b2 = jspb.arith.Int64.fromString(b2), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b2.lo, b2.hi));
    };
    jspb.BinaryWriter.prototype.writeFloat = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeFloat(b2));
    };
    jspb.BinaryWriter.prototype.writeDouble = function(a2, b2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeDouble(b2));
    };
    jspb.BinaryWriter.prototype.writeBool = function(a2, b2) {
      b2 != null && (goog.asserts.assert(typeof b2 === "boolean" || typeof b2 === "number"), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeBool(b2));
    };
    jspb.BinaryWriter.prototype.writeEnum = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2 >= -jspb.BinaryConstants.TWO_TO_31 && b2 < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b2));
    };
    jspb.BinaryWriter.prototype.writeString = function(a2, b2) {
      b2 != null && (a2 = this.beginDelimited_(a2), this.encoder_.writeString(b2), this.endDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.writeBytes = function(a2, b2) {
      b2 != null && (b2 = jspb.utils.byteSourceToUint8Array(b2), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b2.length), this.appendUint8Array_(b2));
    };
    jspb.BinaryWriter.prototype.writeMessage = function(a2, b2, c2) {
      b2 != null && (a2 = this.beginDelimited_(a2), c2(b2, this), this.endDelimited_(a2));
    };
    jspb.BinaryWriter.prototype.writeMessageSet = function(a2, b2, c2) {
      b2 != null && (this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.START_GROUP), this.writeFieldHeader_(2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(a2), a2 = this.beginDelimited_(3), c2(b2, this), this.endDelimited_(a2), this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.END_GROUP));
    };
    jspb.BinaryWriter.prototype.writeGroup = function(a2, b2, c2) {
      b2 != null && (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.START_GROUP), c2(b2, this), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.END_GROUP));
    };
    jspb.BinaryWriter.prototype.writeFixedHash64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2.length == 8), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeFixedHash64(b2));
    };
    jspb.BinaryWriter.prototype.writeVarintHash64 = function(a2, b2) {
      b2 != null && (goog.asserts.assert(b2.length == 8), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeVarintHash64(b2));
    };
    jspb.BinaryWriter.prototype.writeSplitFixed64 = function(a2, b2, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.FIXED64);
      this.encoder_.writeSplitFixed64(b2, c2);
    };
    jspb.BinaryWriter.prototype.writeSplitVarint64 = function(a2, b2, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT);
      this.encoder_.writeSplitVarint64(b2, c2);
    };
    jspb.BinaryWriter.prototype.writeSplitZigzagVarint64 = function(a2, b2, c2) {
      this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.VARINT);
      var d2 = this.encoder_;
      jspb.utils.toZigzag64(b2, c2, function(a3, b3) {
        d2.writeSplitVarint64(a3 >>> 0, b3 >>> 0);
      });
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt32 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeSignedVarint32_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt32String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeInt32String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeSignedVarint64_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64 = function(a2, b2, c2, d2) {
      if (b2 != null)
        for (var e2 = 0; e2 < b2.length; e2++)
          this.writeSplitFixed64(a2, c2(b2[e2]), d2(b2[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64 = function(a2, b2, c2, d2) {
      if (b2 != null)
        for (var e2 = 0; e2 < b2.length; e2++)
          this.writeSplitVarint64(a2, c2(b2[e2]), d2(b2[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64 = function(a2, b2, c2, d2) {
      if (b2 != null)
        for (var e2 = 0; e2 < b2.length; e2++)
          this.writeSplitZigzagVarint64(a2, c2(b2[e2]), d2(b2[e2]));
    };
    jspb.BinaryWriter.prototype.writeRepeatedInt64String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeInt64String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint32 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeUnsignedVarint32_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint32String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeUint32String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeUnsignedVarint64_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedUint64String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeUint64String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint32 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeZigzagVarint32_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeZigzagVarint64_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSint64String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeZigzagVarint64String_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSintHash64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeZigzagVarintHash64_(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeFixed32(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeFixed64(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeFixed64String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeSfixed32(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeSfixed64(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeSfixed64String(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFloat = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeFloat(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedDouble = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeDouble(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedBool = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeBool(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedEnum = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeEnum(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedString = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeString(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedBytes = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeBytes(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedMessage = function(a2, b2, c2) {
      if (b2 != null)
        for (var d2 = 0; d2 < b2.length; d2++) {
          var e2 = this.beginDelimited_(a2);
          c2(b2[d2], this);
          this.endDelimited_(e2);
        }
    };
    jspb.BinaryWriter.prototype.writeRepeatedGroup = function(a2, b2, c2) {
      if (b2 != null)
        for (var d2 = 0; d2 < b2.length; d2++)
          this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.START_GROUP), c2(b2[d2], this), this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.END_GROUP);
    };
    jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeFixedHash64(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function(a2, b2) {
      if (b2 != null)
        for (var c2 = 0; c2 < b2.length; c2++)
          this.writeVarintHash64(a2, b2[c2]);
    };
    jspb.BinaryWriter.prototype.writePackedInt32 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeSignedVarint32(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt32String = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeSignedVarint32(parseInt(b2[c2], 10));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt64 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeSignedVarint64(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitFixed64 = function(a2, b2, c2, d2) {
      if (b2 != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = 0; e2 < b2.length; e2++)
          this.encoder_.writeSplitFixed64(c2(b2[e2]), d2(b2[e2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitVarint64 = function(a2, b2, c2, d2) {
      if (b2 != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = 0; e2 < b2.length; e2++)
          this.encoder_.writeSplitVarint64(c2(b2[e2]), d2(b2[e2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64 = function(a2, b2, c2, d2) {
      if (b2 != null) {
        a2 = this.beginDelimited_(a2);
        for (var e2 = this.encoder_, f2 = 0; f2 < b2.length; f2++)
          jspb.utils.toZigzag64(c2(b2[f2]), d2(b2[f2]), function(a3, b3) {
            e2.writeSplitVarint64(a3 >>> 0, b3 >>> 0);
          });
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedInt64String = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++) {
          var d2 = jspb.arith.Int64.fromString(b2[c2]);
          this.encoder_.writeSplitVarint64(d2.lo, d2.hi);
        }
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint32 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeUnsignedVarint32(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint32String = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeUnsignedVarint32(parseInt(b2[c2], 10));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint64 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeUnsignedVarint64(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedUint64String = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++) {
          var d2 = jspb.arith.UInt64.fromString(b2[c2]);
          this.encoder_.writeSplitVarint64(d2.lo, d2.hi);
        }
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint32 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeZigzagVarint32(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint64 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeZigzagVarint64(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSint64String = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b2[c2]));
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedSintHash64 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeZigzagVarintHash64(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedFixed32 = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeUint32(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFixed64 = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeUint64(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFixed64String = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++) {
          var c2 = jspb.arith.UInt64.fromString(b2[a2]);
          this.encoder_.writeSplitFixed64(c2.lo, c2.hi);
        }
    };
    jspb.BinaryWriter.prototype.writePackedSfixed32 = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeInt32(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedSfixed64 = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeInt64(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedSfixed64String = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeInt64String(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedFloat = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeFloat(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedDouble = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeDouble(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedBool = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeBool(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedEnum = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeEnum(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.BinaryWriter.prototype.writePackedFixedHash64 = function(a2, b2) {
      if (b2 != null && b2.length)
        for (this.writeFieldHeader_(a2, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b2.length), a2 = 0; a2 < b2.length; a2++)
          this.encoder_.writeFixedHash64(b2[a2]);
    };
    jspb.BinaryWriter.prototype.writePackedVarintHash64 = function(a2, b2) {
      if (b2 != null && b2.length) {
        a2 = this.beginDelimited_(a2);
        for (var c2 = 0; c2 < b2.length; c2++)
          this.encoder_.writeVarintHash64(b2[c2]);
        this.endDelimited_(a2);
      }
    };
    jspb.Map = function(a2, b2) {
      this.arr_ = a2;
      this.valueCtor_ = b2;
      this.map_ = {};
      this.arrClean = true;
      0 < this.arr_.length && this.loadFromArray_();
    };
    jspb.Map.prototype.loadFromArray_ = function() {
      for (var a2 = 0; a2 < this.arr_.length; a2++) {
        var b2 = this.arr_[a2], c2 = b2[0];
        this.map_[c2.toString()] = new jspb.Map.Entry_(c2, b2[1]);
      }
      this.arrClean = true;
    };
    jspb.Map.prototype.toArray = function() {
      if (this.arrClean) {
        if (this.valueCtor_) {
          var a2 = this.map_, b2;
          for (b2 in a2)
            if (Object.prototype.hasOwnProperty.call(a2, b2)) {
              var c2 = a2[b2].valueWrapper;
              c2 && c2.toArray();
            }
        }
      } else {
        this.arr_.length = 0;
        a2 = this.stringKeys_();
        a2.sort();
        for (b2 = 0; b2 < a2.length; b2++) {
          var d2 = this.map_[a2[b2]];
          (c2 = d2.valueWrapper) && c2.toArray();
          this.arr_.push([d2.key, d2.value]);
        }
        this.arrClean = true;
      }
      return this.arr_;
    };
    jspb.Map.prototype.toObject = function(a2, b2) {
      for (var c2 = this.toArray(), d2 = [], e2 = 0; e2 < c2.length; e2++) {
        var f2 = this.map_[c2[e2][0].toString()];
        this.wrapEntry_(f2);
        var g = f2.valueWrapper;
        g ? (goog.asserts.assert(b2), d2.push([f2.key, b2(a2, g)])) : d2.push([f2.key, f2.value]);
      }
      return d2;
    };
    jspb.Map.fromObject = function(a2, b2, c2) {
      b2 = new jspb.Map([], b2);
      for (var d2 = 0; d2 < a2.length; d2++) {
        var e2 = a2[d2][0], f2 = c2(a2[d2][1]);
        b2.set(e2, f2);
      }
      return b2;
    };
    jspb.Map.ArrayIteratorIterable_ = function(a2) {
      this.idx_ = 0;
      this.arr_ = a2;
    };
    jspb.Map.ArrayIteratorIterable_.prototype.next = function() {
      return this.idx_ < this.arr_.length ? { done: false, value: this.arr_[this.idx_++] } : { done: true, value: void 0 };
    };
    typeof Symbol != "undefined" && (jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function() {
      return this;
    });
    jspb.Map.prototype.getLength = function() {
      return this.stringKeys_().length;
    };
    jspb.Map.prototype.clear = function() {
      this.map_ = {};
      this.arrClean = false;
    };
    jspb.Map.prototype.del = function(a2) {
      a2 = a2.toString();
      var b2 = this.map_.hasOwnProperty(a2);
      delete this.map_[a2];
      this.arrClean = false;
      return b2;
    };
    jspb.Map.prototype.getEntryList = function() {
      var a2 = [], b2 = this.stringKeys_();
      b2.sort();
      for (var c2 = 0; c2 < b2.length; c2++) {
        var d2 = this.map_[b2[c2]];
        a2.push([d2.key, d2.value]);
      }
      return a2;
    };
    jspb.Map.prototype.entries = function() {
      var a2 = [], b2 = this.stringKeys_();
      b2.sort();
      for (var c2 = 0; c2 < b2.length; c2++) {
        var d2 = this.map_[b2[c2]];
        a2.push([d2.key, this.wrapEntry_(d2)]);
      }
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.keys = function() {
      var a2 = [], b2 = this.stringKeys_();
      b2.sort();
      for (var c2 = 0; c2 < b2.length; c2++)
        a2.push(this.map_[b2[c2]].key);
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.values = function() {
      var a2 = [], b2 = this.stringKeys_();
      b2.sort();
      for (var c2 = 0; c2 < b2.length; c2++)
        a2.push(this.wrapEntry_(this.map_[b2[c2]]));
      return new jspb.Map.ArrayIteratorIterable_(a2);
    };
    jspb.Map.prototype.forEach = function(a2, b2) {
      var c2 = this.stringKeys_();
      c2.sort();
      for (var d2 = 0; d2 < c2.length; d2++) {
        var e2 = this.map_[c2[d2]];
        a2.call(b2, this.wrapEntry_(e2), e2.key, this);
      }
    };
    jspb.Map.prototype.set = function(a2, b2) {
      var c2 = new jspb.Map.Entry_(a2);
      this.valueCtor_ ? (c2.valueWrapper = b2, c2.value = b2.toArray()) : c2.value = b2;
      this.map_[a2.toString()] = c2;
      this.arrClean = false;
      return this;
    };
    jspb.Map.prototype.wrapEntry_ = function(a2) {
      return this.valueCtor_ ? (a2.valueWrapper || (a2.valueWrapper = new this.valueCtor_(a2.value)), a2.valueWrapper) : a2.value;
    };
    jspb.Map.prototype.get = function(a2) {
      if (a2 = this.map_[a2.toString()])
        return this.wrapEntry_(a2);
    };
    jspb.Map.prototype.has = function(a2) {
      return a2.toString() in this.map_;
    };
    jspb.Map.prototype.serializeBinary = function(a2, b2, c2, d2, e2) {
      var f2 = this.stringKeys_();
      f2.sort();
      for (var g = 0; g < f2.length; g++) {
        var h = this.map_[f2[g]];
        b2.beginSubMessage(a2);
        c2.call(b2, 1, h.key);
        this.valueCtor_ ? d2.call(b2, 2, this.wrapEntry_(h), e2) : d2.call(b2, 2, h.value);
        b2.endSubMessage();
      }
    };
    jspb.Map.deserializeBinary = function(a2, b2, c2, d2, e2, f2, g) {
      for (; b2.nextField() && !b2.isEndGroup(); ) {
        var h = b2.getFieldNumber();
        h == 1 ? f2 = c2.call(b2) : h == 2 && (a2.valueCtor_ ? (goog.asserts.assert(e2), g || (g = new a2.valueCtor_()), d2.call(b2, g, e2)) : g = d2.call(b2));
      }
      goog.asserts.assert(f2 != void 0);
      goog.asserts.assert(g != void 0);
      a2.set(f2, g);
    };
    jspb.Map.prototype.stringKeys_ = function() {
      var a2 = this.map_, b2 = [], c2;
      for (c2 in a2)
        Object.prototype.hasOwnProperty.call(a2, c2) && b2.push(c2);
      return b2;
    };
    jspb.Map.Entry_ = function(a2, b2) {
      this.key = a2;
      this.value = b2;
      this.valueWrapper = void 0;
    };
    jspb.ExtensionFieldInfo = function(a2, b2, c2, d2, e2) {
      this.fieldIndex = a2;
      this.fieldName = b2;
      this.ctor = c2;
      this.toObjectFn = d2;
      this.isRepeated = e2;
    };
    jspb.ExtensionFieldBinaryInfo = function(a2, b2, c2, d2, e2, f2) {
      this.fieldInfo = a2;
      this.binaryReaderFn = b2;
      this.binaryWriterFn = c2;
      this.binaryMessageSerializeFn = d2;
      this.binaryMessageDeserializeFn = e2;
      this.isPacked = f2;
    };
    jspb.ExtensionFieldInfo.prototype.isMessageType = function() {
      return !!this.ctor;
    };
    jspb.Message = function() {
    };
    jspb.Message.GENERATE_TO_OBJECT = true;
    jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE;
    jspb.Message.GENERATE_TO_STRING = true;
    jspb.Message.ASSUME_LOCAL_ARRAYS = false;
    jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = true;
    jspb.Message.SUPPORTS_UINT8ARRAY_ = typeof Uint8Array == "function";
    jspb.Message.prototype.getJsPbMessageId = function() {
      return this.messageId_;
    };
    jspb.Message.getIndex_ = function(a2, b2) {
      return b2 + a2.arrayIndexOffset_;
    };
    jspb.Message.hiddenES6Property_ = function() {
    };
    jspb.Message.getFieldNumber_ = function(a2, b2) {
      return b2 - a2.arrayIndexOffset_;
    };
    jspb.Message.initialize = function(a2, b2, c2, d2, e2, f2) {
      a2.wrappers_ = null;
      b2 || (b2 = c2 ? [c2] : []);
      a2.messageId_ = c2 ? String(c2) : void 0;
      a2.arrayIndexOffset_ = c2 === 0 ? -1 : 0;
      a2.array = b2;
      jspb.Message.initPivotAndExtensionObject_(a2, d2);
      a2.convertedPrimitiveFields_ = {};
      jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (a2.repeatedFields = e2);
      if (e2)
        for (b2 = 0; b2 < e2.length; b2++)
          c2 = e2[b2], c2 < a2.pivot_ ? (c2 = jspb.Message.getIndex_(a2, c2), a2.array[c2] = a2.array[c2] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(a2), a2.extensionObject_[c2] = a2.extensionObject_[c2] || jspb.Message.EMPTY_LIST_SENTINEL_);
      if (f2 && f2.length)
        for (b2 = 0; b2 < f2.length; b2++)
          jspb.Message.computeOneofCase(a2, f2[b2]);
    };
    jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [];
    jspb.Message.isArray_ = function(a2) {
      return jspb.Message.ASSUME_LOCAL_ARRAYS ? a2 instanceof Array : Array.isArray(a2);
    };
    jspb.Message.isExtensionObject_ = function(a2) {
      return a2 !== null && typeof a2 == "object" && !jspb.Message.isArray_(a2) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array);
    };
    jspb.Message.initPivotAndExtensionObject_ = function(a2, b2) {
      var c2 = a2.array.length, d2 = -1;
      if (c2 && (d2 = c2 - 1, c2 = a2.array[d2], jspb.Message.isExtensionObject_(c2))) {
        a2.pivot_ = jspb.Message.getFieldNumber_(a2, d2);
        a2.extensionObject_ = c2;
        return;
      }
      -1 < b2 ? (a2.pivot_ = Math.max(b2, jspb.Message.getFieldNumber_(a2, d2 + 1)), a2.extensionObject_ = null) : a2.pivot_ = Number.MAX_VALUE;
    };
    jspb.Message.maybeInitEmptyExtensionObject_ = function(a2) {
      var b2 = jspb.Message.getIndex_(a2, a2.pivot_);
      a2.array[b2] || (a2.extensionObject_ = a2.array[b2] = {});
    };
    jspb.Message.toObjectList = function(a2, b2, c2) {
      for (var d2 = [], e2 = 0; e2 < a2.length; e2++)
        d2[e2] = b2.call(a2[e2], c2, a2[e2]);
      return d2;
    };
    jspb.Message.toObjectExtension = function(a2, b2, c2, d2, e2) {
      for (var f2 in c2) {
        var g = c2[f2], h = d2.call(a2, g);
        if (h != null) {
          for (var k in g.fieldName)
            if (g.fieldName.hasOwnProperty(k))
              break;
          b2[k] = g.toObjectFn ? g.isRepeated ? jspb.Message.toObjectList(h, g.toObjectFn, e2) : g.toObjectFn(e2, h) : h;
        }
      }
    };
    jspb.Message.serializeBinaryExtensions = function(a2, b2, c2, d2) {
      for (var e2 in c2) {
        var f2 = c2[e2], g = f2.fieldInfo;
        if (!f2.binaryWriterFn)
          throw Error("Message extension present that was generated without binary serialization support");
        var h = d2.call(a2, g);
        if (h != null)
          if (g.isMessageType())
            if (f2.binaryMessageSerializeFn)
              f2.binaryWriterFn.call(b2, g.fieldIndex, h, f2.binaryMessageSerializeFn);
            else
              throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
          else
            f2.binaryWriterFn.call(b2, g.fieldIndex, h);
      }
    };
    jspb.Message.readBinaryExtension = function(a2, b2, c2, d2, e2) {
      var f2 = c2[b2.getFieldNumber()];
      if (f2) {
        c2 = f2.fieldInfo;
        if (!f2.binaryReaderFn)
          throw Error("Deserializing extension whose generated code does not support binary format");
        if (c2.isMessageType()) {
          var g = new c2.ctor();
          f2.binaryReaderFn.call(b2, g, f2.binaryMessageDeserializeFn);
        } else
          g = f2.binaryReaderFn.call(b2);
        c2.isRepeated && !f2.isPacked ? (b2 = d2.call(a2, c2)) ? b2.push(g) : e2.call(a2, c2, [g]) : e2.call(a2, c2, g);
      } else
        b2.skipField();
    };
    jspb.Message.getField = function(a2, b2) {
      if (b2 < a2.pivot_) {
        b2 = jspb.Message.getIndex_(a2, b2);
        var c2 = a2.array[b2];
        return c2 === jspb.Message.EMPTY_LIST_SENTINEL_ ? a2.array[b2] = [] : c2;
      }
      if (a2.extensionObject_)
        return c2 = a2.extensionObject_[b2], c2 === jspb.Message.EMPTY_LIST_SENTINEL_ ? a2.extensionObject_[b2] = [] : c2;
    };
    jspb.Message.getRepeatedField = function(a2, b2) {
      return jspb.Message.getField(a2, b2);
    };
    jspb.Message.getOptionalFloatingPointField = function(a2, b2) {
      a2 = jspb.Message.getField(a2, b2);
      return a2 == null ? a2 : +a2;
    };
    jspb.Message.getBooleanField = function(a2, b2) {
      a2 = jspb.Message.getField(a2, b2);
      return a2 == null ? a2 : !!a2;
    };
    jspb.Message.getRepeatedFloatingPointField = function(a2, b2) {
      var c2 = jspb.Message.getRepeatedField(a2, b2);
      a2.convertedPrimitiveFields_ || (a2.convertedPrimitiveFields_ = {});
      if (!a2.convertedPrimitiveFields_[b2]) {
        for (var d2 = 0; d2 < c2.length; d2++)
          c2[d2] = +c2[d2];
        a2.convertedPrimitiveFields_[b2] = true;
      }
      return c2;
    };
    jspb.Message.getRepeatedBooleanField = function(a2, b2) {
      var c2 = jspb.Message.getRepeatedField(a2, b2);
      a2.convertedPrimitiveFields_ || (a2.convertedPrimitiveFields_ = {});
      if (!a2.convertedPrimitiveFields_[b2]) {
        for (var d2 = 0; d2 < c2.length; d2++)
          c2[d2] = !!c2[d2];
        a2.convertedPrimitiveFields_[b2] = true;
      }
      return c2;
    };
    jspb.Message.bytesAsB64 = function(a2) {
      if (a2 == null || typeof a2 === "string")
        return a2;
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array)
        return goog.crypt.base64.encodeByteArray(a2);
      goog.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(a2));
      return null;
    };
    jspb.Message.bytesAsU8 = function(a2) {
      if (a2 == null || a2 instanceof Uint8Array)
        return a2;
      if (typeof a2 === "string")
        return goog.crypt.base64.decodeStringToUint8Array(a2);
      goog.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(a2));
      return null;
    };
    jspb.Message.bytesListAsB64 = function(a2) {
      jspb.Message.assertConsistentTypes_(a2);
      return a2.length && typeof a2[0] !== "string" ? goog.array.map(a2, jspb.Message.bytesAsB64) : a2;
    };
    jspb.Message.bytesListAsU8 = function(a2) {
      jspb.Message.assertConsistentTypes_(a2);
      return !a2.length || a2[0] instanceof Uint8Array ? a2 : goog.array.map(a2, jspb.Message.bytesAsU8);
    };
    jspb.Message.assertConsistentTypes_ = function(a2) {
      if (goog.DEBUG && a2 && 1 < a2.length) {
        var b2 = goog.typeOf(a2[0]);
        goog.array.forEach(a2, function(a3) {
          goog.typeOf(a3) != b2 && goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(a3) + " expected " + b2);
        });
      }
    };
    jspb.Message.getFieldWithDefault = function(a2, b2, c2) {
      a2 = jspb.Message.getField(a2, b2);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getBooleanFieldWithDefault = function(a2, b2, c2) {
      a2 = jspb.Message.getBooleanField(a2, b2);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getFloatingPointFieldWithDefault = function(a2, b2, c2) {
      a2 = jspb.Message.getOptionalFloatingPointField(a2, b2);
      return a2 == null ? c2 : a2;
    };
    jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault;
    jspb.Message.getMapField = function(a2, b2, c2, d2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (b2 in a2.wrappers_)
        return a2.wrappers_[b2];
      var e2 = jspb.Message.getField(a2, b2);
      if (!e2) {
        if (c2)
          return;
        e2 = [];
        jspb.Message.setField(a2, b2, e2);
      }
      return a2.wrappers_[b2] = new jspb.Map(e2, d2);
    };
    jspb.Message.setField = function(a2, b2, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      b2 < a2.pivot_ ? a2.array[jspb.Message.getIndex_(a2, b2)] = c2 : (jspb.Message.maybeInitEmptyExtensionObject_(a2), a2.extensionObject_[b2] = c2);
      return a2;
    };
    jspb.Message.setProto3IntField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, 0);
    };
    jspb.Message.setProto3FloatField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, 0);
    };
    jspb.Message.setProto3BooleanField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, false);
    };
    jspb.Message.setProto3StringField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, "");
    };
    jspb.Message.setProto3BytesField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, "");
    };
    jspb.Message.setProto3EnumField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, 0);
    };
    jspb.Message.setProto3StringIntField = function(a2, b2, c2) {
      return jspb.Message.setFieldIgnoringDefault_(a2, b2, c2, "0");
    };
    jspb.Message.setFieldIgnoringDefault_ = function(a2, b2, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      c2 !== d2 ? jspb.Message.setField(a2, b2, c2) : b2 < a2.pivot_ ? a2.array[jspb.Message.getIndex_(a2, b2)] = null : (jspb.Message.maybeInitEmptyExtensionObject_(a2), delete a2.extensionObject_[b2]);
      return a2;
    };
    jspb.Message.addToRepeatedField = function(a2, b2, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      b2 = jspb.Message.getRepeatedField(a2, b2);
      d2 != void 0 ? b2.splice(d2, 0, c2) : b2.push(c2);
      return a2;
    };
    jspb.Message.setOneofField = function(a2, b2, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      (c2 = jspb.Message.computeOneofCase(a2, c2)) && c2 !== b2 && d2 !== void 0 && (a2.wrappers_ && c2 in a2.wrappers_ && (a2.wrappers_[c2] = void 0), jspb.Message.setField(a2, c2, void 0));
      return jspb.Message.setField(a2, b2, d2);
    };
    jspb.Message.computeOneofCase = function(a2, b2) {
      for (var c2, d2, e2 = 0; e2 < b2.length; e2++) {
        var f2 = b2[e2], g = jspb.Message.getField(a2, f2);
        g != null && (c2 = f2, d2 = g, jspb.Message.setField(a2, f2, void 0));
      }
      return c2 ? (jspb.Message.setField(a2, c2, d2), c2) : 0;
    };
    jspb.Message.getWrapperField = function(a2, b2, c2, d2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (!a2.wrappers_[c2]) {
        var e2 = jspb.Message.getField(a2, c2);
        if (d2 || e2)
          a2.wrappers_[c2] = new b2(e2);
      }
      return a2.wrappers_[c2];
    };
    jspb.Message.getRepeatedWrapperField = function(a2, b2, c2) {
      jspb.Message.wrapRepeatedField_(a2, b2, c2);
      b2 = a2.wrappers_[c2];
      b2 == jspb.Message.EMPTY_LIST_SENTINEL_ && (b2 = a2.wrappers_[c2] = []);
      return b2;
    };
    jspb.Message.wrapRepeatedField_ = function(a2, b2, c2) {
      a2.wrappers_ || (a2.wrappers_ = {});
      if (!a2.wrappers_[c2]) {
        for (var d2 = jspb.Message.getRepeatedField(a2, c2), e2 = [], f2 = 0; f2 < d2.length; f2++)
          e2[f2] = new b2(d2[f2]);
        a2.wrappers_[c2] = e2;
      }
    };
    jspb.Message.setWrapperField = function(a2, b2, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      var d2 = c2 ? c2.toArray() : c2;
      a2.wrappers_[b2] = c2;
      return jspb.Message.setField(a2, b2, d2);
    };
    jspb.Message.setOneofWrapperField = function(a2, b2, c2, d2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      var e2 = d2 ? d2.toArray() : d2;
      a2.wrappers_[b2] = d2;
      return jspb.Message.setOneofField(a2, b2, c2, e2);
    };
    jspb.Message.setRepeatedWrapperField = function(a2, b2, c2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      a2.wrappers_ || (a2.wrappers_ = {});
      c2 = c2 || [];
      for (var d2 = [], e2 = 0; e2 < c2.length; e2++)
        d2[e2] = c2[e2].toArray();
      a2.wrappers_[b2] = c2;
      return jspb.Message.setField(a2, b2, d2);
    };
    jspb.Message.addToRepeatedWrapperField = function(a2, b2, c2, d2, e2) {
      jspb.Message.wrapRepeatedField_(a2, d2, b2);
      var f2 = a2.wrappers_[b2];
      f2 || (f2 = a2.wrappers_[b2] = []);
      c2 = c2 ? c2 : new d2();
      a2 = jspb.Message.getRepeatedField(a2, b2);
      e2 != void 0 ? (f2.splice(e2, 0, c2), a2.splice(e2, 0, c2.toArray())) : (f2.push(c2), a2.push(c2.toArray()));
      return c2;
    };
    jspb.Message.toMap = function(a2, b2, c2, d2) {
      for (var e2 = {}, f2 = 0; f2 < a2.length; f2++)
        e2[b2.call(a2[f2])] = c2 ? c2.call(a2[f2], d2, a2[f2]) : a2[f2];
      return e2;
    };
    jspb.Message.prototype.syncMapFields_ = function() {
      if (this.wrappers_)
        for (var a2 in this.wrappers_) {
          var b2 = this.wrappers_[a2];
          if (Array.isArray(b2))
            for (var c2 = 0; c2 < b2.length; c2++)
              b2[c2] && b2[c2].toArray();
          else
            b2 && b2.toArray();
        }
    };
    jspb.Message.prototype.toArray = function() {
      this.syncMapFields_();
      return this.array;
    };
    jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function() {
      this.syncMapFields_();
      return this.array.toString();
    });
    jspb.Message.prototype.getExtension = function(a2) {
      if (this.extensionObject_) {
        this.wrappers_ || (this.wrappers_ = {});
        var b2 = a2.fieldIndex;
        if (a2.isRepeated) {
          if (a2.isMessageType())
            return this.wrappers_[b2] || (this.wrappers_[b2] = goog.array.map(this.extensionObject_[b2] || [], function(b3) {
              return new a2.ctor(b3);
            })), this.wrappers_[b2];
        } else if (a2.isMessageType())
          return !this.wrappers_[b2] && this.extensionObject_[b2] && (this.wrappers_[b2] = new a2.ctor(this.extensionObject_[b2])), this.wrappers_[b2];
        return this.extensionObject_[b2];
      }
    };
    jspb.Message.prototype.setExtension = function(a2, b2) {
      this.wrappers_ || (this.wrappers_ = {});
      jspb.Message.maybeInitEmptyExtensionObject_(this);
      var c2 = a2.fieldIndex;
      a2.isRepeated ? (b2 = b2 || [], a2.isMessageType() ? (this.wrappers_[c2] = b2, this.extensionObject_[c2] = goog.array.map(b2, function(a3) {
        return a3.toArray();
      })) : this.extensionObject_[c2] = b2) : a2.isMessageType() ? (this.wrappers_[c2] = b2, this.extensionObject_[c2] = b2 ? b2.toArray() : b2) : this.extensionObject_[c2] = b2;
      return this;
    };
    jspb.Message.difference = function(a2, b2) {
      if (!(a2 instanceof b2.constructor))
        throw Error("Messages have different types.");
      var c2 = a2.toArray();
      b2 = b2.toArray();
      var d2 = [], e2 = 0, f2 = c2.length > b2.length ? c2.length : b2.length;
      a2.getJsPbMessageId() && (d2[0] = a2.getJsPbMessageId(), e2 = 1);
      for (; e2 < f2; e2++)
        jspb.Message.compareFields(c2[e2], b2[e2]) || (d2[e2] = b2[e2]);
      return new a2.constructor(d2);
    };
    jspb.Message.equals = function(a2, b2) {
      return a2 == b2 || !(!a2 || !b2) && a2 instanceof b2.constructor && jspb.Message.compareFields(a2.toArray(), b2.toArray());
    };
    jspb.Message.compareExtensions = function(a2, b2) {
      a2 = a2 || {};
      b2 = b2 || {};
      var c2 = {}, d2;
      for (d2 in a2)
        c2[d2] = 0;
      for (d2 in b2)
        c2[d2] = 0;
      for (d2 in c2)
        if (!jspb.Message.compareFields(a2[d2], b2[d2]))
          return false;
      return true;
    };
    jspb.Message.compareFields = function(a2, b2) {
      if (a2 == b2)
        return true;
      if (!goog.isObject(a2) || !goog.isObject(b2))
        return typeof a2 === "number" && isNaN(a2) || typeof b2 === "number" && isNaN(b2) ? String(a2) == String(b2) : false;
      if (a2.constructor != b2.constructor)
        return false;
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2.constructor === Uint8Array) {
        if (a2.length != b2.length)
          return false;
        for (var c2 = 0; c2 < a2.length; c2++)
          if (a2[c2] != b2[c2])
            return false;
        return true;
      }
      if (a2.constructor === Array) {
        var d2 = void 0, e2 = void 0, f2 = Math.max(a2.length, b2.length);
        for (c2 = 0; c2 < f2; c2++) {
          var g = a2[c2], h = b2[c2];
          g && g.constructor == Object && (goog.asserts.assert(d2 === void 0), goog.asserts.assert(c2 === a2.length - 1), d2 = g, g = void 0);
          h && h.constructor == Object && (goog.asserts.assert(e2 === void 0), goog.asserts.assert(c2 === b2.length - 1), e2 = h, h = void 0);
          if (!jspb.Message.compareFields(g, h))
            return false;
        }
        return d2 || e2 ? (d2 = d2 || {}, e2 = e2 || {}, jspb.Message.compareExtensions(d2, e2)) : true;
      }
      if (a2.constructor === Object)
        return jspb.Message.compareExtensions(a2, b2);
      throw Error("Invalid type in JSPB array");
    };
    jspb.Message.prototype.cloneMessage = function() {
      return jspb.Message.cloneMessage(this);
    };
    jspb.Message.prototype.clone = function() {
      return jspb.Message.cloneMessage(this);
    };
    jspb.Message.clone = function(a2) {
      return jspb.Message.cloneMessage(a2);
    };
    jspb.Message.cloneMessage = function(a2) {
      return new a2.constructor(jspb.Message.clone_(a2.toArray()));
    };
    jspb.Message.copyInto = function(a2, b2) {
      goog.asserts.assertInstanceof(a2, jspb.Message);
      goog.asserts.assertInstanceof(b2, jspb.Message);
      goog.asserts.assert(a2.constructor == b2.constructor, "Copy source and target message should have the same type.");
      a2 = jspb.Message.clone(a2);
      for (var c2 = b2.toArray(), d2 = a2.toArray(), e2 = c2.length = 0; e2 < d2.length; e2++)
        c2[e2] = d2[e2];
      b2.wrappers_ = a2.wrappers_;
      b2.extensionObject_ = a2.extensionObject_;
    };
    jspb.Message.clone_ = function(a2) {
      if (Array.isArray(a2)) {
        for (var b2 = Array(a2.length), c2 = 0; c2 < a2.length; c2++) {
          var d2 = a2[c2];
          d2 != null && (b2[c2] = typeof d2 == "object" ? jspb.Message.clone_(goog.asserts.assert(d2)) : d2);
        }
        return b2;
      }
      if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a2 instanceof Uint8Array)
        return new Uint8Array(a2);
      b2 = {};
      for (c2 in a2)
        d2 = a2[c2], d2 != null && (b2[c2] = typeof d2 == "object" ? jspb.Message.clone_(goog.asserts.assert(d2)) : d2);
      return b2;
    };
    jspb.Message.registerMessageType = function(a2, b2) {
      b2.messageId = a2;
    };
    jspb.Message.messageSetExtensions = {};
    jspb.Message.messageSetExtensionsBinary = {};
    jspb.Export = {};
    typeof exports === "object" && (exports.Map = jspb.Map, exports.Message = jspb.Message, exports.BinaryReader = jspb.BinaryReader, exports.BinaryWriter = jspb.BinaryWriter, exports.ExtensionFieldInfo = jspb.ExtensionFieldInfo, exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo, exports.exportSymbol = goog.exportSymbol, exports.inherits = goog.inherits, exports.object = { extend: goog.object.extend }, exports.typeOf = goog.typeOf);
  }
});

// node_modules/google-protobuf/google/protobuf/descriptor_pb.js
var require_descriptor_pb = __commonJS({
  "node_modules/google-protobuf/google/protobuf/descriptor_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this || window || global2 || self || Function("return this")();
    }.call(null);
    goog2.exportSymbol("proto.google.protobuf.DescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.DescriptorProto.ExtensionRange", null, global2);
    goog2.exportSymbol("proto.google.protobuf.DescriptorProto.ReservedRange", null, global2);
    goog2.exportSymbol("proto.google.protobuf.EnumDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.EnumDescriptorProto.EnumReservedRange", null, global2);
    goog2.exportSymbol("proto.google.protobuf.EnumOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.EnumValueDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.EnumValueOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.ExtensionRangeOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldDescriptorProto.Label", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldDescriptorProto.Type", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldOptions.CType", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FieldOptions.JSType", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FileDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FileDescriptorSet", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FileOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.FileOptions.OptimizeMode", null, global2);
    goog2.exportSymbol("proto.google.protobuf.GeneratedCodeInfo", null, global2);
    goog2.exportSymbol("proto.google.protobuf.GeneratedCodeInfo.Annotation", null, global2);
    goog2.exportSymbol("proto.google.protobuf.MessageOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.MethodDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.MethodOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.MethodOptions.IdempotencyLevel", null, global2);
    goog2.exportSymbol("proto.google.protobuf.OneofDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.OneofOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.ServiceDescriptorProto", null, global2);
    goog2.exportSymbol("proto.google.protobuf.ServiceOptions", null, global2);
    goog2.exportSymbol("proto.google.protobuf.SourceCodeInfo", null, global2);
    goog2.exportSymbol("proto.google.protobuf.SourceCodeInfo.Location", null, global2);
    goog2.exportSymbol("proto.google.protobuf.UninterpretedOption", null, global2);
    goog2.exportSymbol("proto.google.protobuf.UninterpretedOption.NamePart", null, global2);
    proto.google.protobuf.FileDescriptorSet = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.FileDescriptorSet.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.FileDescriptorSet, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.FileDescriptorSet.displayName = "proto.google.protobuf.FileDescriptorSet";
    }
    proto.google.protobuf.FileDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.FileDescriptorProto.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.FileDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.FileDescriptorProto.displayName = "proto.google.protobuf.FileDescriptorProto";
    }
    proto.google.protobuf.DescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.DescriptorProto.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.DescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.DescriptorProto.displayName = "proto.google.protobuf.DescriptorProto";
    }
    proto.google.protobuf.DescriptorProto.ExtensionRange = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.DescriptorProto.ExtensionRange, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.DescriptorProto.ExtensionRange.displayName = "proto.google.protobuf.DescriptorProto.ExtensionRange";
    }
    proto.google.protobuf.DescriptorProto.ReservedRange = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.DescriptorProto.ReservedRange, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.DescriptorProto.ReservedRange.displayName = "proto.google.protobuf.DescriptorProto.ReservedRange";
    }
    proto.google.protobuf.ExtensionRangeOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.ExtensionRangeOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.ExtensionRangeOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.ExtensionRangeOptions.displayName = "proto.google.protobuf.ExtensionRangeOptions";
    }
    proto.google.protobuf.ExtensionRangeOptions.extensions = {};
    proto.google.protobuf.ExtensionRangeOptions.extensionsBinary = {};
    proto.google.protobuf.FieldDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.FieldDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.FieldDescriptorProto.displayName = "proto.google.protobuf.FieldDescriptorProto";
    }
    proto.google.protobuf.OneofDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.OneofDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.OneofDescriptorProto.displayName = "proto.google.protobuf.OneofDescriptorProto";
    }
    proto.google.protobuf.EnumDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.EnumDescriptorProto.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.EnumDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.EnumDescriptorProto.displayName = "proto.google.protobuf.EnumDescriptorProto";
    }
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.EnumDescriptorProto.EnumReservedRange, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.displayName = "proto.google.protobuf.EnumDescriptorProto.EnumReservedRange";
    }
    proto.google.protobuf.EnumValueDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.EnumValueDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.EnumValueDescriptorProto.displayName = "proto.google.protobuf.EnumValueDescriptorProto";
    }
    proto.google.protobuf.ServiceDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.ServiceDescriptorProto.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.ServiceDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.ServiceDescriptorProto.displayName = "proto.google.protobuf.ServiceDescriptorProto";
    }
    proto.google.protobuf.MethodDescriptorProto = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.MethodDescriptorProto, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.MethodDescriptorProto.displayName = "proto.google.protobuf.MethodDescriptorProto";
    }
    proto.google.protobuf.FileOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.FileOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.FileOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.FileOptions.displayName = "proto.google.protobuf.FileOptions";
    }
    proto.google.protobuf.FileOptions.extensions = {};
    proto.google.protobuf.FileOptions.extensionsBinary = {};
    proto.google.protobuf.MessageOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.MessageOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.MessageOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.MessageOptions.displayName = "proto.google.protobuf.MessageOptions";
    }
    proto.google.protobuf.MessageOptions.extensions = {};
    proto.google.protobuf.MessageOptions.extensionsBinary = {};
    proto.google.protobuf.FieldOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.FieldOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.FieldOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.FieldOptions.displayName = "proto.google.protobuf.FieldOptions";
    }
    proto.google.protobuf.FieldOptions.extensions = {};
    proto.google.protobuf.FieldOptions.extensionsBinary = {};
    proto.google.protobuf.OneofOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.OneofOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.OneofOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.OneofOptions.displayName = "proto.google.protobuf.OneofOptions";
    }
    proto.google.protobuf.OneofOptions.extensions = {};
    proto.google.protobuf.OneofOptions.extensionsBinary = {};
    proto.google.protobuf.EnumOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.EnumOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.EnumOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.EnumOptions.displayName = "proto.google.protobuf.EnumOptions";
    }
    proto.google.protobuf.EnumOptions.extensions = {};
    proto.google.protobuf.EnumOptions.extensionsBinary = {};
    proto.google.protobuf.EnumValueOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.EnumValueOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.EnumValueOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.EnumValueOptions.displayName = "proto.google.protobuf.EnumValueOptions";
    }
    proto.google.protobuf.EnumValueOptions.extensions = {};
    proto.google.protobuf.EnumValueOptions.extensionsBinary = {};
    proto.google.protobuf.ServiceOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.ServiceOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.ServiceOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.ServiceOptions.displayName = "proto.google.protobuf.ServiceOptions";
    }
    proto.google.protobuf.ServiceOptions.extensions = {};
    proto.google.protobuf.ServiceOptions.extensionsBinary = {};
    proto.google.protobuf.MethodOptions = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, 500, proto.google.protobuf.MethodOptions.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.MethodOptions, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.MethodOptions.displayName = "proto.google.protobuf.MethodOptions";
    }
    proto.google.protobuf.MethodOptions.extensions = {};
    proto.google.protobuf.MethodOptions.extensionsBinary = {};
    proto.google.protobuf.UninterpretedOption = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.UninterpretedOption.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.UninterpretedOption, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.UninterpretedOption.displayName = "proto.google.protobuf.UninterpretedOption";
    }
    proto.google.protobuf.UninterpretedOption.NamePart = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.google.protobuf.UninterpretedOption.NamePart, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.UninterpretedOption.NamePart.displayName = "proto.google.protobuf.UninterpretedOption.NamePart";
    }
    proto.google.protobuf.SourceCodeInfo = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.SourceCodeInfo.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.SourceCodeInfo, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.SourceCodeInfo.displayName = "proto.google.protobuf.SourceCodeInfo";
    }
    proto.google.protobuf.SourceCodeInfo.Location = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.SourceCodeInfo.Location.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.SourceCodeInfo.Location, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.SourceCodeInfo.Location.displayName = "proto.google.protobuf.SourceCodeInfo.Location";
    }
    proto.google.protobuf.GeneratedCodeInfo = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.GeneratedCodeInfo.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.GeneratedCodeInfo, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.GeneratedCodeInfo.displayName = "proto.google.protobuf.GeneratedCodeInfo";
    }
    proto.google.protobuf.GeneratedCodeInfo.Annotation = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.GeneratedCodeInfo.Annotation.repeatedFields_, null);
    };
    goog2.inherits(proto.google.protobuf.GeneratedCodeInfo.Annotation, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.google.protobuf.GeneratedCodeInfo.Annotation.displayName = "proto.google.protobuf.GeneratedCodeInfo.Annotation";
    }
    proto.google.protobuf.FileDescriptorSet.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.FileDescriptorSet.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.FileDescriptorSet.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.FileDescriptorSet.toObject = function(includeInstance, msg) {
        var f2, obj = {
          fileList: jspb2.Message.toObjectList(msg.getFileList(), proto.google.protobuf.FileDescriptorProto.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.FileDescriptorSet.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.FileDescriptorSet();
      return proto.google.protobuf.FileDescriptorSet.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.FileDescriptorSet.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.google.protobuf.FileDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader);
            msg.addFile(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.FileDescriptorSet.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.FileDescriptorSet.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.FileDescriptorSet.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getFileList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.FileDescriptorSet.prototype.getFileList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.FileDescriptorProto, 1);
    };
    proto.google.protobuf.FileDescriptorSet.prototype.setFileList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.google.protobuf.FileDescriptorSet.prototype.addFile = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.FileDescriptorProto, opt_index);
    };
    proto.google.protobuf.FileDescriptorSet.prototype.clearFileList = function() {
      return this.setFileList([]);
    };
    proto.google.protobuf.FileDescriptorProto.repeatedFields_ = [3, 10, 11, 4, 5, 6, 7];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.FileDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.FileDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.FileDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          pb_package: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          dependencyList: (f2 = jspb2.Message.getRepeatedField(msg, 3)) == null ? void 0 : f2,
          publicDependencyList: (f2 = jspb2.Message.getRepeatedField(msg, 10)) == null ? void 0 : f2,
          weakDependencyList: (f2 = jspb2.Message.getRepeatedField(msg, 11)) == null ? void 0 : f2,
          messageTypeList: jspb2.Message.toObjectList(msg.getMessageTypeList(), proto.google.protobuf.DescriptorProto.toObject, includeInstance),
          enumTypeList: jspb2.Message.toObjectList(msg.getEnumTypeList(), proto.google.protobuf.EnumDescriptorProto.toObject, includeInstance),
          serviceList: jspb2.Message.toObjectList(msg.getServiceList(), proto.google.protobuf.ServiceDescriptorProto.toObject, includeInstance),
          extensionList: jspb2.Message.toObjectList(msg.getExtensionList(), proto.google.protobuf.FieldDescriptorProto.toObject, includeInstance),
          options: (f2 = msg.getOptions()) && proto.google.protobuf.FileOptions.toObject(includeInstance, f2),
          sourceCodeInfo: (f2 = msg.getSourceCodeInfo()) && proto.google.protobuf.SourceCodeInfo.toObject(includeInstance, f2),
          syntax: (f2 = jspb2.Message.getField(msg, 12)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.FileDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.FileDescriptorProto();
      return proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setPackage(value);
            break;
          case 3:
            var value = reader.readString();
            msg.addDependency(value);
            break;
          case 10:
            var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
            for (var i = 0; i < values.length; i++) {
              msg.addPublicDependency(values[i]);
            }
            break;
          case 11:
            var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
            for (var i = 0; i < values.length; i++) {
              msg.addWeakDependency(values[i]);
            }
            break;
          case 4:
            var value = new proto.google.protobuf.DescriptorProto();
            reader.readMessage(value, proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader);
            msg.addMessageType(value);
            break;
          case 5:
            var value = new proto.google.protobuf.EnumDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader);
            msg.addEnumType(value);
            break;
          case 6:
            var value = new proto.google.protobuf.ServiceDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader);
            msg.addService(value);
            break;
          case 7:
            var value = new proto.google.protobuf.FieldDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader);
            msg.addExtension$(value);
            break;
          case 8:
            var value = new proto.google.protobuf.FileOptions();
            reader.readMessage(value, proto.google.protobuf.FileOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          case 9:
            var value = new proto.google.protobuf.SourceCodeInfo();
            reader.readMessage(value, proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader);
            msg.setSourceCodeInfo(value);
            break;
          case 12:
            var value = reader.readString();
            msg.setSyntax(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.FileDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = message.getDependencyList();
      if (f2.length > 0) {
        writer.writeRepeatedString(3, f2);
      }
      f2 = message.getPublicDependencyList();
      if (f2.length > 0) {
        writer.writeRepeatedInt32(10, f2);
      }
      f2 = message.getWeakDependencyList();
      if (f2.length > 0) {
        writer.writeRepeatedInt32(11, f2);
      }
      f2 = message.getMessageTypeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(4, f2, proto.google.protobuf.DescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getEnumTypeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(5, f2, proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getServiceList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(6, f2, proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getExtensionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(7, f2, proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(8, f2, proto.google.protobuf.FileOptions.serializeBinaryToWriter);
      }
      f2 = message.getSourceCodeInfo();
      if (f2 != null) {
        writer.writeMessage(9, f2, proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeString(12, f2);
      }
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getPackage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setPackage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearPackage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.hasPackage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getDependencyList = function() {
      return jspb2.Message.getRepeatedField(this, 3);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setDependencyList = function(value) {
      return jspb2.Message.setField(this, 3, value || []);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addDependency = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 3, value, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearDependencyList = function() {
      return this.setDependencyList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getPublicDependencyList = function() {
      return jspb2.Message.getRepeatedField(this, 10);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setPublicDependencyList = function(value) {
      return jspb2.Message.setField(this, 10, value || []);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addPublicDependency = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 10, value, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearPublicDependencyList = function() {
      return this.setPublicDependencyList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getWeakDependencyList = function() {
      return jspb2.Message.getRepeatedField(this, 11);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setWeakDependencyList = function(value) {
      return jspb2.Message.setField(this, 11, value || []);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addWeakDependency = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 11, value, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearWeakDependencyList = function() {
      return this.setWeakDependencyList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getMessageTypeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.DescriptorProto, 4);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setMessageTypeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 4, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addMessageType = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.google.protobuf.DescriptorProto, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearMessageTypeList = function() {
      return this.setMessageTypeList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getEnumTypeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.EnumDescriptorProto, 5);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setEnumTypeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 5, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addEnumType = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.google.protobuf.EnumDescriptorProto, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearEnumTypeList = function() {
      return this.setEnumTypeList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getServiceList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.ServiceDescriptorProto, 6);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setServiceList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 6, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addService = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.google.protobuf.ServiceDescriptorProto, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearServiceList = function() {
      return this.setServiceList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getExtensionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.FieldDescriptorProto, 7);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setExtensionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 7, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.addExtension$ = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.google.protobuf.FieldDescriptorProto, opt_index);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearExtensionList = function() {
      return this.setExtensionList([]);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.FileOptions, 8);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 8, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getSourceCodeInfo = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.SourceCodeInfo, 9);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setSourceCodeInfo = function(value) {
      return jspb2.Message.setWrapperField(this, 9, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearSourceCodeInfo = function() {
      return this.setSourceCodeInfo(void 0);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.hasSourceCodeInfo = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.google.protobuf.FileDescriptorProto.prototype.getSyntax = function() {
      return jspb2.Message.getFieldWithDefault(this, 12, "");
    };
    proto.google.protobuf.FileDescriptorProto.prototype.setSyntax = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.clearSyntax = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.google.protobuf.FileDescriptorProto.prototype.hasSyntax = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.google.protobuf.DescriptorProto.repeatedFields_ = [2, 6, 3, 4, 5, 8, 9, 10];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.DescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.DescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.DescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          fieldList: jspb2.Message.toObjectList(msg.getFieldList(), proto.google.protobuf.FieldDescriptorProto.toObject, includeInstance),
          extensionList: jspb2.Message.toObjectList(msg.getExtensionList(), proto.google.protobuf.FieldDescriptorProto.toObject, includeInstance),
          nestedTypeList: jspb2.Message.toObjectList(msg.getNestedTypeList(), proto.google.protobuf.DescriptorProto.toObject, includeInstance),
          enumTypeList: jspb2.Message.toObjectList(msg.getEnumTypeList(), proto.google.protobuf.EnumDescriptorProto.toObject, includeInstance),
          extensionRangeList: jspb2.Message.toObjectList(msg.getExtensionRangeList(), proto.google.protobuf.DescriptorProto.ExtensionRange.toObject, includeInstance),
          oneofDeclList: jspb2.Message.toObjectList(msg.getOneofDeclList(), proto.google.protobuf.OneofDescriptorProto.toObject, includeInstance),
          options: (f2 = msg.getOptions()) && proto.google.protobuf.MessageOptions.toObject(includeInstance, f2),
          reservedRangeList: jspb2.Message.toObjectList(msg.getReservedRangeList(), proto.google.protobuf.DescriptorProto.ReservedRange.toObject, includeInstance),
          reservedNameList: (f2 = jspb2.Message.getRepeatedField(msg, 10)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.DescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.DescriptorProto();
      return proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = new proto.google.protobuf.FieldDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader);
            msg.addField(value);
            break;
          case 6:
            var value = new proto.google.protobuf.FieldDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader);
            msg.addExtension$(value);
            break;
          case 3:
            var value = new proto.google.protobuf.DescriptorProto();
            reader.readMessage(value, proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader);
            msg.addNestedType(value);
            break;
          case 4:
            var value = new proto.google.protobuf.EnumDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader);
            msg.addEnumType(value);
            break;
          case 5:
            var value = new proto.google.protobuf.DescriptorProto.ExtensionRange();
            reader.readMessage(value, proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader);
            msg.addExtensionRange(value);
            break;
          case 8:
            var value = new proto.google.protobuf.OneofDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader);
            msg.addOneofDecl(value);
            break;
          case 7:
            var value = new proto.google.protobuf.MessageOptions();
            reader.readMessage(value, proto.google.protobuf.MessageOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          case 9:
            var value = new proto.google.protobuf.DescriptorProto.ReservedRange();
            reader.readMessage(value, proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader);
            msg.addReservedRange(value);
            break;
          case 10:
            var value = reader.readString();
            msg.addReservedName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.DescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.DescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.DescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getFieldList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getExtensionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(6, f2, proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getNestedTypeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(3, f2, proto.google.protobuf.DescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getEnumTypeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(4, f2, proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getExtensionRangeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(5, f2, proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter);
      }
      f2 = message.getOneofDeclList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(8, f2, proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(7, f2, proto.google.protobuf.MessageOptions.serializeBinaryToWriter);
      }
      f2 = message.getReservedRangeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(9, f2, proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter);
      }
      f2 = message.getReservedNameList();
      if (f2.length > 0) {
        writer.writeRepeatedString(10, f2);
      }
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.DescriptorProto.ExtensionRange.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.DescriptorProto.ExtensionRange.toObject = function(includeInstance, msg) {
        var f2, obj = {
          start: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          end: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          options: (f2 = msg.getOptions()) && proto.google.protobuf.ExtensionRangeOptions.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.DescriptorProto.ExtensionRange();
      return proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readInt32();
            msg.setStart(value);
            break;
          case 2:
            var value = reader.readInt32();
            msg.setEnd(value);
            break;
          case 3:
            var value = new proto.google.protobuf.ExtensionRangeOptions();
            reader.readMessage(value, proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeInt32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeInt32(2, f2);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getStart = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setStart = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearStart = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasStart = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getEnd = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setEnd = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearEnd = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasEnd = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.ExtensionRangeOptions, 3);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.DescriptorProto.ReservedRange.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.DescriptorProto.ReservedRange.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.DescriptorProto.ReservedRange.toObject = function(includeInstance, msg) {
        var f2, obj = {
          start: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          end: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.DescriptorProto.ReservedRange();
      return proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readInt32();
            msg.setStart(value);
            break;
          case 2:
            var value = reader.readInt32();
            msg.setEnd(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeInt32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeInt32(2, f2);
      }
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.getStart = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.setStart = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.clearStart = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.hasStart = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.getEnd = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.setEnd = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.clearEnd = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.DescriptorProto.ReservedRange.prototype.hasEnd = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.DescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.DescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.DescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.DescriptorProto.prototype.getFieldList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.FieldDescriptorProto, 2);
    };
    proto.google.protobuf.DescriptorProto.prototype.setFieldList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addField = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.protobuf.FieldDescriptorProto, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearFieldList = function() {
      return this.setFieldList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getExtensionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.FieldDescriptorProto, 6);
    };
    proto.google.protobuf.DescriptorProto.prototype.setExtensionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 6, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addExtension$ = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.google.protobuf.FieldDescriptorProto, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearExtensionList = function() {
      return this.setExtensionList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getNestedTypeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.DescriptorProto, 3);
    };
    proto.google.protobuf.DescriptorProto.prototype.setNestedTypeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addNestedType = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.DescriptorProto, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearNestedTypeList = function() {
      return this.setNestedTypeList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getEnumTypeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.EnumDescriptorProto, 4);
    };
    proto.google.protobuf.DescriptorProto.prototype.setEnumTypeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 4, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addEnumType = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.google.protobuf.EnumDescriptorProto, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearEnumTypeList = function() {
      return this.setEnumTypeList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getExtensionRangeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.DescriptorProto.ExtensionRange, 5);
    };
    proto.google.protobuf.DescriptorProto.prototype.setExtensionRangeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 5, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addExtensionRange = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.google.protobuf.DescriptorProto.ExtensionRange, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearExtensionRangeList = function() {
      return this.setExtensionRangeList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getOneofDeclList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.OneofDescriptorProto, 8);
    };
    proto.google.protobuf.DescriptorProto.prototype.setOneofDeclList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 8, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addOneofDecl = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.google.protobuf.OneofDescriptorProto, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearOneofDeclList = function() {
      return this.setOneofDeclList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.MessageOptions, 7);
    };
    proto.google.protobuf.DescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 7, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.DescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.google.protobuf.DescriptorProto.prototype.getReservedRangeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.DescriptorProto.ReservedRange, 9);
    };
    proto.google.protobuf.DescriptorProto.prototype.setReservedRangeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 9, value);
    };
    proto.google.protobuf.DescriptorProto.prototype.addReservedRange = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.google.protobuf.DescriptorProto.ReservedRange, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearReservedRangeList = function() {
      return this.setReservedRangeList([]);
    };
    proto.google.protobuf.DescriptorProto.prototype.getReservedNameList = function() {
      return jspb2.Message.getRepeatedField(this, 10);
    };
    proto.google.protobuf.DescriptorProto.prototype.setReservedNameList = function(value) {
      return jspb2.Message.setField(this, 10, value || []);
    };
    proto.google.protobuf.DescriptorProto.prototype.addReservedName = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 10, value, opt_index);
    };
    proto.google.protobuf.DescriptorProto.prototype.clearReservedNameList = function() {
      return this.setReservedNameList([]);
    };
    proto.google.protobuf.ExtensionRangeOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.ExtensionRangeOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.ExtensionRangeOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.ExtensionRangeOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.ExtensionRangeOptions.extensions, proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.ExtensionRangeOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.ExtensionRangeOptions();
      return proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.ExtensionRangeOptions.extensionsBinary, proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension, proto.google.protobuf.ExtensionRangeOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.ExtensionRangeOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.ExtensionRangeOptions.extensionsBinary, proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension);
    };
    proto.google.protobuf.ExtensionRangeOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.ExtensionRangeOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.ExtensionRangeOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.ExtensionRangeOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.FieldDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.FieldDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.FieldDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          number: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          label: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          type: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          typeName: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          extendee: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          defaultValue: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          oneofIndex: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          jsonName: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2,
          options: (f2 = msg.getOptions()) && proto.google.protobuf.FieldOptions.toObject(includeInstance, f2),
          proto3Optional: (f2 = jspb2.Message.getBooleanField(msg, 17)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.FieldDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.FieldDescriptorProto();
      return proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 3:
            var value = reader.readInt32();
            msg.setNumber(value);
            break;
          case 4:
            var value = reader.readEnum();
            msg.setLabel(value);
            break;
          case 5:
            var value = reader.readEnum();
            msg.setType(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setTypeName(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setExtendee(value);
            break;
          case 7:
            var value = reader.readString();
            msg.setDefaultValue(value);
            break;
          case 9:
            var value = reader.readInt32();
            msg.setOneofIndex(value);
            break;
          case 10:
            var value = reader.readString();
            msg.setJsonName(value);
            break;
          case 8:
            var value = new proto.google.protobuf.FieldOptions();
            reader.readMessage(value, proto.google.protobuf.FieldOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          case 17:
            var value = reader.readBool();
            msg.setProto3Optional(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeInt32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeEnum(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeEnum(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeInt32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeString(10, f2);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(8, f2, proto.google.protobuf.FieldOptions.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 17);
      if (f2 != null) {
        writer.writeBool(17, f2);
      }
    };
    proto.google.protobuf.FieldDescriptorProto.Type = {
      TYPE_DOUBLE: 1,
      TYPE_FLOAT: 2,
      TYPE_INT64: 3,
      TYPE_UINT64: 4,
      TYPE_INT32: 5,
      TYPE_FIXED64: 6,
      TYPE_FIXED32: 7,
      TYPE_BOOL: 8,
      TYPE_STRING: 9,
      TYPE_GROUP: 10,
      TYPE_MESSAGE: 11,
      TYPE_BYTES: 12,
      TYPE_UINT32: 13,
      TYPE_ENUM: 14,
      TYPE_SFIXED32: 15,
      TYPE_SFIXED64: 16,
      TYPE_SINT32: 17,
      TYPE_SINT64: 18
    };
    proto.google.protobuf.FieldDescriptorProto.Label = {
      LABEL_OPTIONAL: 1,
      LABEL_REQUIRED: 2,
      LABEL_REPEATED: 3
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getNumber = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setNumber = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearNumber = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasNumber = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 1);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 1);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearType = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasType = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getTypeName = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setTypeName = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearTypeName = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasTypeName = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getExtendee = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setExtendee = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearExtendee = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasExtendee = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getDefaultValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setDefaultValue = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearDefaultValue = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasDefaultValue = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getOneofIndex = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setOneofIndex = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearOneofIndex = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasOneofIndex = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getJsonName = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, "");
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setJsonName = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearJsonName = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasJsonName = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.FieldOptions, 8);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 8, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.getProto3Optional = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 17, false);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.setProto3Optional = function(value) {
      return jspb2.Message.setField(this, 17, value);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.clearProto3Optional = function() {
      return jspb2.Message.setField(this, 17, void 0);
    };
    proto.google.protobuf.FieldDescriptorProto.prototype.hasProto3Optional = function() {
      return jspb2.Message.getField(this, 17) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.OneofDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.OneofDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.OneofDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          options: (f2 = msg.getOptions()) && proto.google.protobuf.OneofOptions.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.OneofDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.OneofDescriptorProto();
      return proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = new proto.google.protobuf.OneofOptions();
            reader.readMessage(value, proto.google.protobuf.OneofOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(2, f2, proto.google.protobuf.OneofOptions.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.OneofOptions, 2);
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 2, value);
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.OneofDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.EnumDescriptorProto.repeatedFields_ = [2, 4, 5];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.EnumDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.EnumDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.EnumDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          valueList: jspb2.Message.toObjectList(msg.getValueList(), proto.google.protobuf.EnumValueDescriptorProto.toObject, includeInstance),
          options: (f2 = msg.getOptions()) && proto.google.protobuf.EnumOptions.toObject(includeInstance, f2),
          reservedRangeList: jspb2.Message.toObjectList(msg.getReservedRangeList(), proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject, includeInstance),
          reservedNameList: (f2 = jspb2.Message.getRepeatedField(msg, 5)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.EnumDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.EnumDescriptorProto();
      return proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = new proto.google.protobuf.EnumValueDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader);
            msg.addValue(value);
            break;
          case 3:
            var value = new proto.google.protobuf.EnumOptions();
            reader.readMessage(value, proto.google.protobuf.EnumOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          case 4:
            var value = new proto.google.protobuf.EnumDescriptorProto.EnumReservedRange();
            reader.readMessage(value, proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader);
            msg.addReservedRange(value);
            break;
          case 5:
            var value = reader.readString();
            msg.addReservedName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getValueList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.google.protobuf.EnumOptions.serializeBinaryToWriter);
      }
      f2 = message.getReservedRangeList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(4, f2, proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter);
      }
      f2 = message.getReservedNameList();
      if (f2.length > 0) {
        writer.writeRepeatedString(5, f2);
      }
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject = function(includeInstance, msg) {
        var f2, obj = {
          start: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          end: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.EnumDescriptorProto.EnumReservedRange();
      return proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readInt32();
            msg.setStart(value);
            break;
          case 2:
            var value = reader.readInt32();
            msg.setEnd(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeInt32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeInt32(2, f2);
      }
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.getStart = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.setStart = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.clearStart = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.hasStart = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.getEnd = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.setEnd = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.clearEnd = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.hasEnd = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.getValueList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.EnumValueDescriptorProto, 2);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.setValueList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.addValue = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.protobuf.EnumValueDescriptorProto, opt_index);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.clearValueList = function() {
      return this.setValueList([]);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.EnumOptions, 3);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.getReservedRangeList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.EnumDescriptorProto.EnumReservedRange, 4);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.setReservedRangeList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 4, value);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.addReservedRange = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.google.protobuf.EnumDescriptorProto.EnumReservedRange, opt_index);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.clearReservedRangeList = function() {
      return this.setReservedRangeList([]);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.getReservedNameList = function() {
      return jspb2.Message.getRepeatedField(this, 5);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.setReservedNameList = function(value) {
      return jspb2.Message.setField(this, 5, value || []);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.addReservedName = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 5, value, opt_index);
    };
    proto.google.protobuf.EnumDescriptorProto.prototype.clearReservedNameList = function() {
      return this.setReservedNameList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.EnumValueDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.EnumValueDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.EnumValueDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          number: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          options: (f2 = msg.getOptions()) && proto.google.protobuf.EnumValueOptions.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.EnumValueDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.EnumValueDescriptorProto();
      return proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = reader.readInt32();
            msg.setNumber(value);
            break;
          case 3:
            var value = new proto.google.protobuf.EnumValueOptions();
            reader.readMessage(value, proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeInt32(2, f2);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.getNumber = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.setNumber = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.clearNumber = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.hasNumber = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.EnumValueOptions, 3);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.EnumValueDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.ServiceDescriptorProto.repeatedFields_ = [2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.ServiceDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.ServiceDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.ServiceDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          methodList: jspb2.Message.toObjectList(msg.getMethodList(), proto.google.protobuf.MethodDescriptorProto.toObject, includeInstance),
          options: (f2 = msg.getOptions()) && proto.google.protobuf.ServiceOptions.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.ServiceDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.ServiceDescriptorProto();
      return proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = new proto.google.protobuf.MethodDescriptorProto();
            reader.readMessage(value, proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader);
            msg.addMethod(value);
            break;
          case 3:
            var value = new proto.google.protobuf.ServiceOptions();
            reader.readMessage(value, proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getMethodList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.google.protobuf.ServiceOptions.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.getMethodList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.MethodDescriptorProto, 2);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.setMethodList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.addMethod = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.protobuf.MethodDescriptorProto, opt_index);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.clearMethodList = function() {
      return this.setMethodList([]);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.ServiceOptions, 3);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.ServiceDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.MethodDescriptorProto.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.MethodDescriptorProto.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.MethodDescriptorProto.toObject = function(includeInstance, msg) {
        var f2, obj = {
          name: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          inputType: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          outputType: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          options: (f2 = msg.getOptions()) && proto.google.protobuf.MethodOptions.toObject(includeInstance, f2),
          clientStreaming: jspb2.Message.getBooleanFieldWithDefault(msg, 5, false),
          serverStreaming: jspb2.Message.getBooleanFieldWithDefault(msg, 6, false)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.MethodDescriptorProto.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.MethodDescriptorProto();
      return proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setName(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setInputType(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setOutputType(value);
            break;
          case 4:
            var value = new proto.google.protobuf.MethodOptions();
            reader.readMessage(value, proto.google.protobuf.MethodOptions.deserializeBinaryFromReader);
            msg.setOptions(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setClientStreaming(value);
            break;
          case 6:
            var value = reader.readBool();
            msg.setServerStreaming(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = message.getOptions();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.google.protobuf.MethodOptions.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBool(6, f2);
      }
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getInputType = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setInputType = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearInputType = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasInputType = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getOutputType = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setOutputType = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearOutputType = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasOutputType = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getOptions = function() {
      return jspb2.Message.getWrapperField(this, proto.google.protobuf.MethodOptions, 4);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setOptions = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearOptions = function() {
      return this.setOptions(void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasOptions = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getClientStreaming = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setClientStreaming = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearClientStreaming = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasClientStreaming = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.getServerStreaming = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 6, false);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.setServerStreaming = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.clearServerStreaming = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.google.protobuf.MethodDescriptorProto.prototype.hasServerStreaming = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.google.protobuf.FileOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.FileOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.FileOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.FileOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          javaPackage: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          javaOuterClassname: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          javaMultipleFiles: jspb2.Message.getBooleanFieldWithDefault(msg, 10, false),
          javaGenerateEqualsAndHash: (f2 = jspb2.Message.getBooleanField(msg, 20)) == null ? void 0 : f2,
          javaStringCheckUtf8: jspb2.Message.getBooleanFieldWithDefault(msg, 27, false),
          optimizeFor: jspb2.Message.getFieldWithDefault(msg, 9, 1),
          goPackage: (f2 = jspb2.Message.getField(msg, 11)) == null ? void 0 : f2,
          ccGenericServices: jspb2.Message.getBooleanFieldWithDefault(msg, 16, false),
          javaGenericServices: jspb2.Message.getBooleanFieldWithDefault(msg, 17, false),
          pyGenericServices: jspb2.Message.getBooleanFieldWithDefault(msg, 18, false),
          phpGenericServices: jspb2.Message.getBooleanFieldWithDefault(msg, 42, false),
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 23, false),
          ccEnableArenas: jspb2.Message.getBooleanFieldWithDefault(msg, 31, true),
          objcClassPrefix: (f2 = jspb2.Message.getField(msg, 36)) == null ? void 0 : f2,
          csharpNamespace: (f2 = jspb2.Message.getField(msg, 37)) == null ? void 0 : f2,
          swiftPrefix: (f2 = jspb2.Message.getField(msg, 39)) == null ? void 0 : f2,
          phpClassPrefix: (f2 = jspb2.Message.getField(msg, 40)) == null ? void 0 : f2,
          phpNamespace: (f2 = jspb2.Message.getField(msg, 41)) == null ? void 0 : f2,
          phpMetadataNamespace: (f2 = jspb2.Message.getField(msg, 44)) == null ? void 0 : f2,
          rubyPackage: (f2 = jspb2.Message.getField(msg, 45)) == null ? void 0 : f2,
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.FileOptions.extensions, proto.google.protobuf.FileOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.FileOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.FileOptions();
      return proto.google.protobuf.FileOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.FileOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setJavaPackage(value);
            break;
          case 8:
            var value = reader.readString();
            msg.setJavaOuterClassname(value);
            break;
          case 10:
            var value = reader.readBool();
            msg.setJavaMultipleFiles(value);
            break;
          case 20:
            var value = reader.readBool();
            msg.setJavaGenerateEqualsAndHash(value);
            break;
          case 27:
            var value = reader.readBool();
            msg.setJavaStringCheckUtf8(value);
            break;
          case 9:
            var value = reader.readEnum();
            msg.setOptimizeFor(value);
            break;
          case 11:
            var value = reader.readString();
            msg.setGoPackage(value);
            break;
          case 16:
            var value = reader.readBool();
            msg.setCcGenericServices(value);
            break;
          case 17:
            var value = reader.readBool();
            msg.setJavaGenericServices(value);
            break;
          case 18:
            var value = reader.readBool();
            msg.setPyGenericServices(value);
            break;
          case 42:
            var value = reader.readBool();
            msg.setPhpGenericServices(value);
            break;
          case 23:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 31:
            var value = reader.readBool();
            msg.setCcEnableArenas(value);
            break;
          case 36:
            var value = reader.readString();
            msg.setObjcClassPrefix(value);
            break;
          case 37:
            var value = reader.readString();
            msg.setCsharpNamespace(value);
            break;
          case 39:
            var value = reader.readString();
            msg.setSwiftPrefix(value);
            break;
          case 40:
            var value = reader.readString();
            msg.setPhpClassPrefix(value);
            break;
          case 41:
            var value = reader.readString();
            msg.setPhpNamespace(value);
            break;
          case 44:
            var value = reader.readString();
            msg.setPhpMetadataNamespace(value);
            break;
          case 45:
            var value = reader.readString();
            msg.setRubyPackage(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.FileOptions.extensionsBinary, proto.google.protobuf.FileOptions.prototype.getExtension, proto.google.protobuf.FileOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.FileOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.FileOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.FileOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeString(8, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeBool(10, f2);
      }
      f2 = jspb2.Message.getField(message, 20);
      if (f2 != null) {
        writer.writeBool(20, f2);
      }
      f2 = jspb2.Message.getField(message, 27);
      if (f2 != null) {
        writer.writeBool(27, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeEnum(9, f2);
      }
      f2 = jspb2.Message.getField(message, 11);
      if (f2 != null) {
        writer.writeString(11, f2);
      }
      f2 = jspb2.Message.getField(message, 16);
      if (f2 != null) {
        writer.writeBool(16, f2);
      }
      f2 = jspb2.Message.getField(message, 17);
      if (f2 != null) {
        writer.writeBool(17, f2);
      }
      f2 = jspb2.Message.getField(message, 18);
      if (f2 != null) {
        writer.writeBool(18, f2);
      }
      f2 = jspb2.Message.getField(message, 42);
      if (f2 != null) {
        writer.writeBool(42, f2);
      }
      f2 = jspb2.Message.getField(message, 23);
      if (f2 != null) {
        writer.writeBool(23, f2);
      }
      f2 = jspb2.Message.getField(message, 31);
      if (f2 != null) {
        writer.writeBool(31, f2);
      }
      f2 = jspb2.Message.getField(message, 36);
      if (f2 != null) {
        writer.writeString(36, f2);
      }
      f2 = jspb2.Message.getField(message, 37);
      if (f2 != null) {
        writer.writeString(37, f2);
      }
      f2 = jspb2.Message.getField(message, 39);
      if (f2 != null) {
        writer.writeString(39, f2);
      }
      f2 = jspb2.Message.getField(message, 40);
      if (f2 != null) {
        writer.writeString(40, f2);
      }
      f2 = jspb2.Message.getField(message, 41);
      if (f2 != null) {
        writer.writeString(41, f2);
      }
      f2 = jspb2.Message.getField(message, 44);
      if (f2 != null) {
        writer.writeString(44, f2);
      }
      f2 = jspb2.Message.getField(message, 45);
      if (f2 != null) {
        writer.writeString(45, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.FileOptions.extensionsBinary, proto.google.protobuf.FileOptions.prototype.getExtension);
    };
    proto.google.protobuf.FileOptions.OptimizeMode = {
      SPEED: 1,
      CODE_SIZE: 2,
      LITE_RUNTIME: 3
    };
    proto.google.protobuf.FileOptions.prototype.getJavaPackage = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.FileOptions.prototype.setJavaPackage = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaPackage = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaPackage = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getJavaOuterClassname = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.google.protobuf.FileOptions.prototype.setJavaOuterClassname = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaOuterClassname = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaOuterClassname = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getJavaMultipleFiles = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 10, false);
    };
    proto.google.protobuf.FileOptions.prototype.setJavaMultipleFiles = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaMultipleFiles = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaMultipleFiles = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getJavaGenerateEqualsAndHash = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 20, false);
    };
    proto.google.protobuf.FileOptions.prototype.setJavaGenerateEqualsAndHash = function(value) {
      return jspb2.Message.setField(this, 20, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaGenerateEqualsAndHash = function() {
      return jspb2.Message.setField(this, 20, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaGenerateEqualsAndHash = function() {
      return jspb2.Message.getField(this, 20) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getJavaStringCheckUtf8 = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 27, false);
    };
    proto.google.protobuf.FileOptions.prototype.setJavaStringCheckUtf8 = function(value) {
      return jspb2.Message.setField(this, 27, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaStringCheckUtf8 = function() {
      return jspb2.Message.setField(this, 27, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaStringCheckUtf8 = function() {
      return jspb2.Message.getField(this, 27) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getOptimizeFor = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 1);
    };
    proto.google.protobuf.FileOptions.prototype.setOptimizeFor = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearOptimizeFor = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasOptimizeFor = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getGoPackage = function() {
      return jspb2.Message.getFieldWithDefault(this, 11, "");
    };
    proto.google.protobuf.FileOptions.prototype.setGoPackage = function(value) {
      return jspb2.Message.setField(this, 11, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearGoPackage = function() {
      return jspb2.Message.setField(this, 11, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasGoPackage = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getCcGenericServices = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 16, false);
    };
    proto.google.protobuf.FileOptions.prototype.setCcGenericServices = function(value) {
      return jspb2.Message.setField(this, 16, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearCcGenericServices = function() {
      return jspb2.Message.setField(this, 16, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasCcGenericServices = function() {
      return jspb2.Message.getField(this, 16) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getJavaGenericServices = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 17, false);
    };
    proto.google.protobuf.FileOptions.prototype.setJavaGenericServices = function(value) {
      return jspb2.Message.setField(this, 17, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearJavaGenericServices = function() {
      return jspb2.Message.setField(this, 17, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasJavaGenericServices = function() {
      return jspb2.Message.getField(this, 17) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getPyGenericServices = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 18, false);
    };
    proto.google.protobuf.FileOptions.prototype.setPyGenericServices = function(value) {
      return jspb2.Message.setField(this, 18, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearPyGenericServices = function() {
      return jspb2.Message.setField(this, 18, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasPyGenericServices = function() {
      return jspb2.Message.getField(this, 18) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getPhpGenericServices = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 42, false);
    };
    proto.google.protobuf.FileOptions.prototype.setPhpGenericServices = function(value) {
      return jspb2.Message.setField(this, 42, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearPhpGenericServices = function() {
      return jspb2.Message.setField(this, 42, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasPhpGenericServices = function() {
      return jspb2.Message.getField(this, 42) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 23, false);
    };
    proto.google.protobuf.FileOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 23, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 23, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 23) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getCcEnableArenas = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 31, true);
    };
    proto.google.protobuf.FileOptions.prototype.setCcEnableArenas = function(value) {
      return jspb2.Message.setField(this, 31, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearCcEnableArenas = function() {
      return jspb2.Message.setField(this, 31, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasCcEnableArenas = function() {
      return jspb2.Message.getField(this, 31) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getObjcClassPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 36, "");
    };
    proto.google.protobuf.FileOptions.prototype.setObjcClassPrefix = function(value) {
      return jspb2.Message.setField(this, 36, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearObjcClassPrefix = function() {
      return jspb2.Message.setField(this, 36, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasObjcClassPrefix = function() {
      return jspb2.Message.getField(this, 36) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getCsharpNamespace = function() {
      return jspb2.Message.getFieldWithDefault(this, 37, "");
    };
    proto.google.protobuf.FileOptions.prototype.setCsharpNamespace = function(value) {
      return jspb2.Message.setField(this, 37, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearCsharpNamespace = function() {
      return jspb2.Message.setField(this, 37, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasCsharpNamespace = function() {
      return jspb2.Message.getField(this, 37) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getSwiftPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 39, "");
    };
    proto.google.protobuf.FileOptions.prototype.setSwiftPrefix = function(value) {
      return jspb2.Message.setField(this, 39, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearSwiftPrefix = function() {
      return jspb2.Message.setField(this, 39, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasSwiftPrefix = function() {
      return jspb2.Message.getField(this, 39) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getPhpClassPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 40, "");
    };
    proto.google.protobuf.FileOptions.prototype.setPhpClassPrefix = function(value) {
      return jspb2.Message.setField(this, 40, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearPhpClassPrefix = function() {
      return jspb2.Message.setField(this, 40, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasPhpClassPrefix = function() {
      return jspb2.Message.getField(this, 40) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getPhpNamespace = function() {
      return jspb2.Message.getFieldWithDefault(this, 41, "");
    };
    proto.google.protobuf.FileOptions.prototype.setPhpNamespace = function(value) {
      return jspb2.Message.setField(this, 41, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearPhpNamespace = function() {
      return jspb2.Message.setField(this, 41, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasPhpNamespace = function() {
      return jspb2.Message.getField(this, 41) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getPhpMetadataNamespace = function() {
      return jspb2.Message.getFieldWithDefault(this, 44, "");
    };
    proto.google.protobuf.FileOptions.prototype.setPhpMetadataNamespace = function(value) {
      return jspb2.Message.setField(this, 44, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearPhpMetadataNamespace = function() {
      return jspb2.Message.setField(this, 44, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasPhpMetadataNamespace = function() {
      return jspb2.Message.getField(this, 44) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getRubyPackage = function() {
      return jspb2.Message.getFieldWithDefault(this, 45, "");
    };
    proto.google.protobuf.FileOptions.prototype.setRubyPackage = function(value) {
      return jspb2.Message.setField(this, 45, value);
    };
    proto.google.protobuf.FileOptions.prototype.clearRubyPackage = function() {
      return jspb2.Message.setField(this, 45, void 0);
    };
    proto.google.protobuf.FileOptions.prototype.hasRubyPackage = function() {
      return jspb2.Message.getField(this, 45) != null;
    };
    proto.google.protobuf.FileOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.FileOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.FileOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.FileOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.MessageOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.MessageOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.MessageOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.MessageOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          messageSetWireFormat: jspb2.Message.getBooleanFieldWithDefault(msg, 1, false),
          noStandardDescriptorAccessor: jspb2.Message.getBooleanFieldWithDefault(msg, 2, false),
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 3, false),
          mapEntry: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.MessageOptions.extensions, proto.google.protobuf.MessageOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.MessageOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.MessageOptions();
      return proto.google.protobuf.MessageOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.MessageOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setMessageSetWireFormat(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setNoStandardDescriptorAccessor(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setMapEntry(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.MessageOptions.extensionsBinary, proto.google.protobuf.MessageOptions.prototype.getExtension, proto.google.protobuf.MessageOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.MessageOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.MessageOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.MessageOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.MessageOptions.extensionsBinary, proto.google.protobuf.MessageOptions.prototype.getExtension);
    };
    proto.google.protobuf.MessageOptions.prototype.getMessageSetWireFormat = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.google.protobuf.MessageOptions.prototype.setMessageSetWireFormat = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.MessageOptions.prototype.clearMessageSetWireFormat = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.MessageOptions.prototype.hasMessageSetWireFormat = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.MessageOptions.prototype.getNoStandardDescriptorAccessor = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.google.protobuf.MessageOptions.prototype.setNoStandardDescriptorAccessor = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.MessageOptions.prototype.clearNoStandardDescriptorAccessor = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.MessageOptions.prototype.hasNoStandardDescriptorAccessor = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.MessageOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.google.protobuf.MessageOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.MessageOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.MessageOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.MessageOptions.prototype.getMapEntry = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.google.protobuf.MessageOptions.prototype.setMapEntry = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.google.protobuf.MessageOptions.prototype.clearMapEntry = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.google.protobuf.MessageOptions.prototype.hasMapEntry = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.google.protobuf.MessageOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.MessageOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.MessageOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.MessageOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.FieldOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.FieldOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.FieldOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.FieldOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          ctype: jspb2.Message.getFieldWithDefault(msg, 1, 0),
          packed: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          jstype: jspb2.Message.getFieldWithDefault(msg, 6, 0),
          lazy: jspb2.Message.getBooleanFieldWithDefault(msg, 5, false),
          unverifiedLazy: jspb2.Message.getBooleanFieldWithDefault(msg, 15, false),
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 3, false),
          weak: jspb2.Message.getBooleanFieldWithDefault(msg, 10, false),
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.FieldOptions.extensions, proto.google.protobuf.FieldOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.FieldOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.FieldOptions();
      return proto.google.protobuf.FieldOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.FieldOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readEnum();
            msg.setCtype(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setPacked(value);
            break;
          case 6:
            var value = reader.readEnum();
            msg.setJstype(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setLazy(value);
            break;
          case 15:
            var value = reader.readBool();
            msg.setUnverifiedLazy(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 10:
            var value = reader.readBool();
            msg.setWeak(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.FieldOptions.extensionsBinary, proto.google.protobuf.FieldOptions.prototype.getExtension, proto.google.protobuf.FieldOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.FieldOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.FieldOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.FieldOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeEnum(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeEnum(6, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
      f2 = jspb2.Message.getField(message, 15);
      if (f2 != null) {
        writer.writeBool(15, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeBool(10, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.FieldOptions.extensionsBinary, proto.google.protobuf.FieldOptions.prototype.getExtension);
    };
    proto.google.protobuf.FieldOptions.CType = {
      STRING: 0,
      CORD: 1,
      STRING_PIECE: 2
    };
    proto.google.protobuf.FieldOptions.JSType = {
      JS_NORMAL: 0,
      JS_STRING: 1,
      JS_NUMBER: 2
    };
    proto.google.protobuf.FieldOptions.prototype.getCtype = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.google.protobuf.FieldOptions.prototype.setCtype = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearCtype = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasCtype = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getPacked = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.google.protobuf.FieldOptions.prototype.setPacked = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearPacked = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasPacked = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getJstype = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.google.protobuf.FieldOptions.prototype.setJstype = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearJstype = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasJstype = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getLazy = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.google.protobuf.FieldOptions.prototype.setLazy = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearLazy = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasLazy = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getUnverifiedLazy = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 15, false);
    };
    proto.google.protobuf.FieldOptions.prototype.setUnverifiedLazy = function(value) {
      return jspb2.Message.setField(this, 15, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearUnverifiedLazy = function() {
      return jspb2.Message.setField(this, 15, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasUnverifiedLazy = function() {
      return jspb2.Message.getField(this, 15) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.google.protobuf.FieldOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getWeak = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 10, false);
    };
    proto.google.protobuf.FieldOptions.prototype.setWeak = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.google.protobuf.FieldOptions.prototype.clearWeak = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.google.protobuf.FieldOptions.prototype.hasWeak = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.google.protobuf.FieldOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.FieldOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.FieldOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.FieldOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.OneofOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.OneofOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.OneofOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.OneofOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.OneofOptions.extensions, proto.google.protobuf.OneofOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.OneofOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.OneofOptions();
      return proto.google.protobuf.OneofOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.OneofOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.OneofOptions.extensionsBinary, proto.google.protobuf.OneofOptions.prototype.getExtension, proto.google.protobuf.OneofOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.OneofOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.OneofOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.OneofOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.OneofOptions.extensionsBinary, proto.google.protobuf.OneofOptions.prototype.getExtension);
    };
    proto.google.protobuf.OneofOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.OneofOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.OneofOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.OneofOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.EnumOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.EnumOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.EnumOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.EnumOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          allowAlias: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 3, false),
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.EnumOptions.extensions, proto.google.protobuf.EnumOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.EnumOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.EnumOptions();
      return proto.google.protobuf.EnumOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.EnumOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 2:
            var value = reader.readBool();
            msg.setAllowAlias(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.EnumOptions.extensionsBinary, proto.google.protobuf.EnumOptions.prototype.getExtension, proto.google.protobuf.EnumOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.EnumOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.EnumOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.EnumOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.EnumOptions.extensionsBinary, proto.google.protobuf.EnumOptions.prototype.getExtension);
    };
    proto.google.protobuf.EnumOptions.prototype.getAllowAlias = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.google.protobuf.EnumOptions.prototype.setAllowAlias = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.EnumOptions.prototype.clearAllowAlias = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.EnumOptions.prototype.hasAllowAlias = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.EnumOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.google.protobuf.EnumOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.EnumOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.EnumOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.EnumOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.EnumOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.EnumOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.EnumOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.EnumValueOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.EnumValueOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.EnumValueOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.EnumValueOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 1, false),
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.EnumValueOptions.extensions, proto.google.protobuf.EnumValueOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.EnumValueOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.EnumValueOptions();
      return proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.EnumValueOptions.extensionsBinary, proto.google.protobuf.EnumValueOptions.prototype.getExtension, proto.google.protobuf.EnumValueOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.EnumValueOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.EnumValueOptions.extensionsBinary, proto.google.protobuf.EnumValueOptions.prototype.getExtension);
    };
    proto.google.protobuf.EnumValueOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.google.protobuf.EnumValueOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.EnumValueOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.EnumValueOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.EnumValueOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.EnumValueOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.EnumValueOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.EnumValueOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.ServiceOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.ServiceOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.ServiceOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.ServiceOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 33, false),
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.ServiceOptions.extensions, proto.google.protobuf.ServiceOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.ServiceOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.ServiceOptions();
      return proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 33:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.ServiceOptions.extensionsBinary, proto.google.protobuf.ServiceOptions.prototype.getExtension, proto.google.protobuf.ServiceOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.ServiceOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.ServiceOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.ServiceOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 33);
      if (f2 != null) {
        writer.writeBool(33, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.ServiceOptions.extensionsBinary, proto.google.protobuf.ServiceOptions.prototype.getExtension);
    };
    proto.google.protobuf.ServiceOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 33, false);
    };
    proto.google.protobuf.ServiceOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 33, value);
    };
    proto.google.protobuf.ServiceOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 33, void 0);
    };
    proto.google.protobuf.ServiceOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 33) != null;
    };
    proto.google.protobuf.ServiceOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.ServiceOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.ServiceOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.ServiceOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.MethodOptions.repeatedFields_ = [999];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.MethodOptions.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.MethodOptions.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.MethodOptions.toObject = function(includeInstance, msg) {
        var f2, obj = {
          deprecated: jspb2.Message.getBooleanFieldWithDefault(msg, 33, false),
          idempotencyLevel: jspb2.Message.getFieldWithDefault(msg, 34, 0),
          uninterpretedOptionList: jspb2.Message.toObjectList(msg.getUninterpretedOptionList(), proto.google.protobuf.UninterpretedOption.toObject, includeInstance)
        };
        jspb2.Message.toObjectExtension(msg, obj, proto.google.protobuf.MethodOptions.extensions, proto.google.protobuf.MethodOptions.prototype.getExtension, includeInstance);
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.MethodOptions.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.MethodOptions();
      return proto.google.protobuf.MethodOptions.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.MethodOptions.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 33:
            var value = reader.readBool();
            msg.setDeprecated(value);
            break;
          case 34:
            var value = reader.readEnum();
            msg.setIdempotencyLevel(value);
            break;
          case 999:
            var value = new proto.google.protobuf.UninterpretedOption();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader);
            msg.addUninterpretedOption(value);
            break;
          default:
            jspb2.Message.readBinaryExtension(msg, reader, proto.google.protobuf.MethodOptions.extensionsBinary, proto.google.protobuf.MethodOptions.prototype.getExtension, proto.google.protobuf.MethodOptions.prototype.setExtension);
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.MethodOptions.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.MethodOptions.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.MethodOptions.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 33);
      if (f2 != null) {
        writer.writeBool(33, f2);
      }
      f2 = jspb2.Message.getField(message, 34);
      if (f2 != null) {
        writer.writeEnum(34, f2);
      }
      f2 = message.getUninterpretedOptionList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(999, f2, proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter);
      }
      jspb2.Message.serializeBinaryExtensions(message, writer, proto.google.protobuf.MethodOptions.extensionsBinary, proto.google.protobuf.MethodOptions.prototype.getExtension);
    };
    proto.google.protobuf.MethodOptions.IdempotencyLevel = {
      IDEMPOTENCY_UNKNOWN: 0,
      NO_SIDE_EFFECTS: 1,
      IDEMPOTENT: 2
    };
    proto.google.protobuf.MethodOptions.prototype.getDeprecated = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 33, false);
    };
    proto.google.protobuf.MethodOptions.prototype.setDeprecated = function(value) {
      return jspb2.Message.setField(this, 33, value);
    };
    proto.google.protobuf.MethodOptions.prototype.clearDeprecated = function() {
      return jspb2.Message.setField(this, 33, void 0);
    };
    proto.google.protobuf.MethodOptions.prototype.hasDeprecated = function() {
      return jspb2.Message.getField(this, 33) != null;
    };
    proto.google.protobuf.MethodOptions.prototype.getIdempotencyLevel = function() {
      return jspb2.Message.getFieldWithDefault(this, 34, 0);
    };
    proto.google.protobuf.MethodOptions.prototype.setIdempotencyLevel = function(value) {
      return jspb2.Message.setField(this, 34, value);
    };
    proto.google.protobuf.MethodOptions.prototype.clearIdempotencyLevel = function() {
      return jspb2.Message.setField(this, 34, void 0);
    };
    proto.google.protobuf.MethodOptions.prototype.hasIdempotencyLevel = function() {
      return jspb2.Message.getField(this, 34) != null;
    };
    proto.google.protobuf.MethodOptions.prototype.getUninterpretedOptionList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption, 999);
    };
    proto.google.protobuf.MethodOptions.prototype.setUninterpretedOptionList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 999, value);
    };
    proto.google.protobuf.MethodOptions.prototype.addUninterpretedOption = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 999, opt_value, proto.google.protobuf.UninterpretedOption, opt_index);
    };
    proto.google.protobuf.MethodOptions.prototype.clearUninterpretedOptionList = function() {
      return this.setUninterpretedOptionList([]);
    };
    proto.google.protobuf.UninterpretedOption.repeatedFields_ = [2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.UninterpretedOption.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.UninterpretedOption.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.UninterpretedOption.toObject = function(includeInstance, msg) {
        var f2, obj = {
          nameList: jspb2.Message.toObjectList(msg.getNameList(), proto.google.protobuf.UninterpretedOption.NamePart.toObject, includeInstance),
          identifierValue: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          positiveIntValue: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          negativeIntValue: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          doubleValue: (f2 = jspb2.Message.getOptionalFloatingPointField(msg, 6)) == null ? void 0 : f2,
          stringValue: msg.getStringValue_asB64(),
          aggregateValue: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.UninterpretedOption.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.UninterpretedOption();
      return proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 2:
            var value = new proto.google.protobuf.UninterpretedOption.NamePart();
            reader.readMessage(value, proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader);
            msg.addName(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setIdentifierValue(value);
            break;
          case 4:
            var value = reader.readUint64();
            msg.setPositiveIntValue(value);
            break;
          case 5:
            var value = reader.readInt64();
            msg.setNegativeIntValue(value);
            break;
          case 6:
            var value = reader.readDouble();
            msg.setDoubleValue(value);
            break;
          case 7:
            var value = reader.readBytes();
            msg.setStringValue(value);
            break;
          case 8:
            var value = reader.readString();
            msg.setAggregateValue(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.UninterpretedOption.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getNameList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint64(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeInt64(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeDouble(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBytes(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeString(8, f2);
      }
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.UninterpretedOption.NamePart.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.UninterpretedOption.NamePart.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.UninterpretedOption.NamePart.toObject = function(includeInstance, msg) {
        var f2, obj = {
          namePart: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          isExtension: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.UninterpretedOption.NamePart();
      return proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setNamePart(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setIsExtension(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.getNamePart = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.setNamePart = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.clearNamePart = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.hasNamePart = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.getIsExtension = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.setIsExtension = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.clearIsExtension = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.UninterpretedOption.NamePart.prototype.hasIsExtension = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getNameList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.UninterpretedOption.NamePart, 2);
    };
    proto.google.protobuf.UninterpretedOption.prototype.setNameList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.addName = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.protobuf.UninterpretedOption.NamePart, opt_index);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearNameList = function() {
      return this.setNameList([]);
    };
    proto.google.protobuf.UninterpretedOption.prototype.getIdentifierValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.google.protobuf.UninterpretedOption.prototype.setIdentifierValue = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearIdentifierValue = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasIdentifierValue = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getPositiveIntValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.setPositiveIntValue = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearPositiveIntValue = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasPositiveIntValue = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getNegativeIntValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.setNegativeIntValue = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearNegativeIntValue = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasNegativeIntValue = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getDoubleValue = function() {
      return jspb2.Message.getFloatingPointFieldWithDefault(this, 6, 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.setDoubleValue = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearDoubleValue = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasDoubleValue = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getStringValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.google.protobuf.UninterpretedOption.prototype.getStringValue_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getStringValue());
    };
    proto.google.protobuf.UninterpretedOption.prototype.getStringValue_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getStringValue());
    };
    proto.google.protobuf.UninterpretedOption.prototype.setStringValue = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearStringValue = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasStringValue = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.google.protobuf.UninterpretedOption.prototype.getAggregateValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.google.protobuf.UninterpretedOption.prototype.setAggregateValue = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.google.protobuf.UninterpretedOption.prototype.clearAggregateValue = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.google.protobuf.UninterpretedOption.prototype.hasAggregateValue = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.google.protobuf.SourceCodeInfo.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.SourceCodeInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.SourceCodeInfo.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.SourceCodeInfo.toObject = function(includeInstance, msg) {
        var f2, obj = {
          locationList: jspb2.Message.toObjectList(msg.getLocationList(), proto.google.protobuf.SourceCodeInfo.Location.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.SourceCodeInfo.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.SourceCodeInfo();
      return proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.google.protobuf.SourceCodeInfo.Location();
            reader.readMessage(value, proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader);
            msg.addLocation(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.SourceCodeInfo.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getLocationList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.SourceCodeInfo.Location.repeatedFields_ = [1, 2, 6];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.SourceCodeInfo.Location.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.SourceCodeInfo.Location.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.SourceCodeInfo.Location.toObject = function(includeInstance, msg) {
        var f2, obj = {
          pathList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          spanList: (f2 = jspb2.Message.getRepeatedField(msg, 2)) == null ? void 0 : f2,
          leadingComments: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          trailingComments: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          leadingDetachedCommentsList: (f2 = jspb2.Message.getRepeatedField(msg, 6)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.SourceCodeInfo.Location.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.SourceCodeInfo.Location();
      return proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
            for (var i = 0; i < values.length; i++) {
              msg.addPath(values[i]);
            }
            break;
          case 2:
            var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
            for (var i = 0; i < values.length; i++) {
              msg.addSpan(values[i]);
            }
            break;
          case 3:
            var value = reader.readString();
            msg.setLeadingComments(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setTrailingComments(value);
            break;
          case 6:
            var value = reader.readString();
            msg.addLeadingDetachedComments(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getPathList();
      if (f2.length > 0) {
        writer.writePackedInt32(1, f2);
      }
      f2 = message.getSpanList();
      if (f2.length > 0) {
        writer.writePackedInt32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = message.getLeadingDetachedCommentsList();
      if (f2.length > 0) {
        writer.writeRepeatedString(6, f2);
      }
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.getPathList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.setPathList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.addPath = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.clearPathList = function() {
      return this.setPathList([]);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.getSpanList = function() {
      return jspb2.Message.getRepeatedField(this, 2);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.setSpanList = function(value) {
      return jspb2.Message.setField(this, 2, value || []);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.addSpan = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 2, value, opt_index);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.clearSpanList = function() {
      return this.setSpanList([]);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.getLeadingComments = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.setLeadingComments = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.clearLeadingComments = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.hasLeadingComments = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.getTrailingComments = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.setTrailingComments = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.clearTrailingComments = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.hasTrailingComments = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.getLeadingDetachedCommentsList = function() {
      return jspb2.Message.getRepeatedField(this, 6);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.setLeadingDetachedCommentsList = function(value) {
      return jspb2.Message.setField(this, 6, value || []);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.addLeadingDetachedComments = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 6, value, opt_index);
    };
    proto.google.protobuf.SourceCodeInfo.Location.prototype.clearLeadingDetachedCommentsList = function() {
      return this.setLeadingDetachedCommentsList([]);
    };
    proto.google.protobuf.SourceCodeInfo.prototype.getLocationList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.SourceCodeInfo.Location, 1);
    };
    proto.google.protobuf.SourceCodeInfo.prototype.setLocationList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.google.protobuf.SourceCodeInfo.prototype.addLocation = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.SourceCodeInfo.Location, opt_index);
    };
    proto.google.protobuf.SourceCodeInfo.prototype.clearLocationList = function() {
      return this.setLocationList([]);
    };
    proto.google.protobuf.GeneratedCodeInfo.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.GeneratedCodeInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.GeneratedCodeInfo.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.GeneratedCodeInfo.toObject = function(includeInstance, msg) {
        var f2, obj = {
          annotationList: jspb2.Message.toObjectList(msg.getAnnotationList(), proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.GeneratedCodeInfo.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.GeneratedCodeInfo();
      return proto.google.protobuf.GeneratedCodeInfo.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.GeneratedCodeInfo.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.google.protobuf.GeneratedCodeInfo.Annotation();
            reader.readMessage(value, proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader);
            msg.addAnnotation(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.GeneratedCodeInfo.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.GeneratedCodeInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.GeneratedCodeInfo.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAnnotationList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter);
      }
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject = function(includeInstance, msg) {
        var f2, obj = {
          pathList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          sourceFile: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          begin: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          end: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.google.protobuf.GeneratedCodeInfo.Annotation();
      return proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
            for (var i = 0; i < values.length; i++) {
              msg.addPath(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setSourceFile(value);
            break;
          case 3:
            var value = reader.readInt32();
            msg.setBegin(value);
            break;
          case 4:
            var value = reader.readInt32();
            msg.setEnd(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getPathList();
      if (f2.length > 0) {
        writer.writePackedInt32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeInt32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeInt32(4, f2);
      }
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getPathList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setPathList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.addPath = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearPathList = function() {
      return this.setPathList([]);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getSourceFile = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setSourceFile = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearSourceFile = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasSourceFile = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getBegin = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setBegin = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearBegin = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasBegin = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getEnd = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setEnd = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearEnd = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasEnd = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.google.protobuf.GeneratedCodeInfo.prototype.getAnnotationList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.google.protobuf.GeneratedCodeInfo.Annotation, 1);
    };
    proto.google.protobuf.GeneratedCodeInfo.prototype.setAnnotationList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.google.protobuf.GeneratedCodeInfo.prototype.addAnnotation = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.GeneratedCodeInfo.Annotation, opt_index);
    };
    proto.google.protobuf.GeneratedCodeInfo.prototype.clearAnnotationList = function() {
      return this.setAnnotationList([]);
    };
    goog2.object.extend(exports2, proto.google.protobuf);
  }
});

// node_modules/@keepkey/device-protocol/lib/exchange_pb.js
var require_exchange_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/exchange_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    goog2.exportSymbol("proto.ExchangeAddress", null, global2);
    goog2.exportSymbol("proto.ExchangeResponseV2", null, global2);
    goog2.exportSymbol("proto.OrderType", null, global2);
    goog2.exportSymbol("proto.SignedExchangeResponse", null, global2);
    proto.ExchangeAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ExchangeAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ExchangeAddress.displayName = "proto.ExchangeAddress";
    }
    proto.ExchangeResponseV2 = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ExchangeResponseV2, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ExchangeResponseV2.displayName = "proto.ExchangeResponseV2";
    }
    proto.SignedExchangeResponse = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.SignedExchangeResponse, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SignedExchangeResponse.displayName = "proto.SignedExchangeResponse";
    }
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ExchangeAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.ExchangeAddress.toObject(opt_includeInstance, this);
      };
      proto.ExchangeAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          coinType: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          address: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          destTag: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ExchangeAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ExchangeAddress();
      return proto.ExchangeAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.ExchangeAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setCoinType(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setDestTag(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ExchangeAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ExchangeAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ExchangeAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
    };
    proto.ExchangeAddress.prototype.getCoinType = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.ExchangeAddress.prototype.setCoinType = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ExchangeAddress.prototype.clearCoinType = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ExchangeAddress.prototype.hasCoinType = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ExchangeAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.ExchangeAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ExchangeAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ExchangeAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ExchangeAddress.prototype.getDestTag = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.ExchangeAddress.prototype.setDestTag = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ExchangeAddress.prototype.clearDestTag = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ExchangeAddress.prototype.hasDestTag = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ExchangeResponseV2.prototype.toObject = function(opt_includeInstance) {
        return proto.ExchangeResponseV2.toObject(opt_includeInstance, this);
      };
      proto.ExchangeResponseV2.toObject = function(includeInstance, msg) {
        var f2, obj = {
          depositAddress: (f2 = msg.getDepositAddress()) && proto.ExchangeAddress.toObject(includeInstance, f2),
          depositAmount: msg.getDepositAmount_asB64(),
          expiration: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          quotedRate: msg.getQuotedRate_asB64(),
          withdrawalAddress: (f2 = msg.getWithdrawalAddress()) && proto.ExchangeAddress.toObject(includeInstance, f2),
          withdrawalAmount: msg.getWithdrawalAmount_asB64(),
          returnAddress: (f2 = msg.getReturnAddress()) && proto.ExchangeAddress.toObject(includeInstance, f2),
          apiKey: msg.getApiKey_asB64(),
          minerFee: msg.getMinerFee_asB64(),
          orderId: msg.getOrderId_asB64(),
          type: jspb2.Message.getFieldWithDefault(msg, 11, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ExchangeResponseV2.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ExchangeResponseV2();
      return proto.ExchangeResponseV2.deserializeBinaryFromReader(msg, reader);
    };
    proto.ExchangeResponseV2.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.ExchangeAddress();
            reader.readMessage(value, proto.ExchangeAddress.deserializeBinaryFromReader);
            msg.setDepositAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setDepositAmount(value);
            break;
          case 3:
            var value = reader.readInt64();
            msg.setExpiration(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setQuotedRate(value);
            break;
          case 5:
            var value = new proto.ExchangeAddress();
            reader.readMessage(value, proto.ExchangeAddress.deserializeBinaryFromReader);
            msg.setWithdrawalAddress(value);
            break;
          case 6:
            var value = reader.readBytes();
            msg.setWithdrawalAmount(value);
            break;
          case 7:
            var value = new proto.ExchangeAddress();
            reader.readMessage(value, proto.ExchangeAddress.deserializeBinaryFromReader);
            msg.setReturnAddress(value);
            break;
          case 8:
            var value = reader.readBytes();
            msg.setApiKey(value);
            break;
          case 9:
            var value = reader.readBytes();
            msg.setMinerFee(value);
            break;
          case 10:
            var value = reader.readBytes();
            msg.setOrderId(value);
            break;
          case 11:
            var value = reader.readEnum();
            msg.setType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ExchangeResponseV2.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ExchangeResponseV2.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ExchangeResponseV2.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getDepositAddress();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.ExchangeAddress.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeInt64(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = message.getWithdrawalAddress();
      if (f2 != null) {
        writer.writeMessage(5, f2, proto.ExchangeAddress.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBytes(6, f2);
      }
      f2 = message.getReturnAddress();
      if (f2 != null) {
        writer.writeMessage(7, f2, proto.ExchangeAddress.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeBytes(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeBytes(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeBytes(10, f2);
      }
      f2 = jspb2.Message.getField(message, 11);
      if (f2 != null) {
        writer.writeEnum(11, f2);
      }
    };
    proto.ExchangeResponseV2.prototype.getDepositAddress = function() {
      return jspb2.Message.getWrapperField(this, proto.ExchangeAddress, 1);
    };
    proto.ExchangeResponseV2.prototype.setDepositAddress = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.ExchangeResponseV2.prototype.clearDepositAddress = function() {
      return this.setDepositAddress(void 0);
    };
    proto.ExchangeResponseV2.prototype.hasDepositAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ExchangeResponseV2.prototype.getDepositAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.ExchangeResponseV2.prototype.getDepositAmount_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getDepositAmount());
    };
    proto.ExchangeResponseV2.prototype.getDepositAmount_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getDepositAmount());
    };
    proto.ExchangeResponseV2.prototype.setDepositAmount = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ExchangeResponseV2.prototype.clearDepositAmount = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasDepositAmount = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ExchangeResponseV2.prototype.getExpiration = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.ExchangeResponseV2.prototype.setExpiration = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ExchangeResponseV2.prototype.clearExpiration = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasExpiration = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ExchangeResponseV2.prototype.getQuotedRate = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.ExchangeResponseV2.prototype.getQuotedRate_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getQuotedRate());
    };
    proto.ExchangeResponseV2.prototype.getQuotedRate_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getQuotedRate());
    };
    proto.ExchangeResponseV2.prototype.setQuotedRate = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.ExchangeResponseV2.prototype.clearQuotedRate = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasQuotedRate = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.ExchangeResponseV2.prototype.getWithdrawalAddress = function() {
      return jspb2.Message.getWrapperField(this, proto.ExchangeAddress, 5);
    };
    proto.ExchangeResponseV2.prototype.setWithdrawalAddress = function(value) {
      return jspb2.Message.setWrapperField(this, 5, value);
    };
    proto.ExchangeResponseV2.prototype.clearWithdrawalAddress = function() {
      return this.setWithdrawalAddress(void 0);
    };
    proto.ExchangeResponseV2.prototype.hasWithdrawalAddress = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.ExchangeResponseV2.prototype.getWithdrawalAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.ExchangeResponseV2.prototype.getWithdrawalAmount_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getWithdrawalAmount());
    };
    proto.ExchangeResponseV2.prototype.getWithdrawalAmount_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getWithdrawalAmount());
    };
    proto.ExchangeResponseV2.prototype.setWithdrawalAmount = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.ExchangeResponseV2.prototype.clearWithdrawalAmount = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasWithdrawalAmount = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.ExchangeResponseV2.prototype.getReturnAddress = function() {
      return jspb2.Message.getWrapperField(this, proto.ExchangeAddress, 7);
    };
    proto.ExchangeResponseV2.prototype.setReturnAddress = function(value) {
      return jspb2.Message.setWrapperField(this, 7, value);
    };
    proto.ExchangeResponseV2.prototype.clearReturnAddress = function() {
      return this.setReturnAddress(void 0);
    };
    proto.ExchangeResponseV2.prototype.hasReturnAddress = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.ExchangeResponseV2.prototype.getApiKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.ExchangeResponseV2.prototype.getApiKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getApiKey());
    };
    proto.ExchangeResponseV2.prototype.getApiKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getApiKey());
    };
    proto.ExchangeResponseV2.prototype.setApiKey = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.ExchangeResponseV2.prototype.clearApiKey = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasApiKey = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.ExchangeResponseV2.prototype.getMinerFee = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, "");
    };
    proto.ExchangeResponseV2.prototype.getMinerFee_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMinerFee());
    };
    proto.ExchangeResponseV2.prototype.getMinerFee_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMinerFee());
    };
    proto.ExchangeResponseV2.prototype.setMinerFee = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.ExchangeResponseV2.prototype.clearMinerFee = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasMinerFee = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.ExchangeResponseV2.prototype.getOrderId = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, "");
    };
    proto.ExchangeResponseV2.prototype.getOrderId_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getOrderId());
    };
    proto.ExchangeResponseV2.prototype.getOrderId_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getOrderId());
    };
    proto.ExchangeResponseV2.prototype.setOrderId = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.ExchangeResponseV2.prototype.clearOrderId = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasOrderId = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.ExchangeResponseV2.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 11, 0);
    };
    proto.ExchangeResponseV2.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 11, value);
    };
    proto.ExchangeResponseV2.prototype.clearType = function() {
      return jspb2.Message.setField(this, 11, void 0);
    };
    proto.ExchangeResponseV2.prototype.hasType = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SignedExchangeResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.SignedExchangeResponse.toObject(opt_includeInstance, this);
      };
      proto.SignedExchangeResponse.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signature: msg.getSignature_asB64(),
          responsev2: (f2 = msg.getResponsev2()) && proto.ExchangeResponseV2.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SignedExchangeResponse.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SignedExchangeResponse();
      return proto.SignedExchangeResponse.deserializeBinaryFromReader(msg, reader);
    };
    proto.SignedExchangeResponse.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 3:
            var value = new proto.ExchangeResponseV2();
            reader.readMessage(value, proto.ExchangeResponseV2.deserializeBinaryFromReader);
            msg.setResponsev2(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SignedExchangeResponse.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SignedExchangeResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SignedExchangeResponse.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = message.getResponsev2();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.ExchangeResponseV2.serializeBinaryToWriter);
      }
    };
    proto.SignedExchangeResponse.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.SignedExchangeResponse.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.SignedExchangeResponse.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.SignedExchangeResponse.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.SignedExchangeResponse.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.SignedExchangeResponse.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.SignedExchangeResponse.prototype.getResponsev2 = function() {
      return jspb2.Message.getWrapperField(this, proto.ExchangeResponseV2, 3);
    };
    proto.SignedExchangeResponse.prototype.setResponsev2 = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.SignedExchangeResponse.prototype.clearResponsev2 = function() {
      return this.setResponsev2(void 0);
    };
    proto.SignedExchangeResponse.prototype.hasResponsev2 = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.OrderType = {
      PRECISE: 0,
      QUICK: 1
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@keepkey/device-protocol/lib/types_pb.js
var require_types_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/types_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var google_protobuf_descriptor_pb = require_descriptor_pb();
    goog2.object.extend(proto, google_protobuf_descriptor_pb);
    var exchange_pb = require_exchange_pb();
    goog2.object.extend(proto, exchange_pb);
    goog2.exportSymbol("proto.ButtonRequestType", null, global2);
    goog2.exportSymbol("proto.CoinType", null, global2);
    goog2.exportSymbol("proto.ExchangeType", null, global2);
    goog2.exportSymbol("proto.FailureType", null, global2);
    goog2.exportSymbol("proto.HDNodePathType", null, global2);
    goog2.exportSymbol("proto.HDNodeType", null, global2);
    goog2.exportSymbol("proto.IdentityType", null, global2);
    goog2.exportSymbol("proto.InputScriptType", null, global2);
    goog2.exportSymbol("proto.MultisigRedeemScriptType", null, global2);
    goog2.exportSymbol("proto.OutputAddressType", null, global2);
    goog2.exportSymbol("proto.OutputScriptType", null, global2);
    goog2.exportSymbol("proto.PinMatrixRequestType", null, global2);
    goog2.exportSymbol("proto.PolicyType", null, global2);
    goog2.exportSymbol("proto.RawTransactionType", null, global2);
    goog2.exportSymbol("proto.RequestType", null, global2);
    goog2.exportSymbol("proto.TransactionType", null, global2);
    goog2.exportSymbol("proto.TxInputType", null, global2);
    goog2.exportSymbol("proto.TxOutputBinType", null, global2);
    goog2.exportSymbol("proto.TxOutputType", null, global2);
    goog2.exportSymbol("proto.TxRequestDetailsType", null, global2);
    goog2.exportSymbol("proto.TxRequestSerializedType", null, global2);
    goog2.exportSymbol("proto.wireDebugIn", null, global2);
    goog2.exportSymbol("proto.wireDebugOut", null, global2);
    goog2.exportSymbol("proto.wireIn", null, global2);
    goog2.exportSymbol("proto.wireOut", null, global2);
    proto.HDNodeType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.HDNodeType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.HDNodeType.displayName = "proto.HDNodeType";
    }
    proto.HDNodePathType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.HDNodePathType.repeatedFields_, null);
    };
    goog2.inherits(proto.HDNodePathType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.HDNodePathType.displayName = "proto.HDNodePathType";
    }
    proto.CoinType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CoinType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CoinType.displayName = "proto.CoinType";
    }
    proto.MultisigRedeemScriptType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.MultisigRedeemScriptType.repeatedFields_, null);
    };
    goog2.inherits(proto.MultisigRedeemScriptType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.MultisigRedeemScriptType.displayName = "proto.MultisigRedeemScriptType";
    }
    proto.TxInputType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.TxInputType.repeatedFields_, null);
    };
    goog2.inherits(proto.TxInputType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxInputType.displayName = "proto.TxInputType";
    }
    proto.TxOutputType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.TxOutputType.repeatedFields_, null);
    };
    goog2.inherits(proto.TxOutputType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxOutputType.displayName = "proto.TxOutputType";
    }
    proto.TxOutputBinType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.TxOutputBinType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxOutputBinType.displayName = "proto.TxOutputBinType";
    }
    proto.TransactionType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.TransactionType.repeatedFields_, null);
    };
    goog2.inherits(proto.TransactionType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TransactionType.displayName = "proto.TransactionType";
    }
    proto.RawTransactionType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RawTransactionType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RawTransactionType.displayName = "proto.RawTransactionType";
    }
    proto.TxRequestDetailsType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.TxRequestDetailsType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxRequestDetailsType.displayName = "proto.TxRequestDetailsType";
    }
    proto.TxRequestSerializedType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.TxRequestSerializedType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxRequestSerializedType.displayName = "proto.TxRequestSerializedType";
    }
    proto.IdentityType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.IdentityType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.IdentityType.displayName = "proto.IdentityType";
    }
    proto.PolicyType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PolicyType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PolicyType.displayName = "proto.PolicyType";
    }
    proto.ExchangeType = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.ExchangeType.repeatedFields_, null);
    };
    goog2.inherits(proto.ExchangeType, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ExchangeType.displayName = "proto.ExchangeType";
    }
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.HDNodeType.prototype.toObject = function(opt_includeInstance) {
        return proto.HDNodeType.toObject(opt_includeInstance, this);
      };
      proto.HDNodeType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          depth: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          fingerprint: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          childNum: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          chainCode: msg.getChainCode_asB64(),
          privateKey: msg.getPrivateKey_asB64(),
          publicKey: msg.getPublicKey_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.HDNodeType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.HDNodeType();
      return proto.HDNodeType.deserializeBinaryFromReader(msg, reader);
    };
    proto.HDNodeType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setDepth(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setFingerprint(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setChildNum(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setChainCode(value);
            break;
          case 5:
            var value = reader.readBytes();
            msg.setPrivateKey(value);
            break;
          case 6:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.HDNodeType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.HDNodeType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.HDNodeType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBytes(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBytes(6, f2);
      }
    };
    proto.HDNodeType.prototype.getDepth = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.HDNodeType.prototype.setDepth = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.HDNodeType.prototype.clearDepth = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.HDNodeType.prototype.hasDepth = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.HDNodeType.prototype.getFingerprint = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.HDNodeType.prototype.setFingerprint = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.HDNodeType.prototype.clearFingerprint = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.HDNodeType.prototype.hasFingerprint = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.HDNodeType.prototype.getChildNum = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.HDNodeType.prototype.setChildNum = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.HDNodeType.prototype.clearChildNum = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.HDNodeType.prototype.hasChildNum = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.HDNodeType.prototype.getChainCode = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.HDNodeType.prototype.getChainCode_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getChainCode());
    };
    proto.HDNodeType.prototype.getChainCode_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getChainCode());
    };
    proto.HDNodeType.prototype.setChainCode = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.HDNodeType.prototype.clearChainCode = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.HDNodeType.prototype.hasChainCode = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.HDNodeType.prototype.getPrivateKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.HDNodeType.prototype.getPrivateKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPrivateKey());
    };
    proto.HDNodeType.prototype.getPrivateKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPrivateKey());
    };
    proto.HDNodeType.prototype.setPrivateKey = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.HDNodeType.prototype.clearPrivateKey = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.HDNodeType.prototype.hasPrivateKey = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.HDNodeType.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.HDNodeType.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.HDNodeType.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.HDNodeType.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.HDNodeType.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.HDNodeType.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.HDNodePathType.repeatedFields_ = [2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.HDNodePathType.prototype.toObject = function(opt_includeInstance) {
        return proto.HDNodePathType.toObject(opt_includeInstance, this);
      };
      proto.HDNodePathType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          node: (f2 = msg.getNode()) && proto.HDNodeType.toObject(includeInstance, f2),
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.HDNodePathType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.HDNodePathType();
      return proto.HDNodePathType.deserializeBinaryFromReader(msg, reader);
    };
    proto.HDNodePathType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.HDNodeType();
            reader.readMessage(value, proto.HDNodeType.deserializeBinaryFromReader);
            msg.setNode(value);
            break;
          case 2:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.HDNodePathType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.HDNodePathType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.HDNodePathType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getNode();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.HDNodeType.serializeBinaryToWriter);
      }
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(2, f2);
      }
    };
    proto.HDNodePathType.prototype.getNode = function() {
      return jspb2.Message.getWrapperField(this, proto.HDNodeType, 1, 1);
    };
    proto.HDNodePathType.prototype.setNode = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.HDNodePathType.prototype.clearNode = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.HDNodePathType.prototype.hasNode = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.HDNodePathType.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 2);
    };
    proto.HDNodePathType.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 2, value || []);
    };
    proto.HDNodePathType.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 2, value, opt_index);
    };
    proto.HDNodePathType.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CoinType.prototype.toObject = function(opt_includeInstance) {
        return proto.CoinType.toObject(opt_includeInstance, this);
      };
      proto.CoinType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          coinName: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          coinShortcut: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          addressType: jspb2.Message.getFieldWithDefault(msg, 3, 0),
          maxfeeKb: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          addressTypeP2sh: jspb2.Message.getFieldWithDefault(msg, 5, 5),
          signedMessageHeader: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          bip44AccountPath: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          forkid: (f2 = jspb2.Message.getField(msg, 12)) == null ? void 0 : f2,
          decimals: (f2 = jspb2.Message.getField(msg, 13)) == null ? void 0 : f2,
          contractAddress: msg.getContractAddress_asB64(),
          xpubMagic: jspb2.Message.getFieldWithDefault(msg, 16, 76067358),
          segwit: (f2 = jspb2.Message.getBooleanField(msg, 18)) == null ? void 0 : f2,
          forceBip143: (f2 = jspb2.Message.getBooleanField(msg, 19)) == null ? void 0 : f2,
          curveName: (f2 = jspb2.Message.getField(msg, 20)) == null ? void 0 : f2,
          cashaddrPrefix: (f2 = jspb2.Message.getField(msg, 21)) == null ? void 0 : f2,
          bech32Prefix: (f2 = jspb2.Message.getField(msg, 22)) == null ? void 0 : f2,
          decred: (f2 = jspb2.Message.getBooleanField(msg, 23)) == null ? void 0 : f2,
          xpubMagicSegwitP2sh: (f2 = jspb2.Message.getField(msg, 25)) == null ? void 0 : f2,
          xpubMagicSegwitNative: (f2 = jspb2.Message.getField(msg, 26)) == null ? void 0 : f2,
          nanoaddrPrefix: (f2 = jspb2.Message.getField(msg, 27)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CoinType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CoinType();
      return proto.CoinType.deserializeBinaryFromReader(msg, reader);
    };
    proto.CoinType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setCoinShortcut(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setAddressType(value);
            break;
          case 4:
            var value = reader.readUint64();
            msg.setMaxfeeKb(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setAddressTypeP2sh(value);
            break;
          case 8:
            var value = reader.readString();
            msg.setSignedMessageHeader(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setBip44AccountPath(value);
            break;
          case 12:
            var value = reader.readUint32();
            msg.setForkid(value);
            break;
          case 13:
            var value = reader.readUint32();
            msg.setDecimals(value);
            break;
          case 14:
            var value = reader.readBytes();
            msg.setContractAddress(value);
            break;
          case 16:
            var value = reader.readUint32();
            msg.setXpubMagic(value);
            break;
          case 18:
            var value = reader.readBool();
            msg.setSegwit(value);
            break;
          case 19:
            var value = reader.readBool();
            msg.setForceBip143(value);
            break;
          case 20:
            var value = reader.readString();
            msg.setCurveName(value);
            break;
          case 21:
            var value = reader.readString();
            msg.setCashaddrPrefix(value);
            break;
          case 22:
            var value = reader.readString();
            msg.setBech32Prefix(value);
            break;
          case 23:
            var value = reader.readBool();
            msg.setDecred(value);
            break;
          case 25:
            var value = reader.readUint32();
            msg.setXpubMagicSegwitP2sh(value);
            break;
          case 26:
            var value = reader.readUint32();
            msg.setXpubMagicSegwitNative(value);
            break;
          case 27:
            var value = reader.readString();
            msg.setNanoaddrPrefix(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CoinType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CoinType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CoinType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint64(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeString(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeUint32(12, f2);
      }
      f2 = jspb2.Message.getField(message, 13);
      if (f2 != null) {
        writer.writeUint32(13, f2);
      }
      f2 = jspb2.Message.getField(message, 14);
      if (f2 != null) {
        writer.writeBytes(14, f2);
      }
      f2 = jspb2.Message.getField(message, 16);
      if (f2 != null) {
        writer.writeUint32(16, f2);
      }
      f2 = jspb2.Message.getField(message, 18);
      if (f2 != null) {
        writer.writeBool(18, f2);
      }
      f2 = jspb2.Message.getField(message, 19);
      if (f2 != null) {
        writer.writeBool(19, f2);
      }
      f2 = jspb2.Message.getField(message, 20);
      if (f2 != null) {
        writer.writeString(20, f2);
      }
      f2 = jspb2.Message.getField(message, 21);
      if (f2 != null) {
        writer.writeString(21, f2);
      }
      f2 = jspb2.Message.getField(message, 22);
      if (f2 != null) {
        writer.writeString(22, f2);
      }
      f2 = jspb2.Message.getField(message, 23);
      if (f2 != null) {
        writer.writeBool(23, f2);
      }
      f2 = jspb2.Message.getField(message, 25);
      if (f2 != null) {
        writer.writeUint32(25, f2);
      }
      f2 = jspb2.Message.getField(message, 26);
      if (f2 != null) {
        writer.writeUint32(26, f2);
      }
      f2 = jspb2.Message.getField(message, 27);
      if (f2 != null) {
        writer.writeString(27, f2);
      }
    };
    proto.CoinType.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.CoinType.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CoinType.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CoinType.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.CoinType.prototype.getCoinShortcut = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.CoinType.prototype.setCoinShortcut = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CoinType.prototype.clearCoinShortcut = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CoinType.prototype.hasCoinShortcut = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CoinType.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.CoinType.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.CoinType.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.CoinType.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.CoinType.prototype.getMaxfeeKb = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.CoinType.prototype.setMaxfeeKb = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.CoinType.prototype.clearMaxfeeKb = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.CoinType.prototype.hasMaxfeeKb = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.CoinType.prototype.getAddressTypeP2sh = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 5);
    };
    proto.CoinType.prototype.setAddressTypeP2sh = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.CoinType.prototype.clearAddressTypeP2sh = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.CoinType.prototype.hasAddressTypeP2sh = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.CoinType.prototype.getSignedMessageHeader = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.CoinType.prototype.setSignedMessageHeader = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.CoinType.prototype.clearSignedMessageHeader = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.CoinType.prototype.hasSignedMessageHeader = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.CoinType.prototype.getBip44AccountPath = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.CoinType.prototype.setBip44AccountPath = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.CoinType.prototype.clearBip44AccountPath = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.CoinType.prototype.hasBip44AccountPath = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.CoinType.prototype.getForkid = function() {
      return jspb2.Message.getFieldWithDefault(this, 12, 0);
    };
    proto.CoinType.prototype.setForkid = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.CoinType.prototype.clearForkid = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.CoinType.prototype.hasForkid = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.CoinType.prototype.getDecimals = function() {
      return jspb2.Message.getFieldWithDefault(this, 13, 0);
    };
    proto.CoinType.prototype.setDecimals = function(value) {
      return jspb2.Message.setField(this, 13, value);
    };
    proto.CoinType.prototype.clearDecimals = function() {
      return jspb2.Message.setField(this, 13, void 0);
    };
    proto.CoinType.prototype.hasDecimals = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    proto.CoinType.prototype.getContractAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 14, "");
    };
    proto.CoinType.prototype.getContractAddress_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getContractAddress());
    };
    proto.CoinType.prototype.getContractAddress_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getContractAddress());
    };
    proto.CoinType.prototype.setContractAddress = function(value) {
      return jspb2.Message.setField(this, 14, value);
    };
    proto.CoinType.prototype.clearContractAddress = function() {
      return jspb2.Message.setField(this, 14, void 0);
    };
    proto.CoinType.prototype.hasContractAddress = function() {
      return jspb2.Message.getField(this, 14) != null;
    };
    proto.CoinType.prototype.getXpubMagic = function() {
      return jspb2.Message.getFieldWithDefault(this, 16, 76067358);
    };
    proto.CoinType.prototype.setXpubMagic = function(value) {
      return jspb2.Message.setField(this, 16, value);
    };
    proto.CoinType.prototype.clearXpubMagic = function() {
      return jspb2.Message.setField(this, 16, void 0);
    };
    proto.CoinType.prototype.hasXpubMagic = function() {
      return jspb2.Message.getField(this, 16) != null;
    };
    proto.CoinType.prototype.getSegwit = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 18, false);
    };
    proto.CoinType.prototype.setSegwit = function(value) {
      return jspb2.Message.setField(this, 18, value);
    };
    proto.CoinType.prototype.clearSegwit = function() {
      return jspb2.Message.setField(this, 18, void 0);
    };
    proto.CoinType.prototype.hasSegwit = function() {
      return jspb2.Message.getField(this, 18) != null;
    };
    proto.CoinType.prototype.getForceBip143 = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 19, false);
    };
    proto.CoinType.prototype.setForceBip143 = function(value) {
      return jspb2.Message.setField(this, 19, value);
    };
    proto.CoinType.prototype.clearForceBip143 = function() {
      return jspb2.Message.setField(this, 19, void 0);
    };
    proto.CoinType.prototype.hasForceBip143 = function() {
      return jspb2.Message.getField(this, 19) != null;
    };
    proto.CoinType.prototype.getCurveName = function() {
      return jspb2.Message.getFieldWithDefault(this, 20, "");
    };
    proto.CoinType.prototype.setCurveName = function(value) {
      return jspb2.Message.setField(this, 20, value);
    };
    proto.CoinType.prototype.clearCurveName = function() {
      return jspb2.Message.setField(this, 20, void 0);
    };
    proto.CoinType.prototype.hasCurveName = function() {
      return jspb2.Message.getField(this, 20) != null;
    };
    proto.CoinType.prototype.getCashaddrPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 21, "");
    };
    proto.CoinType.prototype.setCashaddrPrefix = function(value) {
      return jspb2.Message.setField(this, 21, value);
    };
    proto.CoinType.prototype.clearCashaddrPrefix = function() {
      return jspb2.Message.setField(this, 21, void 0);
    };
    proto.CoinType.prototype.hasCashaddrPrefix = function() {
      return jspb2.Message.getField(this, 21) != null;
    };
    proto.CoinType.prototype.getBech32Prefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 22, "");
    };
    proto.CoinType.prototype.setBech32Prefix = function(value) {
      return jspb2.Message.setField(this, 22, value);
    };
    proto.CoinType.prototype.clearBech32Prefix = function() {
      return jspb2.Message.setField(this, 22, void 0);
    };
    proto.CoinType.prototype.hasBech32Prefix = function() {
      return jspb2.Message.getField(this, 22) != null;
    };
    proto.CoinType.prototype.getDecred = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 23, false);
    };
    proto.CoinType.prototype.setDecred = function(value) {
      return jspb2.Message.setField(this, 23, value);
    };
    proto.CoinType.prototype.clearDecred = function() {
      return jspb2.Message.setField(this, 23, void 0);
    };
    proto.CoinType.prototype.hasDecred = function() {
      return jspb2.Message.getField(this, 23) != null;
    };
    proto.CoinType.prototype.getXpubMagicSegwitP2sh = function() {
      return jspb2.Message.getFieldWithDefault(this, 25, 0);
    };
    proto.CoinType.prototype.setXpubMagicSegwitP2sh = function(value) {
      return jspb2.Message.setField(this, 25, value);
    };
    proto.CoinType.prototype.clearXpubMagicSegwitP2sh = function() {
      return jspb2.Message.setField(this, 25, void 0);
    };
    proto.CoinType.prototype.hasXpubMagicSegwitP2sh = function() {
      return jspb2.Message.getField(this, 25) != null;
    };
    proto.CoinType.prototype.getXpubMagicSegwitNative = function() {
      return jspb2.Message.getFieldWithDefault(this, 26, 0);
    };
    proto.CoinType.prototype.setXpubMagicSegwitNative = function(value) {
      return jspb2.Message.setField(this, 26, value);
    };
    proto.CoinType.prototype.clearXpubMagicSegwitNative = function() {
      return jspb2.Message.setField(this, 26, void 0);
    };
    proto.CoinType.prototype.hasXpubMagicSegwitNative = function() {
      return jspb2.Message.getField(this, 26) != null;
    };
    proto.CoinType.prototype.getNanoaddrPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 27, "");
    };
    proto.CoinType.prototype.setNanoaddrPrefix = function(value) {
      return jspb2.Message.setField(this, 27, value);
    };
    proto.CoinType.prototype.clearNanoaddrPrefix = function() {
      return jspb2.Message.setField(this, 27, void 0);
    };
    proto.CoinType.prototype.hasNanoaddrPrefix = function() {
      return jspb2.Message.getField(this, 27) != null;
    };
    proto.MultisigRedeemScriptType.repeatedFields_ = [1, 2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.MultisigRedeemScriptType.prototype.toObject = function(opt_includeInstance) {
        return proto.MultisigRedeemScriptType.toObject(opt_includeInstance, this);
      };
      proto.MultisigRedeemScriptType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          pubkeysList: jspb2.Message.toObjectList(msg.getPubkeysList(), proto.HDNodePathType.toObject, includeInstance),
          signaturesList: msg.getSignaturesList_asB64(),
          m: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.MultisigRedeemScriptType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.MultisigRedeemScriptType();
      return proto.MultisigRedeemScriptType.deserializeBinaryFromReader(msg, reader);
    };
    proto.MultisigRedeemScriptType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.HDNodePathType();
            reader.readMessage(value, proto.HDNodePathType.deserializeBinaryFromReader);
            msg.addPubkeys(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.addSignatures(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setM(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.MultisigRedeemScriptType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.MultisigRedeemScriptType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.MultisigRedeemScriptType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getPubkeysList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, proto.HDNodePathType.serializeBinaryToWriter);
      }
      f2 = message.getSignaturesList_asU8();
      if (f2.length > 0) {
        writer.writeRepeatedBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
    };
    proto.MultisigRedeemScriptType.prototype.getPubkeysList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.HDNodePathType, 1);
    };
    proto.MultisigRedeemScriptType.prototype.setPubkeysList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.MultisigRedeemScriptType.prototype.addPubkeys = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.HDNodePathType, opt_index);
    };
    proto.MultisigRedeemScriptType.prototype.clearPubkeysList = function() {
      return this.setPubkeysList([]);
    };
    proto.MultisigRedeemScriptType.prototype.getSignaturesList = function() {
      return jspb2.Message.getRepeatedField(this, 2);
    };
    proto.MultisigRedeemScriptType.prototype.getSignaturesList_asB64 = function() {
      return jspb2.Message.bytesListAsB64(this.getSignaturesList());
    };
    proto.MultisigRedeemScriptType.prototype.getSignaturesList_asU8 = function() {
      return jspb2.Message.bytesListAsU8(this.getSignaturesList());
    };
    proto.MultisigRedeemScriptType.prototype.setSignaturesList = function(value) {
      return jspb2.Message.setField(this, 2, value || []);
    };
    proto.MultisigRedeemScriptType.prototype.addSignatures = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 2, value, opt_index);
    };
    proto.MultisigRedeemScriptType.prototype.clearSignaturesList = function() {
      return this.setSignaturesList([]);
    };
    proto.MultisigRedeemScriptType.prototype.getM = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.MultisigRedeemScriptType.prototype.setM = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.MultisigRedeemScriptType.prototype.clearM = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.MultisigRedeemScriptType.prototype.hasM = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.TxInputType.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxInputType.prototype.toObject = function(opt_includeInstance) {
        return proto.TxInputType.toObject(opt_includeInstance, this);
      };
      proto.TxInputType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          prevHash: msg.getPrevHash_asB64(),
          prevIndex: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          scriptSig: msg.getScriptSig_asB64(),
          sequence: jspb2.Message.getFieldWithDefault(msg, 5, -1),
          scriptType: jspb2.Message.getFieldWithDefault(msg, 6, 0),
          multisig: (f2 = msg.getMultisig()) && proto.MultisigRedeemScriptType.toObject(includeInstance, f2),
          amount: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          decredTree: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          decredScriptVersion: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxInputType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxInputType();
      return proto.TxInputType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxInputType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setPrevHash(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setPrevIndex(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setScriptSig(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setSequence(value);
            break;
          case 6:
            var value = reader.readEnum();
            msg.setScriptType(value);
            break;
          case 7:
            var value = new proto.MultisigRedeemScriptType();
            reader.readMessage(value, proto.MultisigRedeemScriptType.deserializeBinaryFromReader);
            msg.setMultisig(value);
            break;
          case 8:
            var value = reader.readUint64();
            msg.setAmount(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setDecredTree(value);
            break;
          case 10:
            var value = reader.readUint32();
            msg.setDecredScriptVersion(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxInputType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxInputType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxInputType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeEnum(6, f2);
      }
      f2 = message.getMultisig();
      if (f2 != null) {
        writer.writeMessage(7, f2, proto.MultisigRedeemScriptType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint64(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeUint32(10, f2);
      }
    };
    proto.TxInputType.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.TxInputType.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.TxInputType.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.TxInputType.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.TxInputType.prototype.getPrevHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.TxInputType.prototype.getPrevHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPrevHash());
    };
    proto.TxInputType.prototype.getPrevHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPrevHash());
    };
    proto.TxInputType.prototype.setPrevHash = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.TxInputType.prototype.clearPrevHash = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.TxInputType.prototype.hasPrevHash = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.TxInputType.prototype.getPrevIndex = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.TxInputType.prototype.setPrevIndex = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.TxInputType.prototype.clearPrevIndex = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.TxInputType.prototype.hasPrevIndex = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.TxInputType.prototype.getScriptSig = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.TxInputType.prototype.getScriptSig_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getScriptSig());
    };
    proto.TxInputType.prototype.getScriptSig_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getScriptSig());
    };
    proto.TxInputType.prototype.setScriptSig = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.TxInputType.prototype.clearScriptSig = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.TxInputType.prototype.hasScriptSig = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.TxInputType.prototype.getSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, -1);
    };
    proto.TxInputType.prototype.setSequence = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.TxInputType.prototype.clearSequence = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.TxInputType.prototype.hasSequence = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.TxInputType.prototype.getScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.TxInputType.prototype.setScriptType = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.TxInputType.prototype.clearScriptType = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.TxInputType.prototype.hasScriptType = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.TxInputType.prototype.getMultisig = function() {
      return jspb2.Message.getWrapperField(this, proto.MultisigRedeemScriptType, 7);
    };
    proto.TxInputType.prototype.setMultisig = function(value) {
      return jspb2.Message.setWrapperField(this, 7, value);
    };
    proto.TxInputType.prototype.clearMultisig = function() {
      return this.setMultisig(void 0);
    };
    proto.TxInputType.prototype.hasMultisig = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.TxInputType.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.TxInputType.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.TxInputType.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.TxInputType.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.TxInputType.prototype.getDecredTree = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.TxInputType.prototype.setDecredTree = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.TxInputType.prototype.clearDecredTree = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.TxInputType.prototype.hasDecredTree = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.TxInputType.prototype.getDecredScriptVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, 0);
    };
    proto.TxInputType.prototype.setDecredScriptVersion = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.TxInputType.prototype.clearDecredScriptVersion = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.TxInputType.prototype.hasDecredScriptVersion = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.TxOutputType.repeatedFields_ = [2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxOutputType.prototype.toObject = function(opt_includeInstance) {
        return proto.TxOutputType.toObject(opt_includeInstance, this);
      };
      proto.TxOutputType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 2)) == null ? void 0 : f2,
          amount: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          scriptType: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          multisig: (f2 = msg.getMultisig()) && proto.MultisigRedeemScriptType.toObject(includeInstance, f2),
          opReturnData: msg.getOpReturnData_asB64(),
          addressType: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          exchangeType: (f2 = msg.getExchangeType()) && proto.ExchangeType.toObject(includeInstance, f2),
          decredScriptVersion: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxOutputType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxOutputType();
      return proto.TxOutputType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxOutputType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 2:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 3:
            var value = reader.readUint64();
            msg.setAmount(value);
            break;
          case 4:
            var value = reader.readEnum();
            msg.setScriptType(value);
            break;
          case 5:
            var value = new proto.MultisigRedeemScriptType();
            reader.readMessage(value, proto.MultisigRedeemScriptType.deserializeBinaryFromReader);
            msg.setMultisig(value);
            break;
          case 6:
            var value = reader.readBytes();
            msg.setOpReturnData(value);
            break;
          case 7:
            var value = reader.readEnum();
            msg.setAddressType(value);
            break;
          case 8:
            var value = new proto.ExchangeType();
            reader.readMessage(value, proto.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setDecredScriptVersion(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxOutputType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxOutputType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxOutputType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint64(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeEnum(4, f2);
      }
      f2 = message.getMultisig();
      if (f2 != null) {
        writer.writeMessage(5, f2, proto.MultisigRedeemScriptType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBytes(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeEnum(7, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(8, f2, proto.ExchangeType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
    };
    proto.TxOutputType.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.TxOutputType.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TxOutputType.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TxOutputType.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TxOutputType.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 2);
    };
    proto.TxOutputType.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 2, value || []);
    };
    proto.TxOutputType.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 2, value, opt_index);
    };
    proto.TxOutputType.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.TxOutputType.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.TxOutputType.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.TxOutputType.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.TxOutputType.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.TxOutputType.prototype.getScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.TxOutputType.prototype.setScriptType = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.TxOutputType.prototype.clearScriptType = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.TxOutputType.prototype.hasScriptType = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.TxOutputType.prototype.getMultisig = function() {
      return jspb2.Message.getWrapperField(this, proto.MultisigRedeemScriptType, 5);
    };
    proto.TxOutputType.prototype.setMultisig = function(value) {
      return jspb2.Message.setWrapperField(this, 5, value);
    };
    proto.TxOutputType.prototype.clearMultisig = function() {
      return this.setMultisig(void 0);
    };
    proto.TxOutputType.prototype.hasMultisig = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.TxOutputType.prototype.getOpReturnData = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.TxOutputType.prototype.getOpReturnData_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getOpReturnData());
    };
    proto.TxOutputType.prototype.getOpReturnData_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getOpReturnData());
    };
    proto.TxOutputType.prototype.setOpReturnData = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.TxOutputType.prototype.clearOpReturnData = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.TxOutputType.prototype.hasOpReturnData = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.TxOutputType.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, 0);
    };
    proto.TxOutputType.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.TxOutputType.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.TxOutputType.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.TxOutputType.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, proto.ExchangeType, 8);
    };
    proto.TxOutputType.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 8, value);
    };
    proto.TxOutputType.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.TxOutputType.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.TxOutputType.prototype.getDecredScriptVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.TxOutputType.prototype.setDecredScriptVersion = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.TxOutputType.prototype.clearDecredScriptVersion = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.TxOutputType.prototype.hasDecredScriptVersion = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxOutputBinType.prototype.toObject = function(opt_includeInstance) {
        return proto.TxOutputBinType.toObject(opt_includeInstance, this);
      };
      proto.TxOutputBinType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          amount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          scriptPubkey: msg.getScriptPubkey_asB64(),
          decredScriptVersion: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxOutputBinType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxOutputBinType();
      return proto.TxOutputBinType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxOutputBinType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64();
            msg.setAmount(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setScriptPubkey(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setDecredScriptVersion(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxOutputBinType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxOutputBinType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxOutputBinType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
    };
    proto.TxOutputBinType.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.TxOutputBinType.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TxOutputBinType.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TxOutputBinType.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TxOutputBinType.prototype.getScriptPubkey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.TxOutputBinType.prototype.getScriptPubkey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getScriptPubkey());
    };
    proto.TxOutputBinType.prototype.getScriptPubkey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getScriptPubkey());
    };
    proto.TxOutputBinType.prototype.setScriptPubkey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.TxOutputBinType.prototype.clearScriptPubkey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.TxOutputBinType.prototype.hasScriptPubkey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.TxOutputBinType.prototype.getDecredScriptVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.TxOutputBinType.prototype.setDecredScriptVersion = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.TxOutputBinType.prototype.clearDecredScriptVersion = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.TxOutputBinType.prototype.hasDecredScriptVersion = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.TransactionType.repeatedFields_ = [2, 3, 5];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TransactionType.prototype.toObject = function(opt_includeInstance) {
        return proto.TransactionType.toObject(opt_includeInstance, this);
      };
      proto.TransactionType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          version: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          inputsList: jspb2.Message.toObjectList(msg.getInputsList(), proto.TxInputType.toObject, includeInstance),
          binOutputsList: jspb2.Message.toObjectList(msg.getBinOutputsList(), proto.TxOutputBinType.toObject, includeInstance),
          outputsList: jspb2.Message.toObjectList(msg.getOutputsList(), proto.TxOutputType.toObject, includeInstance),
          lockTime: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          inputsCnt: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          outputsCnt: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          extraData: msg.getExtraData_asB64(),
          extraDataLen: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          expiry: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2,
          overwintered: (f2 = jspb2.Message.getBooleanField(msg, 11)) == null ? void 0 : f2,
          versionGroupId: (f2 = jspb2.Message.getField(msg, 12)) == null ? void 0 : f2,
          branchId: (f2 = jspb2.Message.getField(msg, 13)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TransactionType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TransactionType();
      return proto.TransactionType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TransactionType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setVersion(value);
            break;
          case 2:
            var value = new proto.TxInputType();
            reader.readMessage(value, proto.TxInputType.deserializeBinaryFromReader);
            msg.addInputs(value);
            break;
          case 3:
            var value = new proto.TxOutputBinType();
            reader.readMessage(value, proto.TxOutputBinType.deserializeBinaryFromReader);
            msg.addBinOutputs(value);
            break;
          case 5:
            var value = new proto.TxOutputType();
            reader.readMessage(value, proto.TxOutputType.deserializeBinaryFromReader);
            msg.addOutputs(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setLockTime(value);
            break;
          case 6:
            var value = reader.readUint32();
            msg.setInputsCnt(value);
            break;
          case 7:
            var value = reader.readUint32();
            msg.setOutputsCnt(value);
            break;
          case 8:
            var value = reader.readBytes();
            msg.setExtraData(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setExtraDataLen(value);
            break;
          case 10:
            var value = reader.readUint32();
            msg.setExpiry(value);
            break;
          case 11:
            var value = reader.readBool();
            msg.setOverwintered(value);
            break;
          case 12:
            var value = reader.readUint32();
            msg.setVersionGroupId(value);
            break;
          case 13:
            var value = reader.readUint32();
            msg.setBranchId(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TransactionType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TransactionType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TransactionType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = message.getInputsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.TxInputType.serializeBinaryToWriter);
      }
      f2 = message.getBinOutputsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(3, f2, proto.TxOutputBinType.serializeBinaryToWriter);
      }
      f2 = message.getOutputsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(5, f2, proto.TxOutputType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeUint32(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeUint32(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeBytes(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeUint32(10, f2);
      }
      f2 = jspb2.Message.getField(message, 11);
      if (f2 != null) {
        writer.writeBool(11, f2);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeUint32(12, f2);
      }
      f2 = jspb2.Message.getField(message, 13);
      if (f2 != null) {
        writer.writeUint32(13, f2);
      }
    };
    proto.TransactionType.prototype.getVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.TransactionType.prototype.setVersion = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TransactionType.prototype.clearVersion = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TransactionType.prototype.hasVersion = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TransactionType.prototype.getInputsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.TxInputType, 2);
    };
    proto.TransactionType.prototype.setInputsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.TransactionType.prototype.addInputs = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TxInputType, opt_index);
    };
    proto.TransactionType.prototype.clearInputsList = function() {
      return this.setInputsList([]);
    };
    proto.TransactionType.prototype.getBinOutputsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.TxOutputBinType, 3);
    };
    proto.TransactionType.prototype.setBinOutputsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.TransactionType.prototype.addBinOutputs = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TxOutputBinType, opt_index);
    };
    proto.TransactionType.prototype.clearBinOutputsList = function() {
      return this.setBinOutputsList([]);
    };
    proto.TransactionType.prototype.getOutputsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.TxOutputType, 5);
    };
    proto.TransactionType.prototype.setOutputsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 5, value);
    };
    proto.TransactionType.prototype.addOutputs = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.TxOutputType, opt_index);
    };
    proto.TransactionType.prototype.clearOutputsList = function() {
      return this.setOutputsList([]);
    };
    proto.TransactionType.prototype.getLockTime = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.TransactionType.prototype.setLockTime = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.TransactionType.prototype.clearLockTime = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.TransactionType.prototype.hasLockTime = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.TransactionType.prototype.getInputsCnt = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.TransactionType.prototype.setInputsCnt = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.TransactionType.prototype.clearInputsCnt = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.TransactionType.prototype.hasInputsCnt = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.TransactionType.prototype.getOutputsCnt = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, 0);
    };
    proto.TransactionType.prototype.setOutputsCnt = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.TransactionType.prototype.clearOutputsCnt = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.TransactionType.prototype.hasOutputsCnt = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.TransactionType.prototype.getExtraData = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.TransactionType.prototype.getExtraData_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getExtraData());
    };
    proto.TransactionType.prototype.getExtraData_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getExtraData());
    };
    proto.TransactionType.prototype.setExtraData = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.TransactionType.prototype.clearExtraData = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.TransactionType.prototype.hasExtraData = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.TransactionType.prototype.getExtraDataLen = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.TransactionType.prototype.setExtraDataLen = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.TransactionType.prototype.clearExtraDataLen = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.TransactionType.prototype.hasExtraDataLen = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.TransactionType.prototype.getExpiry = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, 0);
    };
    proto.TransactionType.prototype.setExpiry = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.TransactionType.prototype.clearExpiry = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.TransactionType.prototype.hasExpiry = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.TransactionType.prototype.getOverwintered = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 11, false);
    };
    proto.TransactionType.prototype.setOverwintered = function(value) {
      return jspb2.Message.setField(this, 11, value);
    };
    proto.TransactionType.prototype.clearOverwintered = function() {
      return jspb2.Message.setField(this, 11, void 0);
    };
    proto.TransactionType.prototype.hasOverwintered = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    proto.TransactionType.prototype.getVersionGroupId = function() {
      return jspb2.Message.getFieldWithDefault(this, 12, 0);
    };
    proto.TransactionType.prototype.setVersionGroupId = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.TransactionType.prototype.clearVersionGroupId = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.TransactionType.prototype.hasVersionGroupId = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.TransactionType.prototype.getBranchId = function() {
      return jspb2.Message.getFieldWithDefault(this, 13, 0);
    };
    proto.TransactionType.prototype.setBranchId = function(value) {
      return jspb2.Message.setField(this, 13, value);
    };
    proto.TransactionType.prototype.clearBranchId = function() {
      return jspb2.Message.setField(this, 13, void 0);
    };
    proto.TransactionType.prototype.hasBranchId = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RawTransactionType.prototype.toObject = function(opt_includeInstance) {
        return proto.RawTransactionType.toObject(opt_includeInstance, this);
      };
      proto.RawTransactionType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          payload: msg.getPayload_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RawTransactionType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RawTransactionType();
      return proto.RawTransactionType.deserializeBinaryFromReader(msg, reader);
    };
    proto.RawTransactionType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPayload(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RawTransactionType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RawTransactionType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RawTransactionType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.RawTransactionType.prototype.getPayload = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.RawTransactionType.prototype.getPayload_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPayload());
    };
    proto.RawTransactionType.prototype.getPayload_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPayload());
    };
    proto.RawTransactionType.prototype.setPayload = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.RawTransactionType.prototype.clearPayload = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.RawTransactionType.prototype.hasPayload = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxRequestDetailsType.prototype.toObject = function(opt_includeInstance) {
        return proto.TxRequestDetailsType.toObject(opt_includeInstance, this);
      };
      proto.TxRequestDetailsType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          requestIndex: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          txHash: msg.getTxHash_asB64(),
          extraDataLen: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          extraDataOffset: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxRequestDetailsType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxRequestDetailsType();
      return proto.TxRequestDetailsType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxRequestDetailsType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setRequestIndex(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setTxHash(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setExtraDataLen(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setExtraDataOffset(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxRequestDetailsType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxRequestDetailsType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxRequestDetailsType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
    };
    proto.TxRequestDetailsType.prototype.getRequestIndex = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.TxRequestDetailsType.prototype.setRequestIndex = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TxRequestDetailsType.prototype.clearRequestIndex = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TxRequestDetailsType.prototype.hasRequestIndex = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TxRequestDetailsType.prototype.getTxHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.TxRequestDetailsType.prototype.getTxHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getTxHash());
    };
    proto.TxRequestDetailsType.prototype.getTxHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getTxHash());
    };
    proto.TxRequestDetailsType.prototype.setTxHash = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.TxRequestDetailsType.prototype.clearTxHash = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.TxRequestDetailsType.prototype.hasTxHash = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.TxRequestDetailsType.prototype.getExtraDataLen = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.TxRequestDetailsType.prototype.setExtraDataLen = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.TxRequestDetailsType.prototype.clearExtraDataLen = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.TxRequestDetailsType.prototype.hasExtraDataLen = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.TxRequestDetailsType.prototype.getExtraDataOffset = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.TxRequestDetailsType.prototype.setExtraDataOffset = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.TxRequestDetailsType.prototype.clearExtraDataOffset = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.TxRequestDetailsType.prototype.hasExtraDataOffset = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxRequestSerializedType.prototype.toObject = function(opt_includeInstance) {
        return proto.TxRequestSerializedType.toObject(opt_includeInstance, this);
      };
      proto.TxRequestSerializedType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signatureIndex: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          signature: msg.getSignature_asB64(),
          serializedTx: msg.getSerializedTx_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxRequestSerializedType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxRequestSerializedType();
      return proto.TxRequestSerializedType.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxRequestSerializedType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setSignatureIndex(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setSerializedTx(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxRequestSerializedType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxRequestSerializedType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxRequestSerializedType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
    };
    proto.TxRequestSerializedType.prototype.getSignatureIndex = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.TxRequestSerializedType.prototype.setSignatureIndex = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TxRequestSerializedType.prototype.clearSignatureIndex = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TxRequestSerializedType.prototype.hasSignatureIndex = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TxRequestSerializedType.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.TxRequestSerializedType.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.TxRequestSerializedType.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.TxRequestSerializedType.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.TxRequestSerializedType.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.TxRequestSerializedType.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.TxRequestSerializedType.prototype.getSerializedTx = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.TxRequestSerializedType.prototype.getSerializedTx_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSerializedTx());
    };
    proto.TxRequestSerializedType.prototype.getSerializedTx_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSerializedTx());
    };
    proto.TxRequestSerializedType.prototype.setSerializedTx = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.TxRequestSerializedType.prototype.clearSerializedTx = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.TxRequestSerializedType.prototype.hasSerializedTx = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.IdentityType.prototype.toObject = function(opt_includeInstance) {
        return proto.IdentityType.toObject(opt_includeInstance, this);
      };
      proto.IdentityType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          proto: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          user: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          host: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          port: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          path: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          index: jspb2.Message.getFieldWithDefault(msg, 6, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.IdentityType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.IdentityType();
      return proto.IdentityType.deserializeBinaryFromReader(msg, reader);
    };
    proto.IdentityType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setProto(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setUser(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setHost(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setPort(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setPath(value);
            break;
          case 6:
            var value = reader.readUint32();
            msg.setIndex(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.IdentityType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.IdentityType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.IdentityType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeUint32(6, f2);
      }
    };
    proto.IdentityType.prototype.getProto = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.IdentityType.prototype.setProto = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.IdentityType.prototype.clearProto = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.IdentityType.prototype.hasProto = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.IdentityType.prototype.getUser = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.IdentityType.prototype.setUser = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.IdentityType.prototype.clearUser = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.IdentityType.prototype.hasUser = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.IdentityType.prototype.getHost = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.IdentityType.prototype.setHost = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.IdentityType.prototype.clearHost = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.IdentityType.prototype.hasHost = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.IdentityType.prototype.getPort = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.IdentityType.prototype.setPort = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.IdentityType.prototype.clearPort = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.IdentityType.prototype.hasPort = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.IdentityType.prototype.getPath = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.IdentityType.prototype.setPath = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.IdentityType.prototype.clearPath = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.IdentityType.prototype.hasPath = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.IdentityType.prototype.getIndex = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.IdentityType.prototype.setIndex = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.IdentityType.prototype.clearIndex = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.IdentityType.prototype.hasIndex = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PolicyType.prototype.toObject = function(opt_includeInstance) {
        return proto.PolicyType.toObject(opt_includeInstance, this);
      };
      proto.PolicyType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          policyName: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          enabled: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PolicyType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PolicyType();
      return proto.PolicyType.deserializeBinaryFromReader(msg, reader);
    };
    proto.PolicyType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setPolicyName(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setEnabled(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PolicyType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PolicyType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PolicyType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.PolicyType.prototype.getPolicyName = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.PolicyType.prototype.setPolicyName = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.PolicyType.prototype.clearPolicyName = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.PolicyType.prototype.hasPolicyName = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.PolicyType.prototype.getEnabled = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.PolicyType.prototype.setEnabled = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.PolicyType.prototype.clearEnabled = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.PolicyType.prototype.hasEnabled = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ExchangeType.repeatedFields_ = [3, 4];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ExchangeType.prototype.toObject = function(opt_includeInstance) {
        return proto.ExchangeType.toObject(opt_includeInstance, this);
      };
      proto.ExchangeType.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signedExchangeResponse: (f2 = msg.getSignedExchangeResponse()) && exchange_pb.SignedExchangeResponse.toObject(includeInstance, f2),
          withdrawalCoinName: jspb2.Message.getFieldWithDefault(msg, 2, "Bitcoin"),
          withdrawalAddressNList: (f2 = jspb2.Message.getRepeatedField(msg, 3)) == null ? void 0 : f2,
          returnAddressNList: (f2 = jspb2.Message.getRepeatedField(msg, 4)) == null ? void 0 : f2,
          withdrawalScriptType: jspb2.Message.getFieldWithDefault(msg, 5, 0),
          returnScriptType: jspb2.Message.getFieldWithDefault(msg, 6, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ExchangeType.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ExchangeType();
      return proto.ExchangeType.deserializeBinaryFromReader(msg, reader);
    };
    proto.ExchangeType.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new exchange_pb.SignedExchangeResponse();
            reader.readMessage(value, exchange_pb.SignedExchangeResponse.deserializeBinaryFromReader);
            msg.setSignedExchangeResponse(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setWithdrawalCoinName(value);
            break;
          case 3:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addWithdrawalAddressN(values[i]);
            }
            break;
          case 4:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addReturnAddressN(values[i]);
            }
            break;
          case 5:
            var value = reader.readEnum();
            msg.setWithdrawalScriptType(value);
            break;
          case 6:
            var value = reader.readEnum();
            msg.setReturnScriptType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ExchangeType.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ExchangeType.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ExchangeType.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getSignedExchangeResponse();
      if (f2 != null) {
        writer.writeMessage(1, f2, exchange_pb.SignedExchangeResponse.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = message.getWithdrawalAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(3, f2);
      }
      f2 = message.getReturnAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeEnum(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeEnum(6, f2);
      }
    };
    proto.ExchangeType.prototype.getSignedExchangeResponse = function() {
      return jspb2.Message.getWrapperField(this, exchange_pb.SignedExchangeResponse, 1);
    };
    proto.ExchangeType.prototype.setSignedExchangeResponse = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.ExchangeType.prototype.clearSignedExchangeResponse = function() {
      return this.setSignedExchangeResponse(void 0);
    };
    proto.ExchangeType.prototype.hasSignedExchangeResponse = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ExchangeType.prototype.getWithdrawalCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "Bitcoin");
    };
    proto.ExchangeType.prototype.setWithdrawalCoinName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ExchangeType.prototype.clearWithdrawalCoinName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ExchangeType.prototype.hasWithdrawalCoinName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ExchangeType.prototype.getWithdrawalAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 3);
    };
    proto.ExchangeType.prototype.setWithdrawalAddressNList = function(value) {
      return jspb2.Message.setField(this, 3, value || []);
    };
    proto.ExchangeType.prototype.addWithdrawalAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 3, value, opt_index);
    };
    proto.ExchangeType.prototype.clearWithdrawalAddressNList = function() {
      return this.setWithdrawalAddressNList([]);
    };
    proto.ExchangeType.prototype.getReturnAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 4);
    };
    proto.ExchangeType.prototype.setReturnAddressNList = function(value) {
      return jspb2.Message.setField(this, 4, value || []);
    };
    proto.ExchangeType.prototype.addReturnAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 4, value, opt_index);
    };
    proto.ExchangeType.prototype.clearReturnAddressNList = function() {
      return this.setReturnAddressNList([]);
    };
    proto.ExchangeType.prototype.getWithdrawalScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.ExchangeType.prototype.setWithdrawalScriptType = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.ExchangeType.prototype.clearWithdrawalScriptType = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.ExchangeType.prototype.hasWithdrawalScriptType = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.ExchangeType.prototype.getReturnScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.ExchangeType.prototype.setReturnScriptType = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.ExchangeType.prototype.clearReturnScriptType = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.ExchangeType.prototype.hasReturnScriptType = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.FailureType = {
      FAILURE_UNEXPECTEDMESSAGE: 1,
      FAILURE_BUTTONEXPECTED: 2,
      FAILURE_SYNTAXERROR: 3,
      FAILURE_ACTIONCANCELLED: 4,
      FAILURE_PINEXPECTED: 5,
      FAILURE_PINCANCELLED: 6,
      FAILURE_PININVALID: 7,
      FAILURE_INVALIDSIGNATURE: 8,
      FAILURE_OTHER: 9,
      FAILURE_NOTENOUGHFUNDS: 10,
      FAILURE_NOTINITIALIZED: 11,
      FAILURE_PINMISMATCH: 12,
      FAILURE_FIRMWAREERROR: 99
    };
    proto.OutputScriptType = {
      PAYTOADDRESS: 0,
      PAYTOSCRIPTHASH: 1,
      PAYTOMULTISIG: 2,
      PAYTOOPRETURN: 3,
      PAYTOWITNESS: 4,
      PAYTOP2SHWITNESS: 5
    };
    proto.InputScriptType = {
      SPENDADDRESS: 0,
      SPENDMULTISIG: 1,
      EXTERNAL: 2,
      SPENDWITNESS: 3,
      SPENDP2SHWITNESS: 4
    };
    proto.RequestType = {
      TXINPUT: 0,
      TXOUTPUT: 1,
      TXMETA: 2,
      TXFINISHED: 3,
      TXEXTRADATA: 4
    };
    proto.OutputAddressType = {
      SPEND: 0,
      TRANSFER: 1,
      CHANGE: 2,
      EXCHANGE: 3
    };
    proto.ButtonRequestType = {
      BUTTONREQUEST_OTHER: 1,
      BUTTONREQUEST_FEEOVERTHRESHOLD: 2,
      BUTTONREQUEST_CONFIRMOUTPUT: 3,
      BUTTONREQUEST_RESETDEVICE: 4,
      BUTTONREQUEST_CONFIRMWORD: 5,
      BUTTONREQUEST_WIPEDEVICE: 6,
      BUTTONREQUEST_PROTECTCALL: 7,
      BUTTONREQUEST_SIGNTX: 8,
      BUTTONREQUEST_FIRMWARECHECK: 9,
      BUTTONREQUEST_ADDRESS: 10,
      BUTTONREQUEST_FIRMWAREERASE: 11,
      BUTTONREQUEST_CONFIRMTRANSFERTOACCOUNT: 12,
      BUTTONREQUEST_CONFIRMTRANSFERTONODEPATH: 13,
      BUTTONREQUEST_CHANGELABEL: 14,
      BUTTONREQUEST_CHANGELANGUAGE: 15,
      BUTTONREQUEST_ENABLEPASSPHRASE: 16,
      BUTTONREQUEST_DISABLEPASSPHRASE: 17,
      BUTTONREQUEST_ENCRYPTANDSIGNMESSAGE: 18,
      BUTTONREQUEST_ENCRYPTMESSAGE: 19,
      BUTTONREQUEST_IMPORTPRIVATEKEY: 20,
      BUTTONREQUEST_IMPORTRECOVERYSENTENCE: 21,
      BUTTONREQUEST_SIGNIDENTITY: 22,
      BUTTONREQUEST_PING: 23,
      BUTTONREQUEST_REMOVEPIN: 24,
      BUTTONREQUEST_CHANGEPIN: 25,
      BUTTONREQUEST_CREATEPIN: 26,
      BUTTONREQUEST_GETENTROPY: 27,
      BUTTONREQUEST_SIGNMESSAGE: 28,
      BUTTONREQUEST_APPLYPOLICIES: 29,
      BUTTONREQUEST_SIGNEXCHANGE: 30,
      BUTTONREQUEST_AUTOLOCKDELAYMS: 31,
      BUTTONREQUEST_U2FCOUNTER: 32,
      BUTTONREQUEST_CONFIRMEOSACTION: 33,
      BUTTONREQUEST_CONFIRMEOSBUDGET: 34,
      BUTTONREQUEST_CONFIRMMEMO: 35,
      BUTTONREQUEST_REMOVEWIPECODE: 36,
      BUTTONREQUEST_CHANGEWIPECODE: 37,
      BUTTONREQUEST_CREATEWIPECODE: 38
    };
    proto.PinMatrixRequestType = {
      PINMATRIXREQUESTTYPE_CURRENT: 1,
      PINMATRIXREQUESTTYPE_NEWFIRST: 2,
      PINMATRIXREQUESTTYPE_NEWSECOND: 3
    };
    proto.wireIn = new jspb2.ExtensionFieldInfo(50002, { wireIn: 0 }, null, null, 0);
    google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[50002] = new jspb2.ExtensionFieldBinaryInfo(proto.wireIn, jspb2.BinaryReader.prototype.readBool, jspb2.BinaryWriter.prototype.writeBool, void 0, void 0, false);
    google_protobuf_descriptor_pb.EnumValueOptions.extensions[50002] = proto.wireIn;
    proto.wireOut = new jspb2.ExtensionFieldInfo(50003, { wireOut: 0 }, null, null, 0);
    google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[50003] = new jspb2.ExtensionFieldBinaryInfo(proto.wireOut, jspb2.BinaryReader.prototype.readBool, jspb2.BinaryWriter.prototype.writeBool, void 0, void 0, false);
    google_protobuf_descriptor_pb.EnumValueOptions.extensions[50003] = proto.wireOut;
    proto.wireDebugIn = new jspb2.ExtensionFieldInfo(50004, { wireDebugIn: 0 }, null, null, 0);
    google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[50004] = new jspb2.ExtensionFieldBinaryInfo(proto.wireDebugIn, jspb2.BinaryReader.prototype.readBool, jspb2.BinaryWriter.prototype.writeBool, void 0, void 0, false);
    google_protobuf_descriptor_pb.EnumValueOptions.extensions[50004] = proto.wireDebugIn;
    proto.wireDebugOut = new jspb2.ExtensionFieldInfo(50005, { wireDebugOut: 0 }, null, null, 0);
    google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[50005] = new jspb2.ExtensionFieldBinaryInfo(proto.wireDebugOut, jspb2.BinaryReader.prototype.readBool, jspb2.BinaryWriter.prototype.writeBool, void 0, void 0, false);
    google_protobuf_descriptor_pb.EnumValueOptions.extensions[50005] = proto.wireDebugOut;
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@keepkey/device-protocol/lib/messages_pb.js
var require_messages_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var types_pb = require_types_pb();
    goog2.object.extend(proto, types_pb);
    goog2.exportSymbol("proto.Address", null, global2);
    goog2.exportSymbol("proto.ApplyPolicies", null, global2);
    goog2.exportSymbol("proto.ApplySettings", null, global2);
    goog2.exportSymbol("proto.ButtonAck", null, global2);
    goog2.exportSymbol("proto.ButtonRequest", null, global2);
    goog2.exportSymbol("proto.Cancel", null, global2);
    goog2.exportSymbol("proto.ChangePin", null, global2);
    goog2.exportSymbol("proto.ChangeWipeCode", null, global2);
    goog2.exportSymbol("proto.CharacterAck", null, global2);
    goog2.exportSymbol("proto.CharacterRequest", null, global2);
    goog2.exportSymbol("proto.CipherKeyValue", null, global2);
    goog2.exportSymbol("proto.CipheredKeyValue", null, global2);
    goog2.exportSymbol("proto.ClearSession", null, global2);
    goog2.exportSymbol("proto.CoinTable", null, global2);
    goog2.exportSymbol("proto.DebugLinkDecision", null, global2);
    goog2.exportSymbol("proto.DebugLinkFillConfig", null, global2);
    goog2.exportSymbol("proto.DebugLinkFlashDump", null, global2);
    goog2.exportSymbol("proto.DebugLinkFlashDumpResponse", null, global2);
    goog2.exportSymbol("proto.DebugLinkGetState", null, global2);
    goog2.exportSymbol("proto.DebugLinkLog", null, global2);
    goog2.exportSymbol("proto.DebugLinkState", null, global2);
    goog2.exportSymbol("proto.DebugLinkStop", null, global2);
    goog2.exportSymbol("proto.DecryptMessage", null, global2);
    goog2.exportSymbol("proto.DecryptedMessage", null, global2);
    goog2.exportSymbol("proto.EncryptMessage", null, global2);
    goog2.exportSymbol("proto.EncryptedMessage", null, global2);
    goog2.exportSymbol("proto.Entropy", null, global2);
    goog2.exportSymbol("proto.EntropyAck", null, global2);
    goog2.exportSymbol("proto.EntropyRequest", null, global2);
    goog2.exportSymbol("proto.EthereumAddress", null, global2);
    goog2.exportSymbol("proto.EthereumGetAddress", null, global2);
    goog2.exportSymbol("proto.EthereumMessageSignature", null, global2);
    goog2.exportSymbol("proto.EthereumSignMessage", null, global2);
    goog2.exportSymbol("proto.EthereumSignTx", null, global2);
    goog2.exportSymbol("proto.EthereumTxAck", null, global2);
    goog2.exportSymbol("proto.EthereumTxRequest", null, global2);
    goog2.exportSymbol("proto.EthereumVerifyMessage", null, global2);
    goog2.exportSymbol("proto.Failure", null, global2);
    goog2.exportSymbol("proto.Features", null, global2);
    goog2.exportSymbol("proto.FirmwareErase", null, global2);
    goog2.exportSymbol("proto.FirmwareUpload", null, global2);
    goog2.exportSymbol("proto.FlashHash", null, global2);
    goog2.exportSymbol("proto.FlashHashResponse", null, global2);
    goog2.exportSymbol("proto.FlashWrite", null, global2);
    goog2.exportSymbol("proto.GetAddress", null, global2);
    goog2.exportSymbol("proto.GetCoinTable", null, global2);
    goog2.exportSymbol("proto.GetEntropy", null, global2);
    goog2.exportSymbol("proto.GetFeatures", null, global2);
    goog2.exportSymbol("proto.GetPublicKey", null, global2);
    goog2.exportSymbol("proto.Initialize", null, global2);
    goog2.exportSymbol("proto.LoadDevice", null, global2);
    goog2.exportSymbol("proto.MessageSignature", null, global2);
    goog2.exportSymbol("proto.MessageType", null, global2);
    goog2.exportSymbol("proto.PassphraseAck", null, global2);
    goog2.exportSymbol("proto.PassphraseRequest", null, global2);
    goog2.exportSymbol("proto.PinMatrixAck", null, global2);
    goog2.exportSymbol("proto.PinMatrixRequest", null, global2);
    goog2.exportSymbol("proto.Ping", null, global2);
    goog2.exportSymbol("proto.PublicKey", null, global2);
    goog2.exportSymbol("proto.RawTxAck", null, global2);
    goog2.exportSymbol("proto.RecoveryDevice", null, global2);
    goog2.exportSymbol("proto.ResetDevice", null, global2);
    goog2.exportSymbol("proto.SignIdentity", null, global2);
    goog2.exportSymbol("proto.SignMessage", null, global2);
    goog2.exportSymbol("proto.SignTx", null, global2);
    goog2.exportSymbol("proto.SignedIdentity", null, global2);
    goog2.exportSymbol("proto.SoftReset", null, global2);
    goog2.exportSymbol("proto.Success", null, global2);
    goog2.exportSymbol("proto.TxAck", null, global2);
    goog2.exportSymbol("proto.TxRequest", null, global2);
    goog2.exportSymbol("proto.VerifyMessage", null, global2);
    goog2.exportSymbol("proto.WipeDevice", null, global2);
    goog2.exportSymbol("proto.WordAck", null, global2);
    goog2.exportSymbol("proto.WordRequest", null, global2);
    proto.Initialize = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Initialize, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Initialize.displayName = "proto.Initialize";
    }
    proto.GetFeatures = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.GetFeatures, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.GetFeatures.displayName = "proto.GetFeatures";
    }
    proto.Features = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.Features.repeatedFields_, null);
    };
    goog2.inherits(proto.Features, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Features.displayName = "proto.Features";
    }
    proto.GetCoinTable = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.GetCoinTable, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.GetCoinTable.displayName = "proto.GetCoinTable";
    }
    proto.CoinTable = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.CoinTable.repeatedFields_, null);
    };
    goog2.inherits(proto.CoinTable, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CoinTable.displayName = "proto.CoinTable";
    }
    proto.ClearSession = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ClearSession, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ClearSession.displayName = "proto.ClearSession";
    }
    proto.ApplySettings = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ApplySettings, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ApplySettings.displayName = "proto.ApplySettings";
    }
    proto.ChangePin = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ChangePin, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ChangePin.displayName = "proto.ChangePin";
    }
    proto.Ping = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Ping, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Ping.displayName = "proto.Ping";
    }
    proto.Success = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Success, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Success.displayName = "proto.Success";
    }
    proto.Failure = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Failure, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Failure.displayName = "proto.Failure";
    }
    proto.ButtonRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ButtonRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ButtonRequest.displayName = "proto.ButtonRequest";
    }
    proto.ButtonAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ButtonAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ButtonAck.displayName = "proto.ButtonAck";
    }
    proto.PinMatrixRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PinMatrixRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PinMatrixRequest.displayName = "proto.PinMatrixRequest";
    }
    proto.PinMatrixAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PinMatrixAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PinMatrixAck.displayName = "proto.PinMatrixAck";
    }
    proto.Cancel = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Cancel, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Cancel.displayName = "proto.Cancel";
    }
    proto.PassphraseRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PassphraseRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PassphraseRequest.displayName = "proto.PassphraseRequest";
    }
    proto.PassphraseAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PassphraseAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PassphraseAck.displayName = "proto.PassphraseAck";
    }
    proto.GetEntropy = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.GetEntropy, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.GetEntropy.displayName = "proto.GetEntropy";
    }
    proto.Entropy = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Entropy, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Entropy.displayName = "proto.Entropy";
    }
    proto.GetPublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.GetPublicKey.repeatedFields_, null);
    };
    goog2.inherits(proto.GetPublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.GetPublicKey.displayName = "proto.GetPublicKey";
    }
    proto.PublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.PublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.PublicKey.displayName = "proto.PublicKey";
    }
    proto.GetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.GetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.GetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.GetAddress.displayName = "proto.GetAddress";
    }
    proto.EthereumGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EthereumGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.EthereumGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumGetAddress.displayName = "proto.EthereumGetAddress";
    }
    proto.Address = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.Address, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.Address.displayName = "proto.Address";
    }
    proto.EthereumAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EthereumAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumAddress.displayName = "proto.EthereumAddress";
    }
    proto.WipeDevice = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.WipeDevice, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.WipeDevice.displayName = "proto.WipeDevice";
    }
    proto.LoadDevice = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.LoadDevice, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.LoadDevice.displayName = "proto.LoadDevice";
    }
    proto.ResetDevice = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ResetDevice, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ResetDevice.displayName = "proto.ResetDevice";
    }
    proto.EntropyRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EntropyRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EntropyRequest.displayName = "proto.EntropyRequest";
    }
    proto.EntropyAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EntropyAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EntropyAck.displayName = "proto.EntropyAck";
    }
    proto.RecoveryDevice = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RecoveryDevice, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RecoveryDevice.displayName = "proto.RecoveryDevice";
    }
    proto.WordRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.WordRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.WordRequest.displayName = "proto.WordRequest";
    }
    proto.WordAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.WordAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.WordAck.displayName = "proto.WordAck";
    }
    proto.CharacterRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CharacterRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CharacterRequest.displayName = "proto.CharacterRequest";
    }
    proto.CharacterAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CharacterAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CharacterAck.displayName = "proto.CharacterAck";
    }
    proto.SignMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.SignMessage.repeatedFields_, null);
    };
    goog2.inherits(proto.SignMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SignMessage.displayName = "proto.SignMessage";
    }
    proto.VerifyMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.VerifyMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.VerifyMessage.displayName = "proto.VerifyMessage";
    }
    proto.MessageSignature = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.MessageSignature, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.MessageSignature.displayName = "proto.MessageSignature";
    }
    proto.EncryptMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EncryptMessage.repeatedFields_, null);
    };
    goog2.inherits(proto.EncryptMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EncryptMessage.displayName = "proto.EncryptMessage";
    }
    proto.EncryptedMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EncryptedMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EncryptedMessage.displayName = "proto.EncryptedMessage";
    }
    proto.DecryptMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.DecryptMessage.repeatedFields_, null);
    };
    goog2.inherits(proto.DecryptMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DecryptMessage.displayName = "proto.DecryptMessage";
    }
    proto.DecryptedMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DecryptedMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DecryptedMessage.displayName = "proto.DecryptedMessage";
    }
    proto.CipherKeyValue = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.CipherKeyValue.repeatedFields_, null);
    };
    goog2.inherits(proto.CipherKeyValue, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CipherKeyValue.displayName = "proto.CipherKeyValue";
    }
    proto.CipheredKeyValue = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CipheredKeyValue, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CipheredKeyValue.displayName = "proto.CipheredKeyValue";
    }
    proto.SignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.SignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SignTx.displayName = "proto.SignTx";
    }
    proto.TxRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.TxRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxRequest.displayName = "proto.TxRequest";
    }
    proto.TxAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.TxAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.TxAck.displayName = "proto.TxAck";
    }
    proto.RawTxAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RawTxAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RawTxAck.displayName = "proto.RawTxAck";
    }
    proto.EthereumSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EthereumSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.EthereumSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumSignTx.displayName = "proto.EthereumSignTx";
    }
    proto.EthereumTxRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EthereumTxRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumTxRequest.displayName = "proto.EthereumTxRequest";
    }
    proto.EthereumTxAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EthereumTxAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumTxAck.displayName = "proto.EthereumTxAck";
    }
    proto.EthereumSignMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EthereumSignMessage.repeatedFields_, null);
    };
    goog2.inherits(proto.EthereumSignMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumSignMessage.displayName = "proto.EthereumSignMessage";
    }
    proto.EthereumVerifyMessage = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EthereumVerifyMessage, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumVerifyMessage.displayName = "proto.EthereumVerifyMessage";
    }
    proto.EthereumMessageSignature = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EthereumMessageSignature, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EthereumMessageSignature.displayName = "proto.EthereumMessageSignature";
    }
    proto.SignIdentity = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.SignIdentity, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SignIdentity.displayName = "proto.SignIdentity";
    }
    proto.SignedIdentity = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.SignedIdentity, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SignedIdentity.displayName = "proto.SignedIdentity";
    }
    proto.ApplyPolicies = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.ApplyPolicies.repeatedFields_, null);
    };
    goog2.inherits(proto.ApplyPolicies, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ApplyPolicies.displayName = "proto.ApplyPolicies";
    }
    proto.FlashHash = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.FlashHash, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.FlashHash.displayName = "proto.FlashHash";
    }
    proto.FlashWrite = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.FlashWrite, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.FlashWrite.displayName = "proto.FlashWrite";
    }
    proto.FlashHashResponse = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.FlashHashResponse, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.FlashHashResponse.displayName = "proto.FlashHashResponse";
    }
    proto.DebugLinkFlashDump = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkFlashDump, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkFlashDump.displayName = "proto.DebugLinkFlashDump";
    }
    proto.DebugLinkFlashDumpResponse = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkFlashDumpResponse, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkFlashDumpResponse.displayName = "proto.DebugLinkFlashDumpResponse";
    }
    proto.SoftReset = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.SoftReset, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.SoftReset.displayName = "proto.SoftReset";
    }
    proto.FirmwareErase = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.FirmwareErase, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.FirmwareErase.displayName = "proto.FirmwareErase";
    }
    proto.FirmwareUpload = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.FirmwareUpload, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.FirmwareUpload.displayName = "proto.FirmwareUpload";
    }
    proto.DebugLinkDecision = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkDecision, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkDecision.displayName = "proto.DebugLinkDecision";
    }
    proto.DebugLinkGetState = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkGetState, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkGetState.displayName = "proto.DebugLinkGetState";
    }
    proto.DebugLinkState = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkState, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkState.displayName = "proto.DebugLinkState";
    }
    proto.DebugLinkStop = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkStop, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkStop.displayName = "proto.DebugLinkStop";
    }
    proto.DebugLinkLog = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkLog, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkLog.displayName = "proto.DebugLinkLog";
    }
    proto.DebugLinkFillConfig = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.DebugLinkFillConfig, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.DebugLinkFillConfig.displayName = "proto.DebugLinkFillConfig";
    }
    proto.ChangeWipeCode = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ChangeWipeCode, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ChangeWipeCode.displayName = "proto.ChangeWipeCode";
    }
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Initialize.prototype.toObject = function(opt_includeInstance) {
        return proto.Initialize.toObject(opt_includeInstance, this);
      };
      proto.Initialize.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Initialize.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Initialize();
      return proto.Initialize.deserializeBinaryFromReader(msg, reader);
    };
    proto.Initialize.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Initialize.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Initialize.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Initialize.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.GetFeatures.prototype.toObject = function(opt_includeInstance) {
        return proto.GetFeatures.toObject(opt_includeInstance, this);
      };
      proto.GetFeatures.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.GetFeatures.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.GetFeatures();
      return proto.GetFeatures.deserializeBinaryFromReader(msg, reader);
    };
    proto.GetFeatures.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.GetFeatures.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.GetFeatures.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.GetFeatures.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    proto.Features.repeatedFields_ = [11, 18];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Features.prototype.toObject = function(opt_includeInstance) {
        return proto.Features.toObject(opt_includeInstance, this);
      };
      proto.Features.toObject = function(includeInstance, msg) {
        var f2, obj = {
          vendor: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          majorVersion: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          minorVersion: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          patchVersion: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          bootloaderMode: (f2 = jspb2.Message.getBooleanField(msg, 5)) == null ? void 0 : f2,
          deviceId: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          pinProtection: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 8)) == null ? void 0 : f2,
          language: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          label: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2,
          coinsList: jspb2.Message.toObjectList(msg.getCoinsList(), types_pb.CoinType.toObject, includeInstance),
          initialized: (f2 = jspb2.Message.getBooleanField(msg, 12)) == null ? void 0 : f2,
          revision: msg.getRevision_asB64(),
          bootloaderHash: msg.getBootloaderHash_asB64(),
          imported: (f2 = jspb2.Message.getBooleanField(msg, 15)) == null ? void 0 : f2,
          pinCached: (f2 = jspb2.Message.getBooleanField(msg, 16)) == null ? void 0 : f2,
          passphraseCached: (f2 = jspb2.Message.getBooleanField(msg, 17)) == null ? void 0 : f2,
          policiesList: jspb2.Message.toObjectList(msg.getPoliciesList(), types_pb.PolicyType.toObject, includeInstance),
          model: (f2 = jspb2.Message.getField(msg, 21)) == null ? void 0 : f2,
          firmwareVariant: (f2 = jspb2.Message.getField(msg, 22)) == null ? void 0 : f2,
          firmwareHash: msg.getFirmwareHash_asB64(),
          noBackup: (f2 = jspb2.Message.getBooleanField(msg, 24)) == null ? void 0 : f2,
          wipeCodeProtection: (f2 = jspb2.Message.getBooleanField(msg, 25)) == null ? void 0 : f2,
          autoLockDelayMs: (f2 = jspb2.Message.getField(msg, 26)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Features.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Features();
      return proto.Features.deserializeBinaryFromReader(msg, reader);
    };
    proto.Features.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setVendor(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setMajorVersion(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setMinorVersion(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setPatchVersion(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setBootloaderMode(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setDeviceId(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setPinProtection(value);
            break;
          case 8:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 9:
            var value = reader.readString();
            msg.setLanguage(value);
            break;
          case 10:
            var value = reader.readString();
            msg.setLabel(value);
            break;
          case 11:
            var value = new types_pb.CoinType();
            reader.readMessage(value, types_pb.CoinType.deserializeBinaryFromReader);
            msg.addCoins(value);
            break;
          case 12:
            var value = reader.readBool();
            msg.setInitialized(value);
            break;
          case 13:
            var value = reader.readBytes();
            msg.setRevision(value);
            break;
          case 14:
            var value = reader.readBytes();
            msg.setBootloaderHash(value);
            break;
          case 15:
            var value = reader.readBool();
            msg.setImported(value);
            break;
          case 16:
            var value = reader.readBool();
            msg.setPinCached(value);
            break;
          case 17:
            var value = reader.readBool();
            msg.setPassphraseCached(value);
            break;
          case 18:
            var value = new types_pb.PolicyType();
            reader.readMessage(value, types_pb.PolicyType.deserializeBinaryFromReader);
            msg.addPolicies(value);
            break;
          case 21:
            var value = reader.readString();
            msg.setModel(value);
            break;
          case 22:
            var value = reader.readString();
            msg.setFirmwareVariant(value);
            break;
          case 23:
            var value = reader.readBytes();
            msg.setFirmwareHash(value);
            break;
          case 24:
            var value = reader.readBool();
            msg.setNoBackup(value);
            break;
          case 25:
            var value = reader.readBool();
            msg.setWipeCodeProtection(value);
            break;
          case 26:
            var value = reader.readUint32();
            msg.setAutoLockDelayMs(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Features.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Features.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Features.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeBool(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeString(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeString(10, f2);
      }
      f2 = message.getCoinsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(11, f2, types_pb.CoinType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeBool(12, f2);
      }
      f2 = jspb2.Message.getField(message, 13);
      if (f2 != null) {
        writer.writeBytes(13, f2);
      }
      f2 = jspb2.Message.getField(message, 14);
      if (f2 != null) {
        writer.writeBytes(14, f2);
      }
      f2 = jspb2.Message.getField(message, 15);
      if (f2 != null) {
        writer.writeBool(15, f2);
      }
      f2 = jspb2.Message.getField(message, 16);
      if (f2 != null) {
        writer.writeBool(16, f2);
      }
      f2 = jspb2.Message.getField(message, 17);
      if (f2 != null) {
        writer.writeBool(17, f2);
      }
      f2 = message.getPoliciesList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(18, f2, types_pb.PolicyType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 21);
      if (f2 != null) {
        writer.writeString(21, f2);
      }
      f2 = jspb2.Message.getField(message, 22);
      if (f2 != null) {
        writer.writeString(22, f2);
      }
      f2 = jspb2.Message.getField(message, 23);
      if (f2 != null) {
        writer.writeBytes(23, f2);
      }
      f2 = jspb2.Message.getField(message, 24);
      if (f2 != null) {
        writer.writeBool(24, f2);
      }
      f2 = jspb2.Message.getField(message, 25);
      if (f2 != null) {
        writer.writeBool(25, f2);
      }
      f2 = jspb2.Message.getField(message, 26);
      if (f2 != null) {
        writer.writeUint32(26, f2);
      }
    };
    proto.Features.prototype.getVendor = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.Features.prototype.setVendor = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Features.prototype.clearVendor = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Features.prototype.hasVendor = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.Features.prototype.getMajorVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.Features.prototype.setMajorVersion = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.Features.prototype.clearMajorVersion = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.Features.prototype.hasMajorVersion = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.Features.prototype.getMinorVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.Features.prototype.setMinorVersion = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.Features.prototype.clearMinorVersion = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.Features.prototype.hasMinorVersion = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.Features.prototype.getPatchVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.Features.prototype.setPatchVersion = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.Features.prototype.clearPatchVersion = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.Features.prototype.hasPatchVersion = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.Features.prototype.getBootloaderMode = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.Features.prototype.setBootloaderMode = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.Features.prototype.clearBootloaderMode = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.Features.prototype.hasBootloaderMode = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.Features.prototype.getDeviceId = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.Features.prototype.setDeviceId = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.Features.prototype.clearDeviceId = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.Features.prototype.hasDeviceId = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.Features.prototype.getPinProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.Features.prototype.setPinProtection = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.Features.prototype.clearPinProtection = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.Features.prototype.hasPinProtection = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.Features.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 8, false);
    };
    proto.Features.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.Features.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.Features.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.Features.prototype.getLanguage = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, "");
    };
    proto.Features.prototype.setLanguage = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.Features.prototype.clearLanguage = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.Features.prototype.hasLanguage = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.Features.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, "");
    };
    proto.Features.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.Features.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.Features.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.Features.prototype.getCoinsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, types_pb.CoinType, 11);
    };
    proto.Features.prototype.setCoinsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 11, value);
    };
    proto.Features.prototype.addCoins = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.CoinType, opt_index);
    };
    proto.Features.prototype.clearCoinsList = function() {
      return this.setCoinsList([]);
    };
    proto.Features.prototype.getInitialized = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 12, false);
    };
    proto.Features.prototype.setInitialized = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.Features.prototype.clearInitialized = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.Features.prototype.hasInitialized = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.Features.prototype.getRevision = function() {
      return jspb2.Message.getFieldWithDefault(this, 13, "");
    };
    proto.Features.prototype.getRevision_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getRevision());
    };
    proto.Features.prototype.getRevision_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getRevision());
    };
    proto.Features.prototype.setRevision = function(value) {
      return jspb2.Message.setField(this, 13, value);
    };
    proto.Features.prototype.clearRevision = function() {
      return jspb2.Message.setField(this, 13, void 0);
    };
    proto.Features.prototype.hasRevision = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    proto.Features.prototype.getBootloaderHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 14, "");
    };
    proto.Features.prototype.getBootloaderHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getBootloaderHash());
    };
    proto.Features.prototype.getBootloaderHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getBootloaderHash());
    };
    proto.Features.prototype.setBootloaderHash = function(value) {
      return jspb2.Message.setField(this, 14, value);
    };
    proto.Features.prototype.clearBootloaderHash = function() {
      return jspb2.Message.setField(this, 14, void 0);
    };
    proto.Features.prototype.hasBootloaderHash = function() {
      return jspb2.Message.getField(this, 14) != null;
    };
    proto.Features.prototype.getImported = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 15, false);
    };
    proto.Features.prototype.setImported = function(value) {
      return jspb2.Message.setField(this, 15, value);
    };
    proto.Features.prototype.clearImported = function() {
      return jspb2.Message.setField(this, 15, void 0);
    };
    proto.Features.prototype.hasImported = function() {
      return jspb2.Message.getField(this, 15) != null;
    };
    proto.Features.prototype.getPinCached = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 16, false);
    };
    proto.Features.prototype.setPinCached = function(value) {
      return jspb2.Message.setField(this, 16, value);
    };
    proto.Features.prototype.clearPinCached = function() {
      return jspb2.Message.setField(this, 16, void 0);
    };
    proto.Features.prototype.hasPinCached = function() {
      return jspb2.Message.getField(this, 16) != null;
    };
    proto.Features.prototype.getPassphraseCached = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 17, false);
    };
    proto.Features.prototype.setPassphraseCached = function(value) {
      return jspb2.Message.setField(this, 17, value);
    };
    proto.Features.prototype.clearPassphraseCached = function() {
      return jspb2.Message.setField(this, 17, void 0);
    };
    proto.Features.prototype.hasPassphraseCached = function() {
      return jspb2.Message.getField(this, 17) != null;
    };
    proto.Features.prototype.getPoliciesList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, types_pb.PolicyType, 18);
    };
    proto.Features.prototype.setPoliciesList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 18, value);
    };
    proto.Features.prototype.addPolicies = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.PolicyType, opt_index);
    };
    proto.Features.prototype.clearPoliciesList = function() {
      return this.setPoliciesList([]);
    };
    proto.Features.prototype.getModel = function() {
      return jspb2.Message.getFieldWithDefault(this, 21, "");
    };
    proto.Features.prototype.setModel = function(value) {
      return jspb2.Message.setField(this, 21, value);
    };
    proto.Features.prototype.clearModel = function() {
      return jspb2.Message.setField(this, 21, void 0);
    };
    proto.Features.prototype.hasModel = function() {
      return jspb2.Message.getField(this, 21) != null;
    };
    proto.Features.prototype.getFirmwareVariant = function() {
      return jspb2.Message.getFieldWithDefault(this, 22, "");
    };
    proto.Features.prototype.setFirmwareVariant = function(value) {
      return jspb2.Message.setField(this, 22, value);
    };
    proto.Features.prototype.clearFirmwareVariant = function() {
      return jspb2.Message.setField(this, 22, void 0);
    };
    proto.Features.prototype.hasFirmwareVariant = function() {
      return jspb2.Message.getField(this, 22) != null;
    };
    proto.Features.prototype.getFirmwareHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 23, "");
    };
    proto.Features.prototype.getFirmwareHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getFirmwareHash());
    };
    proto.Features.prototype.getFirmwareHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getFirmwareHash());
    };
    proto.Features.prototype.setFirmwareHash = function(value) {
      return jspb2.Message.setField(this, 23, value);
    };
    proto.Features.prototype.clearFirmwareHash = function() {
      return jspb2.Message.setField(this, 23, void 0);
    };
    proto.Features.prototype.hasFirmwareHash = function() {
      return jspb2.Message.getField(this, 23) != null;
    };
    proto.Features.prototype.getNoBackup = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 24, false);
    };
    proto.Features.prototype.setNoBackup = function(value) {
      return jspb2.Message.setField(this, 24, value);
    };
    proto.Features.prototype.clearNoBackup = function() {
      return jspb2.Message.setField(this, 24, void 0);
    };
    proto.Features.prototype.hasNoBackup = function() {
      return jspb2.Message.getField(this, 24) != null;
    };
    proto.Features.prototype.getWipeCodeProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 25, false);
    };
    proto.Features.prototype.setWipeCodeProtection = function(value) {
      return jspb2.Message.setField(this, 25, value);
    };
    proto.Features.prototype.clearWipeCodeProtection = function() {
      return jspb2.Message.setField(this, 25, void 0);
    };
    proto.Features.prototype.hasWipeCodeProtection = function() {
      return jspb2.Message.getField(this, 25) != null;
    };
    proto.Features.prototype.getAutoLockDelayMs = function() {
      return jspb2.Message.getFieldWithDefault(this, 26, 0);
    };
    proto.Features.prototype.setAutoLockDelayMs = function(value) {
      return jspb2.Message.setField(this, 26, value);
    };
    proto.Features.prototype.clearAutoLockDelayMs = function() {
      return jspb2.Message.setField(this, 26, void 0);
    };
    proto.Features.prototype.hasAutoLockDelayMs = function() {
      return jspb2.Message.getField(this, 26) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.GetCoinTable.prototype.toObject = function(opt_includeInstance) {
        return proto.GetCoinTable.toObject(opt_includeInstance, this);
      };
      proto.GetCoinTable.toObject = function(includeInstance, msg) {
        var f2, obj = {
          start: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          end: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.GetCoinTable.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.GetCoinTable();
      return proto.GetCoinTable.deserializeBinaryFromReader(msg, reader);
    };
    proto.GetCoinTable.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setStart(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setEnd(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.GetCoinTable.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.GetCoinTable.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.GetCoinTable.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
    };
    proto.GetCoinTable.prototype.getStart = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.GetCoinTable.prototype.setStart = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.GetCoinTable.prototype.clearStart = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.GetCoinTable.prototype.hasStart = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.GetCoinTable.prototype.getEnd = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.GetCoinTable.prototype.setEnd = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.GetCoinTable.prototype.clearEnd = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.GetCoinTable.prototype.hasEnd = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CoinTable.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CoinTable.prototype.toObject = function(opt_includeInstance) {
        return proto.CoinTable.toObject(opt_includeInstance, this);
      };
      proto.CoinTable.toObject = function(includeInstance, msg) {
        var f2, obj = {
          tableList: jspb2.Message.toObjectList(msg.getTableList(), types_pb.CoinType.toObject, includeInstance),
          numCoins: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          chunkSize: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CoinTable.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CoinTable();
      return proto.CoinTable.deserializeBinaryFromReader(msg, reader);
    };
    proto.CoinTable.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.CoinType();
            reader.readMessage(value, types_pb.CoinType.deserializeBinaryFromReader);
            msg.addTable(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setNumCoins(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setChunkSize(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CoinTable.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CoinTable.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CoinTable.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getTableList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, types_pb.CoinType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
    };
    proto.CoinTable.prototype.getTableList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, types_pb.CoinType, 1);
    };
    proto.CoinTable.prototype.setTableList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.CoinTable.prototype.addTable = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CoinType, opt_index);
    };
    proto.CoinTable.prototype.clearTableList = function() {
      return this.setTableList([]);
    };
    proto.CoinTable.prototype.getNumCoins = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.CoinTable.prototype.setNumCoins = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CoinTable.prototype.clearNumCoins = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CoinTable.prototype.hasNumCoins = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CoinTable.prototype.getChunkSize = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.CoinTable.prototype.setChunkSize = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.CoinTable.prototype.clearChunkSize = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.CoinTable.prototype.hasChunkSize = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ClearSession.prototype.toObject = function(opt_includeInstance) {
        return proto.ClearSession.toObject(opt_includeInstance, this);
      };
      proto.ClearSession.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ClearSession.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ClearSession();
      return proto.ClearSession.deserializeBinaryFromReader(msg, reader);
    };
    proto.ClearSession.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ClearSession.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ClearSession.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ClearSession.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ApplySettings.prototype.toObject = function(opt_includeInstance) {
        return proto.ApplySettings.toObject(opt_includeInstance, this);
      };
      proto.ApplySettings.toObject = function(includeInstance, msg) {
        var f2, obj = {
          language: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          label: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          usePassphrase: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          autoLockDelayMs: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          u2fCounter: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ApplySettings.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ApplySettings();
      return proto.ApplySettings.deserializeBinaryFromReader(msg, reader);
    };
    proto.ApplySettings.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setLanguage(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setLabel(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setUsePassphrase(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setAutoLockDelayMs(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setU2fCounter(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ApplySettings.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ApplySettings.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ApplySettings.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
    };
    proto.ApplySettings.prototype.getLanguage = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.ApplySettings.prototype.setLanguage = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ApplySettings.prototype.clearLanguage = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ApplySettings.prototype.hasLanguage = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ApplySettings.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.ApplySettings.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ApplySettings.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ApplySettings.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ApplySettings.prototype.getUsePassphrase = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.ApplySettings.prototype.setUsePassphrase = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ApplySettings.prototype.clearUsePassphrase = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ApplySettings.prototype.hasUsePassphrase = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ApplySettings.prototype.getAutoLockDelayMs = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.ApplySettings.prototype.setAutoLockDelayMs = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.ApplySettings.prototype.clearAutoLockDelayMs = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.ApplySettings.prototype.hasAutoLockDelayMs = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.ApplySettings.prototype.getU2fCounter = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.ApplySettings.prototype.setU2fCounter = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.ApplySettings.prototype.clearU2fCounter = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.ApplySettings.prototype.hasU2fCounter = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ChangePin.prototype.toObject = function(opt_includeInstance) {
        return proto.ChangePin.toObject(opt_includeInstance, this);
      };
      proto.ChangePin.toObject = function(includeInstance, msg) {
        var f2, obj = {
          remove: (f2 = jspb2.Message.getBooleanField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ChangePin.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ChangePin();
      return proto.ChangePin.deserializeBinaryFromReader(msg, reader);
    };
    proto.ChangePin.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setRemove(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ChangePin.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ChangePin.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ChangePin.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
    };
    proto.ChangePin.prototype.getRemove = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.ChangePin.prototype.setRemove = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ChangePin.prototype.clearRemove = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ChangePin.prototype.hasRemove = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Ping.prototype.toObject = function(opt_includeInstance) {
        return proto.Ping.toObject(opt_includeInstance, this);
      };
      proto.Ping.toObject = function(includeInstance, msg) {
        var f2, obj = {
          message: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          buttonProtection: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          pinProtection: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 4)) == null ? void 0 : f2,
          wipeCodeProtection: (f2 = jspb2.Message.getBooleanField(msg, 5)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Ping.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Ping();
      return proto.Ping.deserializeBinaryFromReader(msg, reader);
    };
    proto.Ping.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setMessage(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setButtonProtection(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setPinProtection(value);
            break;
          case 4:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setWipeCodeProtection(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Ping.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Ping.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Ping.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBool(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
    };
    proto.Ping.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.Ping.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Ping.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Ping.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.Ping.prototype.getButtonProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.Ping.prototype.setButtonProtection = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.Ping.prototype.clearButtonProtection = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.Ping.prototype.hasButtonProtection = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.Ping.prototype.getPinProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.Ping.prototype.setPinProtection = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.Ping.prototype.clearPinProtection = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.Ping.prototype.hasPinProtection = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.Ping.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 4, false);
    };
    proto.Ping.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.Ping.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.Ping.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.Ping.prototype.getWipeCodeProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.Ping.prototype.setWipeCodeProtection = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.Ping.prototype.clearWipeCodeProtection = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.Ping.prototype.hasWipeCodeProtection = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Success.prototype.toObject = function(opt_includeInstance) {
        return proto.Success.toObject(opt_includeInstance, this);
      };
      proto.Success.toObject = function(includeInstance, msg) {
        var f2, obj = {
          message: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Success.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Success();
      return proto.Success.deserializeBinaryFromReader(msg, reader);
    };
    proto.Success.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setMessage(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Success.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Success.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Success.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.Success.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.Success.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Success.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Success.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Failure.prototype.toObject = function(opt_includeInstance) {
        return proto.Failure.toObject(opt_includeInstance, this);
      };
      proto.Failure.toObject = function(includeInstance, msg) {
        var f2, obj = {
          code: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          message: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Failure.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Failure();
      return proto.Failure.deserializeBinaryFromReader(msg, reader);
    };
    proto.Failure.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readEnum();
            msg.setCode(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setMessage(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Failure.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Failure.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Failure.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeEnum(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.Failure.prototype.getCode = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 1);
    };
    proto.Failure.prototype.setCode = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Failure.prototype.clearCode = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Failure.prototype.hasCode = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.Failure.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.Failure.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.Failure.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.Failure.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ButtonRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ButtonRequest.toObject(opt_includeInstance, this);
      };
      proto.ButtonRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {
          code: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          data: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ButtonRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ButtonRequest();
      return proto.ButtonRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.ButtonRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readEnum();
            msg.setCode(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setData(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ButtonRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ButtonRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ButtonRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeEnum(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.ButtonRequest.prototype.getCode = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 1);
    };
    proto.ButtonRequest.prototype.setCode = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ButtonRequest.prototype.clearCode = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ButtonRequest.prototype.hasCode = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ButtonRequest.prototype.getData = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.ButtonRequest.prototype.setData = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ButtonRequest.prototype.clearData = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ButtonRequest.prototype.hasData = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ButtonAck.prototype.toObject = function(opt_includeInstance) {
        return proto.ButtonAck.toObject(opt_includeInstance, this);
      };
      proto.ButtonAck.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ButtonAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ButtonAck();
      return proto.ButtonAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.ButtonAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ButtonAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ButtonAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ButtonAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PinMatrixRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.PinMatrixRequest.toObject(opt_includeInstance, this);
      };
      proto.PinMatrixRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {
          type: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PinMatrixRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PinMatrixRequest();
      return proto.PinMatrixRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.PinMatrixRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readEnum();
            msg.setType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PinMatrixRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PinMatrixRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PinMatrixRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeEnum(1, f2);
      }
    };
    proto.PinMatrixRequest.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 1);
    };
    proto.PinMatrixRequest.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.PinMatrixRequest.prototype.clearType = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.PinMatrixRequest.prototype.hasType = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PinMatrixAck.prototype.toObject = function(opt_includeInstance) {
        return proto.PinMatrixAck.toObject(opt_includeInstance, this);
      };
      proto.PinMatrixAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          pin: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PinMatrixAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PinMatrixAck();
      return proto.PinMatrixAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.PinMatrixAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setPin(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PinMatrixAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PinMatrixAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PinMatrixAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.PinMatrixAck.prototype.getPin = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.PinMatrixAck.prototype.setPin = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.PinMatrixAck.prototype.clearPin = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.PinMatrixAck.prototype.hasPin = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Cancel.prototype.toObject = function(opt_includeInstance) {
        return proto.Cancel.toObject(opt_includeInstance, this);
      };
      proto.Cancel.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Cancel.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Cancel();
      return proto.Cancel.deserializeBinaryFromReader(msg, reader);
    };
    proto.Cancel.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Cancel.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Cancel.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Cancel.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PassphraseRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.PassphraseRequest.toObject(opt_includeInstance, this);
      };
      proto.PassphraseRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PassphraseRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PassphraseRequest();
      return proto.PassphraseRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.PassphraseRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PassphraseRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PassphraseRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PassphraseRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PassphraseAck.prototype.toObject = function(opt_includeInstance) {
        return proto.PassphraseAck.toObject(opt_includeInstance, this);
      };
      proto.PassphraseAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          passphrase: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PassphraseAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PassphraseAck();
      return proto.PassphraseAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.PassphraseAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setPassphrase(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PassphraseAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PassphraseAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PassphraseAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.PassphraseAck.prototype.getPassphrase = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.PassphraseAck.prototype.setPassphrase = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.PassphraseAck.prototype.clearPassphrase = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.PassphraseAck.prototype.hasPassphrase = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.GetEntropy.prototype.toObject = function(opt_includeInstance) {
        return proto.GetEntropy.toObject(opt_includeInstance, this);
      };
      proto.GetEntropy.toObject = function(includeInstance, msg) {
        var f2, obj = {
          size: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.GetEntropy.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.GetEntropy();
      return proto.GetEntropy.deserializeBinaryFromReader(msg, reader);
    };
    proto.GetEntropy.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setSize(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.GetEntropy.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.GetEntropy.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.GetEntropy.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
    };
    proto.GetEntropy.prototype.getSize = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.GetEntropy.prototype.setSize = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.GetEntropy.prototype.clearSize = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.GetEntropy.prototype.hasSize = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Entropy.prototype.toObject = function(opt_includeInstance) {
        return proto.Entropy.toObject(opt_includeInstance, this);
      };
      proto.Entropy.toObject = function(includeInstance, msg) {
        var f2, obj = {
          entropy: msg.getEntropy_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Entropy.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Entropy();
      return proto.Entropy.deserializeBinaryFromReader(msg, reader);
    };
    proto.Entropy.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setEntropy(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Entropy.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Entropy.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Entropy.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.Entropy.prototype.getEntropy = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.Entropy.prototype.getEntropy_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getEntropy());
    };
    proto.Entropy.prototype.getEntropy_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getEntropy());
    };
    proto.Entropy.prototype.setEntropy = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Entropy.prototype.clearEntropy = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Entropy.prototype.hasEntropy = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.GetPublicKey.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.GetPublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.GetPublicKey.toObject(opt_includeInstance, this);
      };
      proto.GetPublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          ecdsaCurveName: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 4, "Bitcoin"),
          scriptType: jspb2.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.GetPublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.GetPublicKey();
      return proto.GetPublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.GetPublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setEcdsaCurveName(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 5:
            var value = reader.readEnum();
            msg.setScriptType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.GetPublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.GetPublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.GetPublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeEnum(5, f2);
      }
    };
    proto.GetPublicKey.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.GetPublicKey.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.GetPublicKey.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.GetPublicKey.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.GetPublicKey.prototype.getEcdsaCurveName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.GetPublicKey.prototype.setEcdsaCurveName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.GetPublicKey.prototype.clearEcdsaCurveName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.GetPublicKey.prototype.hasEcdsaCurveName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.GetPublicKey.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.GetPublicKey.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.GetPublicKey.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.GetPublicKey.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.GetPublicKey.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "Bitcoin");
    };
    proto.GetPublicKey.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.GetPublicKey.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.GetPublicKey.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.GetPublicKey.prototype.getScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.GetPublicKey.prototype.setScriptType = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.GetPublicKey.prototype.clearScriptType = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.GetPublicKey.prototype.hasScriptType = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.PublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.PublicKey.toObject(opt_includeInstance, this);
      };
      proto.PublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          node: (f2 = msg.getNode()) && types_pb.HDNodeType.toObject(includeInstance, f2),
          xpub: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.PublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.PublicKey();
      return proto.PublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.HDNodeType();
            reader.readMessage(value, types_pb.HDNodeType.deserializeBinaryFromReader);
            msg.setNode(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setXpub(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.PublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.PublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.PublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getNode();
      if (f2 != null) {
        writer.writeMessage(1, f2, types_pb.HDNodeType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.PublicKey.prototype.getNode = function() {
      return jspb2.Message.getWrapperField(this, types_pb.HDNodeType, 1, 1);
    };
    proto.PublicKey.prototype.setNode = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.PublicKey.prototype.clearNode = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.PublicKey.prototype.hasNode = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.PublicKey.prototype.getXpub = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.PublicKey.prototype.setXpub = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.PublicKey.prototype.clearXpub = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.PublicKey.prototype.hasXpub = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.GetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.GetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.GetAddress.toObject(opt_includeInstance, this);
      };
      proto.GetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 2, "Bitcoin"),
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          multisig: (f2 = msg.getMultisig()) && types_pb.MultisigRedeemScriptType.toObject(includeInstance, f2),
          scriptType: jspb2.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.GetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.GetAddress();
      return proto.GetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.GetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          case 4:
            var value = new types_pb.MultisigRedeemScriptType();
            reader.readMessage(value, types_pb.MultisigRedeemScriptType.deserializeBinaryFromReader);
            msg.setMultisig(value);
            break;
          case 5:
            var value = reader.readEnum();
            msg.setScriptType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.GetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.GetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.GetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = message.getMultisig();
      if (f2 != null) {
        writer.writeMessage(4, f2, types_pb.MultisigRedeemScriptType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeEnum(5, f2);
      }
    };
    proto.GetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.GetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.GetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.GetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.GetAddress.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "Bitcoin");
    };
    proto.GetAddress.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.GetAddress.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.GetAddress.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.GetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.GetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.GetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.GetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.GetAddress.prototype.getMultisig = function() {
      return jspb2.Message.getWrapperField(this, types_pb.MultisigRedeemScriptType, 4);
    };
    proto.GetAddress.prototype.setMultisig = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.GetAddress.prototype.clearMultisig = function() {
      return this.setMultisig(void 0);
    };
    proto.GetAddress.prototype.hasMultisig = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.GetAddress.prototype.getScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.GetAddress.prototype.setScriptType = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.GetAddress.prototype.clearScriptType = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.GetAddress.prototype.hasScriptType = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.EthereumGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumGetAddress.toObject(opt_includeInstance, this);
      };
      proto.EthereumGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumGetAddress();
      return proto.EthereumGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.EthereumGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.EthereumGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.EthereumGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.EthereumGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EthereumGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.EthereumGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.Address.prototype.toObject = function(opt_includeInstance) {
        return proto.Address.toObject(opt_includeInstance, this);
      };
      proto.Address.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.Address.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.Address();
      return proto.Address.deserializeBinaryFromReader(msg, reader);
    };
    proto.Address.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.Address.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.Address.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.Address.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.Address.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.Address.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.Address.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.Address.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumAddress.toObject(opt_includeInstance, this);
      };
      proto.EthereumAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: msg.getAddress_asB64(),
          addressStr: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumAddress();
      return proto.EthereumAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setAddressStr(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.EthereumAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EthereumAddress.prototype.getAddress_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getAddress());
    };
    proto.EthereumAddress.prototype.getAddress_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getAddress());
    };
    proto.EthereumAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EthereumAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EthereumAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumAddress.prototype.getAddressStr = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EthereumAddress.prototype.setAddressStr = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumAddress.prototype.clearAddressStr = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumAddress.prototype.hasAddressStr = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.WipeDevice.prototype.toObject = function(opt_includeInstance) {
        return proto.WipeDevice.toObject(opt_includeInstance, this);
      };
      proto.WipeDevice.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.WipeDevice.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.WipeDevice();
      return proto.WipeDevice.deserializeBinaryFromReader(msg, reader);
    };
    proto.WipeDevice.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.WipeDevice.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.WipeDevice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.WipeDevice.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.LoadDevice.prototype.toObject = function(opt_includeInstance) {
        return proto.LoadDevice.toObject(opt_includeInstance, this);
      };
      proto.LoadDevice.toObject = function(includeInstance, msg) {
        var f2, obj = {
          mnemonic: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          node: (f2 = msg.getNode()) && types_pb.HDNodeType.toObject(includeInstance, f2),
          pin: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 4)) == null ? void 0 : f2,
          language: jspb2.Message.getFieldWithDefault(msg, 5, "english"),
          label: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          skipChecksum: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          u2fCounter: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.LoadDevice.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.LoadDevice();
      return proto.LoadDevice.deserializeBinaryFromReader(msg, reader);
    };
    proto.LoadDevice.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setMnemonic(value);
            break;
          case 2:
            var value = new types_pb.HDNodeType();
            reader.readMessage(value, types_pb.HDNodeType.deserializeBinaryFromReader);
            msg.setNode(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setPin(value);
            break;
          case 4:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setLanguage(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setLabel(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setSkipChecksum(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setU2fCounter(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.LoadDevice.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.LoadDevice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.LoadDevice.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getNode();
      if (f2 != null) {
        writer.writeMessage(2, f2, types_pb.HDNodeType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBool(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
    };
    proto.LoadDevice.prototype.getMnemonic = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.LoadDevice.prototype.setMnemonic = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.LoadDevice.prototype.clearMnemonic = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.LoadDevice.prototype.hasMnemonic = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.LoadDevice.prototype.getNode = function() {
      return jspb2.Message.getWrapperField(this, types_pb.HDNodeType, 2);
    };
    proto.LoadDevice.prototype.setNode = function(value) {
      return jspb2.Message.setWrapperField(this, 2, value);
    };
    proto.LoadDevice.prototype.clearNode = function() {
      return this.setNode(void 0);
    };
    proto.LoadDevice.prototype.hasNode = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.LoadDevice.prototype.getPin = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.LoadDevice.prototype.setPin = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.LoadDevice.prototype.clearPin = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.LoadDevice.prototype.hasPin = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.LoadDevice.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 4, false);
    };
    proto.LoadDevice.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.LoadDevice.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.LoadDevice.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.LoadDevice.prototype.getLanguage = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "english");
    };
    proto.LoadDevice.prototype.setLanguage = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.LoadDevice.prototype.clearLanguage = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.LoadDevice.prototype.hasLanguage = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.LoadDevice.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.LoadDevice.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.LoadDevice.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.LoadDevice.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.LoadDevice.prototype.getSkipChecksum = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.LoadDevice.prototype.setSkipChecksum = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.LoadDevice.prototype.clearSkipChecksum = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.LoadDevice.prototype.hasSkipChecksum = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.LoadDevice.prototype.getU2fCounter = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.LoadDevice.prototype.setU2fCounter = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.LoadDevice.prototype.clearU2fCounter = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.LoadDevice.prototype.hasU2fCounter = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ResetDevice.prototype.toObject = function(opt_includeInstance) {
        return proto.ResetDevice.toObject(opt_includeInstance, this);
      };
      proto.ResetDevice.toObject = function(includeInstance, msg) {
        var f2, obj = {
          displayRandom: (f2 = jspb2.Message.getBooleanField(msg, 1)) == null ? void 0 : f2,
          strength: jspb2.Message.getFieldWithDefault(msg, 2, 256),
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          pinProtection: (f2 = jspb2.Message.getBooleanField(msg, 4)) == null ? void 0 : f2,
          language: jspb2.Message.getFieldWithDefault(msg, 5, "english"),
          label: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          noBackup: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          autoLockDelayMs: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          u2fCounter: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ResetDevice.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ResetDevice();
      return proto.ResetDevice.deserializeBinaryFromReader(msg, reader);
    };
    proto.ResetDevice.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setDisplayRandom(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setStrength(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 4:
            var value = reader.readBool();
            msg.setPinProtection(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setLanguage(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setLabel(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setNoBackup(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setAutoLockDelayMs(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setU2fCounter(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ResetDevice.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ResetDevice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ResetDevice.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBool(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
    };
    proto.ResetDevice.prototype.getDisplayRandom = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.ResetDevice.prototype.setDisplayRandom = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ResetDevice.prototype.clearDisplayRandom = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ResetDevice.prototype.hasDisplayRandom = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ResetDevice.prototype.getStrength = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 256);
    };
    proto.ResetDevice.prototype.setStrength = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ResetDevice.prototype.clearStrength = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ResetDevice.prototype.hasStrength = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ResetDevice.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.ResetDevice.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ResetDevice.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ResetDevice.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ResetDevice.prototype.getPinProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 4, false);
    };
    proto.ResetDevice.prototype.setPinProtection = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.ResetDevice.prototype.clearPinProtection = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.ResetDevice.prototype.hasPinProtection = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.ResetDevice.prototype.getLanguage = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "english");
    };
    proto.ResetDevice.prototype.setLanguage = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.ResetDevice.prototype.clearLanguage = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.ResetDevice.prototype.hasLanguage = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.ResetDevice.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.ResetDevice.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.ResetDevice.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.ResetDevice.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.ResetDevice.prototype.getNoBackup = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.ResetDevice.prototype.setNoBackup = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.ResetDevice.prototype.clearNoBackup = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.ResetDevice.prototype.hasNoBackup = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.ResetDevice.prototype.getAutoLockDelayMs = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.ResetDevice.prototype.setAutoLockDelayMs = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.ResetDevice.prototype.clearAutoLockDelayMs = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.ResetDevice.prototype.hasAutoLockDelayMs = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.ResetDevice.prototype.getU2fCounter = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.ResetDevice.prototype.setU2fCounter = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.ResetDevice.prototype.clearU2fCounter = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.ResetDevice.prototype.hasU2fCounter = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EntropyRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.EntropyRequest.toObject(opt_includeInstance, this);
      };
      proto.EntropyRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EntropyRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EntropyRequest();
      return proto.EntropyRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.EntropyRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EntropyRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EntropyRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EntropyRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EntropyAck.prototype.toObject = function(opt_includeInstance) {
        return proto.EntropyAck.toObject(opt_includeInstance, this);
      };
      proto.EntropyAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          entropy: msg.getEntropy_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EntropyAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EntropyAck();
      return proto.EntropyAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.EntropyAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setEntropy(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EntropyAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EntropyAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EntropyAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.EntropyAck.prototype.getEntropy = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EntropyAck.prototype.getEntropy_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getEntropy());
    };
    proto.EntropyAck.prototype.getEntropy_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getEntropy());
    };
    proto.EntropyAck.prototype.setEntropy = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EntropyAck.prototype.clearEntropy = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EntropyAck.prototype.hasEntropy = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RecoveryDevice.prototype.toObject = function(opt_includeInstance) {
        return proto.RecoveryDevice.toObject(opt_includeInstance, this);
      };
      proto.RecoveryDevice.toObject = function(includeInstance, msg) {
        var f2, obj = {
          wordCount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          pinProtection: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          language: jspb2.Message.getFieldWithDefault(msg, 4, "english"),
          label: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          enforceWordlist: (f2 = jspb2.Message.getBooleanField(msg, 6)) == null ? void 0 : f2,
          useCharacterCipher: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          autoLockDelayMs: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          u2fCounter: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          dryRun: (f2 = jspb2.Message.getBooleanField(msg, 10)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RecoveryDevice.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RecoveryDevice();
      return proto.RecoveryDevice.deserializeBinaryFromReader(msg, reader);
    };
    proto.RecoveryDevice.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setWordCount(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setPinProtection(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setLanguage(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setLabel(value);
            break;
          case 6:
            var value = reader.readBool();
            msg.setEnforceWordlist(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setUseCharacterCipher(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setAutoLockDelayMs(value);
            break;
          case 9:
            var value = reader.readUint32();
            msg.setU2fCounter(value);
            break;
          case 10:
            var value = reader.readBool();
            msg.setDryRun(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RecoveryDevice.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RecoveryDevice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RecoveryDevice.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBool(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeUint32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeBool(10, f2);
      }
    };
    proto.RecoveryDevice.prototype.getWordCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.RecoveryDevice.prototype.setWordCount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.RecoveryDevice.prototype.clearWordCount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.RecoveryDevice.prototype.hasWordCount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.RecoveryDevice.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.RecoveryDevice.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.RecoveryDevice.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.RecoveryDevice.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.RecoveryDevice.prototype.getPinProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.RecoveryDevice.prototype.setPinProtection = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.RecoveryDevice.prototype.clearPinProtection = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.RecoveryDevice.prototype.hasPinProtection = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.RecoveryDevice.prototype.getLanguage = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "english");
    };
    proto.RecoveryDevice.prototype.setLanguage = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.RecoveryDevice.prototype.clearLanguage = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.RecoveryDevice.prototype.hasLanguage = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.RecoveryDevice.prototype.getLabel = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.RecoveryDevice.prototype.setLabel = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.RecoveryDevice.prototype.clearLabel = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.RecoveryDevice.prototype.hasLabel = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.RecoveryDevice.prototype.getEnforceWordlist = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 6, false);
    };
    proto.RecoveryDevice.prototype.setEnforceWordlist = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.RecoveryDevice.prototype.clearEnforceWordlist = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.RecoveryDevice.prototype.hasEnforceWordlist = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.RecoveryDevice.prototype.getUseCharacterCipher = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.RecoveryDevice.prototype.setUseCharacterCipher = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.RecoveryDevice.prototype.clearUseCharacterCipher = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.RecoveryDevice.prototype.hasUseCharacterCipher = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.RecoveryDevice.prototype.getAutoLockDelayMs = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.RecoveryDevice.prototype.setAutoLockDelayMs = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.RecoveryDevice.prototype.clearAutoLockDelayMs = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.RecoveryDevice.prototype.hasAutoLockDelayMs = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.RecoveryDevice.prototype.getU2fCounter = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.RecoveryDevice.prototype.setU2fCounter = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.RecoveryDevice.prototype.clearU2fCounter = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.RecoveryDevice.prototype.hasU2fCounter = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.RecoveryDevice.prototype.getDryRun = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 10, false);
    };
    proto.RecoveryDevice.prototype.setDryRun = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.RecoveryDevice.prototype.clearDryRun = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.RecoveryDevice.prototype.hasDryRun = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.WordRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.WordRequest.toObject(opt_includeInstance, this);
      };
      proto.WordRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.WordRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.WordRequest();
      return proto.WordRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.WordRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.WordRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.WordRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.WordRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.WordAck.prototype.toObject = function(opt_includeInstance) {
        return proto.WordAck.toObject(opt_includeInstance, this);
      };
      proto.WordAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          word: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.WordAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.WordAck();
      return proto.WordAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.WordAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setWord(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.WordAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.WordAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.WordAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.WordAck.prototype.getWord = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.WordAck.prototype.setWord = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.WordAck.prototype.clearWord = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.WordAck.prototype.hasWord = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CharacterRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.CharacterRequest.toObject(opt_includeInstance, this);
      };
      proto.CharacterRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {
          wordPos: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          characterPos: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CharacterRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CharacterRequest();
      return proto.CharacterRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.CharacterRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setWordPos(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setCharacterPos(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CharacterRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CharacterRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CharacterRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
    };
    proto.CharacterRequest.prototype.getWordPos = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.CharacterRequest.prototype.setWordPos = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CharacterRequest.prototype.clearWordPos = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CharacterRequest.prototype.hasWordPos = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.CharacterRequest.prototype.getCharacterPos = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.CharacterRequest.prototype.setCharacterPos = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CharacterRequest.prototype.clearCharacterPos = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CharacterRequest.prototype.hasCharacterPos = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CharacterAck.prototype.toObject = function(opt_includeInstance) {
        return proto.CharacterAck.toObject(opt_includeInstance, this);
      };
      proto.CharacterAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          character: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          pb_delete: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          done: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CharacterAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CharacterAck();
      return proto.CharacterAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.CharacterAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setCharacter(value);
            break;
          case 2:
            var value = reader.readBool();
            msg.setDelete(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setDone(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CharacterAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CharacterAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CharacterAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
    };
    proto.CharacterAck.prototype.getCharacter = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.CharacterAck.prototype.setCharacter = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CharacterAck.prototype.clearCharacter = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CharacterAck.prototype.hasCharacter = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.CharacterAck.prototype.getDelete = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.CharacterAck.prototype.setDelete = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CharacterAck.prototype.clearDelete = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CharacterAck.prototype.hasDelete = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CharacterAck.prototype.getDone = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.CharacterAck.prototype.setDone = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.CharacterAck.prototype.clearDone = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.CharacterAck.prototype.hasDone = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.SignMessage.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SignMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.SignMessage.toObject(opt_includeInstance, this);
      };
      proto.SignMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          message: msg.getMessage_asB64(),
          coinName: jspb2.Message.getFieldWithDefault(msg, 3, "Bitcoin"),
          scriptType: jspb2.Message.getFieldWithDefault(msg, 4, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SignMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SignMessage();
      return proto.SignMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.SignMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 4:
            var value = reader.readEnum();
            msg.setScriptType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SignMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SignMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SignMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeEnum(4, f2);
      }
    };
    proto.SignMessage.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.SignMessage.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.SignMessage.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.SignMessage.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.SignMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.SignMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.SignMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.SignMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.SignMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.SignMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.SignMessage.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "Bitcoin");
    };
    proto.SignMessage.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.SignMessage.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.SignMessage.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.SignMessage.prototype.getScriptType = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.SignMessage.prototype.setScriptType = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.SignMessage.prototype.clearScriptType = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.SignMessage.prototype.hasScriptType = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.VerifyMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.VerifyMessage.toObject(opt_includeInstance, this);
      };
      proto.VerifyMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          signature: msg.getSignature_asB64(),
          message: msg.getMessage_asB64(),
          coinName: jspb2.Message.getFieldWithDefault(msg, 4, "Bitcoin")
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.VerifyMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.VerifyMessage();
      return proto.VerifyMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.VerifyMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.VerifyMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.VerifyMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.VerifyMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
    };
    proto.VerifyMessage.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.VerifyMessage.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.VerifyMessage.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.VerifyMessage.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.VerifyMessage.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.VerifyMessage.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.VerifyMessage.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.VerifyMessage.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.VerifyMessage.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.VerifyMessage.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.VerifyMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.VerifyMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.VerifyMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.VerifyMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.VerifyMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.VerifyMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.VerifyMessage.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "Bitcoin");
    };
    proto.VerifyMessage.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.VerifyMessage.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.VerifyMessage.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.MessageSignature.prototype.toObject = function(opt_includeInstance) {
        return proto.MessageSignature.toObject(opt_includeInstance, this);
      };
      proto.MessageSignature.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          signature: msg.getSignature_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.MessageSignature.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.MessageSignature();
      return proto.MessageSignature.deserializeBinaryFromReader(msg, reader);
    };
    proto.MessageSignature.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.MessageSignature.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.MessageSignature.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.MessageSignature.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.MessageSignature.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.MessageSignature.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.MessageSignature.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.MessageSignature.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.MessageSignature.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.MessageSignature.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.MessageSignature.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.MessageSignature.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.MessageSignature.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.MessageSignature.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EncryptMessage.repeatedFields_ = [4];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EncryptMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.EncryptMessage.toObject(opt_includeInstance, this);
      };
      proto.EncryptMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          pubkey: msg.getPubkey_asB64(),
          message: msg.getMessage_asB64(),
          displayOnly: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2,
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 4)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 5, "Bitcoin")
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EncryptMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EncryptMessage();
      return proto.EncryptMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.EncryptMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPubkey(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setDisplayOnly(value);
            break;
          case 4:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 5:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EncryptMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EncryptMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EncryptMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
    };
    proto.EncryptMessage.prototype.getPubkey = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EncryptMessage.prototype.getPubkey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPubkey());
    };
    proto.EncryptMessage.prototype.getPubkey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPubkey());
    };
    proto.EncryptMessage.prototype.setPubkey = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EncryptMessage.prototype.clearPubkey = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EncryptMessage.prototype.hasPubkey = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EncryptMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EncryptMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.EncryptMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.EncryptMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EncryptMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EncryptMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EncryptMessage.prototype.getDisplayOnly = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.EncryptMessage.prototype.setDisplayOnly = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EncryptMessage.prototype.clearDisplayOnly = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EncryptMessage.prototype.hasDisplayOnly = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EncryptMessage.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 4);
    };
    proto.EncryptMessage.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 4, value || []);
    };
    proto.EncryptMessage.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 4, value, opt_index);
    };
    proto.EncryptMessage.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EncryptMessage.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "Bitcoin");
    };
    proto.EncryptMessage.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.EncryptMessage.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.EncryptMessage.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EncryptedMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.EncryptedMessage.toObject(opt_includeInstance, this);
      };
      proto.EncryptedMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          nonce: msg.getNonce_asB64(),
          message: msg.getMessage_asB64(),
          hmac: msg.getHmac_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EncryptedMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EncryptedMessage();
      return proto.EncryptedMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.EncryptedMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setNonce(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setHmac(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EncryptedMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EncryptedMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EncryptedMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
    };
    proto.EncryptedMessage.prototype.getNonce = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EncryptedMessage.prototype.getNonce_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getNonce());
    };
    proto.EncryptedMessage.prototype.getNonce_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getNonce());
    };
    proto.EncryptedMessage.prototype.setNonce = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EncryptedMessage.prototype.clearNonce = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EncryptedMessage.prototype.hasNonce = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EncryptedMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EncryptedMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.EncryptedMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.EncryptedMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EncryptedMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EncryptedMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EncryptedMessage.prototype.getHmac = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.EncryptedMessage.prototype.getHmac_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getHmac());
    };
    proto.EncryptedMessage.prototype.getHmac_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getHmac());
    };
    proto.EncryptedMessage.prototype.setHmac = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EncryptedMessage.prototype.clearHmac = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EncryptedMessage.prototype.hasHmac = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.DecryptMessage.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DecryptMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.DecryptMessage.toObject(opt_includeInstance, this);
      };
      proto.DecryptMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          nonce: msg.getNonce_asB64(),
          message: msg.getMessage_asB64(),
          hmac: msg.getHmac_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DecryptMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DecryptMessage();
      return proto.DecryptMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.DecryptMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setNonce(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setHmac(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DecryptMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DecryptMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DecryptMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
    };
    proto.DecryptMessage.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.DecryptMessage.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.DecryptMessage.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.DecryptMessage.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.DecryptMessage.prototype.getNonce = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.DecryptMessage.prototype.getNonce_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getNonce());
    };
    proto.DecryptMessage.prototype.getNonce_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getNonce());
    };
    proto.DecryptMessage.prototype.setNonce = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.DecryptMessage.prototype.clearNonce = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.DecryptMessage.prototype.hasNonce = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.DecryptMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.DecryptMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.DecryptMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.DecryptMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.DecryptMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.DecryptMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.DecryptMessage.prototype.getHmac = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.DecryptMessage.prototype.getHmac_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getHmac());
    };
    proto.DecryptMessage.prototype.getHmac_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getHmac());
    };
    proto.DecryptMessage.prototype.setHmac = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.DecryptMessage.prototype.clearHmac = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.DecryptMessage.prototype.hasHmac = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DecryptedMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.DecryptedMessage.toObject(opt_includeInstance, this);
      };
      proto.DecryptedMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          message: msg.getMessage_asB64(),
          address: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DecryptedMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DecryptedMessage();
      return proto.DecryptedMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.DecryptedMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DecryptedMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DecryptedMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DecryptedMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.DecryptedMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.DecryptedMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.DecryptedMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.DecryptedMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DecryptedMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DecryptedMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.DecryptedMessage.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.DecryptedMessage.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.DecryptedMessage.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.DecryptedMessage.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CipherKeyValue.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CipherKeyValue.prototype.toObject = function(opt_includeInstance) {
        return proto.CipherKeyValue.toObject(opt_includeInstance, this);
      };
      proto.CipherKeyValue.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          key: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          value: msg.getValue_asB64(),
          encrypt: (f2 = jspb2.Message.getBooleanField(msg, 4)) == null ? void 0 : f2,
          askOnEncrypt: (f2 = jspb2.Message.getBooleanField(msg, 5)) == null ? void 0 : f2,
          askOnDecrypt: (f2 = jspb2.Message.getBooleanField(msg, 6)) == null ? void 0 : f2,
          iv: msg.getIv_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CipherKeyValue.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CipherKeyValue();
      return proto.CipherKeyValue.deserializeBinaryFromReader(msg, reader);
    };
    proto.CipherKeyValue.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setKey(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setValue(value);
            break;
          case 4:
            var value = reader.readBool();
            msg.setEncrypt(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setAskOnEncrypt(value);
            break;
          case 6:
            var value = reader.readBool();
            msg.setAskOnDecrypt(value);
            break;
          case 7:
            var value = reader.readBytes();
            msg.setIv(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CipherKeyValue.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CipherKeyValue.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CipherKeyValue.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBool(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBool(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBytes(7, f2);
      }
    };
    proto.CipherKeyValue.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.CipherKeyValue.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.CipherKeyValue.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.CipherKeyValue.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.CipherKeyValue.prototype.getKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.CipherKeyValue.prototype.setKey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CipherKeyValue.prototype.clearKey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CipherKeyValue.prototype.hasKey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CipherKeyValue.prototype.getValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.CipherKeyValue.prototype.getValue_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getValue());
    };
    proto.CipherKeyValue.prototype.getValue_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getValue());
    };
    proto.CipherKeyValue.prototype.setValue = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.CipherKeyValue.prototype.clearValue = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.CipherKeyValue.prototype.hasValue = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.CipherKeyValue.prototype.getEncrypt = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 4, false);
    };
    proto.CipherKeyValue.prototype.setEncrypt = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.CipherKeyValue.prototype.clearEncrypt = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.CipherKeyValue.prototype.hasEncrypt = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.CipherKeyValue.prototype.getAskOnEncrypt = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.CipherKeyValue.prototype.setAskOnEncrypt = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.CipherKeyValue.prototype.clearAskOnEncrypt = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.CipherKeyValue.prototype.hasAskOnEncrypt = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.CipherKeyValue.prototype.getAskOnDecrypt = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 6, false);
    };
    proto.CipherKeyValue.prototype.setAskOnDecrypt = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.CipherKeyValue.prototype.clearAskOnDecrypt = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.CipherKeyValue.prototype.hasAskOnDecrypt = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.CipherKeyValue.prototype.getIv = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.CipherKeyValue.prototype.getIv_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getIv());
    };
    proto.CipherKeyValue.prototype.getIv_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getIv());
    };
    proto.CipherKeyValue.prototype.setIv = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.CipherKeyValue.prototype.clearIv = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.CipherKeyValue.prototype.hasIv = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CipheredKeyValue.prototype.toObject = function(opt_includeInstance) {
        return proto.CipheredKeyValue.toObject(opt_includeInstance, this);
      };
      proto.CipheredKeyValue.toObject = function(includeInstance, msg) {
        var f2, obj = {
          value: msg.getValue_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CipheredKeyValue.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CipheredKeyValue();
      return proto.CipheredKeyValue.deserializeBinaryFromReader(msg, reader);
    };
    proto.CipheredKeyValue.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setValue(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CipheredKeyValue.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CipheredKeyValue.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CipheredKeyValue.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.CipheredKeyValue.prototype.getValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.CipheredKeyValue.prototype.getValue_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getValue());
    };
    proto.CipheredKeyValue.prototype.getValue_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getValue());
    };
    proto.CipheredKeyValue.prototype.setValue = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CipheredKeyValue.prototype.clearValue = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CipheredKeyValue.prototype.hasValue = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.SignTx.toObject(opt_includeInstance, this);
      };
      proto.SignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          outputsCount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          inputsCount: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 3, "Bitcoin"),
          version: jspb2.Message.getFieldWithDefault(msg, 4, 1),
          lockTime: jspb2.Message.getFieldWithDefault(msg, 5, 0),
          expiry: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          overwintered: (f2 = jspb2.Message.getBooleanField(msg, 7)) == null ? void 0 : f2,
          versionGroupId: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          branchId: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SignTx();
      return proto.SignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.SignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setOutputsCount(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setInputsCount(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setVersion(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setLockTime(value);
            break;
          case 6:
            var value = reader.readUint32();
            msg.setExpiry(value);
            break;
          case 7:
            var value = reader.readBool();
            msg.setOverwintered(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setVersionGroupId(value);
            break;
          case 10:
            var value = reader.readUint32();
            msg.setBranchId(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeUint32(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBool(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeUint32(10, f2);
      }
    };
    proto.SignTx.prototype.getOutputsCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.SignTx.prototype.setOutputsCount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.SignTx.prototype.clearOutputsCount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.SignTx.prototype.hasOutputsCount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.SignTx.prototype.getInputsCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.SignTx.prototype.setInputsCount = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.SignTx.prototype.clearInputsCount = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.SignTx.prototype.hasInputsCount = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.SignTx.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "Bitcoin");
    };
    proto.SignTx.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.SignTx.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.SignTx.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.SignTx.prototype.getVersion = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 1);
    };
    proto.SignTx.prototype.setVersion = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.SignTx.prototype.clearVersion = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.SignTx.prototype.hasVersion = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.SignTx.prototype.getLockTime = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.SignTx.prototype.setLockTime = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.SignTx.prototype.clearLockTime = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.SignTx.prototype.hasLockTime = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.SignTx.prototype.getExpiry = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.SignTx.prototype.setExpiry = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.SignTx.prototype.clearExpiry = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.SignTx.prototype.hasExpiry = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.SignTx.prototype.getOverwintered = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 7, false);
    };
    proto.SignTx.prototype.setOverwintered = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.SignTx.prototype.clearOverwintered = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.SignTx.prototype.hasOverwintered = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.SignTx.prototype.getVersionGroupId = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.SignTx.prototype.setVersionGroupId = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.SignTx.prototype.clearVersionGroupId = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.SignTx.prototype.hasVersionGroupId = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.SignTx.prototype.getBranchId = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, 0);
    };
    proto.SignTx.prototype.setBranchId = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.SignTx.prototype.clearBranchId = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.SignTx.prototype.hasBranchId = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.TxRequest.toObject(opt_includeInstance, this);
      };
      proto.TxRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {
          requestType: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          details: (f2 = msg.getDetails()) && types_pb.TxRequestDetailsType.toObject(includeInstance, f2),
          serialized: (f2 = msg.getSerialized()) && types_pb.TxRequestSerializedType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxRequest();
      return proto.TxRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readEnum();
            msg.setRequestType(value);
            break;
          case 2:
            var value = new types_pb.TxRequestDetailsType();
            reader.readMessage(value, types_pb.TxRequestDetailsType.deserializeBinaryFromReader);
            msg.setDetails(value);
            break;
          case 3:
            var value = new types_pb.TxRequestSerializedType();
            reader.readMessage(value, types_pb.TxRequestSerializedType.deserializeBinaryFromReader);
            msg.setSerialized(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeEnum(1, f2);
      }
      f2 = message.getDetails();
      if (f2 != null) {
        writer.writeMessage(2, f2, types_pb.TxRequestDetailsType.serializeBinaryToWriter);
      }
      f2 = message.getSerialized();
      if (f2 != null) {
        writer.writeMessage(3, f2, types_pb.TxRequestSerializedType.serializeBinaryToWriter);
      }
    };
    proto.TxRequest.prototype.getRequestType = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.TxRequest.prototype.setRequestType = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.TxRequest.prototype.clearRequestType = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.TxRequest.prototype.hasRequestType = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.TxRequest.prototype.getDetails = function() {
      return jspb2.Message.getWrapperField(this, types_pb.TxRequestDetailsType, 2);
    };
    proto.TxRequest.prototype.setDetails = function(value) {
      return jspb2.Message.setWrapperField(this, 2, value);
    };
    proto.TxRequest.prototype.clearDetails = function() {
      return this.setDetails(void 0);
    };
    proto.TxRequest.prototype.hasDetails = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.TxRequest.prototype.getSerialized = function() {
      return jspb2.Message.getWrapperField(this, types_pb.TxRequestSerializedType, 3);
    };
    proto.TxRequest.prototype.setSerialized = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.TxRequest.prototype.clearSerialized = function() {
      return this.setSerialized(void 0);
    };
    proto.TxRequest.prototype.hasSerialized = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.TxAck.prototype.toObject = function(opt_includeInstance) {
        return proto.TxAck.toObject(opt_includeInstance, this);
      };
      proto.TxAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          tx: (f2 = msg.getTx()) && types_pb.TransactionType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.TxAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.TxAck();
      return proto.TxAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.TxAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.TransactionType();
            reader.readMessage(value, types_pb.TransactionType.deserializeBinaryFromReader);
            msg.setTx(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.TxAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.TxAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.TxAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getTx();
      if (f2 != null) {
        writer.writeMessage(1, f2, types_pb.TransactionType.serializeBinaryToWriter);
      }
    };
    proto.TxAck.prototype.getTx = function() {
      return jspb2.Message.getWrapperField(this, types_pb.TransactionType, 1);
    };
    proto.TxAck.prototype.setTx = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.TxAck.prototype.clearTx = function() {
      return this.setTx(void 0);
    };
    proto.TxAck.prototype.hasTx = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RawTxAck.prototype.toObject = function(opt_includeInstance) {
        return proto.RawTxAck.toObject(opt_includeInstance, this);
      };
      proto.RawTxAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          tx: (f2 = msg.getTx()) && types_pb.RawTransactionType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RawTxAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RawTxAck();
      return proto.RawTxAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.RawTxAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.RawTransactionType();
            reader.readMessage(value, types_pb.RawTransactionType.deserializeBinaryFromReader);
            msg.setTx(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RawTxAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RawTxAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RawTxAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getTx();
      if (f2 != null) {
        writer.writeMessage(1, f2, types_pb.RawTransactionType.serializeBinaryToWriter);
      }
    };
    proto.RawTxAck.prototype.getTx = function() {
      return jspb2.Message.getWrapperField(this, types_pb.RawTransactionType, 1);
    };
    proto.RawTxAck.prototype.setTx = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.RawTxAck.prototype.clearTx = function() {
      return this.setTx(void 0);
    };
    proto.RawTxAck.prototype.hasTx = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumSignTx.repeatedFields_ = [1, 9];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumSignTx.toObject(opt_includeInstance, this);
      };
      proto.EthereumSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          nonce: msg.getNonce_asB64(),
          gasPrice: msg.getGasPrice_asB64(),
          gasLimit: msg.getGasLimit_asB64(),
          to: msg.getTo_asB64(),
          value: msg.getValue_asB64(),
          dataInitialChunk: msg.getDataInitialChunk_asB64(),
          dataLength: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          toAddressNList: (f2 = jspb2.Message.getRepeatedField(msg, 9)) == null ? void 0 : f2,
          addressType: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2,
          exchangeType: (f2 = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f2),
          chainId: (f2 = jspb2.Message.getField(msg, 12)) == null ? void 0 : f2,
          maxFeePerGas: msg.getMaxFeePerGas_asB64(),
          maxPriorityFeePerGas: msg.getMaxPriorityFeePerGas_asB64(),
          tokenValue: msg.getTokenValue_asB64(),
          tokenTo: msg.getTokenTo_asB64(),
          tokenShortcut: (f2 = jspb2.Message.getField(msg, 102)) == null ? void 0 : f2,
          txType: (f2 = jspb2.Message.getField(msg, 103)) == null ? void 0 : f2,
          type: (f2 = jspb2.Message.getField(msg, 104)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumSignTx();
      return proto.EthereumSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setNonce(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setGasPrice(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setGasLimit(value);
            break;
          case 5:
            var value = reader.readBytes();
            msg.setTo(value);
            break;
          case 6:
            var value = reader.readBytes();
            msg.setValue(value);
            break;
          case 7:
            var value = reader.readBytes();
            msg.setDataInitialChunk(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setDataLength(value);
            break;
          case 9:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addToAddressN(values[i]);
            }
            break;
          case 10:
            var value = reader.readEnum();
            msg.setAddressType(value);
            break;
          case 11:
            var value = new types_pb.ExchangeType();
            reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          case 12:
            var value = reader.readUint32();
            msg.setChainId(value);
            break;
          case 13:
            var value = reader.readBytes();
            msg.setMaxFeePerGas(value);
            break;
          case 14:
            var value = reader.readBytes();
            msg.setMaxPriorityFeePerGas(value);
            break;
          case 100:
            var value = reader.readBytes();
            msg.setTokenValue(value);
            break;
          case 101:
            var value = reader.readBytes();
            msg.setTokenTo(value);
            break;
          case 102:
            var value = reader.readString();
            msg.setTokenShortcut(value);
            break;
          case 103:
            var value = reader.readUint32();
            msg.setTxType(value);
            break;
          case 104:
            var value = reader.readUint32();
            msg.setType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBytes(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBytes(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeBytes(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
      f2 = message.getToAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeEnum(10, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(11, f2, types_pb.ExchangeType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeUint32(12, f2);
      }
      f2 = jspb2.Message.getField(message, 13);
      if (f2 != null) {
        writer.writeBytes(13, f2);
      }
      f2 = jspb2.Message.getField(message, 14);
      if (f2 != null) {
        writer.writeBytes(14, f2);
      }
      f2 = jspb2.Message.getField(message, 100);
      if (f2 != null) {
        writer.writeBytes(100, f2);
      }
      f2 = jspb2.Message.getField(message, 101);
      if (f2 != null) {
        writer.writeBytes(101, f2);
      }
      f2 = jspb2.Message.getField(message, 102);
      if (f2 != null) {
        writer.writeString(102, f2);
      }
      f2 = jspb2.Message.getField(message, 103);
      if (f2 != null) {
        writer.writeUint32(103, f2);
      }
      f2 = jspb2.Message.getField(message, 104);
      if (f2 != null) {
        writer.writeUint32(104, f2);
      }
    };
    proto.EthereumSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.EthereumSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.EthereumSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.EthereumSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EthereumSignTx.prototype.getNonce = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EthereumSignTx.prototype.getNonce_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getNonce());
    };
    proto.EthereumSignTx.prototype.getNonce_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getNonce());
    };
    proto.EthereumSignTx.prototype.setNonce = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumSignTx.prototype.clearNonce = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumSignTx.prototype.hasNonce = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EthereumSignTx.prototype.getGasPrice = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.EthereumSignTx.prototype.getGasPrice_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getGasPrice());
    };
    proto.EthereumSignTx.prototype.getGasPrice_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getGasPrice());
    };
    proto.EthereumSignTx.prototype.setGasPrice = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EthereumSignTx.prototype.clearGasPrice = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EthereumSignTx.prototype.hasGasPrice = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EthereumSignTx.prototype.getGasLimit = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.EthereumSignTx.prototype.getGasLimit_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getGasLimit());
    };
    proto.EthereumSignTx.prototype.getGasLimit_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getGasLimit());
    };
    proto.EthereumSignTx.prototype.setGasLimit = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EthereumSignTx.prototype.clearGasLimit = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EthereumSignTx.prototype.hasGasLimit = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EthereumSignTx.prototype.getTo = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.EthereumSignTx.prototype.getTo_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getTo());
    };
    proto.EthereumSignTx.prototype.getTo_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getTo());
    };
    proto.EthereumSignTx.prototype.setTo = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.EthereumSignTx.prototype.clearTo = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.EthereumSignTx.prototype.hasTo = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.EthereumSignTx.prototype.getValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.EthereumSignTx.prototype.getValue_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getValue());
    };
    proto.EthereumSignTx.prototype.getValue_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getValue());
    };
    proto.EthereumSignTx.prototype.setValue = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.EthereumSignTx.prototype.clearValue = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.EthereumSignTx.prototype.hasValue = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.EthereumSignTx.prototype.getDataInitialChunk = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.EthereumSignTx.prototype.getDataInitialChunk_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getDataInitialChunk());
    };
    proto.EthereumSignTx.prototype.getDataInitialChunk_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getDataInitialChunk());
    };
    proto.EthereumSignTx.prototype.setDataInitialChunk = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.EthereumSignTx.prototype.clearDataInitialChunk = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.EthereumSignTx.prototype.hasDataInitialChunk = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.EthereumSignTx.prototype.getDataLength = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.EthereumSignTx.prototype.setDataLength = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.EthereumSignTx.prototype.clearDataLength = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.EthereumSignTx.prototype.hasDataLength = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.EthereumSignTx.prototype.getToAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 9);
    };
    proto.EthereumSignTx.prototype.setToAddressNList = function(value) {
      return jspb2.Message.setField(this, 9, value || []);
    };
    proto.EthereumSignTx.prototype.addToAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 9, value, opt_index);
    };
    proto.EthereumSignTx.prototype.clearToAddressNList = function() {
      return this.setToAddressNList([]);
    };
    proto.EthereumSignTx.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, 0);
    };
    proto.EthereumSignTx.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.EthereumSignTx.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.EthereumSignTx.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.EthereumSignTx.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, types_pb.ExchangeType, 11);
    };
    proto.EthereumSignTx.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 11, value);
    };
    proto.EthereumSignTx.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.EthereumSignTx.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    proto.EthereumSignTx.prototype.getChainId = function() {
      return jspb2.Message.getFieldWithDefault(this, 12, 0);
    };
    proto.EthereumSignTx.prototype.setChainId = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.EthereumSignTx.prototype.clearChainId = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.EthereumSignTx.prototype.hasChainId = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.EthereumSignTx.prototype.getMaxFeePerGas = function() {
      return jspb2.Message.getFieldWithDefault(this, 13, "");
    };
    proto.EthereumSignTx.prototype.getMaxFeePerGas_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMaxFeePerGas());
    };
    proto.EthereumSignTx.prototype.getMaxFeePerGas_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMaxFeePerGas());
    };
    proto.EthereumSignTx.prototype.setMaxFeePerGas = function(value) {
      return jspb2.Message.setField(this, 13, value);
    };
    proto.EthereumSignTx.prototype.clearMaxFeePerGas = function() {
      return jspb2.Message.setField(this, 13, void 0);
    };
    proto.EthereumSignTx.prototype.hasMaxFeePerGas = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    proto.EthereumSignTx.prototype.getMaxPriorityFeePerGas = function() {
      return jspb2.Message.getFieldWithDefault(this, 14, "");
    };
    proto.EthereumSignTx.prototype.getMaxPriorityFeePerGas_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMaxPriorityFeePerGas());
    };
    proto.EthereumSignTx.prototype.getMaxPriorityFeePerGas_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMaxPriorityFeePerGas());
    };
    proto.EthereumSignTx.prototype.setMaxPriorityFeePerGas = function(value) {
      return jspb2.Message.setField(this, 14, value);
    };
    proto.EthereumSignTx.prototype.clearMaxPriorityFeePerGas = function() {
      return jspb2.Message.setField(this, 14, void 0);
    };
    proto.EthereumSignTx.prototype.hasMaxPriorityFeePerGas = function() {
      return jspb2.Message.getField(this, 14) != null;
    };
    proto.EthereumSignTx.prototype.getTokenValue = function() {
      return jspb2.Message.getFieldWithDefault(this, 100, "");
    };
    proto.EthereumSignTx.prototype.getTokenValue_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getTokenValue());
    };
    proto.EthereumSignTx.prototype.getTokenValue_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getTokenValue());
    };
    proto.EthereumSignTx.prototype.setTokenValue = function(value) {
      return jspb2.Message.setField(this, 100, value);
    };
    proto.EthereumSignTx.prototype.clearTokenValue = function() {
      return jspb2.Message.setField(this, 100, void 0);
    };
    proto.EthereumSignTx.prototype.hasTokenValue = function() {
      return jspb2.Message.getField(this, 100) != null;
    };
    proto.EthereumSignTx.prototype.getTokenTo = function() {
      return jspb2.Message.getFieldWithDefault(this, 101, "");
    };
    proto.EthereumSignTx.prototype.getTokenTo_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getTokenTo());
    };
    proto.EthereumSignTx.prototype.getTokenTo_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getTokenTo());
    };
    proto.EthereumSignTx.prototype.setTokenTo = function(value) {
      return jspb2.Message.setField(this, 101, value);
    };
    proto.EthereumSignTx.prototype.clearTokenTo = function() {
      return jspb2.Message.setField(this, 101, void 0);
    };
    proto.EthereumSignTx.prototype.hasTokenTo = function() {
      return jspb2.Message.getField(this, 101) != null;
    };
    proto.EthereumSignTx.prototype.getTokenShortcut = function() {
      return jspb2.Message.getFieldWithDefault(this, 102, "");
    };
    proto.EthereumSignTx.prototype.setTokenShortcut = function(value) {
      return jspb2.Message.setField(this, 102, value);
    };
    proto.EthereumSignTx.prototype.clearTokenShortcut = function() {
      return jspb2.Message.setField(this, 102, void 0);
    };
    proto.EthereumSignTx.prototype.hasTokenShortcut = function() {
      return jspb2.Message.getField(this, 102) != null;
    };
    proto.EthereumSignTx.prototype.getTxType = function() {
      return jspb2.Message.getFieldWithDefault(this, 103, 0);
    };
    proto.EthereumSignTx.prototype.setTxType = function(value) {
      return jspb2.Message.setField(this, 103, value);
    };
    proto.EthereumSignTx.prototype.clearTxType = function() {
      return jspb2.Message.setField(this, 103, void 0);
    };
    proto.EthereumSignTx.prototype.hasTxType = function() {
      return jspb2.Message.getField(this, 103) != null;
    };
    proto.EthereumSignTx.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 104, 0);
    };
    proto.EthereumSignTx.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 104, value);
    };
    proto.EthereumSignTx.prototype.clearType = function() {
      return jspb2.Message.setField(this, 104, void 0);
    };
    proto.EthereumSignTx.prototype.hasType = function() {
      return jspb2.Message.getField(this, 104) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumTxRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumTxRequest.toObject(opt_includeInstance, this);
      };
      proto.EthereumTxRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {
          dataLength: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          signatureV: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          signatureR: msg.getSignatureR_asB64(),
          signatureS: msg.getSignatureS_asB64(),
          hash: msg.getHash_asB64(),
          signatureDer: msg.getSignatureDer_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumTxRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumTxRequest();
      return proto.EthereumTxRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumTxRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setDataLength(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setSignatureV(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setSignatureR(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setSignatureS(value);
            break;
          case 5:
            var value = reader.readBytes();
            msg.setHash(value);
            break;
          case 6:
            var value = reader.readBytes();
            msg.setSignatureDer(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumTxRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumTxRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumTxRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBytes(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBytes(6, f2);
      }
    };
    proto.EthereumTxRequest.prototype.getDataLength = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EthereumTxRequest.prototype.setDataLength = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EthereumTxRequest.prototype.clearDataLength = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EthereumTxRequest.prototype.hasDataLength = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumTxRequest.prototype.getSignatureV = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.EthereumTxRequest.prototype.setSignatureV = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumTxRequest.prototype.clearSignatureV = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumTxRequest.prototype.hasSignatureV = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EthereumTxRequest.prototype.getSignatureR = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.EthereumTxRequest.prototype.getSignatureR_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignatureR());
    };
    proto.EthereumTxRequest.prototype.getSignatureR_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignatureR());
    };
    proto.EthereumTxRequest.prototype.setSignatureR = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EthereumTxRequest.prototype.clearSignatureR = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EthereumTxRequest.prototype.hasSignatureR = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EthereumTxRequest.prototype.getSignatureS = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.EthereumTxRequest.prototype.getSignatureS_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignatureS());
    };
    proto.EthereumTxRequest.prototype.getSignatureS_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignatureS());
    };
    proto.EthereumTxRequest.prototype.setSignatureS = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EthereumTxRequest.prototype.clearSignatureS = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EthereumTxRequest.prototype.hasSignatureS = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EthereumTxRequest.prototype.getHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.EthereumTxRequest.prototype.getHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getHash());
    };
    proto.EthereumTxRequest.prototype.getHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getHash());
    };
    proto.EthereumTxRequest.prototype.setHash = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.EthereumTxRequest.prototype.clearHash = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.EthereumTxRequest.prototype.hasHash = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.EthereumTxRequest.prototype.getSignatureDer = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.EthereumTxRequest.prototype.getSignatureDer_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignatureDer());
    };
    proto.EthereumTxRequest.prototype.getSignatureDer_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignatureDer());
    };
    proto.EthereumTxRequest.prototype.setSignatureDer = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.EthereumTxRequest.prototype.clearSignatureDer = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.EthereumTxRequest.prototype.hasSignatureDer = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumTxAck.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumTxAck.toObject(opt_includeInstance, this);
      };
      proto.EthereumTxAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          dataChunk: msg.getDataChunk_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumTxAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumTxAck();
      return proto.EthereumTxAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumTxAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setDataChunk(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumTxAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumTxAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumTxAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.EthereumTxAck.prototype.getDataChunk = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EthereumTxAck.prototype.getDataChunk_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getDataChunk());
    };
    proto.EthereumTxAck.prototype.getDataChunk_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getDataChunk());
    };
    proto.EthereumTxAck.prototype.setDataChunk = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EthereumTxAck.prototype.clearDataChunk = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EthereumTxAck.prototype.hasDataChunk = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumSignMessage.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumSignMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumSignMessage.toObject(opt_includeInstance, this);
      };
      proto.EthereumSignMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          message: msg.getMessage_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumSignMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumSignMessage();
      return proto.EthereumSignMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumSignMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumSignMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumSignMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumSignMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.EthereumSignMessage.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.EthereumSignMessage.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.EthereumSignMessage.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.EthereumSignMessage.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EthereumSignMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EthereumSignMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.EthereumSignMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.EthereumSignMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumSignMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumSignMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumVerifyMessage.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumVerifyMessage.toObject(opt_includeInstance, this);
      };
      proto.EthereumVerifyMessage.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: msg.getAddress_asB64(),
          signature: msg.getSignature_asB64(),
          message: msg.getMessage_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumVerifyMessage.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumVerifyMessage();
      return proto.EthereumVerifyMessage.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumVerifyMessage.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setMessage(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumVerifyMessage.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumVerifyMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumVerifyMessage.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
    };
    proto.EthereumVerifyMessage.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EthereumVerifyMessage.prototype.getAddress_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getAddress());
    };
    proto.EthereumVerifyMessage.prototype.getAddress_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getAddress());
    };
    proto.EthereumVerifyMessage.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EthereumVerifyMessage.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EthereumVerifyMessage.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumVerifyMessage.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EthereumVerifyMessage.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.EthereumVerifyMessage.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.EthereumVerifyMessage.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumVerifyMessage.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumVerifyMessage.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EthereumVerifyMessage.prototype.getMessage = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.EthereumVerifyMessage.prototype.getMessage_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getMessage());
    };
    proto.EthereumVerifyMessage.prototype.getMessage_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getMessage());
    };
    proto.EthereumVerifyMessage.prototype.setMessage = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EthereumVerifyMessage.prototype.clearMessage = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EthereumVerifyMessage.prototype.hasMessage = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EthereumMessageSignature.prototype.toObject = function(opt_includeInstance) {
        return proto.EthereumMessageSignature.toObject(opt_includeInstance, this);
      };
      proto.EthereumMessageSignature.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: msg.getAddress_asB64(),
          signature: msg.getSignature_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EthereumMessageSignature.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EthereumMessageSignature();
      return proto.EthereumMessageSignature.deserializeBinaryFromReader(msg, reader);
    };
    proto.EthereumMessageSignature.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EthereumMessageSignature.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EthereumMessageSignature.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EthereumMessageSignature.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.EthereumMessageSignature.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EthereumMessageSignature.prototype.getAddress_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getAddress());
    };
    proto.EthereumMessageSignature.prototype.getAddress_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getAddress());
    };
    proto.EthereumMessageSignature.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EthereumMessageSignature.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EthereumMessageSignature.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EthereumMessageSignature.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EthereumMessageSignature.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.EthereumMessageSignature.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.EthereumMessageSignature.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EthereumMessageSignature.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EthereumMessageSignature.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SignIdentity.prototype.toObject = function(opt_includeInstance) {
        return proto.SignIdentity.toObject(opt_includeInstance, this);
      };
      proto.SignIdentity.toObject = function(includeInstance, msg) {
        var f2, obj = {
          identity: (f2 = msg.getIdentity()) && types_pb.IdentityType.toObject(includeInstance, f2),
          challengeHidden: msg.getChallengeHidden_asB64(),
          challengeVisual: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          ecdsaCurveName: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SignIdentity.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SignIdentity();
      return proto.SignIdentity.deserializeBinaryFromReader(msg, reader);
    };
    proto.SignIdentity.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.IdentityType();
            reader.readMessage(value, types_pb.IdentityType.deserializeBinaryFromReader);
            msg.setIdentity(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setChallengeHidden(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setChallengeVisual(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setEcdsaCurveName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SignIdentity.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SignIdentity.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SignIdentity.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getIdentity();
      if (f2 != null) {
        writer.writeMessage(1, f2, types_pb.IdentityType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
    };
    proto.SignIdentity.prototype.getIdentity = function() {
      return jspb2.Message.getWrapperField(this, types_pb.IdentityType, 1);
    };
    proto.SignIdentity.prototype.setIdentity = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.SignIdentity.prototype.clearIdentity = function() {
      return this.setIdentity(void 0);
    };
    proto.SignIdentity.prototype.hasIdentity = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.SignIdentity.prototype.getChallengeHidden = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.SignIdentity.prototype.getChallengeHidden_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getChallengeHidden());
    };
    proto.SignIdentity.prototype.getChallengeHidden_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getChallengeHidden());
    };
    proto.SignIdentity.prototype.setChallengeHidden = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.SignIdentity.prototype.clearChallengeHidden = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.SignIdentity.prototype.hasChallengeHidden = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.SignIdentity.prototype.getChallengeVisual = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.SignIdentity.prototype.setChallengeVisual = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.SignIdentity.prototype.clearChallengeVisual = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.SignIdentity.prototype.hasChallengeVisual = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.SignIdentity.prototype.getEcdsaCurveName = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.SignIdentity.prototype.setEcdsaCurveName = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.SignIdentity.prototype.clearEcdsaCurveName = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.SignIdentity.prototype.hasEcdsaCurveName = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SignedIdentity.prototype.toObject = function(opt_includeInstance) {
        return proto.SignedIdentity.toObject(opt_includeInstance, this);
      };
      proto.SignedIdentity.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          publicKey: msg.getPublicKey_asB64(),
          signature: msg.getSignature_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SignedIdentity.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SignedIdentity();
      return proto.SignedIdentity.deserializeBinaryFromReader(msg, reader);
    };
    proto.SignedIdentity.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SignedIdentity.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SignedIdentity.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SignedIdentity.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
    };
    proto.SignedIdentity.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.SignedIdentity.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.SignedIdentity.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.SignedIdentity.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.SignedIdentity.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.SignedIdentity.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.SignedIdentity.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.SignedIdentity.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.SignedIdentity.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.SignedIdentity.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.SignedIdentity.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.SignedIdentity.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.SignedIdentity.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.SignedIdentity.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.SignedIdentity.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.SignedIdentity.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ApplyPolicies.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ApplyPolicies.prototype.toObject = function(opt_includeInstance) {
        return proto.ApplyPolicies.toObject(opt_includeInstance, this);
      };
      proto.ApplyPolicies.toObject = function(includeInstance, msg) {
        var f2, obj = {
          policyList: jspb2.Message.toObjectList(msg.getPolicyList(), types_pb.PolicyType.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ApplyPolicies.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ApplyPolicies();
      return proto.ApplyPolicies.deserializeBinaryFromReader(msg, reader);
    };
    proto.ApplyPolicies.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new types_pb.PolicyType();
            reader.readMessage(value, types_pb.PolicyType.deserializeBinaryFromReader);
            msg.addPolicy(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ApplyPolicies.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ApplyPolicies.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ApplyPolicies.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getPolicyList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, types_pb.PolicyType.serializeBinaryToWriter);
      }
    };
    proto.ApplyPolicies.prototype.getPolicyList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, types_pb.PolicyType, 1);
    };
    proto.ApplyPolicies.prototype.setPolicyList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.ApplyPolicies.prototype.addPolicy = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PolicyType, opt_index);
    };
    proto.ApplyPolicies.prototype.clearPolicyList = function() {
      return this.setPolicyList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.FlashHash.prototype.toObject = function(opt_includeInstance) {
        return proto.FlashHash.toObject(opt_includeInstance, this);
      };
      proto.FlashHash.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          length: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          challenge: msg.getChallenge_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.FlashHash.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.FlashHash();
      return proto.FlashHash.deserializeBinaryFromReader(msg, reader);
    };
    proto.FlashHash.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setLength(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setChallenge(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.FlashHash.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.FlashHash.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.FlashHash.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
    };
    proto.FlashHash.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.FlashHash.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.FlashHash.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.FlashHash.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.FlashHash.prototype.getLength = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.FlashHash.prototype.setLength = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.FlashHash.prototype.clearLength = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.FlashHash.prototype.hasLength = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.FlashHash.prototype.getChallenge = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.FlashHash.prototype.getChallenge_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getChallenge());
    };
    proto.FlashHash.prototype.getChallenge_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getChallenge());
    };
    proto.FlashHash.prototype.setChallenge = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.FlashHash.prototype.clearChallenge = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.FlashHash.prototype.hasChallenge = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.FlashWrite.prototype.toObject = function(opt_includeInstance) {
        return proto.FlashWrite.toObject(opt_includeInstance, this);
      };
      proto.FlashWrite.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          data: msg.getData_asB64(),
          erase: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.FlashWrite.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.FlashWrite();
      return proto.FlashWrite.deserializeBinaryFromReader(msg, reader);
    };
    proto.FlashWrite.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setData(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setErase(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.FlashWrite.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.FlashWrite.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.FlashWrite.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
    };
    proto.FlashWrite.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.FlashWrite.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.FlashWrite.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.FlashWrite.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.FlashWrite.prototype.getData = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.FlashWrite.prototype.getData_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getData());
    };
    proto.FlashWrite.prototype.getData_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getData());
    };
    proto.FlashWrite.prototype.setData = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.FlashWrite.prototype.clearData = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.FlashWrite.prototype.hasData = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.FlashWrite.prototype.getErase = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.FlashWrite.prototype.setErase = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.FlashWrite.prototype.clearErase = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.FlashWrite.prototype.hasErase = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.FlashHashResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.FlashHashResponse.toObject(opt_includeInstance, this);
      };
      proto.FlashHashResponse.toObject = function(includeInstance, msg) {
        var f2, obj = {
          data: msg.getData_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.FlashHashResponse.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.FlashHashResponse();
      return proto.FlashHashResponse.deserializeBinaryFromReader(msg, reader);
    };
    proto.FlashHashResponse.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setData(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.FlashHashResponse.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.FlashHashResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.FlashHashResponse.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.FlashHashResponse.prototype.getData = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.FlashHashResponse.prototype.getData_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getData());
    };
    proto.FlashHashResponse.prototype.getData_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getData());
    };
    proto.FlashHashResponse.prototype.setData = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.FlashHashResponse.prototype.clearData = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.FlashHashResponse.prototype.hasData = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkFlashDump.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkFlashDump.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkFlashDump.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          length: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkFlashDump.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkFlashDump();
      return proto.DebugLinkFlashDump.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkFlashDump.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setAddress(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setLength(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkFlashDump.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkFlashDump.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkFlashDump.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
    };
    proto.DebugLinkFlashDump.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.DebugLinkFlashDump.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DebugLinkFlashDump.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DebugLinkFlashDump.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.DebugLinkFlashDump.prototype.getLength = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.DebugLinkFlashDump.prototype.setLength = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.DebugLinkFlashDump.prototype.clearLength = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.DebugLinkFlashDump.prototype.hasLength = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkFlashDumpResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkFlashDumpResponse.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkFlashDumpResponse.toObject = function(includeInstance, msg) {
        var f2, obj = {
          data: msg.getData_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkFlashDumpResponse.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkFlashDumpResponse();
      return proto.DebugLinkFlashDumpResponse.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkFlashDumpResponse.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setData(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkFlashDumpResponse.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkFlashDumpResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkFlashDumpResponse.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.DebugLinkFlashDumpResponse.prototype.getData = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.DebugLinkFlashDumpResponse.prototype.getData_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getData());
    };
    proto.DebugLinkFlashDumpResponse.prototype.getData_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getData());
    };
    proto.DebugLinkFlashDumpResponse.prototype.setData = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DebugLinkFlashDumpResponse.prototype.clearData = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DebugLinkFlashDumpResponse.prototype.hasData = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.SoftReset.prototype.toObject = function(opt_includeInstance) {
        return proto.SoftReset.toObject(opt_includeInstance, this);
      };
      proto.SoftReset.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.SoftReset.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.SoftReset();
      return proto.SoftReset.deserializeBinaryFromReader(msg, reader);
    };
    proto.SoftReset.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.SoftReset.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.SoftReset.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.SoftReset.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.FirmwareErase.prototype.toObject = function(opt_includeInstance) {
        return proto.FirmwareErase.toObject(opt_includeInstance, this);
      };
      proto.FirmwareErase.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.FirmwareErase.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.FirmwareErase();
      return proto.FirmwareErase.deserializeBinaryFromReader(msg, reader);
    };
    proto.FirmwareErase.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.FirmwareErase.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.FirmwareErase.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.FirmwareErase.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.FirmwareUpload.prototype.toObject = function(opt_includeInstance) {
        return proto.FirmwareUpload.toObject(opt_includeInstance, this);
      };
      proto.FirmwareUpload.toObject = function(includeInstance, msg) {
        var f2, obj = {
          payloadHash: msg.getPayloadHash_asB64(),
          payload: msg.getPayload_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.FirmwareUpload.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.FirmwareUpload();
      return proto.FirmwareUpload.deserializeBinaryFromReader(msg, reader);
    };
    proto.FirmwareUpload.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPayloadHash(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setPayload(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.FirmwareUpload.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.FirmwareUpload.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.FirmwareUpload.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.FirmwareUpload.prototype.getPayloadHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.FirmwareUpload.prototype.getPayloadHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPayloadHash());
    };
    proto.FirmwareUpload.prototype.getPayloadHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPayloadHash());
    };
    proto.FirmwareUpload.prototype.setPayloadHash = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.FirmwareUpload.prototype.clearPayloadHash = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.FirmwareUpload.prototype.hasPayloadHash = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.FirmwareUpload.prototype.getPayload = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.FirmwareUpload.prototype.getPayload_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPayload());
    };
    proto.FirmwareUpload.prototype.getPayload_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPayload());
    };
    proto.FirmwareUpload.prototype.setPayload = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.FirmwareUpload.prototype.clearPayload = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.FirmwareUpload.prototype.hasPayload = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkDecision.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkDecision.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkDecision.toObject = function(includeInstance, msg) {
        var f2, obj = {
          yesNo: (f2 = jspb2.Message.getBooleanField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkDecision.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkDecision();
      return proto.DebugLinkDecision.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkDecision.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setYesNo(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkDecision.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkDecision.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkDecision.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
    };
    proto.DebugLinkDecision.prototype.getYesNo = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.DebugLinkDecision.prototype.setYesNo = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DebugLinkDecision.prototype.clearYesNo = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DebugLinkDecision.prototype.hasYesNo = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkGetState.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkGetState.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkGetState.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkGetState.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkGetState();
      return proto.DebugLinkGetState.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkGetState.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkGetState.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkGetState.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkGetState.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkState.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkState.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkState.toObject = function(includeInstance, msg) {
        var f2, obj = {
          layout: msg.getLayout_asB64(),
          pin: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          matrix: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          mnemonic: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          node: (f2 = msg.getNode()) && types_pb.HDNodeType.toObject(includeInstance, f2),
          passphraseProtection: (f2 = jspb2.Message.getBooleanField(msg, 6)) == null ? void 0 : f2,
          resetWord: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          resetEntropy: msg.getResetEntropy_asB64(),
          recoveryFakeWord: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          recoveryWordPos: (f2 = jspb2.Message.getField(msg, 10)) == null ? void 0 : f2,
          recoveryCipher: (f2 = jspb2.Message.getField(msg, 11)) == null ? void 0 : f2,
          recoveryAutoCompletedWord: (f2 = jspb2.Message.getField(msg, 12)) == null ? void 0 : f2,
          firmwareHash: msg.getFirmwareHash_asB64(),
          storageHash: msg.getStorageHash_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkState.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkState();
      return proto.DebugLinkState.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkState.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setLayout(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setPin(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setMatrix(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setMnemonic(value);
            break;
          case 5:
            var value = new types_pb.HDNodeType();
            reader.readMessage(value, types_pb.HDNodeType.deserializeBinaryFromReader);
            msg.setNode(value);
            break;
          case 6:
            var value = reader.readBool();
            msg.setPassphraseProtection(value);
            break;
          case 7:
            var value = reader.readString();
            msg.setResetWord(value);
            break;
          case 8:
            var value = reader.readBytes();
            msg.setResetEntropy(value);
            break;
          case 9:
            var value = reader.readString();
            msg.setRecoveryFakeWord(value);
            break;
          case 10:
            var value = reader.readUint32();
            msg.setRecoveryWordPos(value);
            break;
          case 11:
            var value = reader.readString();
            msg.setRecoveryCipher(value);
            break;
          case 12:
            var value = reader.readString();
            msg.setRecoveryAutoCompletedWord(value);
            break;
          case 13:
            var value = reader.readBytes();
            msg.setFirmwareHash(value);
            break;
          case 14:
            var value = reader.readBytes();
            msg.setStorageHash(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkState.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkState.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkState.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = message.getNode();
      if (f2 != null) {
        writer.writeMessage(5, f2, types_pb.HDNodeType.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeBool(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeBytes(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeString(9, f2);
      }
      f2 = jspb2.Message.getField(message, 10);
      if (f2 != null) {
        writer.writeUint32(10, f2);
      }
      f2 = jspb2.Message.getField(message, 11);
      if (f2 != null) {
        writer.writeString(11, f2);
      }
      f2 = jspb2.Message.getField(message, 12);
      if (f2 != null) {
        writer.writeString(12, f2);
      }
      f2 = jspb2.Message.getField(message, 13);
      if (f2 != null) {
        writer.writeBytes(13, f2);
      }
      f2 = jspb2.Message.getField(message, 14);
      if (f2 != null) {
        writer.writeBytes(14, f2);
      }
    };
    proto.DebugLinkState.prototype.getLayout = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.DebugLinkState.prototype.getLayout_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getLayout());
    };
    proto.DebugLinkState.prototype.getLayout_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getLayout());
    };
    proto.DebugLinkState.prototype.setLayout = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DebugLinkState.prototype.clearLayout = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DebugLinkState.prototype.hasLayout = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.DebugLinkState.prototype.getPin = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.DebugLinkState.prototype.setPin = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.DebugLinkState.prototype.clearPin = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.DebugLinkState.prototype.hasPin = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.DebugLinkState.prototype.getMatrix = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.DebugLinkState.prototype.setMatrix = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.DebugLinkState.prototype.clearMatrix = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.DebugLinkState.prototype.hasMatrix = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.DebugLinkState.prototype.getMnemonic = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.DebugLinkState.prototype.setMnemonic = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.DebugLinkState.prototype.clearMnemonic = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.DebugLinkState.prototype.hasMnemonic = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.DebugLinkState.prototype.getNode = function() {
      return jspb2.Message.getWrapperField(this, types_pb.HDNodeType, 5);
    };
    proto.DebugLinkState.prototype.setNode = function(value) {
      return jspb2.Message.setWrapperField(this, 5, value);
    };
    proto.DebugLinkState.prototype.clearNode = function() {
      return this.setNode(void 0);
    };
    proto.DebugLinkState.prototype.hasNode = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.DebugLinkState.prototype.getPassphraseProtection = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 6, false);
    };
    proto.DebugLinkState.prototype.setPassphraseProtection = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.DebugLinkState.prototype.clearPassphraseProtection = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.DebugLinkState.prototype.hasPassphraseProtection = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.DebugLinkState.prototype.getResetWord = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.DebugLinkState.prototype.setResetWord = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.DebugLinkState.prototype.clearResetWord = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.DebugLinkState.prototype.hasResetWord = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.DebugLinkState.prototype.getResetEntropy = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.DebugLinkState.prototype.getResetEntropy_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getResetEntropy());
    };
    proto.DebugLinkState.prototype.getResetEntropy_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getResetEntropy());
    };
    proto.DebugLinkState.prototype.setResetEntropy = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.DebugLinkState.prototype.clearResetEntropy = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.DebugLinkState.prototype.hasResetEntropy = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.DebugLinkState.prototype.getRecoveryFakeWord = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, "");
    };
    proto.DebugLinkState.prototype.setRecoveryFakeWord = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.DebugLinkState.prototype.clearRecoveryFakeWord = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.DebugLinkState.prototype.hasRecoveryFakeWord = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.DebugLinkState.prototype.getRecoveryWordPos = function() {
      return jspb2.Message.getFieldWithDefault(this, 10, 0);
    };
    proto.DebugLinkState.prototype.setRecoveryWordPos = function(value) {
      return jspb2.Message.setField(this, 10, value);
    };
    proto.DebugLinkState.prototype.clearRecoveryWordPos = function() {
      return jspb2.Message.setField(this, 10, void 0);
    };
    proto.DebugLinkState.prototype.hasRecoveryWordPos = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.DebugLinkState.prototype.getRecoveryCipher = function() {
      return jspb2.Message.getFieldWithDefault(this, 11, "");
    };
    proto.DebugLinkState.prototype.setRecoveryCipher = function(value) {
      return jspb2.Message.setField(this, 11, value);
    };
    proto.DebugLinkState.prototype.clearRecoveryCipher = function() {
      return jspb2.Message.setField(this, 11, void 0);
    };
    proto.DebugLinkState.prototype.hasRecoveryCipher = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    proto.DebugLinkState.prototype.getRecoveryAutoCompletedWord = function() {
      return jspb2.Message.getFieldWithDefault(this, 12, "");
    };
    proto.DebugLinkState.prototype.setRecoveryAutoCompletedWord = function(value) {
      return jspb2.Message.setField(this, 12, value);
    };
    proto.DebugLinkState.prototype.clearRecoveryAutoCompletedWord = function() {
      return jspb2.Message.setField(this, 12, void 0);
    };
    proto.DebugLinkState.prototype.hasRecoveryAutoCompletedWord = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.DebugLinkState.prototype.getFirmwareHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 13, "");
    };
    proto.DebugLinkState.prototype.getFirmwareHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getFirmwareHash());
    };
    proto.DebugLinkState.prototype.getFirmwareHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getFirmwareHash());
    };
    proto.DebugLinkState.prototype.setFirmwareHash = function(value) {
      return jspb2.Message.setField(this, 13, value);
    };
    proto.DebugLinkState.prototype.clearFirmwareHash = function() {
      return jspb2.Message.setField(this, 13, void 0);
    };
    proto.DebugLinkState.prototype.hasFirmwareHash = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    proto.DebugLinkState.prototype.getStorageHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 14, "");
    };
    proto.DebugLinkState.prototype.getStorageHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getStorageHash());
    };
    proto.DebugLinkState.prototype.getStorageHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getStorageHash());
    };
    proto.DebugLinkState.prototype.setStorageHash = function(value) {
      return jspb2.Message.setField(this, 14, value);
    };
    proto.DebugLinkState.prototype.clearStorageHash = function() {
      return jspb2.Message.setField(this, 14, void 0);
    };
    proto.DebugLinkState.prototype.hasStorageHash = function() {
      return jspb2.Message.getField(this, 14) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkStop.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkStop.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkStop.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkStop.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkStop();
      return proto.DebugLinkStop.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkStop.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkStop.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkStop.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkStop.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkLog.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkLog.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkLog.toObject = function(includeInstance, msg) {
        var f2, obj = {
          level: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          bucket: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          text: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkLog.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkLog();
      return proto.DebugLinkLog.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkLog.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setLevel(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setBucket(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setText(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkLog.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkLog.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkLog.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
    };
    proto.DebugLinkLog.prototype.getLevel = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.DebugLinkLog.prototype.setLevel = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.DebugLinkLog.prototype.clearLevel = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.DebugLinkLog.prototype.hasLevel = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.DebugLinkLog.prototype.getBucket = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.DebugLinkLog.prototype.setBucket = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.DebugLinkLog.prototype.clearBucket = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.DebugLinkLog.prototype.hasBucket = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.DebugLinkLog.prototype.getText = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.DebugLinkLog.prototype.setText = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.DebugLinkLog.prototype.clearText = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.DebugLinkLog.prototype.hasText = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.DebugLinkFillConfig.prototype.toObject = function(opt_includeInstance) {
        return proto.DebugLinkFillConfig.toObject(opt_includeInstance, this);
      };
      proto.DebugLinkFillConfig.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.DebugLinkFillConfig.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.DebugLinkFillConfig();
      return proto.DebugLinkFillConfig.deserializeBinaryFromReader(msg, reader);
    };
    proto.DebugLinkFillConfig.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.DebugLinkFillConfig.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.DebugLinkFillConfig.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.DebugLinkFillConfig.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ChangeWipeCode.prototype.toObject = function(opt_includeInstance) {
        return proto.ChangeWipeCode.toObject(opt_includeInstance, this);
      };
      proto.ChangeWipeCode.toObject = function(includeInstance, msg) {
        var f2, obj = {
          remove: (f2 = jspb2.Message.getBooleanField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ChangeWipeCode.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ChangeWipeCode();
      return proto.ChangeWipeCode.deserializeBinaryFromReader(msg, reader);
    };
    proto.ChangeWipeCode.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBool();
            msg.setRemove(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ChangeWipeCode.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ChangeWipeCode.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ChangeWipeCode.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBool(1, f2);
      }
    };
    proto.ChangeWipeCode.prototype.getRemove = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 1, false);
    };
    proto.ChangeWipeCode.prototype.setRemove = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ChangeWipeCode.prototype.clearRemove = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ChangeWipeCode.prototype.hasRemove = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.MessageType = {
      MESSAGETYPE_INITIALIZE: 0,
      MESSAGETYPE_PING: 1,
      MESSAGETYPE_SUCCESS: 2,
      MESSAGETYPE_FAILURE: 3,
      MESSAGETYPE_CHANGEPIN: 4,
      MESSAGETYPE_WIPEDEVICE: 5,
      MESSAGETYPE_FIRMWAREERASE: 6,
      MESSAGETYPE_FIRMWAREUPLOAD: 7,
      MESSAGETYPE_GETENTROPY: 9,
      MESSAGETYPE_ENTROPY: 10,
      MESSAGETYPE_GETPUBLICKEY: 11,
      MESSAGETYPE_PUBLICKEY: 12,
      MESSAGETYPE_LOADDEVICE: 13,
      MESSAGETYPE_RESETDEVICE: 14,
      MESSAGETYPE_SIGNTX: 15,
      MESSAGETYPE_FEATURES: 17,
      MESSAGETYPE_PINMATRIXREQUEST: 18,
      MESSAGETYPE_PINMATRIXACK: 19,
      MESSAGETYPE_CANCEL: 20,
      MESSAGETYPE_TXREQUEST: 21,
      MESSAGETYPE_TXACK: 22,
      MESSAGETYPE_CIPHERKEYVALUE: 23,
      MESSAGETYPE_CLEARSESSION: 24,
      MESSAGETYPE_APPLYSETTINGS: 25,
      MESSAGETYPE_BUTTONREQUEST: 26,
      MESSAGETYPE_BUTTONACK: 27,
      MESSAGETYPE_GETADDRESS: 29,
      MESSAGETYPE_ADDRESS: 30,
      MESSAGETYPE_ENTROPYREQUEST: 35,
      MESSAGETYPE_ENTROPYACK: 36,
      MESSAGETYPE_SIGNMESSAGE: 38,
      MESSAGETYPE_VERIFYMESSAGE: 39,
      MESSAGETYPE_MESSAGESIGNATURE: 40,
      MESSAGETYPE_PASSPHRASEREQUEST: 41,
      MESSAGETYPE_PASSPHRASEACK: 42,
      MESSAGETYPE_RECOVERYDEVICE: 45,
      MESSAGETYPE_WORDREQUEST: 46,
      MESSAGETYPE_WORDACK: 47,
      MESSAGETYPE_CIPHEREDKEYVALUE: 48,
      MESSAGETYPE_ENCRYPTMESSAGE: 49,
      MESSAGETYPE_ENCRYPTEDMESSAGE: 50,
      MESSAGETYPE_DECRYPTMESSAGE: 51,
      MESSAGETYPE_DECRYPTEDMESSAGE: 52,
      MESSAGETYPE_SIGNIDENTITY: 53,
      MESSAGETYPE_SIGNEDIDENTITY: 54,
      MESSAGETYPE_GETFEATURES: 55,
      MESSAGETYPE_ETHEREUMGETADDRESS: 56,
      MESSAGETYPE_ETHEREUMADDRESS: 57,
      MESSAGETYPE_ETHEREUMSIGNTX: 58,
      MESSAGETYPE_ETHEREUMTXREQUEST: 59,
      MESSAGETYPE_ETHEREUMTXACK: 60,
      MESSAGETYPE_CHARACTERREQUEST: 80,
      MESSAGETYPE_CHARACTERACK: 81,
      MESSAGETYPE_RAWTXACK: 82,
      MESSAGETYPE_APPLYPOLICIES: 83,
      MESSAGETYPE_FLASHHASH: 84,
      MESSAGETYPE_FLASHWRITE: 85,
      MESSAGETYPE_FLASHHASHRESPONSE: 86,
      MESSAGETYPE_DEBUGLINKFLASHDUMP: 87,
      MESSAGETYPE_DEBUGLINKFLASHDUMPRESPONSE: 88,
      MESSAGETYPE_SOFTRESET: 89,
      MESSAGETYPE_DEBUGLINKDECISION: 100,
      MESSAGETYPE_DEBUGLINKGETSTATE: 101,
      MESSAGETYPE_DEBUGLINKSTATE: 102,
      MESSAGETYPE_DEBUGLINKSTOP: 103,
      MESSAGETYPE_DEBUGLINKLOG: 104,
      MESSAGETYPE_DEBUGLINKFILLCONFIG: 105,
      MESSAGETYPE_GETCOINTABLE: 106,
      MESSAGETYPE_COINTABLE: 107,
      MESSAGETYPE_ETHEREUMSIGNMESSAGE: 108,
      MESSAGETYPE_ETHEREUMVERIFYMESSAGE: 109,
      MESSAGETYPE_ETHEREUMMESSAGESIGNATURE: 110,
      MESSAGETYPE_CHANGEWIPECODE: 111,
      MESSAGETYPE_RIPPLEGETADDRESS: 400,
      MESSAGETYPE_RIPPLEADDRESS: 401,
      MESSAGETYPE_RIPPLESIGNTX: 402,
      MESSAGETYPE_RIPPLESIGNEDTX: 403,
      MESSAGETYPE_THORCHAINGETADDRESS: 500,
      MESSAGETYPE_THORCHAINADDRESS: 501,
      MESSAGETYPE_THORCHAINSIGNTX: 502,
      MESSAGETYPE_THORCHAINMSGREQUEST: 503,
      MESSAGETYPE_THORCHAINMSGACK: 504,
      MESSAGETYPE_THORCHAINSIGNEDTX: 505,
      MESSAGETYPE_EOSGETPUBLICKEY: 600,
      MESSAGETYPE_EOSPUBLICKEY: 601,
      MESSAGETYPE_EOSSIGNTX: 602,
      MESSAGETYPE_EOSTXACTIONREQUEST: 603,
      MESSAGETYPE_EOSTXACTIONACK: 604,
      MESSAGETYPE_EOSSIGNEDTX: 605,
      MESSAGETYPE_NANOGETADDRESS: 700,
      MESSAGETYPE_NANOADDRESS: 701,
      MESSAGETYPE_NANOSIGNTX: 702,
      MESSAGETYPE_NANOSIGNEDTX: 703,
      MESSAGETYPE_BINANCEGETADDRESS: 800,
      MESSAGETYPE_BINANCEADDRESS: 801,
      MESSAGETYPE_BINANCEGETPUBLICKEY: 802,
      MESSAGETYPE_BINANCEPUBLICKEY: 803,
      MESSAGETYPE_BINANCESIGNTX: 804,
      MESSAGETYPE_BINANCETXREQUEST: 805,
      MESSAGETYPE_BINANCETRANSFERMSG: 806,
      MESSAGETYPE_BINANCEORDERMSG: 807,
      MESSAGETYPE_BINANCECANCELMSG: 808,
      MESSAGETYPE_BINANCESIGNEDTX: 809,
      MESSAGETYPE_COSMOSGETADDRESS: 900,
      MESSAGETYPE_COSMOSADDRESS: 901,
      MESSAGETYPE_COSMOSSIGNTX: 902,
      MESSAGETYPE_COSMOSMSGREQUEST: 903,
      MESSAGETYPE_COSMOSMSGACK: 904,
      MESSAGETYPE_COSMOSSIGNEDTX: 905,
      MESSAGETYPE_TENDERMINTGETADDRESS: 1e3,
      MESSAGETYPE_TENDERMINTADDRESS: 1001,
      MESSAGETYPE_TENDERMINTSIGNTX: 1002,
      MESSAGETYPE_TENDERMINTMSGREQUEST: 1003,
      MESSAGETYPE_TENDERMINTMSGACK: 1004,
      MESSAGETYPE_TENDERMINTMSGSEND: 1005,
      MESSAGETYPE_TENDERMINTSIGNEDTX: 1006,
      MESSAGETYPE_OSMOSISGETADDRESS: 1100,
      MESSAGETYPE_OSMOSISADDRESS: 1101,
      MESSAGETYPE_OSMOSISSIGNTX: 1102,
      MESSAGETYPE_OSMOSISMSGREQUEST: 1103,
      MESSAGETYPE_OSMOSISMSGACK: 1104,
      MESSAGETYPE_OSMOSISMSGSEND: 1105,
      MESSAGETYPE_OSMOSISMSGELEGATE: 1106,
      MESSAGETYPE_OSMOSISMSGUNDELEGATE: 1107,
      MESSAGETYPE_OSMOSISMSGCLAIM: 1108,
      MESSAGETYPE_OSMOSISMSGLPADD: 1109,
      MESSAGETYPE_OSMOSISMSGLPREMOVE: 1110,
      MESSAGETYPE_OSMOSISMSGFARMTOKENS: 1111,
      MESSAGETYPE_OSMOSISMSGIBCDEPOSIT: 1112,
      MESSAGETYPE_OSMOSISMSGWITHDRAWAL: 1113,
      MESSAGETYPE_OSMOSISMSGSWAP: 1114,
      MESSAGETYPE_OSMOSISSIGNEDTX: 1115
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/semver/semver.js
var require_semver = __commonJS({
  "node_modules/semver/semver.js"(exports2, module2) {
    init_define_process_env();
    exports2 = module2.exports = SemVer;
    var debug;
    if (typeof process === "object" && define_process_env_default && define_process_env_default.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports2.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var re = exports2.re = [];
    var src = exports2.src = [];
    var t = exports2.tokens = {};
    var R = 0;
    function tok(n) {
      t[n] = R++;
    }
    tok("NUMERICIDENTIFIER");
    src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
    tok("NONNUMERICIDENTIFIER");
    src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
    tok("MAINVERSION");
    src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
    tok("BUILD");
    src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
    src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
    tok("LOOSE");
    src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
    tok("LONETILDE");
    src[t.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
    re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
    re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
    re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t.STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }
    var i;
    exports2.parse = parse2;
    function parse2(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports2.valid = valid;
    function valid(version, options) {
      var v = parse2(version, options);
      return v ? v.version : null;
    }
    exports2.clean = clean;
    function clean(version, options) {
      var s = parse2(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports2.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a2 = this.prerelease[i2];
        var b2 = other.prerelease[i2];
        debug("prerelease compare", i2, a2, b2);
        if (a2 === void 0 && b2 === void 0) {
          return 0;
        } else if (b2 === void 0) {
          return 1;
        } else if (a2 === void 0) {
          return -1;
        } else if (a2 === b2) {
          continue;
        } else {
          return compareIdentifiers(a2, b2);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a2 = this.build[i2];
        var b2 = other.build[i2];
        debug("prerelease compare", i2, a2, b2);
        if (a2 === void 0 && b2 === void 0) {
          return 0;
        } else if (b2 === void 0) {
          return 1;
        } else if (a2 === void 0) {
          return -1;
        } else if (a2 === b2) {
          continue;
        } else {
          return compareIdentifiers(a2, b2);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports2.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports2.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse2(version1);
        var v2 = parse2(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports2.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a2, b2) {
      var anum = numeric.test(a2);
      var bnum = numeric.test(b2);
      if (anum && bnum) {
        a2 = +a2;
        b2 = +b2;
      }
      return a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
    }
    exports2.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a2, b2) {
      return compareIdentifiers(b2, a2);
    }
    exports2.major = major;
    function major(a2, loose) {
      return new SemVer(a2, loose).major;
    }
    exports2.minor = minor;
    function minor(a2, loose) {
      return new SemVer(a2, loose).minor;
    }
    exports2.patch = patch;
    function patch(a2, loose) {
      return new SemVer(a2, loose).patch;
    }
    exports2.compare = compare;
    function compare(a2, b2, loose) {
      return new SemVer(a2, loose).compare(new SemVer(b2, loose));
    }
    exports2.compareLoose = compareLoose;
    function compareLoose(a2, b2) {
      return compare(a2, b2, true);
    }
    exports2.compareBuild = compareBuild;
    function compareBuild(a2, b2, loose) {
      var versionA = new SemVer(a2, loose);
      var versionB = new SemVer(b2, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports2.rcompare = rcompare;
    function rcompare(a2, b2, loose) {
      return compare(b2, a2, loose);
    }
    exports2.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a2, b2) {
        return exports2.compareBuild(a2, b2, loose);
      });
    }
    exports2.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a2, b2) {
        return exports2.compareBuild(b2, a2, loose);
      });
    }
    exports2.gt = gt;
    function gt(a2, b2, loose) {
      return compare(a2, b2, loose) > 0;
    }
    exports2.lt = lt;
    function lt(a2, b2, loose) {
      return compare(a2, b2, loose) < 0;
    }
    exports2.eq = eq;
    function eq(a2, b2, loose) {
      return compare(a2, b2, loose) === 0;
    }
    exports2.neq = neq;
    function neq(a2, b2, loose) {
      return compare(a2, b2, loose) !== 0;
    }
    exports2.gte = gte;
    function gte(a2, b2, loose) {
      return compare(a2, b2, loose) >= 0;
    }
    exports2.lte = lte;
    function lte(a2, b2, loose) {
      return compare(a2, b2, loose) <= 0;
    }
    exports2.cmp = cmp;
    function cmp(a2, op, b2, loose) {
      switch (op) {
        case "===":
          if (typeof a2 === "object")
            a2 = a2.version;
          if (typeof b2 === "object")
            b2 = b2.version;
          return a2 === b2;
        case "!==":
          if (typeof a2 === "object")
            a2 = a2.version;
          if (typeof b2 === "object")
            b2 = b2.version;
          return a2 !== b2;
        case "":
        case "=":
        case "==":
          return eq(a2, b2, loose);
        case "!=":
          return neq(a2, b2, loose);
        case ">":
          return gt(a2, b2, loose);
        case ">=":
          return gte(a2, b2, loose);
        case "<":
          return lt(a2, b2, loose);
        case "<=":
          return lte(a2, b2, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports2.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1] !== void 0 ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports2.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c2) {
        return c2.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + range);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      range = range.trim();
      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, re[t.COMPARATORTRIM]);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports2.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c2) {
          return c2.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("tilde", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("caret", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p + pr;
        } else if (xm) {
          ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports2.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports2.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports2.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports2.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports2.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports2.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports2.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports2.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports2.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse2(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports2.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports2.coerce = coerce;
    function coerce(version, options) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      var match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        var next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
    }
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-binance_pb.js
var require_messages_binance_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-binance_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var types_pb = require_types_pb();
    goog2.object.extend(proto, types_pb);
    goog2.exportSymbol("proto.BinanceAddress", null, global2);
    goog2.exportSymbol("proto.BinanceCancelMsg", null, global2);
    goog2.exportSymbol("proto.BinanceGetAddress", null, global2);
    goog2.exportSymbol("proto.BinanceGetPublicKey", null, global2);
    goog2.exportSymbol("proto.BinanceOrderMsg", null, global2);
    goog2.exportSymbol("proto.BinanceOrderMsg.BinanceOrderSide", null, global2);
    goog2.exportSymbol("proto.BinanceOrderMsg.BinanceOrderType", null, global2);
    goog2.exportSymbol("proto.BinanceOrderMsg.BinanceTimeInForce", null, global2);
    goog2.exportSymbol("proto.BinancePublicKey", null, global2);
    goog2.exportSymbol("proto.BinanceSignTx", null, global2);
    goog2.exportSymbol("proto.BinanceSignedTx", null, global2);
    goog2.exportSymbol("proto.BinanceTransferMsg", null, global2);
    goog2.exportSymbol("proto.BinanceTransferMsg.BinanceCoin", null, global2);
    goog2.exportSymbol("proto.BinanceTransferMsg.BinanceInputOutput", null, global2);
    goog2.exportSymbol("proto.BinanceTxRequest", null, global2);
    proto.BinanceGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.BinanceGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.BinanceGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceGetAddress.displayName = "proto.BinanceGetAddress";
    }
    proto.BinanceAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceAddress.displayName = "proto.BinanceAddress";
    }
    proto.BinanceGetPublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.BinanceGetPublicKey.repeatedFields_, null);
    };
    goog2.inherits(proto.BinanceGetPublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceGetPublicKey.displayName = "proto.BinanceGetPublicKey";
    }
    proto.BinancePublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinancePublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinancePublicKey.displayName = "proto.BinancePublicKey";
    }
    proto.BinanceSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.BinanceSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.BinanceSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceSignTx.displayName = "proto.BinanceSignTx";
    }
    proto.BinanceTxRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceTxRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceTxRequest.displayName = "proto.BinanceTxRequest";
    }
    proto.BinanceTransferMsg = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.BinanceTransferMsg.repeatedFields_, null);
    };
    goog2.inherits(proto.BinanceTransferMsg, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceTransferMsg.displayName = "proto.BinanceTransferMsg";
    }
    proto.BinanceTransferMsg.BinanceInputOutput = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.BinanceTransferMsg.BinanceInputOutput.repeatedFields_, null);
    };
    goog2.inherits(proto.BinanceTransferMsg.BinanceInputOutput, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceTransferMsg.BinanceInputOutput.displayName = "proto.BinanceTransferMsg.BinanceInputOutput";
    }
    proto.BinanceTransferMsg.BinanceCoin = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceTransferMsg.BinanceCoin, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceTransferMsg.BinanceCoin.displayName = "proto.BinanceTransferMsg.BinanceCoin";
    }
    proto.BinanceOrderMsg = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceOrderMsg, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceOrderMsg.displayName = "proto.BinanceOrderMsg";
    }
    proto.BinanceCancelMsg = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceCancelMsg, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceCancelMsg.displayName = "proto.BinanceCancelMsg";
    }
    proto.BinanceSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.BinanceSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.BinanceSignedTx.displayName = "proto.BinanceSignedTx";
    }
    proto.BinanceGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceGetAddress.toObject(opt_includeInstance, this);
      };
      proto.BinanceGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceGetAddress();
      return proto.BinanceGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.BinanceGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.BinanceGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.BinanceGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.BinanceGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.BinanceGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.BinanceGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceAddress.toObject(opt_includeInstance, this);
      };
      proto.BinanceAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceAddress();
      return proto.BinanceAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.BinanceAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinanceAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceGetPublicKey.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceGetPublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceGetPublicKey.toObject(opt_includeInstance, this);
      };
      proto.BinanceGetPublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceGetPublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceGetPublicKey();
      return proto.BinanceGetPublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceGetPublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceGetPublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceGetPublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceGetPublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.BinanceGetPublicKey.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.BinanceGetPublicKey.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.BinanceGetPublicKey.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.BinanceGetPublicKey.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.BinanceGetPublicKey.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.BinanceGetPublicKey.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceGetPublicKey.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceGetPublicKey.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinancePublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.BinancePublicKey.toObject(opt_includeInstance, this);
      };
      proto.BinancePublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          publicKey: msg.getPublicKey_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinancePublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinancePublicKey();
      return proto.BinancePublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinancePublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinancePublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinancePublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinancePublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
    };
    proto.BinancePublicKey.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinancePublicKey.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.BinancePublicKey.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.BinancePublicKey.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinancePublicKey.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinancePublicKey.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceSignTx.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceSignTx.toObject(opt_includeInstance, this);
      };
      proto.BinanceSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          msgCount: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          accountNumber: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          chainId: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          memo: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          sequence: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          source: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceSignTx();
      return proto.BinanceSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readUint32();
            msg.setMsgCount(value);
            break;
          case 3:
            var value = reader.readSint64String();
            msg.setAccountNumber(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setChainId(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setMemo(value);
            break;
          case 6:
            var value = reader.readSint64String();
            msg.setSequence(value);
            break;
          case 7:
            var value = reader.readSint64String();
            msg.setSource(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeSint64String(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeSint64String(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeSint64String(7, f2);
      }
    };
    proto.BinanceSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.BinanceSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.BinanceSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.BinanceSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.BinanceSignTx.prototype.getMsgCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.BinanceSignTx.prototype.setMsgCount = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceSignTx.prototype.clearMsgCount = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceSignTx.prototype.hasMsgCount = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.BinanceSignTx.prototype.getAccountNumber = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "0");
    };
    proto.BinanceSignTx.prototype.setAccountNumber = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.BinanceSignTx.prototype.clearAccountNumber = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.BinanceSignTx.prototype.hasAccountNumber = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.BinanceSignTx.prototype.getChainId = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.BinanceSignTx.prototype.setChainId = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.BinanceSignTx.prototype.clearChainId = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.BinanceSignTx.prototype.hasChainId = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.BinanceSignTx.prototype.getMemo = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.BinanceSignTx.prototype.setMemo = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.BinanceSignTx.prototype.clearMemo = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.BinanceSignTx.prototype.hasMemo = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.BinanceSignTx.prototype.getSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "0");
    };
    proto.BinanceSignTx.prototype.setSequence = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.BinanceSignTx.prototype.clearSequence = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.BinanceSignTx.prototype.hasSequence = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.BinanceSignTx.prototype.getSource = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "0");
    };
    proto.BinanceSignTx.prototype.setSource = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.BinanceSignTx.prototype.clearSource = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.BinanceSignTx.prototype.hasSource = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceTxRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceTxRequest.toObject(opt_includeInstance, this);
      };
      proto.BinanceTxRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceTxRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceTxRequest();
      return proto.BinanceTxRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceTxRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceTxRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceTxRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceTxRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    proto.BinanceTransferMsg.repeatedFields_ = [1, 2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceTransferMsg.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceTransferMsg.toObject(opt_includeInstance, this);
      };
      proto.BinanceTransferMsg.toObject = function(includeInstance, msg) {
        var f2, obj = {
          inputsList: jspb2.Message.toObjectList(msg.getInputsList(), proto.BinanceTransferMsg.BinanceInputOutput.toObject, includeInstance),
          outputsList: jspb2.Message.toObjectList(msg.getOutputsList(), proto.BinanceTransferMsg.BinanceInputOutput.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceTransferMsg.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceTransferMsg();
      return proto.BinanceTransferMsg.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceTransferMsg.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.BinanceTransferMsg.BinanceInputOutput();
            reader.readMessage(value, proto.BinanceTransferMsg.BinanceInputOutput.deserializeBinaryFromReader);
            msg.addInputs(value);
            break;
          case 2:
            var value = new proto.BinanceTransferMsg.BinanceInputOutput();
            reader.readMessage(value, proto.BinanceTransferMsg.BinanceInputOutput.deserializeBinaryFromReader);
            msg.addOutputs(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceTransferMsg.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceTransferMsg.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceTransferMsg.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getInputsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(1, f2, proto.BinanceTransferMsg.BinanceInputOutput.serializeBinaryToWriter);
      }
      f2 = message.getOutputsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.BinanceTransferMsg.BinanceInputOutput.serializeBinaryToWriter);
      }
    };
    proto.BinanceTransferMsg.BinanceInputOutput.repeatedFields_ = [2];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceTransferMsg.BinanceInputOutput.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceTransferMsg.BinanceInputOutput.toObject(opt_includeInstance, this);
      };
      proto.BinanceTransferMsg.BinanceInputOutput.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          coinsList: jspb2.Message.toObjectList(msg.getCoinsList(), proto.BinanceTransferMsg.BinanceCoin.toObject, includeInstance),
          addressType: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          exchangeType: (f2 = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceTransferMsg.BinanceInputOutput.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceTransferMsg.BinanceInputOutput();
      return proto.BinanceTransferMsg.BinanceInputOutput.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          case 2:
            var value = new proto.BinanceTransferMsg.BinanceCoin();
            reader.readMessage(value, proto.BinanceTransferMsg.BinanceCoin.deserializeBinaryFromReader);
            msg.addCoins(value);
            break;
          case 3:
            var value = reader.readEnum();
            msg.setAddressType(value);
            break;
          case 4:
            var value = new types_pb.ExchangeType();
            reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceTransferMsg.BinanceInputOutput.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceTransferMsg.BinanceInputOutput.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = message.getCoinsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.BinanceTransferMsg.BinanceCoin.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeEnum(3, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(4, f2, types_pb.ExchangeType.serializeBinaryToWriter);
      }
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.getCoinsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.BinanceTransferMsg.BinanceCoin, 2);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.setCoinsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.addCoins = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BinanceTransferMsg.BinanceCoin, opt_index);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.clearCoinsList = function() {
      return this.setCoinsList([]);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, types_pb.ExchangeType, 4);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.BinanceTransferMsg.BinanceInputOutput.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceTransferMsg.BinanceCoin.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceTransferMsg.BinanceCoin.toObject(opt_includeInstance, this);
      };
      proto.BinanceTransferMsg.BinanceCoin.toObject = function(includeInstance, msg) {
        var f2, obj = {
          amount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          denom: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceTransferMsg.BinanceCoin.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceTransferMsg.BinanceCoin();
      return proto.BinanceTransferMsg.BinanceCoin.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceTransferMsg.BinanceCoin.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readSint64String();
            msg.setAmount(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setDenom(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceTransferMsg.BinanceCoin.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceTransferMsg.BinanceCoin.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeSint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.getDenom = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.setDenom = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.clearDenom = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceTransferMsg.BinanceCoin.prototype.hasDenom = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.BinanceTransferMsg.prototype.getInputsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.BinanceTransferMsg.BinanceInputOutput, 1);
    };
    proto.BinanceTransferMsg.prototype.setInputsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 1, value);
    };
    proto.BinanceTransferMsg.prototype.addInputs = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BinanceTransferMsg.BinanceInputOutput, opt_index);
    };
    proto.BinanceTransferMsg.prototype.clearInputsList = function() {
      return this.setInputsList([]);
    };
    proto.BinanceTransferMsg.prototype.getOutputsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.BinanceTransferMsg.BinanceInputOutput, 2);
    };
    proto.BinanceTransferMsg.prototype.setOutputsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.BinanceTransferMsg.prototype.addOutputs = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BinanceTransferMsg.BinanceInputOutput, opt_index);
    };
    proto.BinanceTransferMsg.prototype.clearOutputsList = function() {
      return this.setOutputsList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceOrderMsg.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceOrderMsg.toObject(opt_includeInstance, this);
      };
      proto.BinanceOrderMsg.toObject = function(includeInstance, msg) {
        var f2, obj = {
          id: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          ordertype: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          price: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          quantity: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          sender: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          side: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          symbol: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          timeinforce: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceOrderMsg.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceOrderMsg();
      return proto.BinanceOrderMsg.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceOrderMsg.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setId(value);
            break;
          case 2:
            var value = reader.readEnum();
            msg.setOrdertype(value);
            break;
          case 3:
            var value = reader.readSint64String();
            msg.setPrice(value);
            break;
          case 4:
            var value = reader.readSint64String();
            msg.setQuantity(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setSender(value);
            break;
          case 6:
            var value = reader.readEnum();
            msg.setSide(value);
            break;
          case 7:
            var value = reader.readString();
            msg.setSymbol(value);
            break;
          case 8:
            var value = reader.readEnum();
            msg.setTimeinforce(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceOrderMsg.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceOrderMsg.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceOrderMsg.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeEnum(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeSint64String(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeSint64String(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeEnum(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeEnum(8, f2);
      }
    };
    proto.BinanceOrderMsg.BinanceOrderType = {
      OT_UNKNOWN: 0,
      MARKET: 1,
      LIMIT: 2,
      OT_RESERVED: 3
    };
    proto.BinanceOrderMsg.BinanceOrderSide = {
      SIDE_UNKNOWN: 0,
      BUY: 1,
      SELL: 2
    };
    proto.BinanceOrderMsg.BinanceTimeInForce = {
      TIF_UNKNOWN: 0,
      GTE: 1,
      TIF_RESERVED: 2,
      IOC: 3
    };
    proto.BinanceOrderMsg.prototype.getId = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinanceOrderMsg.prototype.setId = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceOrderMsg.prototype.clearId = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasId = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceOrderMsg.prototype.getOrdertype = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.BinanceOrderMsg.prototype.setOrdertype = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceOrderMsg.prototype.clearOrdertype = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasOrdertype = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.BinanceOrderMsg.prototype.getPrice = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "0");
    };
    proto.BinanceOrderMsg.prototype.setPrice = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.BinanceOrderMsg.prototype.clearPrice = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasPrice = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.BinanceOrderMsg.prototype.getQuantity = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "0");
    };
    proto.BinanceOrderMsg.prototype.setQuantity = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.BinanceOrderMsg.prototype.clearQuantity = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasQuantity = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.BinanceOrderMsg.prototype.getSender = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.BinanceOrderMsg.prototype.setSender = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.BinanceOrderMsg.prototype.clearSender = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasSender = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.BinanceOrderMsg.prototype.getSide = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.BinanceOrderMsg.prototype.setSide = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.BinanceOrderMsg.prototype.clearSide = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasSide = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.BinanceOrderMsg.prototype.getSymbol = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.BinanceOrderMsg.prototype.setSymbol = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.BinanceOrderMsg.prototype.clearSymbol = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasSymbol = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.BinanceOrderMsg.prototype.getTimeinforce = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.BinanceOrderMsg.prototype.setTimeinforce = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.BinanceOrderMsg.prototype.clearTimeinforce = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.BinanceOrderMsg.prototype.hasTimeinforce = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceCancelMsg.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceCancelMsg.toObject(opt_includeInstance, this);
      };
      proto.BinanceCancelMsg.toObject = function(includeInstance, msg) {
        var f2, obj = {
          refid: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          sender: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          symbol: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceCancelMsg.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceCancelMsg();
      return proto.BinanceCancelMsg.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceCancelMsg.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setRefid(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setSender(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setSymbol(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceCancelMsg.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceCancelMsg.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceCancelMsg.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
    };
    proto.BinanceCancelMsg.prototype.getRefid = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinanceCancelMsg.prototype.setRefid = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceCancelMsg.prototype.clearRefid = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceCancelMsg.prototype.hasRefid = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceCancelMsg.prototype.getSender = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.BinanceCancelMsg.prototype.setSender = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceCancelMsg.prototype.clearSender = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceCancelMsg.prototype.hasSender = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.BinanceCancelMsg.prototype.getSymbol = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.BinanceCancelMsg.prototype.setSymbol = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.BinanceCancelMsg.prototype.clearSymbol = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.BinanceCancelMsg.prototype.hasSymbol = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.BinanceSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.BinanceSignedTx.toObject(opt_includeInstance, this);
      };
      proto.BinanceSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signature: msg.getSignature_asB64(),
          publicKey: msg.getPublicKey_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.BinanceSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.BinanceSignedTx();
      return proto.BinanceSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.BinanceSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.BinanceSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.BinanceSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.BinanceSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.BinanceSignedTx.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.BinanceSignedTx.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.BinanceSignedTx.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.BinanceSignedTx.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.BinanceSignedTx.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.BinanceSignedTx.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.BinanceSignedTx.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.BinanceSignedTx.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.BinanceSignedTx.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.BinanceSignedTx.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.BinanceSignedTx.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.BinanceSignedTx.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = (init_crypto(), __toCommonJS(crypto_exports));
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          stringify: function(wordArray, urlSafe = true) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str, urlSafe = true) {
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a2 = H[0];
            var b2 = H[1];
            var c2 = H[2];
            var d2 = H[3];
            a2 = FF(a2, b2, c2, d2, M_offset_0, 7, T[0]);
            d2 = FF(d2, a2, b2, c2, M_offset_1, 12, T[1]);
            c2 = FF(c2, d2, a2, b2, M_offset_2, 17, T[2]);
            b2 = FF(b2, c2, d2, a2, M_offset_3, 22, T[3]);
            a2 = FF(a2, b2, c2, d2, M_offset_4, 7, T[4]);
            d2 = FF(d2, a2, b2, c2, M_offset_5, 12, T[5]);
            c2 = FF(c2, d2, a2, b2, M_offset_6, 17, T[6]);
            b2 = FF(b2, c2, d2, a2, M_offset_7, 22, T[7]);
            a2 = FF(a2, b2, c2, d2, M_offset_8, 7, T[8]);
            d2 = FF(d2, a2, b2, c2, M_offset_9, 12, T[9]);
            c2 = FF(c2, d2, a2, b2, M_offset_10, 17, T[10]);
            b2 = FF(b2, c2, d2, a2, M_offset_11, 22, T[11]);
            a2 = FF(a2, b2, c2, d2, M_offset_12, 7, T[12]);
            d2 = FF(d2, a2, b2, c2, M_offset_13, 12, T[13]);
            c2 = FF(c2, d2, a2, b2, M_offset_14, 17, T[14]);
            b2 = FF(b2, c2, d2, a2, M_offset_15, 22, T[15]);
            a2 = GG(a2, b2, c2, d2, M_offset_1, 5, T[16]);
            d2 = GG(d2, a2, b2, c2, M_offset_6, 9, T[17]);
            c2 = GG(c2, d2, a2, b2, M_offset_11, 14, T[18]);
            b2 = GG(b2, c2, d2, a2, M_offset_0, 20, T[19]);
            a2 = GG(a2, b2, c2, d2, M_offset_5, 5, T[20]);
            d2 = GG(d2, a2, b2, c2, M_offset_10, 9, T[21]);
            c2 = GG(c2, d2, a2, b2, M_offset_15, 14, T[22]);
            b2 = GG(b2, c2, d2, a2, M_offset_4, 20, T[23]);
            a2 = GG(a2, b2, c2, d2, M_offset_9, 5, T[24]);
            d2 = GG(d2, a2, b2, c2, M_offset_14, 9, T[25]);
            c2 = GG(c2, d2, a2, b2, M_offset_3, 14, T[26]);
            b2 = GG(b2, c2, d2, a2, M_offset_8, 20, T[27]);
            a2 = GG(a2, b2, c2, d2, M_offset_13, 5, T[28]);
            d2 = GG(d2, a2, b2, c2, M_offset_2, 9, T[29]);
            c2 = GG(c2, d2, a2, b2, M_offset_7, 14, T[30]);
            b2 = GG(b2, c2, d2, a2, M_offset_12, 20, T[31]);
            a2 = HH(a2, b2, c2, d2, M_offset_5, 4, T[32]);
            d2 = HH(d2, a2, b2, c2, M_offset_8, 11, T[33]);
            c2 = HH(c2, d2, a2, b2, M_offset_11, 16, T[34]);
            b2 = HH(b2, c2, d2, a2, M_offset_14, 23, T[35]);
            a2 = HH(a2, b2, c2, d2, M_offset_1, 4, T[36]);
            d2 = HH(d2, a2, b2, c2, M_offset_4, 11, T[37]);
            c2 = HH(c2, d2, a2, b2, M_offset_7, 16, T[38]);
            b2 = HH(b2, c2, d2, a2, M_offset_10, 23, T[39]);
            a2 = HH(a2, b2, c2, d2, M_offset_13, 4, T[40]);
            d2 = HH(d2, a2, b2, c2, M_offset_0, 11, T[41]);
            c2 = HH(c2, d2, a2, b2, M_offset_3, 16, T[42]);
            b2 = HH(b2, c2, d2, a2, M_offset_6, 23, T[43]);
            a2 = HH(a2, b2, c2, d2, M_offset_9, 4, T[44]);
            d2 = HH(d2, a2, b2, c2, M_offset_12, 11, T[45]);
            c2 = HH(c2, d2, a2, b2, M_offset_15, 16, T[46]);
            b2 = HH(b2, c2, d2, a2, M_offset_2, 23, T[47]);
            a2 = II(a2, b2, c2, d2, M_offset_0, 6, T[48]);
            d2 = II(d2, a2, b2, c2, M_offset_7, 10, T[49]);
            c2 = II(c2, d2, a2, b2, M_offset_14, 15, T[50]);
            b2 = II(b2, c2, d2, a2, M_offset_5, 21, T[51]);
            a2 = II(a2, b2, c2, d2, M_offset_12, 6, T[52]);
            d2 = II(d2, a2, b2, c2, M_offset_3, 10, T[53]);
            c2 = II(c2, d2, a2, b2, M_offset_10, 15, T[54]);
            b2 = II(b2, c2, d2, a2, M_offset_1, 21, T[55]);
            a2 = II(a2, b2, c2, d2, M_offset_8, 6, T[56]);
            d2 = II(d2, a2, b2, c2, M_offset_15, 10, T[57]);
            c2 = II(c2, d2, a2, b2, M_offset_6, 15, T[58]);
            b2 = II(b2, c2, d2, a2, M_offset_13, 21, T[59]);
            a2 = II(a2, b2, c2, d2, M_offset_4, 6, T[60]);
            d2 = II(d2, a2, b2, c2, M_offset_11, 10, T[61]);
            c2 = II(c2, d2, a2, b2, M_offset_2, 15, T[62]);
            b2 = II(b2, c2, d2, a2, M_offset_9, 21, T[63]);
            H[0] = H[0] + a2 | 0;
            H[1] = H[1] + b2 | 0;
            H[2] = H[2] + c2 | 0;
            H[3] = H[3] + d2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a2, b2, c2, d2, x, s, t) {
          var n = a2 + (b2 & c2 | ~b2 & d2) + x + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function GG(a2, b2, c2, d2, x, s, t) {
          var n = a2 + (b2 & d2 | c2 & ~d2) + x + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function HH(a2, b2, c2, d2, x, s, t) {
          var n = a2 + (b2 ^ c2 ^ d2) + x + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function II(a2, b2, c2, d2, x, s, t) {
          var n = a2 + (c2 ^ (b2 | ~d2)) + x + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a2 = H[0];
            var b2 = H[1];
            var c2 = H[2];
            var d2 = H[3];
            var e2 = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a2 << 5 | a2 >>> 27) + e2 + W[i];
              if (i < 20) {
                t += (b2 & c2 | ~b2 & d2) + 1518500249;
              } else if (i < 40) {
                t += (b2 ^ c2 ^ d2) + 1859775393;
              } else if (i < 60) {
                t += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
              } else {
                t += (b2 ^ c2 ^ d2) - 899497514;
              }
              e2 = d2;
              d2 = c2;
              c2 = b2 << 30 | b2 >>> 2;
              b2 = a2;
              a2 = t;
            }
            H[0] = H[0] + a2 | 0;
            H[1] = H[1] + b2 | 0;
            H[2] = H[2] + c2 | 0;
            H[3] = H[3] + d2 | 0;
            H[4] = H[4] + e2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a2 = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            var e2 = H2[4];
            var f2 = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e2 & f2 ^ ~e2 & g;
              var maj = a2 & b2 ^ a2 & c2 ^ b2 & c2;
              var sigma0 = (a2 << 30 | a2 >>> 2) ^ (a2 << 19 | a2 >>> 13) ^ (a2 << 10 | a2 >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f2;
              f2 = e2;
              e2 = d2 + t1 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a2;
              a2 = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a2 | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
            H2[4] = H2[4] + e2 | 0;
            H2[5] = H2[5] + f2 | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round2 = 0; round2 < 24; round2++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round2];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d2 = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d2[i] = i << 1;
            } else {
              d2[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d2[x];
            var x4 = d2[x2];
            var x8 = d2[x4];
            var t = d2[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d2[d2[d2[x8 ^ x2]]];
              xi ^= d2[d2[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round2 = 1; round2 < nRounds; round2++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round2 = 0; round2 < 16; round2++) {
              var subKey = subKeys[round2];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f2 = 0;
              for (var i = 0; i < 8; i++) {
                f2 |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f2;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
    init_define_process_env();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(obj);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports2, module2) {
    init_define_process_env();
    var _typeof = require_typeof()["default"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    module2.exports = _interopRequireWildcard, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/declarations.js
var require_declarations = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/declarations.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/is_js/is.js
var require_is = __commonJS({
  "node_modules/is_js/is.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(function() {
          return root.is = factory();
        });
      } else if (typeof exports2 === "object") {
        module2.exports = factory();
      } else {
        root.is = factory();
      }
    })(exports2, function() {
      var is = {};
      is.VERSION = "0.8.0";
      is.not = {};
      is.all = {};
      is.any = {};
      var toString = Object.prototype.toString;
      var slice = Array.prototype.slice;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function not(func) {
        return function() {
          return !func.apply(null, slice.call(arguments));
        };
      }
      function all(func) {
        return function() {
          var params = getParams(arguments);
          var length = params.length;
          for (var i = 0; i < length; i++) {
            if (!func.call(null, params[i])) {
              return false;
            }
          }
          return true;
        };
      }
      function any(func) {
        return function() {
          var params = getParams(arguments);
          var length = params.length;
          for (var i = 0; i < length; i++) {
            if (func.call(null, params[i])) {
              return true;
            }
          }
          return false;
        };
      }
      var comparator = {
        "<": function(a2, b2) {
          return a2 < b2;
        },
        "<=": function(a2, b2) {
          return a2 <= b2;
        },
        ">": function(a2, b2) {
          return a2 > b2;
        },
        ">=": function(a2, b2) {
          return a2 >= b2;
        }
      };
      function compareVersion(version, range) {
        var string = range + "";
        var n = +(string.match(/\d+/) || NaN);
        var op = string.match(/^[<>]=?|/)[0];
        return comparator[op] ? comparator[op](version, n) : version == n || n !== n;
      }
      function getParams(args) {
        var params = slice.call(args);
        var length = params.length;
        if (length === 1 && is.array(params[0])) {
          params = params[0];
        }
        return params;
      }
      is.arguments = function(value) {
        return toString.call(value) === "[object Arguments]" || value != null && typeof value === "object" && "callee" in value;
      };
      is.array = Array.isArray || function(value) {
        return toString.call(value) === "[object Array]";
      };
      is.boolean = function(value) {
        return value === true || value === false || toString.call(value) === "[object Boolean]";
      };
      is.char = function(value) {
        return is.string(value) && value.length === 1;
      };
      is.date = function(value) {
        return toString.call(value) === "[object Date]";
      };
      is.domNode = function(object) {
        return is.object(object) && object.nodeType > 0;
      };
      is.error = function(value) {
        return toString.call(value) === "[object Error]";
      };
      is["function"] = function(value) {
        return toString.call(value) === "[object Function]" || typeof value === "function";
      };
      is.json = function(value) {
        return toString.call(value) === "[object Object]";
      };
      is.nan = function(value) {
        return value !== value;
      };
      is["null"] = function(value) {
        return value === null;
      };
      is.number = function(value) {
        return is.not.nan(value) && toString.call(value) === "[object Number]";
      };
      is.object = function(value) {
        return Object(value) === value;
      };
      is.regexp = function(value) {
        return toString.call(value) === "[object RegExp]";
      };
      is.sameType = function(value, other) {
        var tag = toString.call(value);
        if (tag !== toString.call(other)) {
          return false;
        }
        if (tag === "[object Number]") {
          return !is.any.nan(value, other) || is.all.nan(value, other);
        }
        return true;
      };
      is.sameType.api = ["not"];
      is.string = function(value) {
        return toString.call(value) === "[object String]";
      };
      is.undefined = function(value) {
        return value === void 0;
      };
      is.windowObject = function(value) {
        return value != null && typeof value === "object" && "setInterval" in value;
      };
      is.empty = function(value) {
        if (is.object(value)) {
          var length = Object.getOwnPropertyNames(value).length;
          if (length === 0 || length === 1 && is.array(value) || length === 2 && is.arguments(value)) {
            return true;
          }
          return false;
        }
        return value === "";
      };
      is.existy = function(value) {
        return value != null;
      };
      is.falsy = function(value) {
        return !value;
      };
      is.truthy = not(is.falsy);
      is.above = function(n, min) {
        return is.all.number(n, min) && n > min;
      };
      is.above.api = ["not"];
      is.decimal = function(n) {
        return is.number(n) && n % 1 !== 0;
      };
      is.equal = function(value, other) {
        if (is.all.number(value, other)) {
          return value === other && 1 / value === 1 / other;
        }
        if (is.all.string(value, other) || is.all.regexp(value, other)) {
          return "" + value === "" + other;
        }
        if (is.all.boolean(value, other)) {
          return value === other;
        }
        return false;
      };
      is.equal.api = ["not"];
      is.even = function(n) {
        return is.number(n) && n % 2 === 0;
      };
      is.finite = isFinite || function(n) {
        return is.not.infinite(n) && is.not.nan(n);
      };
      is.infinite = function(n) {
        return n === Infinity || n === -Infinity;
      };
      is.integer = function(n) {
        return is.number(n) && n % 1 === 0;
      };
      is.negative = function(n) {
        return is.number(n) && n < 0;
      };
      is.odd = function(n) {
        return is.number(n) && n % 2 === 1;
      };
      is.positive = function(n) {
        return is.number(n) && n > 0;
      };
      is.under = function(n, max) {
        return is.all.number(n, max) && n < max;
      };
      is.under.api = ["not"];
      is.within = function(n, min, max) {
        return is.all.number(n, min, max) && n > min && n < max;
      };
      is.within.api = ["not"];
      var regexes = {
        affirmative: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/,
        alphaNumeric: /^[A-Za-z0-9]+$/,
        caPostalCode: /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s?[0-9][A-Z][0-9]$/,
        creditCard: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,
        dateString: /^(1[0-2]|0?[1-9])([\/-])(3[01]|[12][0-9]|0?[1-9])(?:\2)(?:[0-9]{2})?[0-9]{2}$/,
        email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
        eppPhone: /^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/,
        hexadecimal: /^(?:0x)?[0-9a-fA-F]+$/,
        hexColor: /^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/,
        ipv4: /^(?:(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$/,
        ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,
        nanpPhone: /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,
        socialSecurityNumber: /^(?!000|666)[0-8][0-9]{2}-?(?!00)[0-9]{2}-?(?!0000)[0-9]{4}$/,
        timeString: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,
        ukPostCode: /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/,
        url: /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/i,
        usZipCode: /^[0-9]{5}(?:-[0-9]{4})?$/
      };
      function regexpCheck(regexp2, regexes2) {
        is[regexp2] = function(value) {
          return regexes2[regexp2].test(value);
        };
      }
      for (var regexp in regexes) {
        if (regexes.hasOwnProperty(regexp)) {
          regexpCheck(regexp, regexes);
        }
      }
      is.ip = function(value) {
        return is.ipv4(value) || is.ipv6(value);
      };
      is.capitalized = function(string) {
        if (is.not.string(string)) {
          return false;
        }
        var words = string.split(" ");
        for (var i = 0; i < words.length; i++) {
          var word = words[i];
          if (word.length) {
            var chr = word.charAt(0);
            if (chr !== chr.toUpperCase()) {
              return false;
            }
          }
        }
        return true;
      };
      is.endWith = function(string, target) {
        if (is.not.string(string)) {
          return false;
        }
        target += "";
        var position = string.length - target.length;
        return position >= 0 && string.indexOf(target, position) === position;
      };
      is.endWith.api = ["not"];
      is.include = function(string, target) {
        return string.indexOf(target) > -1;
      };
      is.include.api = ["not"];
      is.lowerCase = function(string) {
        return is.string(string) && string === string.toLowerCase();
      };
      is.palindrome = function(string) {
        if (is.not.string(string)) {
          return false;
        }
        string = string.replace(/[^a-zA-Z0-9]+/g, "").toLowerCase();
        var length = string.length - 1;
        for (var i = 0, half = Math.floor(length / 2); i <= half; i++) {
          if (string.charAt(i) !== string.charAt(length - i)) {
            return false;
          }
        }
        return true;
      };
      is.space = function(value) {
        if (is.not.char(value)) {
          return false;
        }
        var charCode = value.charCodeAt(0);
        return charCode > 8 && charCode < 14 || charCode === 32;
      };
      is.startWith = function(string, target) {
        return is.string(string) && string.indexOf(target) === 0;
      };
      is.startWith.api = ["not"];
      is.upperCase = function(string) {
        return is.string(string) && string === string.toUpperCase();
      };
      var days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
      var months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
      is.day = function(date, day) {
        return is.date(date) && day.toLowerCase() === days[date.getDay()];
      };
      is.day.api = ["not"];
      is.dayLightSavingTime = function(date) {
        var january = new Date(date.getFullYear(), 0, 1);
        var july = new Date(date.getFullYear(), 6, 1);
        var stdTimezoneOffset = Math.max(january.getTimezoneOffset(), july.getTimezoneOffset());
        return date.getTimezoneOffset() < stdTimezoneOffset;
      };
      is.future = function(date) {
        var now = new Date();
        return is.date(date) && date.getTime() > now.getTime();
      };
      is.inDateRange = function(date, start, end) {
        if (is.not.date(date) || is.not.date(start) || is.not.date(end)) {
          return false;
        }
        var stamp = date.getTime();
        return stamp > start.getTime() && stamp < end.getTime();
      };
      is.inDateRange.api = ["not"];
      is.inLastMonth = function(date) {
        return is.inDateRange(date, new Date(new Date().setMonth(new Date().getMonth() - 1)), new Date());
      };
      is.inLastWeek = function(date) {
        return is.inDateRange(date, new Date(new Date().setDate(new Date().getDate() - 7)), new Date());
      };
      is.inLastYear = function(date) {
        return is.inDateRange(date, new Date(new Date().setFullYear(new Date().getFullYear() - 1)), new Date());
      };
      is.inNextMonth = function(date) {
        return is.inDateRange(date, new Date(), new Date(new Date().setMonth(new Date().getMonth() + 1)));
      };
      is.inNextWeek = function(date) {
        return is.inDateRange(date, new Date(), new Date(new Date().setDate(new Date().getDate() + 7)));
      };
      is.inNextYear = function(date) {
        return is.inDateRange(date, new Date(), new Date(new Date().setFullYear(new Date().getFullYear() + 1)));
      };
      is.leapYear = function(year) {
        return is.number(year) && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
      };
      is.month = function(date, month) {
        return is.date(date) && month.toLowerCase() === months[date.getMonth()];
      };
      is.month.api = ["not"];
      is.past = function(date) {
        var now = new Date();
        return is.date(date) && date.getTime() < now.getTime();
      };
      is.quarterOfYear = function(date, quarter) {
        return is.date(date) && is.number(quarter) && quarter === Math.floor((date.getMonth() + 3) / 3);
      };
      is.quarterOfYear.api = ["not"];
      is.today = function(date) {
        var now = new Date();
        var todayString = now.toDateString();
        return is.date(date) && date.toDateString() === todayString;
      };
      is.tomorrow = function(date) {
        var now = new Date();
        var tomorrowString = new Date(now.setDate(now.getDate() + 1)).toDateString();
        return is.date(date) && date.toDateString() === tomorrowString;
      };
      is.weekend = function(date) {
        return is.date(date) && (date.getDay() === 6 || date.getDay() === 0);
      };
      is.weekday = not(is.weekend);
      is.year = function(date, year) {
        return is.date(date) && is.number(year) && year === date.getFullYear();
      };
      is.year.api = ["not"];
      is.yesterday = function(date) {
        var now = new Date();
        var yesterdayString = new Date(now.setDate(now.getDate() - 1)).toDateString();
        return is.date(date) && date.toDateString() === yesterdayString;
      };
      var freeGlobal = is.windowObject(typeof global == "object" && global) && global;
      var freeSelf = is.windowObject(typeof self == "object" && self) && self;
      var thisGlobal = is.windowObject(typeof this == "object" && this) && this;
      var root = freeGlobal || freeSelf || thisGlobal || Function("return this")();
      var document2 = freeSelf && freeSelf.document;
      var previousIs = root.is;
      var navigator2 = freeSelf && freeSelf.navigator;
      var appVersion = (navigator2 && navigator2.appVersion || "").toLowerCase();
      var userAgent = (navigator2 && navigator2.userAgent || "").toLowerCase();
      var vendor = (navigator2 && navigator2.vendor || "").toLowerCase();
      is.android = function() {
        return /android/.test(userAgent);
      };
      is.android.api = ["not"];
      is.androidPhone = function() {
        return /android/.test(userAgent) && /mobile/.test(userAgent);
      };
      is.androidPhone.api = ["not"];
      is.androidTablet = function() {
        return /android/.test(userAgent) && !/mobile/.test(userAgent);
      };
      is.androidTablet.api = ["not"];
      is.blackberry = function() {
        return /blackberry/.test(userAgent) || /bb10/.test(userAgent);
      };
      is.blackberry.api = ["not"];
      is.chrome = function(range) {
        var match = /google inc/.test(vendor) ? userAgent.match(/(?:chrome|crios)\/(\d+)/) : null;
        return match !== null && compareVersion(match[1], range);
      };
      is.chrome.api = ["not"];
      is.desktop = function() {
        return is.not.mobile() && is.not.tablet();
      };
      is.desktop.api = ["not"];
      is.edge = function(range) {
        var match = userAgent.match(/edge\/(\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.edge.api = ["not"];
      is.firefox = function(range) {
        var match = userAgent.match(/(?:firefox|fxios)\/(\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.firefox.api = ["not"];
      is.ie = function(range) {
        var match = userAgent.match(/(?:msie |trident.+?; rv:)(\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.ie.api = ["not"];
      is.ios = function() {
        return is.iphone() || is.ipad() || is.ipod();
      };
      is.ios.api = ["not"];
      is.ipad = function(range) {
        var match = userAgent.match(/ipad.+?os (\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.ipad.api = ["not"];
      is.iphone = function(range) {
        var match = userAgent.match(/iphone(?:.+?os (\d+))?/);
        return match !== null && compareVersion(match[1] || 1, range);
      };
      is.iphone.api = ["not"];
      is.ipod = function(range) {
        var match = userAgent.match(/ipod.+?os (\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.ipod.api = ["not"];
      is.linux = function() {
        return /linux/.test(appVersion);
      };
      is.linux.api = ["not"];
      is.mac = function() {
        return /mac/.test(appVersion);
      };
      is.mac.api = ["not"];
      is.mobile = function() {
        return is.iphone() || is.ipod() || is.androidPhone() || is.blackberry() || is.windowsPhone();
      };
      is.mobile.api = ["not"];
      is.offline = not(is.online);
      is.offline.api = ["not"];
      is.online = function() {
        return !navigator2 || navigator2.onLine === true;
      };
      is.online.api = ["not"];
      is.opera = function(range) {
        var match = userAgent.match(/(?:^opera.+?version|opr)\/(\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.opera.api = ["not"];
      is.phantom = function(range) {
        var match = userAgent.match(/phantomjs\/(\d+)/);
        return match !== null && compareVersion(match[1], range);
      };
      is.phantom.api = ["not"];
      is.safari = function(range) {
        var match = userAgent.match(/version\/(\d+).+?safari/);
        return match !== null && compareVersion(match[1], range);
      };
      is.safari.api = ["not"];
      is.tablet = function() {
        return is.ipad() || is.androidTablet() || is.windowsTablet();
      };
      is.tablet.api = ["not"];
      is.touchDevice = function() {
        return !!document2 && ("ontouchstart" in freeSelf || "DocumentTouch" in freeSelf && document2 instanceof DocumentTouch);
      };
      is.touchDevice.api = ["not"];
      is.windows = function() {
        return /win/.test(appVersion);
      };
      is.windows.api = ["not"];
      is.windowsPhone = function() {
        return is.windows() && /phone/.test(userAgent);
      };
      is.windowsPhone.api = ["not"];
      is.windowsTablet = function() {
        return is.windows() && is.not.windowsPhone() && /touch/.test(userAgent);
      };
      is.windowsTablet.api = ["not"];
      is.propertyCount = function(object, count) {
        if (is.not.object(object) || is.not.number(count)) {
          return false;
        }
        var n = 0;
        for (var property in object) {
          if (hasOwnProperty.call(object, property) && ++n > count) {
            return false;
          }
        }
        return n === count;
      };
      is.propertyCount.api = ["not"];
      is.propertyDefined = function(object, property) {
        return is.object(object) && is.string(property) && property in object;
      };
      is.propertyDefined.api = ["not"];
      is.inArray = function(value, array) {
        if (is.not.array(array)) {
          return false;
        }
        for (var i = 0; i < array.length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      };
      is.inArray.api = ["not"];
      is.sorted = function(array, sign) {
        if (is.not.array(array)) {
          return false;
        }
        var predicate = comparator[sign] || comparator[">="];
        for (var i = 1; i < array.length; i++) {
          if (!predicate(array[i], array[i - 1])) {
            return false;
          }
        }
        return true;
      };
      function setInterfaces() {
        var options = is;
        for (var option in options) {
          if (hasOwnProperty.call(options, option) && is["function"](options[option])) {
            var interfaces = options[option].api || ["not", "all", "any"];
            for (var i = 0; i < interfaces.length; i++) {
              if (interfaces[i] === "not") {
                is.not[option] = not(is[option]);
              }
              if (interfaces[i] === "all") {
                is.all[option] = all(is[option]);
              }
              if (interfaces[i] === "any") {
                is.any[option] = any(is[option]);
              }
            }
          }
        }
      }
      setInterfaces();
      is.setNamespace = function() {
        root.is = previousIs;
        return this;
      };
      is.setRegexp = function(regexp2, name) {
        for (var r in regexes) {
          if (hasOwnProperty.call(regexes, r) && name === r) {
            regexes[r] = regexp2;
          }
        }
      };
      return is;
    });
  }
});

// node_modules/signed-varint/node_modules/varint/encode.js
var require_encode = __commonJS({
  "node_modules/signed-varint/node_modules/varint/encode.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = encode;
    var MSB = 128;
    var REST = 127;
    var MSBALL = ~REST;
    var INT = Math.pow(2, 31);
    function encode(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;
      while (num >= INT) {
        out[offset++] = num & 255 | MSB;
        num /= 128;
      }
      while (num & MSBALL) {
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
      }
      out[offset] = num | 0;
      encode.bytes = offset - oldOffset + 1;
      return out;
    }
  }
});

// node_modules/signed-varint/node_modules/varint/decode.js
var require_decode = __commonJS({
  "node_modules/signed-varint/node_modules/varint/decode.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = read;
    var MSB = 128;
    var REST = 127;
    function read(buf, offset) {
      var res = 0, offset = offset || 0, shift = 0, counter = offset, b2, l = buf.length;
      do {
        if (counter >= l) {
          read.bytes = 0;
          throw new RangeError("Could not decode varint");
        }
        b2 = buf[counter++];
        res += shift < 28 ? (b2 & REST) << shift : (b2 & REST) * Math.pow(2, shift);
        shift += 7;
      } while (b2 >= MSB);
      read.bytes = counter - offset;
      return res;
    }
  }
});

// node_modules/signed-varint/node_modules/varint/length.js
var require_length = __commonJS({
  "node_modules/signed-varint/node_modules/varint/length.js"(exports2, module2) {
    init_define_process_env();
    var N1 = Math.pow(2, 7);
    var N2 = Math.pow(2, 14);
    var N3 = Math.pow(2, 21);
    var N4 = Math.pow(2, 28);
    var N5 = Math.pow(2, 35);
    var N6 = Math.pow(2, 42);
    var N7 = Math.pow(2, 49);
    var N8 = Math.pow(2, 56);
    var N9 = Math.pow(2, 63);
    module2.exports = function(value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
  }
});

// node_modules/signed-varint/node_modules/varint/index.js
var require_varint2 = __commonJS({
  "node_modules/signed-varint/node_modules/varint/index.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = {
      encode: require_encode(),
      decode: require_decode(),
      encodingLength: require_length()
    };
  }
});

// node_modules/signed-varint/index.js
var require_signed_varint = __commonJS({
  "node_modules/signed-varint/index.js"(exports2) {
    init_define_process_env();
    var varint = require_varint2();
    exports2.encode = function encode(v, b2, o) {
      v = v >= 0 ? v * 2 : v * -2 - 1;
      var r = varint.encode(v, b2, o);
      encode.bytes = varint.encode.bytes;
      return r;
    };
    exports2.decode = function decode(b2, o) {
      var v = varint.decode(b2, o);
      decode.bytes = varint.decode.bytes;
      return v & 1 ? (v + 1) / -2 : v / 2;
    };
    exports2.encodingLength = function(v) {
      return varint.encodingLength(v >= 0 ? v * 2 : v * -2 - 1);
    };
  }
});

// node_modules/protocol-buffers-encodings/index.js
var require_protocol_buffers_encodings = __commonJS({
  "node_modules/protocol-buffers-encodings/index.js"(exports2) {
    init_define_process_env();
    var varint = require_varint();
    var svarint = require_signed_varint();
    exports2.make = encoder;
    exports2.name = function(enc) {
      var keys = Object.keys(exports2);
      for (var i = 0; i < keys.length; i++) {
        if (exports2[keys[i]] === enc)
          return keys[i];
      }
      return null;
    };
    exports2.skip = function(type, buffer, offset) {
      switch (type) {
        case 0:
          varint.decode(buffer, offset);
          return offset + varint.decode.bytes;
        case 1:
          return offset + 8;
        case 2:
          var len = varint.decode(buffer, offset);
          return offset + varint.decode.bytes + len;
        case 3:
        case 4:
          throw new Error("Groups are not supported");
        case 5:
          return offset + 4;
      }
      throw new Error("Unknown wire type: " + type);
    };
    exports2.bytes = encoder(2, function encode(val, buffer, offset) {
      var oldOffset = offset;
      var len = bufferLength(val);
      varint.encode(len, buffer, offset);
      offset += varint.encode.bytes;
      if (Buffer.isBuffer(val))
        val.copy(buffer, offset);
      else
        buffer.write(val, offset, len);
      offset += len;
      encode.bytes = offset - oldOffset;
      return buffer;
    }, function decode(buffer, offset) {
      var oldOffset = offset;
      var len = varint.decode(buffer, offset);
      offset += varint.decode.bytes;
      var val = buffer.slice(offset, offset + len);
      offset += val.length;
      decode.bytes = offset - oldOffset;
      return val;
    }, function encodingLength(val) {
      var len = bufferLength(val);
      return varint.encodingLength(len) + len;
    });
    exports2.string = encoder(2, function encode(val, buffer, offset) {
      var oldOffset = offset;
      var len = Buffer.byteLength(val);
      varint.encode(len, buffer, offset, "utf-8");
      offset += varint.encode.bytes;
      buffer.write(val, offset, len);
      offset += len;
      encode.bytes = offset - oldOffset;
      return buffer;
    }, function decode(buffer, offset) {
      var oldOffset = offset;
      var len = varint.decode(buffer, offset);
      offset += varint.decode.bytes;
      var val = buffer.toString("utf-8", offset, offset + len);
      offset += len;
      decode.bytes = offset - oldOffset;
      return val;
    }, function encodingLength(val) {
      var len = Buffer.byteLength(val);
      return varint.encodingLength(len) + len;
    });
    exports2.bool = encoder(0, function encode(val, buffer, offset) {
      buffer[offset] = val ? 1 : 0;
      encode.bytes = 1;
      return buffer;
    }, function decode(buffer, offset) {
      var bool = buffer[offset] > 0;
      decode.bytes = 1;
      return bool;
    }, function encodingLength() {
      return 1;
    });
    exports2.int32 = encoder(0, function encode(val, buffer, offset) {
      varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);
      encode.bytes = varint.encode.bytes;
      return buffer;
    }, function decode(buffer, offset) {
      var val = varint.decode(buffer, offset);
      decode.bytes = varint.decode.bytes;
      return val > 2147483647 ? val - 4294967296 : val;
    }, function encodingLength(val) {
      return varint.encodingLength(val < 0 ? val + 4294967296 : val);
    });
    exports2.int64 = encoder(0, function encode(val, buffer, offset) {
      if (val < 0) {
        var last = offset + 9;
        varint.encode(val * -1, buffer, offset);
        offset += varint.encode.bytes - 1;
        buffer[offset] = buffer[offset] | 128;
        while (offset < last - 1) {
          offset++;
          buffer[offset] = 255;
        }
        buffer[last] = 1;
        encode.bytes = 10;
      } else {
        varint.encode(val, buffer, offset);
        encode.bytes = varint.encode.bytes;
      }
      return buffer;
    }, function decode(buffer, offset) {
      var val = varint.decode(buffer, offset);
      if (val >= Math.pow(2, 63)) {
        var limit = 9;
        while (buffer[offset + limit - 1] === 255)
          limit--;
        limit = limit || 9;
        var subset = Buffer.allocUnsafe(limit);
        buffer.copy(subset, 0, offset, offset + limit);
        subset[limit - 1] = subset[limit - 1] & 127;
        val = -1 * varint.decode(subset, 0);
        decode.bytes = 10;
      } else {
        decode.bytes = varint.decode.bytes;
      }
      return val;
    }, function encodingLength(val) {
      return val < 0 ? 10 : varint.encodingLength(val);
    });
    exports2.sint32 = exports2.sint64 = encoder(0, svarint.encode, svarint.decode, svarint.encodingLength);
    exports2.uint32 = exports2.uint64 = exports2.enum = exports2.varint = encoder(0, varint.encode, varint.decode, varint.encodingLength);
    exports2.fixed64 = exports2.sfixed64 = encoder(1, function encode(val, buffer, offset) {
      val.copy(buffer, offset);
      encode.bytes = 8;
      return buffer;
    }, function decode(buffer, offset) {
      var val = buffer.slice(offset, offset + 8);
      decode.bytes = 8;
      return val;
    }, function encodingLength() {
      return 8;
    });
    exports2.double = encoder(1, function encode(val, buffer, offset) {
      buffer.writeDoubleLE(val, offset);
      encode.bytes = 8;
      return buffer;
    }, function decode(buffer, offset) {
      var val = buffer.readDoubleLE(offset);
      decode.bytes = 8;
      return val;
    }, function encodingLength() {
      return 8;
    });
    exports2.fixed32 = encoder(5, function encode(val, buffer, offset) {
      buffer.writeUInt32LE(val, offset);
      encode.bytes = 4;
      return buffer;
    }, function decode(buffer, offset) {
      var val = buffer.readUInt32LE(offset);
      decode.bytes = 4;
      return val;
    }, function encodingLength() {
      return 4;
    });
    exports2.sfixed32 = encoder(5, function encode(val, buffer, offset) {
      buffer.writeInt32LE(val, offset);
      encode.bytes = 4;
      return buffer;
    }, function decode(buffer, offset) {
      var val = buffer.readInt32LE(offset);
      decode.bytes = 4;
      return val;
    }, function encodingLength() {
      return 4;
    });
    exports2.float = encoder(5, function encode(val, buffer, offset) {
      buffer.writeFloatLE(val, offset);
      encode.bytes = 4;
      return buffer;
    }, function decode(buffer, offset) {
      var val = buffer.readFloatLE(offset);
      decode.bytes = 4;
      return val;
    }, function encodingLength() {
      return 4;
    });
    function encoder(type, encode, decode, encodingLength) {
      encode.bytes = decode.bytes = 0;
      return {
        type,
        encode,
        decode,
        encodingLength
      };
    }
    function bufferLength(val) {
      return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val);
    }
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/encoderHelper.js
var require_encoderHelper = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/encoderHelper.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.size = exports2["default"] = void 0;
    var _is_js = _interopRequireDefault(require_is());
    var _default = function _default2(type) {
      if (_is_js["default"]["boolean"](type)) {
        return 0;
      }
      if (_is_js["default"].number(type)) {
        if (_is_js["default"].integer(type)) {
          return 0;
        } else {
          return 1;
        }
      }
      if (_is_js["default"].string(type) || _is_js["default"].array(type) || _is_js["default"].object(type)) {
        return 2;
      }
      throw new Error('Invalid type "'.concat(type, '"'));
    };
    exports2["default"] = _default;
    var size = function size2(items, iter, acc) {
      if (acc === void 0)
        acc = 0;
      for (var i = 0; i < items.length; ++i) {
        acc += iter(items[i], i, acc);
      }
      return acc;
    };
    exports2.size = size;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/decoder/index.js
var require_decoder = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/decoder/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.decodeFieldNumberAndTyp3 = exports2.unMarshalBinaryBare = exports2.unMarshalBinaryLengthPrefixed = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _is_js = _interopRequireDefault(require_is());
    var _protocolBuffersEncodings = require_protocol_buffers_encodings();
    var _encoderHelper = _interopRequireDefault(require_encoderHelper());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var decoder = function decoder2(bytes, varType) {
      var val = varType.decode(bytes, 0);
      var offset = varType.encodingLength(val);
      return {
        val,
        offset
      };
    };
    var unMarshalBinaryLengthPrefixed = function unMarshalBinaryLengthPrefixed2(bytes, type) {
      if (bytes.length === 0)
        throw new TypeError("Cannot decode empty bytes");
      var _decoder = decoder(bytes, _protocolBuffersEncodings.varint), len = _decoder.offset;
      if (len < 0)
        throw new Error("Error reading msg byte-length prefix: got code ".concat(len));
      bytes = bytes.slice(len);
      return unMarshalBinaryBare(bytes, type);
    };
    exports2.unMarshalBinaryLengthPrefixed = unMarshalBinaryLengthPrefixed;
    var unMarshalBinaryBare = function unMarshalBinaryBare2(bytes, type) {
      if (!_is_js["default"].object(type))
        throw new TypeError("type should be object");
      if (!Buffer.isBuffer(bytes))
        throw new TypeError("bytes must be buffer");
      if (_is_js["default"].array(type)) {
        if (!_is_js["default"].object(type[0]))
          throw new TypeError("type should be object");
        return decodeArrayBinary(bytes, type[0]);
      }
      return decodeBinary(bytes, type);
    };
    exports2.unMarshalBinaryBare = unMarshalBinaryBare;
    var decodeBinary = function decodeBinary2(bytes, type, isLengthPrefixed) {
      if (Buffer.isBuffer(type)) {
        return decoder(bytes, _protocolBuffersEncodings.bytes);
      }
      if (_is_js["default"].array(type)) {
        return decodeArrayBinary(bytes, type);
      }
      if (_is_js["default"].number(type)) {
        return decoder(bytes, _protocolBuffersEncodings.varint);
      }
      if (_is_js["default"]["boolean"](type)) {
        return decoder(bytes, _protocolBuffersEncodings.bool);
      }
      if (_is_js["default"].string(type)) {
        return decoder(bytes, _protocolBuffersEncodings.string);
      }
      if (_is_js["default"].object(type)) {
        return decodeObjectBinary(bytes, type, isLengthPrefixed);
      }
      return;
    };
    var setDefaultValue = function setDefaultValue2(type, key) {
      if (_is_js["default"].object(type[key]))
        type[key] = null;
      if (_is_js["default"].number(type[key]))
        type[key] = 0;
      if (_is_js["default"]["boolean"](type[key]))
        type[key] = false;
      if (_is_js["default"].string(type[key]))
        type[key] = "";
    };
    var decodeObjectBinary = function decodeObjectBinary2(bytes, type, isLengthPrefixed) {
      var objectOffset = 0;
      if (isLengthPrefixed) {
        var _decoder2 = decoder(bytes, _protocolBuffersEncodings.varint), len = _decoder2.offset;
        bytes = bytes.slice(len);
        objectOffset += len;
      }
      if (type.aminoPrefix) {
        bytes = bytes.slice(4);
        objectOffset += 4;
      }
      var lastFieldNum = 0;
      var keys = Object.keys(type).filter(function(key) {
        return key !== "aminoPrefix";
      });
      keys.forEach(function(key, index) {
        if (_is_js["default"].array(type[key])) {
          var _decodeArrayBinary = decodeArrayBinary(bytes, type[key][0]), offset = _decodeArrayBinary.offset, val = _decodeArrayBinary.val;
          objectOffset += offset;
          type[key] = val;
          bytes = bytes.slice(offset);
        } else {
          var _decodeFieldNumberAnd = decodeFieldNumberAndTyp3(bytes), fieldNum = _decodeFieldNumberAnd.fieldNum, typ = _decodeFieldNumberAnd.typ;
          if (index + 1 !== fieldNum || fieldNum < 0) {
            setDefaultValue(type, key);
            return;
          }
          if (fieldNum <= lastFieldNum) {
            throw new Error("encountered fieldNum: ".concat(fieldNum, ", but we have already seen fnum: ").concat(lastFieldNum));
          }
          lastFieldNum = fieldNum;
          if (index + 1 !== fieldNum) {
            throw new Error("field number is not expected");
          }
          var typeWanted = (0, _encoderHelper["default"])(type[key]);
          if (typ !== typeWanted) {
            throw new Error("field type is not expected");
          }
          bytes = bytes.slice(1);
          var _decodeBinary = decodeBinary(bytes, type[key], true), _val = _decodeBinary.val, _offset = _decodeBinary.offset;
          type[key] = _val;
          bytes = bytes.slice(_offset);
          objectOffset += _offset + 1;
        }
      });
      return {
        val: type,
        offset: objectOffset
      };
    };
    var decodeArrayBinary = function decodeArrayBinary2(bytes, type) {
      var arr = [];
      var arrayOffset = 0;
      var _decodeFieldNumberAnd2 = decodeFieldNumberAndTyp3(bytes), fieldNumber = _decodeFieldNumberAnd2.fieldNum;
      while (true) {
        var _decodeFieldNumberAnd3 = decodeFieldNumberAndTyp3(bytes), fieldNum = _decodeFieldNumberAnd3.fieldNum;
        if (fieldNum !== fieldNumber || fieldNum < 0)
          break;
        bytes = bytes.slice(1);
        if (bytes.length > 0 && bytes.readUInt8(0) === 0)
          continue;
        var _decodeBinary2 = decodeBinary(bytes, type, true), offset = _decodeBinary2.offset, val = _decodeBinary2.val;
        arr.push(_objectSpread({}, val));
        bytes = bytes.slice(offset + 1);
        arrayOffset += offset + 1;
        fieldNumber = fieldNum;
      }
      return {
        val: arr,
        offset: arrayOffset
      };
    };
    var decodeFieldNumberAndTyp3 = function decodeFieldNumberAndTyp32(bytes) {
      if (bytes.length < 2) {
        return {
          fieldNum: -1
        };
      }
      var _decoder3 = decoder(bytes, _protocolBuffersEncodings.varint), val = _decoder3.val;
      var typ = val & 7;
      var fieldNum = val >> 3;
      if (fieldNum > 1 << 29 - 1) {
        throw new Error("invalid field num ".concat(fieldNum));
      }
      return {
        fieldNum,
        typ
      };
    };
    exports2.decodeFieldNumberAndTyp3 = decodeFieldNumberAndTyp3;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/encoder/varint.js
var require_varint3 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/encoder/varint.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.VarInt = exports2.UVarInt = void 0;
    var _bn = _interopRequireDefault(require_bn());
    function VarIntFunc(signed) {
      var encodingLength = function encodingLength2(n) {
        if (signed)
          n *= 2;
        if (n < 0) {
          throw Error("varint value is out of bounds");
        }
        var bits = Math.log2(n + 1);
        return Math.ceil(bits / 7) || 1;
      };
      var encode = function encode2(n, buffer, offset) {
        if (n < 0) {
          throw Error("varint value is out of bounds");
        }
        buffer = buffer || Buffer.alloc(encodingLength(n));
        offset = offset || 0;
        var nStr = n.toString();
        var bn = new _bn["default"](nStr, 10);
        var num255 = new _bn["default"](255);
        var num128 = new _bn["default"](128);
        if (signed) {
          bn = bn.muln(2);
        }
        var i = 0;
        while (bn.gten(128)) {
          buffer[offset + i] = bn.and(num255).or(num128).toNumber();
          bn = bn.shrn(7);
          i++;
        }
        buffer[offset + i] = bn.andln(255);
        return buffer;
      };
      var decode = function decode2(bytes) {
        var x = 0;
        var s = 0;
        for (var i = 0, len = bytes.length; i < len; i++) {
          var b2 = bytes[i];
          if (b2 < 128) {
            if (i > 9 || i === 9 && b2 > 1) {
              return 0;
            }
            return x | b2 << s;
          }
          x |= (b2 & 127) << s;
          s += 7;
        }
        return 0;
      };
      return {
        encode,
        decode,
        encodingLength
      };
    }
    var UVarInt = VarIntFunc(false);
    exports2.UVarInt = UVarInt;
    var VarInt = VarIntFunc(true);
    exports2.VarInt = VarInt;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/encoder/index.js
var require_encoder = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/encoder/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      encodeNumber: true,
      encodeBool: true,
      encodeString: true,
      encodeTime: true,
      convertObjectToSignBytes: true,
      marshalBinary: true,
      marshalBinaryBare: true,
      encodeBinary: true,
      encodeBinaryByteArray: true,
      encodeObjectBinary: true,
      encodeArrayBinary: true
    };
    exports2.encodeArrayBinary = exports2.encodeObjectBinary = exports2.encodeBinaryByteArray = exports2.encodeBinary = exports2.marshalBinaryBare = exports2.marshalBinary = exports2.convertObjectToSignBytes = exports2.encodeTime = exports2.encodeString = exports2.encodeBool = exports2.encodeNumber = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _is_js = _interopRequireDefault(require_is());
    var _protocolBuffersEncodings = require_protocol_buffers_encodings();
    var _encoderHelper = _interopRequireDefault(require_encoderHelper());
    var _varint = require_varint3();
    Object.keys(_varint).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _varint[key];
        }
      });
    });
    var sortObject = function sortObject2(obj) {
      if (obj === null)
        return null;
      if ((0, _typeof2["default"])(obj) !== "object")
        return obj;
      if (Array.isArray(obj))
        return obj.map(sortObject2);
      var sortedKeys = Object.keys(obj).sort();
      var result = {};
      sortedKeys.forEach(function(key) {
        result[key] = sortObject2(obj[key]);
      });
      return result;
    };
    var encodeNumber = function encodeNumber2(num) {
      return _varint.UVarInt.encode(num);
    };
    exports2.encodeNumber = encodeNumber;
    var encodeBool = function encodeBool2(b2) {
      return b2 ? _varint.UVarInt.encode(1) : _varint.UVarInt.encode(0);
    };
    exports2.encodeBool = encodeBool;
    var encodeString = function encodeString2(str) {
      var buf = Buffer.alloc(_protocolBuffersEncodings.string.encodingLength(str));
      return _protocolBuffersEncodings.string.encode(str, buf, 0);
    };
    exports2.encodeString = encodeString;
    var encodeTime = function encodeTime2(value) {
      var millis = new Date(value).getTime();
      var seconds = Math.floor(millis / 1e3);
      var nanos = Number(seconds.toString().padEnd(9, "0"));
      var buffer = Buffer.alloc(14);
      buffer.writeInt32LE(1 << 3 | 1, 0);
      buffer.writeUInt32LE(seconds, 1);
      buffer.writeInt32LE(2 << 3 | 5, 9);
      buffer.writeUInt32LE(nanos, 10);
      return buffer;
    };
    exports2.encodeTime = encodeTime;
    var convertObjectToSignBytes = function convertObjectToSignBytes2(obj) {
      return Buffer.from(JSON.stringify(sortObject(obj)));
    };
    exports2.convertObjectToSignBytes = convertObjectToSignBytes;
    var marshalBinary = function marshalBinary2(obj) {
      if (!_is_js["default"].object(obj))
        throw new TypeError("data must be an object");
      return encodeBinary(obj, -1, true).toString("hex");
    };
    exports2.marshalBinary = marshalBinary;
    var marshalBinaryBare = function marshalBinaryBare2(obj) {
      if (!_is_js["default"].object(obj))
        throw new TypeError("data must be an object");
      return encodeBinary(obj).toString("hex");
    };
    exports2.marshalBinaryBare = marshalBinaryBare;
    var encodeBinary = function encodeBinary2(val, fieldNum, isByteLenPrefix) {
      if (val === null || val === void 0)
        throw new TypeError("unsupported type");
      if (Buffer.isBuffer(val)) {
        if (isByteLenPrefix) {
          return Buffer.concat([_varint.UVarInt.encode(val.length), val]);
        }
        return val;
      }
      if (_is_js["default"].array(val)) {
        return encodeArrayBinary(fieldNum, val, isByteLenPrefix);
      }
      if (_is_js["default"].number(val)) {
        return encodeNumber(val);
      }
      if (_is_js["default"]["boolean"](val)) {
        return encodeBool(val);
      }
      if (_is_js["default"].string(val)) {
        return encodeString(val);
      }
      if (_is_js["default"].object(val)) {
        return encodeObjectBinary(val, isByteLenPrefix);
      }
      return;
    };
    exports2.encodeBinary = encodeBinary;
    var encodeBinaryByteArray = function encodeBinaryByteArray2(bytes) {
      var lenPrefix = bytes.length;
      return Buffer.concat([_varint.UVarInt.encode(lenPrefix), bytes]);
    };
    exports2.encodeBinaryByteArray = encodeBinaryByteArray;
    var encodeObjectBinary = function encodeObjectBinary2(obj, isByteLenPrefix) {
      var bufferArr = [];
      Object.keys(obj).forEach(function(key, index) {
        if (key === "aminoPrefix" || key === "version")
          return;
        if (isDefaultValue(obj[key]))
          return;
        if (_is_js["default"].array(obj[key]) && obj[key].length > 0) {
          bufferArr.push(encodeArrayBinary(index, obj[key]));
        } else {
          bufferArr.push(encodeTypeAndField(index, obj[key]));
          bufferArr.push(encodeBinary(obj[key], index, true));
        }
      });
      var bytes = Buffer.concat(bufferArr);
      if (obj.aminoPrefix) {
        var prefix = Buffer.from(obj.aminoPrefix, "hex");
        bytes = Buffer.concat([prefix, bytes]);
      }
      if (isByteLenPrefix) {
        var lenBytes = _varint.UVarInt.encode(bytes.length);
        bytes = Buffer.concat([lenBytes, bytes]);
      }
      return bytes;
    };
    exports2.encodeObjectBinary = encodeObjectBinary;
    var encodeArrayBinary = function encodeArrayBinary2(fieldNum, arr, isByteLenPrefix) {
      var result = [];
      arr.forEach(function(item) {
        result.push(encodeTypeAndField(fieldNum, item));
        if (isDefaultValue(item)) {
          result.push(Buffer.from("00", "hex"));
          return;
        }
        result.push(encodeBinary(item, fieldNum, true));
      });
      if (isByteLenPrefix) {
        var length = result.reduce(function(prev, item) {
          return prev + item.length;
        }, 0);
        result.unshift(_varint.UVarInt.encode(length));
      }
      return Buffer.concat(result);
    };
    exports2.encodeArrayBinary = encodeArrayBinary;
    var encodeTypeAndField = function encodeTypeAndField2(index, field) {
      index = Number(index);
      var value = index + 1 << 3 | (0, _encoderHelper["default"])(field);
      return _varint.UVarInt.encode(value);
    };
    var isDefaultValue = function isDefaultValue2(obj) {
      if (obj === null)
        return false;
      return _is_js["default"].number(obj) && obj === 0 || _is_js["default"].string(obj) && obj === "" || _is_js["default"].array(obj) && obj.length === 0 || _is_js["default"]["boolean"](obj) && !obj;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/index.js
var require_amino = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/amino/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      decoder: true,
      encoder: true
    };
    exports2.encoder = exports2.decoder = void 0;
    var decoder = _interopRequireWildcard(require_decoder());
    exports2.decoder = decoder;
    Object.keys(decoder).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return decoder[key];
        }
      });
    });
    var encoder = _interopRequireWildcard(require_encoder());
    exports2.encoder = encoder;
    Object.keys(encoder).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return encoder[key];
        }
      });
    });
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports2, module2) {
    init_define_process_env();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module2.exports = _classCallCheck, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports2, module2) {
    init_define_process_env();
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module2.exports = _createClass, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/big.js/big.mjs
var big_exports = {};
__export(big_exports, {
  Big: () => Big,
  default: () => big_default
});
function _Big_() {
  function Big2(n) {
    var x = this;
    if (!(x instanceof Big2))
      return n === UNDEFINED ? _Big_() : new Big2(n);
    if (n instanceof Big2) {
      x.s = n.s;
      x.e = n.e;
      x.c = n.c.slice();
    } else {
      parse(x, n);
    }
    x.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.version = "5.2.2";
  return Big2;
}
function parse(x, n) {
  var e2, i, nl;
  if (n === 0 && 1 / n < 0)
    n = "-0";
  else if (!NUMERIC.test(n += ""))
    throw Error(INVALID + "number");
  x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1;
  if ((e2 = n.indexOf(".")) > -1)
    n = n.replace(".", "");
  if ((i = n.search(/e/i)) > 0) {
    if (e2 < 0)
      e2 = i;
    e2 += +n.slice(i + 1);
    n = n.substring(0, i);
  } else if (e2 < 0) {
    e2 = n.length;
  }
  nl = n.length;
  for (i = 0; i < nl && n.charAt(i) == "0"; )
    ++i;
  if (i == nl) {
    x.c = [x.e = 0];
  } else {
    for (; nl > 0 && n.charAt(--nl) == "0"; )
      ;
    x.e = e2 - i - 1;
    x.c = [];
    for (e2 = 0; i <= nl; )
      x.c[e2++] = +n.charAt(i++);
  }
  return x;
}
function round(x, dp, rm, more) {
  var xc = x.c, i = x.e + dp + 1;
  if (i < xc.length) {
    if (rm === 1) {
      more = xc[i] >= 5;
    } else if (rm === 2) {
      more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
    } else if (rm === 3) {
      more = more || !!xc[0];
    } else {
      more = false;
      if (rm !== 0)
        throw Error(INVALID_RM);
    }
    if (i < 1) {
      xc.length = 1;
      if (more) {
        x.e = -dp;
        xc[0] = 1;
      } else {
        xc[0] = x.e = 0;
      }
    } else {
      xc.length = i--;
      if (more) {
        for (; ++xc[i] > 9; ) {
          xc[i] = 0;
          if (!i--) {
            ++x.e;
            xc.unshift(1);
          }
        }
      }
      for (i = xc.length; !xc[--i]; )
        xc.pop();
    }
  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
    throw Error(INVALID_RM);
  }
  return x;
}
function stringify(x, id, n, k) {
  var e2, s, Big2 = x.constructor, z = !x.c[0];
  if (n !== UNDEFINED) {
    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
      throw Error(id == 3 ? INVALID + "precision" : INVALID_DP);
    }
    x = new Big2(x);
    n = k - x.e;
    if (x.c.length > ++k)
      round(x, n, Big2.RM);
    if (id == 2)
      k = x.e + n + 1;
    for (; x.c.length < k; )
      x.c.push(0);
  }
  e2 = x.e;
  s = x.c.join("");
  n = s.length;
  if (id != 2 && (id == 1 || id == 3 && k <= e2 || e2 <= Big2.NE || e2 >= Big2.PE)) {
    s = s.charAt(0) + (n > 1 ? "." + s.slice(1) : "") + (e2 < 0 ? "e" : "e+") + e2;
  } else if (e2 < 0) {
    for (; ++e2; )
      s = "0" + s;
    s = "0." + s;
  } else if (e2 > 0) {
    if (++e2 > n)
      for (e2 -= n; e2--; )
        s += "0";
    else if (e2 < n)
      s = s.slice(0, e2) + "." + s.slice(e2);
  } else if (n > 1) {
    s = s.charAt(0) + "." + s.slice(1);
  }
  return x.s < 0 && (!z || id == 4) ? "-" + s : s;
}
var DP, RM, MAX_DP, MAX_POWER, NE, PE, NAME, INVALID, INVALID_DP, INVALID_RM, DIV_BY_ZERO, P, UNDEFINED, NUMERIC, Big, big_default;
var init_big = __esm({
  "node_modules/big.js/big.mjs"() {
    init_define_process_env();
    DP = 20;
    RM = 1;
    MAX_DP = 1e6;
    MAX_POWER = 1e6;
    NE = -7;
    PE = 21;
    NAME = "[big.js] ";
    INVALID = NAME + "Invalid ";
    INVALID_DP = INVALID + "decimal places";
    INVALID_RM = INVALID + "rounding mode";
    DIV_BY_ZERO = NAME + "Division by zero";
    P = {};
    UNDEFINED = void 0;
    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
    P.abs = function() {
      var x = new this.constructor(this);
      x.s = 1;
      return x;
    };
    P.cmp = function(y) {
      var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;
      if (!xc[0] || !yc[0])
        return !xc[0] ? !yc[0] ? 0 : -j : i;
      if (i != j)
        return i;
      isneg = i < 0;
      if (k != l)
        return k > l ^ isneg ? 1 : -1;
      j = (k = xc.length) < (l = yc.length) ? k : l;
      for (i = -1; ++i < j; ) {
        if (xc[i] != yc[i])
          return xc[i] > yc[i] ^ isneg ? 1 : -1;
      }
      return k == l ? 0 : k > l ^ isneg ? 1 : -1;
    };
    P.div = function(y) {
      var x = this, Big2 = x.constructor, a2 = x.c, b2 = (y = new Big2(y)).c, k = x.s == y.s ? 1 : -1, dp = Big2.DP;
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP)
        throw Error(INVALID_DP);
      if (!b2[0])
        throw Error(DIV_BY_ZERO);
      if (!a2[0])
        return new Big2(k * 0);
      var bl, bt, n, cmp, ri, bz = b2.slice(), ai = bl = b2.length, al = a2.length, r = a2.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, d2 = dp + (q.e = x.e - y.e) + 1;
      q.s = k;
      k = d2 < 0 ? 0 : d2;
      bz.unshift(0);
      for (; rl++ < bl; )
        r.push(0);
      do {
        for (n = 0; n < 10; n++) {
          if (bl != (rl = r.length)) {
            cmp = bl > rl ? 1 : -1;
          } else {
            for (ri = -1, cmp = 0; ++ri < bl; ) {
              if (b2[ri] != r[ri]) {
                cmp = b2[ri] > r[ri] ? 1 : -1;
                break;
              }
            }
          }
          if (cmp < 0) {
            for (bt = rl == bl ? b2 : bz; rl; ) {
              if (r[--rl] < bt[rl]) {
                ri = rl;
                for (; ri && !r[--ri]; )
                  r[ri] = 9;
                --r[ri];
                r[rl] += 10;
              }
              r[rl] -= bt[rl];
            }
            for (; !r[0]; )
              r.shift();
          } else {
            break;
          }
        }
        qc[qi++] = cmp ? n : ++n;
        if (r[0] && cmp)
          r[rl] = a2[ai] || 0;
        else
          r = [a2[ai]];
      } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
      if (!qc[0] && qi != 1) {
        qc.shift();
        q.e--;
      }
      if (qi > d2)
        round(q, dp, Big2.RM, r[0] !== UNDEFINED);
      return q;
    };
    P.eq = function(y) {
      return !this.cmp(y);
    };
    P.gt = function(y) {
      return this.cmp(y) > 0;
    };
    P.gte = function(y) {
      return this.cmp(y) > -1;
    };
    P.lt = function(y) {
      return this.cmp(y) < 0;
    };
    P.lte = function(y) {
      return this.cmp(y) < 1;
    };
    P.minus = P.sub = function(y) {
      var i, j, t, xlty, x = this, Big2 = x.constructor, a2 = x.s, b2 = (y = new Big2(y)).s;
      if (a2 != b2) {
        y.s = -b2;
        return x.plus(y);
      }
      var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
      if (!xc[0] || !yc[0]) {
        return yc[0] ? (y.s = -b2, y) : new Big2(xc[0] ? x : 0);
      }
      if (a2 = xe - ye) {
        if (xlty = a2 < 0) {
          a2 = -a2;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }
        t.reverse();
        for (b2 = a2; b2--; )
          t.push(0);
        t.reverse();
      } else {
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for (a2 = b2 = 0; b2 < j; b2++) {
          if (xc[b2] != yc[b2]) {
            xlty = xc[b2] < yc[b2];
            break;
          }
        }
      }
      if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }
      if ((b2 = (j = yc.length) - (i = xc.length)) > 0)
        for (; b2--; )
          xc[i++] = 0;
      for (b2 = i; j > a2; ) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; )
            xc[i] = 9;
          --xc[i];
          xc[j] += 10;
        }
        xc[j] -= yc[j];
      }
      for (; xc[--b2] === 0; )
        xc.pop();
      for (; xc[0] === 0; ) {
        xc.shift();
        --ye;
      }
      if (!xc[0]) {
        y.s = 1;
        xc = [ye = 0];
      }
      y.c = xc;
      y.e = ye;
      return y;
    };
    P.mod = function(y) {
      var ygtx, x = this, Big2 = x.constructor, a2 = x.s, b2 = (y = new Big2(y)).s;
      if (!y.c[0])
        throw Error(DIV_BY_ZERO);
      x.s = y.s = 1;
      ygtx = y.cmp(x) == 1;
      x.s = a2;
      y.s = b2;
      if (ygtx)
        return new Big2(x);
      a2 = Big2.DP;
      b2 = Big2.RM;
      Big2.DP = Big2.RM = 0;
      x = x.div(y);
      Big2.DP = a2;
      Big2.RM = b2;
      return this.minus(x.times(y));
    };
    P.plus = P.add = function(y) {
      var t, x = this, Big2 = x.constructor, a2 = x.s, b2 = (y = new Big2(y)).s;
      if (a2 != b2) {
        y.s = -b2;
        return x.minus(y);
      }
      var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
      if (!xc[0] || !yc[0])
        return yc[0] ? y : new Big2(xc[0] ? x : a2 * 0);
      xc = xc.slice();
      if (a2 = xe - ye) {
        if (a2 > 0) {
          ye = xe;
          t = yc;
        } else {
          a2 = -a2;
          t = xc;
        }
        t.reverse();
        for (; a2--; )
          t.push(0);
        t.reverse();
      }
      if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
      }
      a2 = yc.length;
      for (b2 = 0; a2; xc[a2] %= 10)
        b2 = (xc[--a2] = xc[a2] + yc[a2] + b2) / 10 | 0;
      if (b2) {
        xc.unshift(b2);
        ++ye;
      }
      for (a2 = xc.length; xc[--a2] === 0; )
        xc.pop();
      y.c = xc;
      y.e = ye;
      return y;
    };
    P.pow = function(n) {
      var x = this, one = new x.constructor(1), y = one, isneg = n < 0;
      if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)
        throw Error(INVALID + "exponent");
      if (isneg)
        n = -n;
      for (; ; ) {
        if (n & 1)
          y = y.times(x);
        n >>= 1;
        if (!n)
          break;
        x = x.times(x);
      }
      return isneg ? one.div(y) : y;
    };
    P.round = function(dp, rm) {
      var Big2 = this.constructor;
      if (dp === UNDEFINED)
        dp = 0;
      else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)
        throw Error(INVALID_DP);
      return round(new Big2(this), dp, rm === UNDEFINED ? Big2.RM : rm);
    };
    P.sqrt = function() {
      var r, c2, t, x = this, Big2 = x.constructor, s = x.s, e2 = x.e, half = new Big2(0.5);
      if (!x.c[0])
        return new Big2(x);
      if (s < 0)
        throw Error(NAME + "No square root");
      s = Math.sqrt(x + "");
      if (s === 0 || s === 1 / 0) {
        c2 = x.c.join("");
        if (!(c2.length + e2 & 1))
          c2 += "0";
        s = Math.sqrt(c2);
        e2 = ((e2 + 1) / 2 | 0) - (e2 < 0 || e2 & 1);
        r = new Big2((s == 1 / 0 ? "1e" : (s = s.toExponential()).slice(0, s.indexOf("e") + 1)) + e2);
      } else {
        r = new Big2(s);
      }
      e2 = r.e + (Big2.DP += 4);
      do {
        t = r;
        r = half.times(t.plus(x.div(t)));
      } while (t.c.slice(0, e2).join("") !== r.c.slice(0, e2).join(""));
      return round(r, Big2.DP -= 4, Big2.RM);
    };
    P.times = P.mul = function(y) {
      var c2, x = this, Big2 = x.constructor, xc = x.c, yc = (y = new Big2(y)).c, a2 = xc.length, b2 = yc.length, i = x.e, j = y.e;
      y.s = x.s == y.s ? 1 : -1;
      if (!xc[0] || !yc[0])
        return new Big2(y.s * 0);
      y.e = i + j;
      if (a2 < b2) {
        c2 = xc;
        xc = yc;
        yc = c2;
        j = a2;
        a2 = b2;
        b2 = j;
      }
      for (c2 = new Array(j = a2 + b2); j--; )
        c2[j] = 0;
      for (i = b2; i--; ) {
        b2 = 0;
        for (j = a2 + i; j > i; ) {
          b2 = c2[j] + yc[i] * xc[j - i - 1] + b2;
          c2[j--] = b2 % 10;
          b2 = b2 / 10 | 0;
        }
        c2[j] = (c2[j] + b2) % 10;
      }
      if (b2)
        ++y.e;
      else
        c2.shift();
      for (i = c2.length; !c2[--i]; )
        c2.pop();
      y.c = c2;
      return y;
    };
    P.toExponential = function(dp) {
      return stringify(this, 1, dp, dp);
    };
    P.toFixed = function(dp) {
      return stringify(this, 2, dp, this.e + dp);
    };
    P.toPrecision = function(sd) {
      return stringify(this, 3, sd, sd - 1);
    };
    P.toString = function() {
      return stringify(this);
    };
    P.valueOf = P.toJSON = function() {
      return stringify(this, 4);
    };
    Big = _Big_();
    big_default = Big;
  }
});

// node_modules/bip32/src/crypto.js
var require_crypto = __commonJS({
  "node_modules/bip32/src/crypto.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var createHash = require_browser3();
    var createHmac = require_browser4();
    function hash160(buffer) {
      const sha256Hash = createHash("sha256").update(buffer).digest();
      try {
        return createHash("rmd160").update(sha256Hash).digest();
      } catch (err) {
        return createHash("ripemd160").update(sha256Hash).digest();
      }
    }
    exports2.hash160 = hash160;
    function hmacSHA512(key, data) {
      return createHmac("sha512", key).update(data).digest();
    }
    exports2.hmacSHA512 = hmacSHA512;
  }
});

// node_modules/tiny-secp256k1/rfc6979.js
var require_rfc6979 = __commonJS({
  "node_modules/tiny-secp256k1/rfc6979.js"(exports2, module2) {
    init_define_process_env();
    var createHmac = require_browser4();
    var ONE1 = Buffer.alloc(1, 1);
    var ZERO1 = Buffer.alloc(1, 0);
    function deterministicGenerateK(hash, x, checkSig, isPrivate, extraEntropy) {
      let k = Buffer.alloc(32, 0);
      let v = Buffer.alloc(32, 1);
      k = createHmac("sha256", k).update(v).update(ZERO1).update(x).update(hash).update(extraEntropy || "").digest();
      v = createHmac("sha256", k).update(v).digest();
      k = createHmac("sha256", k).update(v).update(ONE1).update(x).update(hash).update(extraEntropy || "").digest();
      v = createHmac("sha256", k).update(v).digest();
      v = createHmac("sha256", k).update(v).digest();
      let T = v;
      while (!isPrivate(T) || !checkSig(T)) {
        k = createHmac("sha256", k).update(v).update(ZERO1).digest();
        v = createHmac("sha256", k).update(v).digest();
        v = createHmac("sha256", k).update(v).digest();
        T = v;
      }
      return T;
    }
    module2.exports = deterministicGenerateK;
  }
});

// node_modules/tiny-secp256k1/js.js
var require_js = __commonJS({
  "node_modules/tiny-secp256k1/js.js"(exports2, module2) {
    init_define_process_env();
    var BN = require_bn();
    var EC = require_elliptic().ec;
    var secp256k1 = new EC("secp256k1");
    var deterministicGenerateK = require_rfc6979();
    var ZERO32 = Buffer.alloc(32, 0);
    var EC_GROUP_ORDER = Buffer.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", "hex");
    var EC_P = Buffer.from("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f", "hex");
    var n = secp256k1.curve.n;
    var nDiv2 = n.shrn(1);
    var G = secp256k1.curve.g;
    var THROW_BAD_PRIVATE = "Expected Private";
    var THROW_BAD_POINT = "Expected Point";
    var THROW_BAD_TWEAK = "Expected Tweak";
    var THROW_BAD_HASH = "Expected Hash";
    var THROW_BAD_SIGNATURE = "Expected Signature";
    var THROW_BAD_EXTRA_DATA = "Expected Extra Data (32 bytes)";
    function isScalar(x) {
      return Buffer.isBuffer(x) && x.length === 32;
    }
    function isOrderScalar(x) {
      if (!isScalar(x))
        return false;
      return x.compare(EC_GROUP_ORDER) < 0;
    }
    function isPoint(p) {
      if (!Buffer.isBuffer(p))
        return false;
      if (p.length < 33)
        return false;
      const t = p[0];
      const x = p.slice(1, 33);
      if (x.compare(ZERO32) === 0)
        return false;
      if (x.compare(EC_P) >= 0)
        return false;
      if ((t === 2 || t === 3) && p.length === 33) {
        try {
          decodeFrom(p);
        } catch (e2) {
          return false;
        }
        return true;
      }
      const y = p.slice(33);
      if (y.compare(ZERO32) === 0)
        return false;
      if (y.compare(EC_P) >= 0)
        return false;
      if (t === 4 && p.length === 65)
        return true;
      return false;
    }
    function __isPointCompressed(p) {
      return p[0] !== 4;
    }
    function isPointCompressed(p) {
      if (!isPoint(p))
        return false;
      return __isPointCompressed(p);
    }
    function isPrivate(x) {
      if (!isScalar(x))
        return false;
      return x.compare(ZERO32) > 0 && x.compare(EC_GROUP_ORDER) < 0;
    }
    function isSignature(value) {
      const r = value.slice(0, 32);
      const s = value.slice(32, 64);
      return Buffer.isBuffer(value) && value.length === 64 && r.compare(EC_GROUP_ORDER) < 0 && s.compare(EC_GROUP_ORDER) < 0;
    }
    function assumeCompression(value, pubkey) {
      if (value === void 0 && pubkey !== void 0)
        return __isPointCompressed(pubkey);
      if (value === void 0)
        return true;
      return value;
    }
    function fromBuffer(d2) {
      return new BN(d2);
    }
    function toBuffer(d2) {
      return d2.toArrayLike(Buffer, "be", 32);
    }
    function decodeFrom(P2) {
      return secp256k1.curve.decodePoint(P2);
    }
    function getEncoded(P2, compressed) {
      return Buffer.from(P2._encode(compressed));
    }
    function pointAdd(pA, pB, __compressed) {
      if (!isPoint(pA))
        throw new TypeError(THROW_BAD_POINT);
      if (!isPoint(pB))
        throw new TypeError(THROW_BAD_POINT);
      const a2 = decodeFrom(pA);
      const b2 = decodeFrom(pB);
      const pp = a2.add(b2);
      if (pp.isInfinity())
        return null;
      const compressed = assumeCompression(__compressed, pA);
      return getEncoded(pp, compressed);
    }
    function pointAddScalar(p, tweak, __compressed) {
      if (!isPoint(p))
        throw new TypeError(THROW_BAD_POINT);
      if (!isOrderScalar(tweak))
        throw new TypeError(THROW_BAD_TWEAK);
      const compressed = assumeCompression(__compressed, p);
      const pp = decodeFrom(p);
      if (tweak.compare(ZERO32) === 0)
        return getEncoded(pp, compressed);
      const tt = fromBuffer(tweak);
      const qq = G.mul(tt);
      const uu = pp.add(qq);
      if (uu.isInfinity())
        return null;
      return getEncoded(uu, compressed);
    }
    function pointCompress(p, __compressed) {
      if (!isPoint(p))
        throw new TypeError(THROW_BAD_POINT);
      const pp = decodeFrom(p);
      if (pp.isInfinity())
        throw new TypeError(THROW_BAD_POINT);
      const compressed = assumeCompression(__compressed, p);
      return getEncoded(pp, compressed);
    }
    function pointFromScalar(d2, __compressed) {
      if (!isPrivate(d2))
        throw new TypeError(THROW_BAD_PRIVATE);
      const dd = fromBuffer(d2);
      const pp = G.mul(dd);
      if (pp.isInfinity())
        return null;
      const compressed = assumeCompression(__compressed);
      return getEncoded(pp, compressed);
    }
    function pointMultiply(p, tweak, __compressed) {
      if (!isPoint(p))
        throw new TypeError(THROW_BAD_POINT);
      if (!isOrderScalar(tweak))
        throw new TypeError(THROW_BAD_TWEAK);
      const compressed = assumeCompression(__compressed, p);
      const pp = decodeFrom(p);
      const tt = fromBuffer(tweak);
      const qq = pp.mul(tt);
      if (qq.isInfinity())
        return null;
      return getEncoded(qq, compressed);
    }
    function privateAdd(d2, tweak) {
      if (!isPrivate(d2))
        throw new TypeError(THROW_BAD_PRIVATE);
      if (!isOrderScalar(tweak))
        throw new TypeError(THROW_BAD_TWEAK);
      const dd = fromBuffer(d2);
      const tt = fromBuffer(tweak);
      const dt = toBuffer(dd.add(tt).umod(n));
      if (!isPrivate(dt))
        return null;
      return dt;
    }
    function privateSub(d2, tweak) {
      if (!isPrivate(d2))
        throw new TypeError(THROW_BAD_PRIVATE);
      if (!isOrderScalar(tweak))
        throw new TypeError(THROW_BAD_TWEAK);
      const dd = fromBuffer(d2);
      const tt = fromBuffer(tweak);
      const dt = toBuffer(dd.sub(tt).umod(n));
      if (!isPrivate(dt))
        return null;
      return dt;
    }
    function sign(hash, x) {
      return __sign(hash, x);
    }
    function signWithEntropy(hash, x, addData) {
      return __sign(hash, x, addData);
    }
    function __sign(hash, x, addData) {
      if (!isScalar(hash))
        throw new TypeError(THROW_BAD_HASH);
      if (!isPrivate(x))
        throw new TypeError(THROW_BAD_PRIVATE);
      if (addData !== void 0 && !isScalar(addData))
        throw new TypeError(THROW_BAD_EXTRA_DATA);
      const d2 = fromBuffer(x);
      const e2 = fromBuffer(hash);
      let r, s;
      const checkSig = function(k) {
        const kI = fromBuffer(k);
        const Q = G.mul(kI);
        if (Q.isInfinity())
          return false;
        r = Q.x.umod(n);
        if (r.isZero() === 0)
          return false;
        s = kI.invm(n).mul(e2.add(d2.mul(r))).umod(n);
        if (s.isZero() === 0)
          return false;
        return true;
      };
      deterministicGenerateK(hash, x, checkSig, isPrivate, addData);
      if (s.cmp(nDiv2) > 0) {
        s = n.sub(s);
      }
      const buffer = Buffer.allocUnsafe(64);
      toBuffer(r).copy(buffer, 0);
      toBuffer(s).copy(buffer, 32);
      return buffer;
    }
    function verify(hash, q, signature, strict) {
      if (!isScalar(hash))
        throw new TypeError(THROW_BAD_HASH);
      if (!isPoint(q))
        throw new TypeError(THROW_BAD_POINT);
      if (!isSignature(signature))
        throw new TypeError(THROW_BAD_SIGNATURE);
      const Q = decodeFrom(q);
      const r = fromBuffer(signature.slice(0, 32));
      const s = fromBuffer(signature.slice(32, 64));
      if (strict && s.cmp(nDiv2) > 0) {
        return false;
      }
      if (r.gtn(0) <= 0)
        return false;
      if (s.gtn(0) <= 0)
        return false;
      const e2 = fromBuffer(hash);
      const sInv = s.invm(n);
      const u1 = e2.mul(sInv).umod(n);
      const u2 = r.mul(sInv).umod(n);
      const R = G.mulAdd(u1, Q, u2);
      if (R.isInfinity())
        return false;
      const xR = R.x;
      const v = xR.umod(n);
      return v.eq(r);
    }
    module2.exports = {
      isPoint,
      isPointCompressed,
      isPrivate,
      pointAdd,
      pointAddScalar,
      pointCompress,
      pointFromScalar,
      pointMultiply,
      privateAdd,
      privateSub,
      sign,
      signWithEntropy,
      verify
    };
  }
});

// node_modules/typeforce/native.js
var require_native = __commonJS({
  "node_modules/typeforce/native.js"(exports2, module2) {
    init_define_process_env();
    var types = {
      Array: function(value) {
        return value !== null && value !== void 0 && value.constructor === Array;
      },
      Boolean: function(value) {
        return typeof value === "boolean";
      },
      Function: function(value) {
        return typeof value === "function";
      },
      Nil: function(value) {
        return value === void 0 || value === null;
      },
      Number: function(value) {
        return typeof value === "number";
      },
      Object: function(value) {
        return typeof value === "object";
      },
      String: function(value) {
        return typeof value === "string";
      },
      "": function() {
        return true;
      }
    };
    types.Null = types.Nil;
    for (typeName in types) {
      types[typeName].toJSON = function(t) {
        return t;
      }.bind(null, typeName);
    }
    var typeName;
    module2.exports = types;
  }
});

// node_modules/typeforce/errors.js
var require_errors = __commonJS({
  "node_modules/typeforce/errors.js"(exports2, module2) {
    init_define_process_env();
    var native = require_native();
    function getTypeName(fn) {
      return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
    }
    function getValueTypeName(value) {
      return native.Nil(value) ? "" : getTypeName(value.constructor);
    }
    function getValue(value) {
      if (native.Function(value))
        return "";
      if (native.String(value))
        return JSON.stringify(value);
      if (value && native.Object(value))
        return "";
      return value;
    }
    function captureStackTrace(e2, t) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(e2, t);
      }
    }
    function tfJSON(type) {
      if (native.Function(type))
        return type.toJSON ? type.toJSON() : getTypeName(type);
      if (native.Array(type))
        return "Array";
      if (type && native.Object(type))
        return "Object";
      return type !== void 0 ? type : "";
    }
    function tfErrorString(type, value, valueTypeName) {
      var valueJson = getValue(value);
      return "Expected " + tfJSON(type) + ", got" + (valueTypeName !== "" ? " " + valueTypeName : "") + (valueJson !== "" ? " " + valueJson : "");
    }
    function TfTypeError(type, value, valueTypeName) {
      valueTypeName = valueTypeName || getValueTypeName(value);
      this.message = tfErrorString(type, value, valueTypeName);
      captureStackTrace(this, TfTypeError);
      this.__type = type;
      this.__value = value;
      this.__valueTypeName = valueTypeName;
    }
    TfTypeError.prototype = Object.create(Error.prototype);
    TfTypeError.prototype.constructor = TfTypeError;
    function tfPropertyErrorString(type, label, name, value, valueTypeName) {
      var description = '" of type ';
      if (label === "key")
        description = '" with key type ';
      return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
    }
    function TfPropertyTypeError(type, property, label, value, valueTypeName) {
      if (type) {
        valueTypeName = valueTypeName || getValueTypeName(value);
        this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
      } else {
        this.message = 'Unexpected property "' + property + '"';
      }
      captureStackTrace(this, TfTypeError);
      this.__label = label;
      this.__property = property;
      this.__type = type;
      this.__value = value;
      this.__valueTypeName = valueTypeName;
    }
    TfPropertyTypeError.prototype = Object.create(Error.prototype);
    TfPropertyTypeError.prototype.constructor = TfTypeError;
    function tfCustomError(expected, actual) {
      return new TfTypeError(expected, {}, actual);
    }
    function tfSubError(e2, property, label) {
      if (e2 instanceof TfPropertyTypeError) {
        property = property + "." + e2.__property;
        e2 = new TfPropertyTypeError(e2.__type, property, e2.__label, e2.__value, e2.__valueTypeName);
      } else if (e2 instanceof TfTypeError) {
        e2 = new TfPropertyTypeError(e2.__type, property, label, e2.__value, e2.__valueTypeName);
      }
      captureStackTrace(e2);
      return e2;
    }
    module2.exports = {
      TfTypeError,
      TfPropertyTypeError,
      tfCustomError,
      tfSubError,
      tfJSON,
      getValueTypeName
    };
  }
});

// node_modules/typeforce/extra.js
var require_extra = __commonJS({
  "node_modules/typeforce/extra.js"(exports2, module2) {
    init_define_process_env();
    var NATIVE = require_native();
    var ERRORS = require_errors();
    function _Buffer(value) {
      return Buffer.isBuffer(value);
    }
    function Hex(value) {
      return typeof value === "string" && /^([0-9a-f]{2})+$/i.test(value);
    }
    function _LengthN(type, length) {
      var name = type.toJSON();
      function Length(value) {
        if (!type(value))
          return false;
        if (value.length === length)
          return true;
        throw ERRORS.tfCustomError(name + "(Length: " + length + ")", name + "(Length: " + value.length + ")");
      }
      Length.toJSON = function() {
        return name;
      };
      return Length;
    }
    var _ArrayN = _LengthN.bind(null, NATIVE.Array);
    var _BufferN = _LengthN.bind(null, _Buffer);
    var _HexN = _LengthN.bind(null, Hex);
    var _StringN = _LengthN.bind(null, NATIVE.String);
    function Range(a2, b2, f2) {
      f2 = f2 || NATIVE.Number;
      function _range(value, strict) {
        return f2(value, strict) && value > a2 && value < b2;
      }
      _range.toJSON = function() {
        return `${f2.toJSON()} between [${a2}, ${b2}]`;
      };
      return _range;
    }
    var INT53_MAX = Math.pow(2, 53) - 1;
    function Finite(value) {
      return typeof value === "number" && isFinite(value);
    }
    function Int8(value) {
      return value << 24 >> 24 === value;
    }
    function Int16(value) {
      return value << 16 >> 16 === value;
    }
    function Int32(value) {
      return (value | 0) === value;
    }
    function Int53(value) {
      return typeof value === "number" && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;
    }
    function UInt8(value) {
      return (value & 255) === value;
    }
    function UInt16(value) {
      return (value & 65535) === value;
    }
    function UInt32(value) {
      return value >>> 0 === value;
    }
    function UInt53(value) {
      return typeof value === "number" && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
    }
    var types = {
      ArrayN: _ArrayN,
      Buffer: _Buffer,
      BufferN: _BufferN,
      Finite,
      Hex,
      HexN: _HexN,
      Int8,
      Int16,
      Int32,
      Int53,
      Range,
      StringN: _StringN,
      UInt8,
      UInt16,
      UInt32,
      UInt53
    };
    for (typeName in types) {
      types[typeName].toJSON = function(t) {
        return t;
      }.bind(null, typeName);
    }
    var typeName;
    module2.exports = types;
  }
});

// node_modules/typeforce/index.js
var require_typeforce = __commonJS({
  "node_modules/typeforce/index.js"(exports2, module2) {
    init_define_process_env();
    var ERRORS = require_errors();
    var NATIVE = require_native();
    var tfJSON = ERRORS.tfJSON;
    var TfTypeError = ERRORS.TfTypeError;
    var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
    var tfSubError = ERRORS.tfSubError;
    var getValueTypeName = ERRORS.getValueTypeName;
    var TYPES = {
      arrayOf: function arrayOf(type, options) {
        type = compile(type);
        options = options || {};
        function _arrayOf(array, strict) {
          if (!NATIVE.Array(array))
            return false;
          if (NATIVE.Nil(array))
            return false;
          if (options.minLength !== void 0 && array.length < options.minLength)
            return false;
          if (options.maxLength !== void 0 && array.length > options.maxLength)
            return false;
          if (options.length !== void 0 && array.length !== options.length)
            return false;
          return array.every(function(value, i) {
            try {
              return typeforce(type, value, strict);
            } catch (e2) {
              throw tfSubError(e2, i);
            }
          });
        }
        _arrayOf.toJSON = function() {
          var str = "[" + tfJSON(type) + "]";
          if (options.length !== void 0) {
            str += "{" + options.length + "}";
          } else if (options.minLength !== void 0 || options.maxLength !== void 0) {
            str += "{" + (options.minLength === void 0 ? 0 : options.minLength) + "," + (options.maxLength === void 0 ? Infinity : options.maxLength) + "}";
          }
          return str;
        };
        return _arrayOf;
      },
      maybe: function maybe(type) {
        type = compile(type);
        function _maybe(value, strict) {
          return NATIVE.Nil(value) || type(value, strict, maybe);
        }
        _maybe.toJSON = function() {
          return "?" + tfJSON(type);
        };
        return _maybe;
      },
      map: function map(propertyType, propertyKeyType) {
        propertyType = compile(propertyType);
        if (propertyKeyType)
          propertyKeyType = compile(propertyKeyType);
        function _map(value, strict) {
          if (!NATIVE.Object(value))
            return false;
          if (NATIVE.Nil(value))
            return false;
          for (var propertyName in value) {
            try {
              if (propertyKeyType) {
                typeforce(propertyKeyType, propertyName, strict);
              }
            } catch (e2) {
              throw tfSubError(e2, propertyName, "key");
            }
            try {
              var propertyValue = value[propertyName];
              typeforce(propertyType, propertyValue, strict);
            } catch (e2) {
              throw tfSubError(e2, propertyName);
            }
          }
          return true;
        }
        if (propertyKeyType) {
          _map.toJSON = function() {
            return "{" + tfJSON(propertyKeyType) + ": " + tfJSON(propertyType) + "}";
          };
        } else {
          _map.toJSON = function() {
            return "{" + tfJSON(propertyType) + "}";
          };
        }
        return _map;
      },
      object: function object(uncompiled) {
        var type = {};
        for (var typePropertyName in uncompiled) {
          type[typePropertyName] = compile(uncompiled[typePropertyName]);
        }
        function _object(value, strict) {
          if (!NATIVE.Object(value))
            return false;
          if (NATIVE.Nil(value))
            return false;
          var propertyName;
          try {
            for (propertyName in type) {
              var propertyType = type[propertyName];
              var propertyValue = value[propertyName];
              typeforce(propertyType, propertyValue, strict);
            }
          } catch (e2) {
            throw tfSubError(e2, propertyName);
          }
          if (strict) {
            for (propertyName in value) {
              if (type[propertyName])
                continue;
              throw new TfPropertyTypeError(void 0, propertyName);
            }
          }
          return true;
        }
        _object.toJSON = function() {
          return tfJSON(type);
        };
        return _object;
      },
      anyOf: function anyOf() {
        var types = [].slice.call(arguments).map(compile);
        function _anyOf(value, strict) {
          return types.some(function(type) {
            try {
              return typeforce(type, value, strict);
            } catch (e2) {
              return false;
            }
          });
        }
        _anyOf.toJSON = function() {
          return types.map(tfJSON).join("|");
        };
        return _anyOf;
      },
      allOf: function allOf() {
        var types = [].slice.call(arguments).map(compile);
        function _allOf(value, strict) {
          return types.every(function(type) {
            try {
              return typeforce(type, value, strict);
            } catch (e2) {
              return false;
            }
          });
        }
        _allOf.toJSON = function() {
          return types.map(tfJSON).join(" & ");
        };
        return _allOf;
      },
      quacksLike: function quacksLike(type) {
        function _quacksLike(value) {
          return type === getValueTypeName(value);
        }
        _quacksLike.toJSON = function() {
          return type;
        };
        return _quacksLike;
      },
      tuple: function tuple() {
        var types = [].slice.call(arguments).map(compile);
        function _tuple(values, strict) {
          if (NATIVE.Nil(values))
            return false;
          if (NATIVE.Nil(values.length))
            return false;
          if (strict && values.length !== types.length)
            return false;
          return types.every(function(type, i) {
            try {
              return typeforce(type, values[i], strict);
            } catch (e2) {
              throw tfSubError(e2, i);
            }
          });
        }
        _tuple.toJSON = function() {
          return "(" + types.map(tfJSON).join(", ") + ")";
        };
        return _tuple;
      },
      value: function value(expected) {
        function _value(actual) {
          return actual === expected;
        }
        _value.toJSON = function() {
          return expected;
        };
        return _value;
      }
    };
    TYPES.oneOf = TYPES.anyOf;
    function compile(type) {
      if (NATIVE.String(type)) {
        if (type[0] === "?")
          return TYPES.maybe(type.slice(1));
        return NATIVE[type] || TYPES.quacksLike(type);
      } else if (type && NATIVE.Object(type)) {
        if (NATIVE.Array(type)) {
          if (type.length !== 1)
            throw new TypeError("Expected compile() parameter of type Array of length 1");
          return TYPES.arrayOf(type[0]);
        }
        return TYPES.object(type);
      } else if (NATIVE.Function(type)) {
        return type;
      }
      return TYPES.value(type);
    }
    function typeforce(type, value, strict, surrogate) {
      if (NATIVE.Function(type)) {
        if (type(value, strict))
          return true;
        throw new TfTypeError(surrogate || type, value);
      }
      return typeforce(compile(type), value, strict);
    }
    for (typeName in NATIVE) {
      typeforce[typeName] = NATIVE[typeName];
    }
    var typeName;
    for (typeName in TYPES) {
      typeforce[typeName] = TYPES[typeName];
    }
    var EXTRA = require_extra();
    for (typeName in EXTRA) {
      typeforce[typeName] = EXTRA[typeName];
    }
    typeforce.compile = compile;
    typeforce.TfTypeError = TfTypeError;
    typeforce.TfPropertyTypeError = TfPropertyTypeError;
    module2.exports = typeforce;
  }
});

// node_modules/wif/index.js
var require_wif = __commonJS({
  "node_modules/wif/index.js"(exports2, module2) {
    init_define_process_env();
    var bs58check = require_bs58check();
    function decodeRaw(buffer, version) {
      if (version !== void 0 && buffer[0] !== version)
        throw new Error("Invalid network version");
      if (buffer.length === 33) {
        return {
          version: buffer[0],
          privateKey: buffer.slice(1, 33),
          compressed: false
        };
      }
      if (buffer.length !== 34)
        throw new Error("Invalid WIF length");
      if (buffer[33] !== 1)
        throw new Error("Invalid compression flag");
      return {
        version: buffer[0],
        privateKey: buffer.slice(1, 33),
        compressed: true
      };
    }
    function encodeRaw(version, privateKey, compressed) {
      var result = new Buffer(compressed ? 34 : 33);
      result.writeUInt8(version, 0);
      privateKey.copy(result, 1);
      if (compressed) {
        result[33] = 1;
      }
      return result;
    }
    function decode(string, version) {
      return decodeRaw(bs58check.decode(string), version);
    }
    function encode(version, privateKey, compressed) {
      if (typeof version === "number")
        return bs58check.encode(encodeRaw(version, privateKey, compressed));
      return bs58check.encode(encodeRaw(version.version, version.privateKey, version.compressed));
    }
    module2.exports = {
      decode,
      decodeRaw,
      encode,
      encodeRaw
    };
  }
});

// node_modules/bip32/src/bip32.js
var require_bip32 = __commonJS({
  "node_modules/bip32/src/bip32.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var crypto2 = require_crypto();
    var bs58check = require_bs58check();
    var ecc = require_js();
    var typeforce = require_typeforce();
    var wif = require_wif();
    var UINT256_TYPE = typeforce.BufferN(32);
    var NETWORK_TYPE = typeforce.compile({
      wif: typeforce.UInt8,
      bip32: {
        public: typeforce.UInt32,
        private: typeforce.UInt32
      }
    });
    var BITCOIN = {
      messagePrefix: "Bitcoin Signed Message:\n",
      bech32: "bc",
      bip32: {
        public: 76067358,
        private: 76066276
      },
      pubKeyHash: 0,
      scriptHash: 5,
      wif: 128
    };
    var HIGHEST_BIT = 2147483648;
    var UINT31_MAX = Math.pow(2, 31) - 1;
    function BIP32Path(value) {
      return typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
    }
    function UInt31(value) {
      return typeforce.UInt32(value) && value <= UINT31_MAX;
    }
    var BIP32 = class {
      constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0) {
        this.__D = __D;
        this.__Q = __Q;
        this.chainCode = chainCode;
        this.network = network;
        this.__DEPTH = __DEPTH;
        this.__INDEX = __INDEX;
        this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
        typeforce(NETWORK_TYPE, network);
        this.lowR = false;
      }
      get depth() {
        return this.__DEPTH;
      }
      get index() {
        return this.__INDEX;
      }
      get parentFingerprint() {
        return this.__PARENT_FINGERPRINT;
      }
      get publicKey() {
        if (this.__Q === void 0)
          this.__Q = ecc.pointFromScalar(this.__D, true);
        return this.__Q;
      }
      get privateKey() {
        return this.__D;
      }
      get identifier() {
        return crypto2.hash160(this.publicKey);
      }
      get fingerprint() {
        return this.identifier.slice(0, 4);
      }
      get compressed() {
        return true;
      }
      isNeutered() {
        return this.__D === void 0;
      }
      neutered() {
        return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
      }
      toBase58() {
        const network = this.network;
        const version = !this.isNeutered() ? network.bip32.private : network.bip32.public;
        const buffer = Buffer.allocUnsafe(78);
        buffer.writeUInt32BE(version, 0);
        buffer.writeUInt8(this.depth, 4);
        buffer.writeUInt32BE(this.parentFingerprint, 5);
        buffer.writeUInt32BE(this.index, 9);
        this.chainCode.copy(buffer, 13);
        if (!this.isNeutered()) {
          buffer.writeUInt8(0, 45);
          this.privateKey.copy(buffer, 46);
        } else {
          this.publicKey.copy(buffer, 45);
        }
        return bs58check.encode(buffer);
      }
      toWIF() {
        if (!this.privateKey)
          throw new TypeError("Missing private key");
        return wif.encode(this.network.wif, this.privateKey, true);
      }
      derive(index) {
        typeforce(typeforce.UInt32, index);
        const isHardened = index >= HIGHEST_BIT;
        const data = Buffer.allocUnsafe(37);
        if (isHardened) {
          if (this.isNeutered())
            throw new TypeError("Missing private key for hardened child key");
          data[0] = 0;
          this.privateKey.copy(data, 1);
          data.writeUInt32BE(index, 33);
        } else {
          this.publicKey.copy(data, 0);
          data.writeUInt32BE(index, 33);
        }
        const I = crypto2.hmacSHA512(this.chainCode, data);
        const IL = I.slice(0, 32);
        const IR = I.slice(32);
        if (!ecc.isPrivate(IL))
          return this.derive(index + 1);
        let hd;
        if (!this.isNeutered()) {
          const ki = ecc.privateAdd(this.privateKey, IL);
          if (ki == null)
            return this.derive(index + 1);
          hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
        } else {
          const Ki = ecc.pointAddScalar(this.publicKey, IL, true);
          if (Ki === null)
            return this.derive(index + 1);
          hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
        }
        return hd;
      }
      deriveHardened(index) {
        typeforce(UInt31, index);
        return this.derive(index + HIGHEST_BIT);
      }
      derivePath(path) {
        typeforce(BIP32Path, path);
        let splitPath = path.split("/");
        if (splitPath[0] === "m") {
          if (this.parentFingerprint)
            throw new TypeError("Expected master, got child");
          splitPath = splitPath.slice(1);
        }
        return splitPath.reduce((prevHd, indexStr) => {
          let index;
          if (indexStr.slice(-1) === `'`) {
            index = parseInt(indexStr.slice(0, -1), 10);
            return prevHd.deriveHardened(index);
          } else {
            index = parseInt(indexStr, 10);
            return prevHd.derive(index);
          }
        }, this);
      }
      sign(hash, lowR) {
        if (!this.privateKey)
          throw new Error("Missing private key");
        if (lowR === void 0)
          lowR = this.lowR;
        if (lowR === false) {
          return ecc.sign(hash, this.privateKey);
        } else {
          let sig = ecc.sign(hash, this.privateKey);
          const extraData = Buffer.alloc(32, 0);
          let counter = 0;
          while (sig[0] > 127) {
            counter++;
            extraData.writeUIntLE(counter, 0, 6);
            sig = ecc.signWithEntropy(hash, this.privateKey, extraData);
          }
          return sig;
        }
      }
      verify(hash, signature) {
        return ecc.verify(hash, this.publicKey, signature);
      }
    };
    function fromBase58(inString, network) {
      const buffer = bs58check.decode(inString);
      if (buffer.length !== 78)
        throw new TypeError("Invalid buffer length");
      network = network || BITCOIN;
      const version = buffer.readUInt32BE(0);
      if (version !== network.bip32.private && version !== network.bip32.public)
        throw new TypeError("Invalid network version");
      const depth = buffer[4];
      const parentFingerprint = buffer.readUInt32BE(5);
      if (depth === 0) {
        if (parentFingerprint !== 0)
          throw new TypeError("Invalid parent fingerprint");
      }
      const index = buffer.readUInt32BE(9);
      if (depth === 0 && index !== 0)
        throw new TypeError("Invalid index");
      const chainCode = buffer.slice(13, 45);
      let hd;
      if (version === network.bip32.private) {
        if (buffer.readUInt8(45) !== 0)
          throw new TypeError("Invalid private key");
        const k = buffer.slice(46, 78);
        hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);
      } else {
        const X = buffer.slice(45, 78);
        hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
      }
      return hd;
    }
    exports2.fromBase58 = fromBase58;
    function fromPrivateKey(privateKey, chainCode, network) {
      return fromPrivateKeyLocal(privateKey, chainCode, network);
    }
    exports2.fromPrivateKey = fromPrivateKey;
    function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
      typeforce({
        privateKey: UINT256_TYPE,
        chainCode: UINT256_TYPE
      }, { privateKey, chainCode });
      network = network || BITCOIN;
      if (!ecc.isPrivate(privateKey))
        throw new TypeError("Private key not in range [1, n)");
      return new BIP32(privateKey, void 0, chainCode, network, depth, index, parentFingerprint);
    }
    function fromPublicKey(publicKey, chainCode, network) {
      return fromPublicKeyLocal(publicKey, chainCode, network);
    }
    exports2.fromPublicKey = fromPublicKey;
    function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
      typeforce({
        publicKey: typeforce.BufferN(33),
        chainCode: UINT256_TYPE
      }, { publicKey, chainCode });
      network = network || BITCOIN;
      if (!ecc.isPoint(publicKey))
        throw new TypeError("Point is not on the curve");
      return new BIP32(void 0, publicKey, chainCode, network, depth, index, parentFingerprint);
    }
    function fromSeed(seed, network) {
      typeforce(typeforce.Buffer, seed);
      if (seed.length < 16)
        throw new TypeError("Seed should be at least 128 bits");
      if (seed.length > 64)
        throw new TypeError("Seed should be at most 512 bits");
      network = network || BITCOIN;
      const I = crypto2.hmacSHA512(Buffer.from("Bitcoin seed", "utf8"), seed);
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      return fromPrivateKey(IL, IR, network);
    }
    exports2.fromSeed = fromSeed;
  }
});

// node_modules/bip32/src/index.js
var require_src = __commonJS({
  "node_modules/bip32/src/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bip32_1 = require_bip32();
    exports2.fromSeed = bip32_1.fromSeed;
    exports2.fromBase58 = bip32_1.fromBase58;
    exports2.fromPublicKey = bip32_1.fromPublicKey;
    exports2.fromPrivateKey = bip32_1.fromPrivateKey;
  }
});

// node_modules/bip39/src/wordlists/czech.json
var require_czech = __commonJS({
  "node_modules/bip39/src/wordlists/czech.json"(exports2, module2) {
    module2.exports = [
      "abdikace",
      "abeceda",
      "adresa",
      "agrese",
      "akce",
      "aktovka",
      "alej",
      "alkohol",
      "amputace",
      "ananas",
      "andulka",
      "anekdota",
      "anketa",
      "antika",
      "anulovat",
      "archa",
      "arogance",
      "asfalt",
      "asistent",
      "aspirace",
      "astma",
      "astronom",
      "atlas",
      "atletika",
      "atol",
      "autobus",
      "azyl",
      "babka",
      "bachor",
      "bacil",
      "baculka",
      "badatel",
      "bageta",
      "bagr",
      "bahno",
      "bakterie",
      "balada",
      "baletka",
      "balkon",
      "balonek",
      "balvan",
      "balza",
      "bambus",
      "bankomat",
      "barbar",
      "baret",
      "barman",
      "baroko",
      "barva",
      "baterka",
      "batoh",
      "bavlna",
      "bazalka",
      "bazilika",
      "bazuka",
      "bedna",
      "beran",
      "beseda",
      "bestie",
      "beton",
      "bezinka",
      "bezmoc",
      "beztak",
      "bicykl",
      "bidlo",
      "biftek",
      "bikiny",
      "bilance",
      "biograf",
      "biolog",
      "bitva",
      "bizon",
      "blahobyt",
      "blatouch",
      "blecha",
      "bledule",
      "blesk",
      "blikat",
      "blizna",
      "blokovat",
      "bloudit",
      "blud",
      "bobek",
      "bobr",
      "bodlina",
      "bodnout",
      "bohatost",
      "bojkot",
      "bojovat",
      "bokorys",
      "bolest",
      "borec",
      "borovice",
      "bota",
      "boubel",
      "bouchat",
      "bouda",
      "boule",
      "bourat",
      "boxer",
      "bradavka",
      "brambora",
      "branka",
      "bratr",
      "brepta",
      "briketa",
      "brko",
      "brloh",
      "bronz",
      "broskev",
      "brunetka",
      "brusinka",
      "brzda",
      "brzy",
      "bublina",
      "bubnovat",
      "buchta",
      "buditel",
      "budka",
      "budova",
      "bufet",
      "bujarost",
      "bukvice",
      "buldok",
      "bulva",
      "bunda",
      "bunkr",
      "burza",
      "butik",
      "buvol",
      "buzola",
      "bydlet",
      "bylina",
      "bytovka",
      "bzukot",
      "capart",
      "carevna",
      "cedr",
      "cedule",
      "cejch",
      "cejn",
      "cela",
      "celer",
      "celkem",
      "celnice",
      "cenina",
      "cennost",
      "cenovka",
      "centrum",
      "cenzor",
      "cestopis",
      "cetka",
      "chalupa",
      "chapadlo",
      "charita",
      "chata",
      "chechtat",
      "chemie",
      "chichot",
      "chirurg",
      "chlad",
      "chleba",
      "chlubit",
      "chmel",
      "chmura",
      "chobot",
      "chochol",
      "chodba",
      "cholera",
      "chomout",
      "chopit",
      "choroba",
      "chov",
      "chrapot",
      "chrlit",
      "chrt",
      "chrup",
      "chtivost",
      "chudina",
      "chutnat",
      "chvat",
      "chvilka",
      "chvost",
      "chyba",
      "chystat",
      "chytit",
      "cibule",
      "cigareta",
      "cihelna",
      "cihla",
      "cinkot",
      "cirkus",
      "cisterna",
      "citace",
      "citrus",
      "cizinec",
      "cizost",
      "clona",
      "cokoliv",
      "couvat",
      "ctitel",
      "ctnost",
      "cudnost",
      "cuketa",
      "cukr",
      "cupot",
      "cvaknout",
      "cval",
      "cvik",
      "cvrkot",
      "cyklista",
      "daleko",
      "dareba",
      "datel",
      "datum",
      "dcera",
      "debata",
      "dechovka",
      "decibel",
      "deficit",
      "deflace",
      "dekl",
      "dekret",
      "demokrat",
      "deprese",
      "derby",
      "deska",
      "detektiv",
      "dikobraz",
      "diktovat",
      "dioda",
      "diplom",
      "disk",
      "displej",
      "divadlo",
      "divoch",
      "dlaha",
      "dlouho",
      "dluhopis",
      "dnes",
      "dobro",
      "dobytek",
      "docent",
      "dochutit",
      "dodnes",
      "dohled",
      "dohoda",
      "dohra",
      "dojem",
      "dojnice",
      "doklad",
      "dokola",
      "doktor",
      "dokument",
      "dolar",
      "doleva",
      "dolina",
      "doma",
      "dominant",
      "domluvit",
      "domov",
      "donutit",
      "dopad",
      "dopis",
      "doplnit",
      "doposud",
      "doprovod",
      "dopustit",
      "dorazit",
      "dorost",
      "dort",
      "dosah",
      "doslov",
      "dostatek",
      "dosud",
      "dosyta",
      "dotaz",
      "dotek",
      "dotknout",
      "doufat",
      "doutnat",
      "dovozce",
      "dozadu",
      "doznat",
      "dozorce",
      "drahota",
      "drak",
      "dramatik",
      "dravec",
      "draze",
      "drdol",
      "drobnost",
      "drogerie",
      "drozd",
      "drsnost",
      "drtit",
      "drzost",
      "duben",
      "duchovno",
      "dudek",
      "duha",
      "duhovka",
      "dusit",
      "dusno",
      "dutost",
      "dvojice",
      "dvorec",
      "dynamit",
      "ekolog",
      "ekonomie",
      "elektron",
      "elipsa",
      "email",
      "emise",
      "emoce",
      "empatie",
      "epizoda",
      "epocha",
      "epopej",
      "epos",
      "esej",
      "esence",
      "eskorta",
      "eskymo",
      "etiketa",
      "euforie",
      "evoluce",
      "exekuce",
      "exkurze",
      "expedice",
      "exploze",
      "export",
      "extrakt",
      "facka",
      "fajfka",
      "fakulta",
      "fanatik",
      "fantazie",
      "farmacie",
      "favorit",
      "fazole",
      "federace",
      "fejeton",
      "fenka",
      "fialka",
      "figurant",
      "filozof",
      "filtr",
      "finance",
      "finta",
      "fixace",
      "fjord",
      "flanel",
      "flirt",
      "flotila",
      "fond",
      "fosfor",
      "fotbal",
      "fotka",
      "foton",
      "frakce",
      "freska",
      "fronta",
      "fukar",
      "funkce",
      "fyzika",
      "galeje",
      "garant",
      "genetika",
      "geolog",
      "gilotina",
      "glazura",
      "glejt",
      "golem",
      "golfista",
      "gotika",
      "graf",
      "gramofon",
      "granule",
      "grep",
      "gril",
      "grog",
      "groteska",
      "guma",
      "hadice",
      "hadr",
      "hala",
      "halenka",
      "hanba",
      "hanopis",
      "harfa",
      "harpuna",
      "havran",
      "hebkost",
      "hejkal",
      "hejno",
      "hejtman",
      "hektar",
      "helma",
      "hematom",
      "herec",
      "herna",
      "heslo",
      "hezky",
      "historik",
      "hladovka",
      "hlasivky",
      "hlava",
      "hledat",
      "hlen",
      "hlodavec",
      "hloh",
      "hloupost",
      "hltat",
      "hlubina",
      "hluchota",
      "hmat",
      "hmota",
      "hmyz",
      "hnis",
      "hnojivo",
      "hnout",
      "hoblina",
      "hoboj",
      "hoch",
      "hodiny",
      "hodlat",
      "hodnota",
      "hodovat",
      "hojnost",
      "hokej",
      "holinka",
      "holka",
      "holub",
      "homole",
      "honitba",
      "honorace",
      "horal",
      "horda",
      "horizont",
      "horko",
      "horlivec",
      "hormon",
      "hornina",
      "horoskop",
      "horstvo",
      "hospoda",
      "hostina",
      "hotovost",
      "houba",
      "houf",
      "houpat",
      "houska",
      "hovor",
      "hradba",
      "hranice",
      "hravost",
      "hrazda",
      "hrbolek",
      "hrdina",
      "hrdlo",
      "hrdost",
      "hrnek",
      "hrobka",
      "hromada",
      "hrot",
      "hrouda",
      "hrozen",
      "hrstka",
      "hrubost",
      "hryzat",
      "hubenost",
      "hubnout",
      "hudba",
      "hukot",
      "humr",
      "husita",
      "hustota",
      "hvozd",
      "hybnost",
      "hydrant",
      "hygiena",
      "hymna",
      "hysterik",
      "idylka",
      "ihned",
      "ikona",
      "iluze",
      "imunita",
      "infekce",
      "inflace",
      "inkaso",
      "inovace",
      "inspekce",
      "internet",
      "invalida",
      "investor",
      "inzerce",
      "ironie",
      "jablko",
      "jachta",
      "jahoda",
      "jakmile",
      "jakost",
      "jalovec",
      "jantar",
      "jarmark",
      "jaro",
      "jasan",
      "jasno",
      "jatka",
      "javor",
      "jazyk",
      "jedinec",
      "jedle",
      "jednatel",
      "jehlan",
      "jekot",
      "jelen",
      "jelito",
      "jemnost",
      "jenom",
      "jepice",
      "jeseter",
      "jevit",
      "jezdec",
      "jezero",
      "jinak",
      "jindy",
      "jinoch",
      "jiskra",
      "jistota",
      "jitrnice",
      "jizva",
      "jmenovat",
      "jogurt",
      "jurta",
      "kabaret",
      "kabel",
      "kabinet",
      "kachna",
      "kadet",
      "kadidlo",
      "kahan",
      "kajak",
      "kajuta",
      "kakao",
      "kaktus",
      "kalamita",
      "kalhoty",
      "kalibr",
      "kalnost",
      "kamera",
      "kamkoliv",
      "kamna",
      "kanibal",
      "kanoe",
      "kantor",
      "kapalina",
      "kapela",
      "kapitola",
      "kapka",
      "kaple",
      "kapota",
      "kapr",
      "kapusta",
      "kapybara",
      "karamel",
      "karotka",
      "karton",
      "kasa",
      "katalog",
      "katedra",
      "kauce",
      "kauza",
      "kavalec",
      "kazajka",
      "kazeta",
      "kazivost",
      "kdekoliv",
      "kdesi",
      "kedluben",
      "kemp",
      "keramika",
      "kino",
      "klacek",
      "kladivo",
      "klam",
      "klapot",
      "klasika",
      "klaun",
      "klec",
      "klenba",
      "klepat",
      "klesnout",
      "klid",
      "klima",
      "klisna",
      "klobouk",
      "klokan",
      "klopa",
      "kloub",
      "klubovna",
      "klusat",
      "kluzkost",
      "kmen",
      "kmitat",
      "kmotr",
      "kniha",
      "knot",
      "koalice",
      "koberec",
      "kobka",
      "kobliha",
      "kobyla",
      "kocour",
      "kohout",
      "kojenec",
      "kokos",
      "koktejl",
      "kolaps",
      "koleda",
      "kolize",
      "kolo",
      "komando",
      "kometa",
      "komik",
      "komnata",
      "komora",
      "kompas",
      "komunita",
      "konat",
      "koncept",
      "kondice",
      "konec",
      "konfese",
      "kongres",
      "konina",
      "konkurs",
      "kontakt",
      "konzerva",
      "kopanec",
      "kopie",
      "kopnout",
      "koprovka",
      "korbel",
      "korektor",
      "kormidlo",
      "koroptev",
      "korpus",
      "koruna",
      "koryto",
      "korzet",
      "kosatec",
      "kostka",
      "kotel",
      "kotleta",
      "kotoul",
      "koukat",
      "koupelna",
      "kousek",
      "kouzlo",
      "kovboj",
      "koza",
      "kozoroh",
      "krabice",
      "krach",
      "krajina",
      "kralovat",
      "krasopis",
      "kravata",
      "kredit",
      "krejcar",
      "kresba",
      "kreveta",
      "kriket",
      "kritik",
      "krize",
      "krkavec",
      "krmelec",
      "krmivo",
      "krocan",
      "krok",
      "kronika",
      "kropit",
      "kroupa",
      "krovka",
      "krtek",
      "kruhadlo",
      "krupice",
      "krutost",
      "krvinka",
      "krychle",
      "krypta",
      "krystal",
      "kryt",
      "kudlanka",
      "kufr",
      "kujnost",
      "kukla",
      "kulajda",
      "kulich",
      "kulka",
      "kulomet",
      "kultura",
      "kuna",
      "kupodivu",
      "kurt",
      "kurzor",
      "kutil",
      "kvalita",
      "kvasinka",
      "kvestor",
      "kynolog",
      "kyselina",
      "kytara",
      "kytice",
      "kytka",
      "kytovec",
      "kyvadlo",
      "labrador",
      "lachtan",
      "ladnost",
      "laik",
      "lakomec",
      "lamela",
      "lampa",
      "lanovka",
      "lasice",
      "laso",
      "lastura",
      "latinka",
      "lavina",
      "lebka",
      "leckdy",
      "leden",
      "lednice",
      "ledovka",
      "ledvina",
      "legenda",
      "legie",
      "legrace",
      "lehce",
      "lehkost",
      "lehnout",
      "lektvar",
      "lenochod",
      "lentilka",
      "lepenka",
      "lepidlo",
      "letadlo",
      "letec",
      "letmo",
      "letokruh",
      "levhart",
      "levitace",
      "levobok",
      "libra",
      "lichotka",
      "lidojed",
      "lidskost",
      "lihovina",
      "lijavec",
      "lilek",
      "limetka",
      "linie",
      "linka",
      "linoleum",
      "listopad",
      "litina",
      "litovat",
      "lobista",
      "lodivod",
      "logika",
      "logoped",
      "lokalita",
      "loket",
      "lomcovat",
      "lopata",
      "lopuch",
      "lord",
      "losos",
      "lotr",
      "loudal",
      "louh",
      "louka",
      "louskat",
      "lovec",
      "lstivost",
      "lucerna",
      "lucifer",
      "lump",
      "lusk",
      "lustrace",
      "lvice",
      "lyra",
      "lyrika",
      "lysina",
      "madam",
      "madlo",
      "magistr",
      "mahagon",
      "majetek",
      "majitel",
      "majorita",
      "makak",
      "makovice",
      "makrela",
      "malba",
      "malina",
      "malovat",
      "malvice",
      "maminka",
      "mandle",
      "manko",
      "marnost",
      "masakr",
      "maskot",
      "masopust",
      "matice",
      "matrika",
      "maturita",
      "mazanec",
      "mazivo",
      "mazlit",
      "mazurka",
      "mdloba",
      "mechanik",
      "meditace",
      "medovina",
      "melasa",
      "meloun",
      "mentolka",
      "metla",
      "metoda",
      "metr",
      "mezera",
      "migrace",
      "mihnout",
      "mihule",
      "mikina",
      "mikrofon",
      "milenec",
      "milimetr",
      "milost",
      "mimika",
      "mincovna",
      "minibar",
      "minomet",
      "minulost",
      "miska",
      "mistr",
      "mixovat",
      "mladost",
      "mlha",
      "mlhovina",
      "mlok",
      "mlsat",
      "mluvit",
      "mnich",
      "mnohem",
      "mobil",
      "mocnost",
      "modelka",
      "modlitba",
      "mohyla",
      "mokro",
      "molekula",
      "momentka",
      "monarcha",
      "monokl",
      "monstrum",
      "montovat",
      "monzun",
      "mosaz",
      "moskyt",
      "most",
      "motivace",
      "motorka",
      "motyka",
      "moucha",
      "moudrost",
      "mozaika",
      "mozek",
      "mozol",
      "mramor",
      "mravenec",
      "mrkev",
      "mrtvola",
      "mrzet",
      "mrzutost",
      "mstitel",
      "mudrc",
      "muflon",
      "mulat",
      "mumie",
      "munice",
      "muset",
      "mutace",
      "muzeum",
      "muzikant",
      "myslivec",
      "mzda",
      "nabourat",
      "nachytat",
      "nadace",
      "nadbytek",
      "nadhoz",
      "nadobro",
      "nadpis",
      "nahlas",
      "nahnat",
      "nahodile",
      "nahradit",
      "naivita",
      "najednou",
      "najisto",
      "najmout",
      "naklonit",
      "nakonec",
      "nakrmit",
      "nalevo",
      "namazat",
      "namluvit",
      "nanometr",
      "naoko",
      "naopak",
      "naostro",
      "napadat",
      "napevno",
      "naplnit",
      "napnout",
      "naposled",
      "naprosto",
      "narodit",
      "naruby",
      "narychlo",
      "nasadit",
      "nasekat",
      "naslepo",
      "nastat",
      "natolik",
      "navenek",
      "navrch",
      "navzdory",
      "nazvat",
      "nebe",
      "nechat",
      "necky",
      "nedaleko",
      "nedbat",
      "neduh",
      "negace",
      "nehet",
      "nehoda",
      "nejen",
      "nejprve",
      "neklid",
      "nelibost",
      "nemilost",
      "nemoc",
      "neochota",
      "neonka",
      "nepokoj",
      "nerost",
      "nerv",
      "nesmysl",
      "nesoulad",
      "netvor",
      "neuron",
      "nevina",
      "nezvykle",
      "nicota",
      "nijak",
      "nikam",
      "nikdy",
      "nikl",
      "nikterak",
      "nitro",
      "nocleh",
      "nohavice",
      "nominace",
      "nora",
      "norek",
      "nositel",
      "nosnost",
      "nouze",
      "noviny",
      "novota",
      "nozdra",
      "nuda",
      "nudle",
      "nuget",
      "nutit",
      "nutnost",
      "nutrie",
      "nymfa",
      "obal",
      "obarvit",
      "obava",
      "obdiv",
      "obec",
      "obehnat",
      "obejmout",
      "obezita",
      "obhajoba",
      "obilnice",
      "objasnit",
      "objekt",
      "obklopit",
      "oblast",
      "oblek",
      "obliba",
      "obloha",
      "obluda",
      "obnos",
      "obohatit",
      "obojek",
      "obout",
      "obrazec",
      "obrna",
      "obruba",
      "obrys",
      "obsah",
      "obsluha",
      "obstarat",
      "obuv",
      "obvaz",
      "obvinit",
      "obvod",
      "obvykle",
      "obyvatel",
      "obzor",
      "ocas",
      "ocel",
      "ocenit",
      "ochladit",
      "ochota",
      "ochrana",
      "ocitnout",
      "odboj",
      "odbyt",
      "odchod",
      "odcizit",
      "odebrat",
      "odeslat",
      "odevzdat",
      "odezva",
      "odhadce",
      "odhodit",
      "odjet",
      "odjinud",
      "odkaz",
      "odkoupit",
      "odliv",
      "odluka",
      "odmlka",
      "odolnost",
      "odpad",
      "odpis",
      "odplout",
      "odpor",
      "odpustit",
      "odpykat",
      "odrazka",
      "odsoudit",
      "odstup",
      "odsun",
      "odtok",
      "odtud",
      "odvaha",
      "odveta",
      "odvolat",
      "odvracet",
      "odznak",
      "ofina",
      "ofsajd",
      "ohlas",
      "ohnisko",
      "ohrada",
      "ohrozit",
      "ohryzek",
      "okap",
      "okenice",
      "oklika",
      "okno",
      "okouzlit",
      "okovy",
      "okrasa",
      "okres",
      "okrsek",
      "okruh",
      "okupant",
      "okurka",
      "okusit",
      "olejnina",
      "olizovat",
      "omak",
      "omeleta",
      "omezit",
      "omladina",
      "omlouvat",
      "omluva",
      "omyl",
      "onehdy",
      "opakovat",
      "opasek",
      "operace",
      "opice",
      "opilost",
      "opisovat",
      "opora",
      "opozice",
      "opravdu",
      "oproti",
      "orbital",
      "orchestr",
      "orgie",
      "orlice",
      "orloj",
      "ortel",
      "osada",
      "oschnout",
      "osika",
      "osivo",
      "oslava",
      "oslepit",
      "oslnit",
      "oslovit",
      "osnova",
      "osoba",
      "osolit",
      "ospalec",
      "osten",
      "ostraha",
      "ostuda",
      "ostych",
      "osvojit",
      "oteplit",
      "otisk",
      "otop",
      "otrhat",
      "otrlost",
      "otrok",
      "otruby",
      "otvor",
      "ovanout",
      "ovar",
      "oves",
      "ovlivnit",
      "ovoce",
      "oxid",
      "ozdoba",
      "pachatel",
      "pacient",
      "padouch",
      "pahorek",
      "pakt",
      "palanda",
      "palec",
      "palivo",
      "paluba",
      "pamflet",
      "pamlsek",
      "panenka",
      "panika",
      "panna",
      "panovat",
      "panstvo",
      "pantofle",
      "paprika",
      "parketa",
      "parodie",
      "parta",
      "paruka",
      "paryba",
      "paseka",
      "pasivita",
      "pastelka",
      "patent",
      "patrona",
      "pavouk",
      "pazneht",
      "pazourek",
      "pecka",
      "pedagog",
      "pejsek",
      "peklo",
      "peloton",
      "penalta",
      "pendrek",
      "penze",
      "periskop",
      "pero",
      "pestrost",
      "petarda",
      "petice",
      "petrolej",
      "pevnina",
      "pexeso",
      "pianista",
      "piha",
      "pijavice",
      "pikle",
      "piknik",
      "pilina",
      "pilnost",
      "pilulka",
      "pinzeta",
      "pipeta",
      "pisatel",
      "pistole",
      "pitevna",
      "pivnice",
      "pivovar",
      "placenta",
      "plakat",
      "plamen",
      "planeta",
      "plastika",
      "platit",
      "plavidlo",
      "plaz",
      "plech",
      "plemeno",
      "plenta",
      "ples",
      "pletivo",
      "plevel",
      "plivat",
      "plnit",
      "plno",
      "plocha",
      "plodina",
      "plomba",
      "plout",
      "pluk",
      "plyn",
      "pobavit",
      "pobyt",
      "pochod",
      "pocit",
      "poctivec",
      "podat",
      "podcenit",
      "podepsat",
      "podhled",
      "podivit",
      "podklad",
      "podmanit",
      "podnik",
      "podoba",
      "podpora",
      "podraz",
      "podstata",
      "podvod",
      "podzim",
      "poezie",
      "pohanka",
      "pohnutka",
      "pohovor",
      "pohroma",
      "pohyb",
      "pointa",
      "pojistka",
      "pojmout",
      "pokazit",
      "pokles",
      "pokoj",
      "pokrok",
      "pokuta",
      "pokyn",
      "poledne",
      "polibek",
      "polknout",
      "poloha",
      "polynom",
      "pomalu",
      "pominout",
      "pomlka",
      "pomoc",
      "pomsta",
      "pomyslet",
      "ponechat",
      "ponorka",
      "ponurost",
      "popadat",
      "popel",
      "popisek",
      "poplach",
      "poprosit",
      "popsat",
      "popud",
      "poradce",
      "porce",
      "porod",
      "porucha",
      "poryv",
      "posadit",
      "posed",
      "posila",
      "poskok",
      "poslanec",
      "posoudit",
      "pospolu",
      "postava",
      "posudek",
      "posyp",
      "potah",
      "potkan",
      "potlesk",
      "potomek",
      "potrava",
      "potupa",
      "potvora",
      "poukaz",
      "pouto",
      "pouzdro",
      "povaha",
      "povidla",
      "povlak",
      "povoz",
      "povrch",
      "povstat",
      "povyk",
      "povzdech",
      "pozdrav",
      "pozemek",
      "poznatek",
      "pozor",
      "pozvat",
      "pracovat",
      "prahory",
      "praktika",
      "prales",
      "praotec",
      "praporek",
      "prase",
      "pravda",
      "princip",
      "prkno",
      "probudit",
      "procento",
      "prodej",
      "profese",
      "prohra",
      "projekt",
      "prolomit",
      "promile",
      "pronikat",
      "propad",
      "prorok",
      "prosba",
      "proton",
      "proutek",
      "provaz",
      "prskavka",
      "prsten",
      "prudkost",
      "prut",
      "prvek",
      "prvohory",
      "psanec",
      "psovod",
      "pstruh",
      "ptactvo",
      "puberta",
      "puch",
      "pudl",
      "pukavec",
      "puklina",
      "pukrle",
      "pult",
      "pumpa",
      "punc",
      "pupen",
      "pusa",
      "pusinka",
      "pustina",
      "putovat",
      "putyka",
      "pyramida",
      "pysk",
      "pytel",
      "racek",
      "rachot",
      "radiace",
      "radnice",
      "radon",
      "raft",
      "ragby",
      "raketa",
      "rakovina",
      "rameno",
      "rampouch",
      "rande",
      "rarach",
      "rarita",
      "rasovna",
      "rastr",
      "ratolest",
      "razance",
      "razidlo",
      "reagovat",
      "reakce",
      "recept",
      "redaktor",
      "referent",
      "reflex",
      "rejnok",
      "reklama",
      "rekord",
      "rekrut",
      "rektor",
      "reputace",
      "revize",
      "revma",
      "revolver",
      "rezerva",
      "riskovat",
      "riziko",
      "robotika",
      "rodokmen",
      "rohovka",
      "rokle",
      "rokoko",
      "romaneto",
      "ropovod",
      "ropucha",
      "rorejs",
      "rosol",
      "rostlina",
      "rotmistr",
      "rotoped",
      "rotunda",
      "roubenka",
      "roucho",
      "roup",
      "roura",
      "rovina",
      "rovnice",
      "rozbor",
      "rozchod",
      "rozdat",
      "rozeznat",
      "rozhodce",
      "rozinka",
      "rozjezd",
      "rozkaz",
      "rozloha",
      "rozmar",
      "rozpad",
      "rozruch",
      "rozsah",
      "roztok",
      "rozum",
      "rozvod",
      "rubrika",
      "ruchadlo",
      "rukavice",
      "rukopis",
      "ryba",
      "rybolov",
      "rychlost",
      "rydlo",
      "rypadlo",
      "rytina",
      "ryzost",
      "sadista",
      "sahat",
      "sako",
      "samec",
      "samizdat",
      "samota",
      "sanitka",
      "sardinka",
      "sasanka",
      "satelit",
      "sazba",
      "sazenice",
      "sbor",
      "schovat",
      "sebranka",
      "secese",
      "sedadlo",
      "sediment",
      "sedlo",
      "sehnat",
      "sejmout",
      "sekera",
      "sekta",
      "sekunda",
      "sekvoje",
      "semeno",
      "seno",
      "servis",
      "sesadit",
      "seshora",
      "seskok",
      "seslat",
      "sestra",
      "sesuv",
      "sesypat",
      "setba",
      "setina",
      "setkat",
      "setnout",
      "setrvat",
      "sever",
      "seznam",
      "shoda",
      "shrnout",
      "sifon",
      "silnice",
      "sirka",
      "sirotek",
      "sirup",
      "situace",
      "skafandr",
      "skalisko",
      "skanzen",
      "skaut",
      "skeptik",
      "skica",
      "skladba",
      "sklenice",
      "sklo",
      "skluz",
      "skoba",
      "skokan",
      "skoro",
      "skripta",
      "skrz",
      "skupina",
      "skvost",
      "skvrna",
      "slabika",
      "sladidlo",
      "slanina",
      "slast",
      "slavnost",
      "sledovat",
      "slepec",
      "sleva",
      "slezina",
      "slib",
      "slina",
      "sliznice",
      "slon",
      "sloupek",
      "slovo",
      "sluch",
      "sluha",
      "slunce",
      "slupka",
      "slza",
      "smaragd",
      "smetana",
      "smilstvo",
      "smlouva",
      "smog",
      "smrad",
      "smrk",
      "smrtka",
      "smutek",
      "smysl",
      "snad",
      "snaha",
      "snob",
      "sobota",
      "socha",
      "sodovka",
      "sokol",
      "sopka",
      "sotva",
      "souboj",
      "soucit",
      "soudce",
      "souhlas",
      "soulad",
      "soumrak",
      "souprava",
      "soused",
      "soutok",
      "souviset",
      "spalovna",
      "spasitel",
      "spis",
      "splav",
      "spodek",
      "spojenec",
      "spolu",
      "sponzor",
      "spornost",
      "spousta",
      "sprcha",
      "spustit",
      "sranda",
      "sraz",
      "srdce",
      "srna",
      "srnec",
      "srovnat",
      "srpen",
      "srst",
      "srub",
      "stanice",
      "starosta",
      "statika",
      "stavba",
      "stehno",
      "stezka",
      "stodola",
      "stolek",
      "stopa",
      "storno",
      "stoupat",
      "strach",
      "stres",
      "strhnout",
      "strom",
      "struna",
      "studna",
      "stupnice",
      "stvol",
      "styk",
      "subjekt",
      "subtropy",
      "suchar",
      "sudost",
      "sukno",
      "sundat",
      "sunout",
      "surikata",
      "surovina",
      "svah",
      "svalstvo",
      "svetr",
      "svatba",
      "svazek",
      "svisle",
      "svitek",
      "svoboda",
      "svodidlo",
      "svorka",
      "svrab",
      "sykavka",
      "sykot",
      "synek",
      "synovec",
      "sypat",
      "sypkost",
      "syrovost",
      "sysel",
      "sytost",
      "tabletka",
      "tabule",
      "tahoun",
      "tajemno",
      "tajfun",
      "tajga",
      "tajit",
      "tajnost",
      "taktika",
      "tamhle",
      "tampon",
      "tancovat",
      "tanec",
      "tanker",
      "tapeta",
      "tavenina",
      "tazatel",
      "technika",
      "tehdy",
      "tekutina",
      "telefon",
      "temnota",
      "tendence",
      "tenista",
      "tenor",
      "teplota",
      "tepna",
      "teprve",
      "terapie",
      "termoska",
      "textil",
      "ticho",
      "tiskopis",
      "titulek",
      "tkadlec",
      "tkanina",
      "tlapka",
      "tleskat",
      "tlukot",
      "tlupa",
      "tmel",
      "toaleta",
      "topinka",
      "topol",
      "torzo",
      "touha",
      "toulec",
      "tradice",
      "traktor",
      "tramp",
      "trasa",
      "traverza",
      "trefit",
      "trest",
      "trezor",
      "trhavina",
      "trhlina",
      "trochu",
      "trojice",
      "troska",
      "trouba",
      "trpce",
      "trpitel",
      "trpkost",
      "trubec",
      "truchlit",
      "truhlice",
      "trus",
      "trvat",
      "tudy",
      "tuhnout",
      "tuhost",
      "tundra",
      "turista",
      "turnaj",
      "tuzemsko",
      "tvaroh",
      "tvorba",
      "tvrdost",
      "tvrz",
      "tygr",
      "tykev",
      "ubohost",
      "uboze",
      "ubrat",
      "ubrousek",
      "ubrus",
      "ubytovna",
      "ucho",
      "uctivost",
      "udivit",
      "uhradit",
      "ujednat",
      "ujistit",
      "ujmout",
      "ukazatel",
      "uklidnit",
      "uklonit",
      "ukotvit",
      "ukrojit",
      "ulice",
      "ulita",
      "ulovit",
      "umyvadlo",
      "unavit",
      "uniforma",
      "uniknout",
      "upadnout",
      "uplatnit",
      "uplynout",
      "upoutat",
      "upravit",
      "uran",
      "urazit",
      "usednout",
      "usilovat",
      "usmrtit",
      "usnadnit",
      "usnout",
      "usoudit",
      "ustlat",
      "ustrnout",
      "utahovat",
      "utkat",
      "utlumit",
      "utonout",
      "utopenec",
      "utrousit",
      "uvalit",
      "uvolnit",
      "uvozovka",
      "uzdravit",
      "uzel",
      "uzenina",
      "uzlina",
      "uznat",
      "vagon",
      "valcha",
      "valoun",
      "vana",
      "vandal",
      "vanilka",
      "varan",
      "varhany",
      "varovat",
      "vcelku",
      "vchod",
      "vdova",
      "vedro",
      "vegetace",
      "vejce",
      "velbloud",
      "veletrh",
      "velitel",
      "velmoc",
      "velryba",
      "venkov",
      "veranda",
      "verze",
      "veselka",
      "veskrze",
      "vesnice",
      "vespodu",
      "vesta",
      "veterina",
      "veverka",
      "vibrace",
      "vichr",
      "videohra",
      "vidina",
      "vidle",
      "vila",
      "vinice",
      "viset",
      "vitalita",
      "vize",
      "vizitka",
      "vjezd",
      "vklad",
      "vkus",
      "vlajka",
      "vlak",
      "vlasec",
      "vlevo",
      "vlhkost",
      "vliv",
      "vlnovka",
      "vloupat",
      "vnucovat",
      "vnuk",
      "voda",
      "vodivost",
      "vodoznak",
      "vodstvo",
      "vojensky",
      "vojna",
      "vojsko",
      "volant",
      "volba",
      "volit",
      "volno",
      "voskovka",
      "vozidlo",
      "vozovna",
      "vpravo",
      "vrabec",
      "vracet",
      "vrah",
      "vrata",
      "vrba",
      "vrcholek",
      "vrhat",
      "vrstva",
      "vrtule",
      "vsadit",
      "vstoupit",
      "vstup",
      "vtip",
      "vybavit",
      "vybrat",
      "vychovat",
      "vydat",
      "vydra",
      "vyfotit",
      "vyhledat",
      "vyhnout",
      "vyhodit",
      "vyhradit",
      "vyhubit",
      "vyjasnit",
      "vyjet",
      "vyjmout",
      "vyklopit",
      "vykonat",
      "vylekat",
      "vymazat",
      "vymezit",
      "vymizet",
      "vymyslet",
      "vynechat",
      "vynikat",
      "vynutit",
      "vypadat",
      "vyplatit",
      "vypravit",
      "vypustit",
      "vyrazit",
      "vyrovnat",
      "vyrvat",
      "vyslovit",
      "vysoko",
      "vystavit",
      "vysunout",
      "vysypat",
      "vytasit",
      "vytesat",
      "vytratit",
      "vyvinout",
      "vyvolat",
      "vyvrhel",
      "vyzdobit",
      "vyznat",
      "vzadu",
      "vzbudit",
      "vzchopit",
      "vzdor",
      "vzduch",
      "vzdychat",
      "vzestup",
      "vzhledem",
      "vzkaz",
      "vzlykat",
      "vznik",
      "vzorek",
      "vzpoura",
      "vztah",
      "vztek",
      "xylofon",
      "zabrat",
      "zabydlet",
      "zachovat",
      "zadarmo",
      "zadusit",
      "zafoukat",
      "zahltit",
      "zahodit",
      "zahrada",
      "zahynout",
      "zajatec",
      "zajet",
      "zajistit",
      "zaklepat",
      "zakoupit",
      "zalepit",
      "zamezit",
      "zamotat",
      "zamyslet",
      "zanechat",
      "zanikat",
      "zaplatit",
      "zapojit",
      "zapsat",
      "zarazit",
      "zastavit",
      "zasunout",
      "zatajit",
      "zatemnit",
      "zatknout",
      "zaujmout",
      "zavalit",
      "zavelet",
      "zavinit",
      "zavolat",
      "zavrtat",
      "zazvonit",
      "zbavit",
      "zbrusu",
      "zbudovat",
      "zbytek",
      "zdaleka",
      "zdarma",
      "zdatnost",
      "zdivo",
      "zdobit",
      "zdroj",
      "zdvih",
      "zdymadlo",
      "zelenina",
      "zeman",
      "zemina",
      "zeptat",
      "zezadu",
      "zezdola",
      "zhatit",
      "zhltnout",
      "zhluboka",
      "zhotovit",
      "zhruba",
      "zima",
      "zimnice",
      "zjemnit",
      "zklamat",
      "zkoumat",
      "zkratka",
      "zkumavka",
      "zlato",
      "zlehka",
      "zloba",
      "zlom",
      "zlost",
      "zlozvyk",
      "zmapovat",
      "zmar",
      "zmatek",
      "zmije",
      "zmizet",
      "zmocnit",
      "zmodrat",
      "zmrzlina",
      "zmutovat",
      "znak",
      "znalost",
      "znamenat",
      "znovu",
      "zobrazit",
      "zotavit",
      "zoubek",
      "zoufale",
      "zplodit",
      "zpomalit",
      "zprava",
      "zprostit",
      "zprudka",
      "zprvu",
      "zrada",
      "zranit",
      "zrcadlo",
      "zrnitost",
      "zrno",
      "zrovna",
      "zrychlit",
      "zrzavost",
      "zticha",
      "ztratit",
      "zubovina",
      "zubr",
      "zvednout",
      "zvenku",
      "zvesela",
      "zvon",
      "zvrat",
      "zvukovod",
      "zvyk"
    ];
  }
});

// node_modules/bip39/src/wordlists/chinese_simplified.json
var require_chinese_simplified = __commonJS({
  "node_modules/bip39/src/wordlists/chinese_simplified.json"(exports2, module2) {
    module2.exports = [
      "\u7684",
      "\u4E00",
      "\u662F",
      "\u5728",
      "\u4E0D",
      "\u4E86",
      "\u6709",
      "\u548C",
      "\u4EBA",
      "\u8FD9",
      "\u4E2D",
      "\u5927",
      "\u4E3A",
      "\u4E0A",
      "\u4E2A",
      "\u56FD",
      "\u6211",
      "\u4EE5",
      "\u8981",
      "\u4ED6",
      "\u65F6",
      "\u6765",
      "\u7528",
      "\u4EEC",
      "\u751F",
      "\u5230",
      "\u4F5C",
      "\u5730",
      "\u4E8E",
      "\u51FA",
      "\u5C31",
      "\u5206",
      "\u5BF9",
      "\u6210",
      "\u4F1A",
      "\u53EF",
      "\u4E3B",
      "\u53D1",
      "\u5E74",
      "\u52A8",
      "\u540C",
      "\u5DE5",
      "\u4E5F",
      "\u80FD",
      "\u4E0B",
      "\u8FC7",
      "\u5B50",
      "\u8BF4",
      "\u4EA7",
      "\u79CD",
      "\u9762",
      "\u800C",
      "\u65B9",
      "\u540E",
      "\u591A",
      "\u5B9A",
      "\u884C",
      "\u5B66",
      "\u6CD5",
      "\u6240",
      "\u6C11",
      "\u5F97",
      "\u7ECF",
      "\u5341",
      "\u4E09",
      "\u4E4B",
      "\u8FDB",
      "\u7740",
      "\u7B49",
      "\u90E8",
      "\u5EA6",
      "\u5BB6",
      "\u7535",
      "\u529B",
      "\u91CC",
      "\u5982",
      "\u6C34",
      "\u5316",
      "\u9AD8",
      "\u81EA",
      "\u4E8C",
      "\u7406",
      "\u8D77",
      "\u5C0F",
      "\u7269",
      "\u73B0",
      "\u5B9E",
      "\u52A0",
      "\u91CF",
      "\u90FD",
      "\u4E24",
      "\u4F53",
      "\u5236",
      "\u673A",
      "\u5F53",
      "\u4F7F",
      "\u70B9",
      "\u4ECE",
      "\u4E1A",
      "\u672C",
      "\u53BB",
      "\u628A",
      "\u6027",
      "\u597D",
      "\u5E94",
      "\u5F00",
      "\u5B83",
      "\u5408",
      "\u8FD8",
      "\u56E0",
      "\u7531",
      "\u5176",
      "\u4E9B",
      "\u7136",
      "\u524D",
      "\u5916",
      "\u5929",
      "\u653F",
      "\u56DB",
      "\u65E5",
      "\u90A3",
      "\u793E",
      "\u4E49",
      "\u4E8B",
      "\u5E73",
      "\u5F62",
      "\u76F8",
      "\u5168",
      "\u8868",
      "\u95F4",
      "\u6837",
      "\u4E0E",
      "\u5173",
      "\u5404",
      "\u91CD",
      "\u65B0",
      "\u7EBF",
      "\u5185",
      "\u6570",
      "\u6B63",
      "\u5FC3",
      "\u53CD",
      "\u4F60",
      "\u660E",
      "\u770B",
      "\u539F",
      "\u53C8",
      "\u4E48",
      "\u5229",
      "\u6BD4",
      "\u6216",
      "\u4F46",
      "\u8D28",
      "\u6C14",
      "\u7B2C",
      "\u5411",
      "\u9053",
      "\u547D",
      "\u6B64",
      "\u53D8",
      "\u6761",
      "\u53EA",
      "\u6CA1",
      "\u7ED3",
      "\u89E3",
      "\u95EE",
      "\u610F",
      "\u5EFA",
      "\u6708",
      "\u516C",
      "\u65E0",
      "\u7CFB",
      "\u519B",
      "\u5F88",
      "\u60C5",
      "\u8005",
      "\u6700",
      "\u7ACB",
      "\u4EE3",
      "\u60F3",
      "\u5DF2",
      "\u901A",
      "\u5E76",
      "\u63D0",
      "\u76F4",
      "\u9898",
      "\u515A",
      "\u7A0B",
      "\u5C55",
      "\u4E94",
      "\u679C",
      "\u6599",
      "\u8C61",
      "\u5458",
      "\u9769",
      "\u4F4D",
      "\u5165",
      "\u5E38",
      "\u6587",
      "\u603B",
      "\u6B21",
      "\u54C1",
      "\u5F0F",
      "\u6D3B",
      "\u8BBE",
      "\u53CA",
      "\u7BA1",
      "\u7279",
      "\u4EF6",
      "\u957F",
      "\u6C42",
      "\u8001",
      "\u5934",
      "\u57FA",
      "\u8D44",
      "\u8FB9",
      "\u6D41",
      "\u8DEF",
      "\u7EA7",
      "\u5C11",
      "\u56FE",
      "\u5C71",
      "\u7EDF",
      "\u63A5",
      "\u77E5",
      "\u8F83",
      "\u5C06",
      "\u7EC4",
      "\u89C1",
      "\u8BA1",
      "\u522B",
      "\u5979",
      "\u624B",
      "\u89D2",
      "\u671F",
      "\u6839",
      "\u8BBA",
      "\u8FD0",
      "\u519C",
      "\u6307",
      "\u51E0",
      "\u4E5D",
      "\u533A",
      "\u5F3A",
      "\u653E",
      "\u51B3",
      "\u897F",
      "\u88AB",
      "\u5E72",
      "\u505A",
      "\u5FC5",
      "\u6218",
      "\u5148",
      "\u56DE",
      "\u5219",
      "\u4EFB",
      "\u53D6",
      "\u636E",
      "\u5904",
      "\u961F",
      "\u5357",
      "\u7ED9",
      "\u8272",
      "\u5149",
      "\u95E8",
      "\u5373",
      "\u4FDD",
      "\u6CBB",
      "\u5317",
      "\u9020",
      "\u767E",
      "\u89C4",
      "\u70ED",
      "\u9886",
      "\u4E03",
      "\u6D77",
      "\u53E3",
      "\u4E1C",
      "\u5BFC",
      "\u5668",
      "\u538B",
      "\u5FD7",
      "\u4E16",
      "\u91D1",
      "\u589E",
      "\u4E89",
      "\u6D4E",
      "\u9636",
      "\u6CB9",
      "\u601D",
      "\u672F",
      "\u6781",
      "\u4EA4",
      "\u53D7",
      "\u8054",
      "\u4EC0",
      "\u8BA4",
      "\u516D",
      "\u5171",
      "\u6743",
      "\u6536",
      "\u8BC1",
      "\u6539",
      "\u6E05",
      "\u7F8E",
      "\u518D",
      "\u91C7",
      "\u8F6C",
      "\u66F4",
      "\u5355",
      "\u98CE",
      "\u5207",
      "\u6253",
      "\u767D",
      "\u6559",
      "\u901F",
      "\u82B1",
      "\u5E26",
      "\u5B89",
      "\u573A",
      "\u8EAB",
      "\u8F66",
      "\u4F8B",
      "\u771F",
      "\u52A1",
      "\u5177",
      "\u4E07",
      "\u6BCF",
      "\u76EE",
      "\u81F3",
      "\u8FBE",
      "\u8D70",
      "\u79EF",
      "\u793A",
      "\u8BAE",
      "\u58F0",
      "\u62A5",
      "\u6597",
      "\u5B8C",
      "\u7C7B",
      "\u516B",
      "\u79BB",
      "\u534E",
      "\u540D",
      "\u786E",
      "\u624D",
      "\u79D1",
      "\u5F20",
      "\u4FE1",
      "\u9A6C",
      "\u8282",
      "\u8BDD",
      "\u7C73",
      "\u6574",
      "\u7A7A",
      "\u5143",
      "\u51B5",
      "\u4ECA",
      "\u96C6",
      "\u6E29",
      "\u4F20",
      "\u571F",
      "\u8BB8",
      "\u6B65",
      "\u7FA4",
      "\u5E7F",
      "\u77F3",
      "\u8BB0",
      "\u9700",
      "\u6BB5",
      "\u7814",
      "\u754C",
      "\u62C9",
      "\u6797",
      "\u5F8B",
      "\u53EB",
      "\u4E14",
      "\u7A76",
      "\u89C2",
      "\u8D8A",
      "\u7EC7",
      "\u88C5",
      "\u5F71",
      "\u7B97",
      "\u4F4E",
      "\u6301",
      "\u97F3",
      "\u4F17",
      "\u4E66",
      "\u5E03",
      "\u590D",
      "\u5BB9",
      "\u513F",
      "\u987B",
      "\u9645",
      "\u5546",
      "\u975E",
      "\u9A8C",
      "\u8FDE",
      "\u65AD",
      "\u6DF1",
      "\u96BE",
      "\u8FD1",
      "\u77FF",
      "\u5343",
      "\u5468",
      "\u59D4",
      "\u7D20",
      "\u6280",
      "\u5907",
      "\u534A",
      "\u529E",
      "\u9752",
      "\u7701",
      "\u5217",
      "\u4E60",
      "\u54CD",
      "\u7EA6",
      "\u652F",
      "\u822C",
      "\u53F2",
      "\u611F",
      "\u52B3",
      "\u4FBF",
      "\u56E2",
      "\u5F80",
      "\u9178",
      "\u5386",
      "\u5E02",
      "\u514B",
      "\u4F55",
      "\u9664",
      "\u6D88",
      "\u6784",
      "\u5E9C",
      "\u79F0",
      "\u592A",
      "\u51C6",
      "\u7CBE",
      "\u503C",
      "\u53F7",
      "\u7387",
      "\u65CF",
      "\u7EF4",
      "\u5212",
      "\u9009",
      "\u6807",
      "\u5199",
      "\u5B58",
      "\u5019",
      "\u6BDB",
      "\u4EB2",
      "\u5FEB",
      "\u6548",
      "\u65AF",
      "\u9662",
      "\u67E5",
      "\u6C5F",
      "\u578B",
      "\u773C",
      "\u738B",
      "\u6309",
      "\u683C",
      "\u517B",
      "\u6613",
      "\u7F6E",
      "\u6D3E",
      "\u5C42",
      "\u7247",
      "\u59CB",
      "\u5374",
      "\u4E13",
      "\u72B6",
      "\u80B2",
      "\u5382",
      "\u4EAC",
      "\u8BC6",
      "\u9002",
      "\u5C5E",
      "\u5706",
      "\u5305",
      "\u706B",
      "\u4F4F",
      "\u8C03",
      "\u6EE1",
      "\u53BF",
      "\u5C40",
      "\u7167",
      "\u53C2",
      "\u7EA2",
      "\u7EC6",
      "\u5F15",
      "\u542C",
      "\u8BE5",
      "\u94C1",
      "\u4EF7",
      "\u4E25",
      "\u9996",
      "\u5E95",
      "\u6DB2",
      "\u5B98",
      "\u5FB7",
      "\u968F",
      "\u75C5",
      "\u82CF",
      "\u5931",
      "\u5C14",
      "\u6B7B",
      "\u8BB2",
      "\u914D",
      "\u5973",
      "\u9EC4",
      "\u63A8",
      "\u663E",
      "\u8C08",
      "\u7F6A",
      "\u795E",
      "\u827A",
      "\u5462",
      "\u5E2D",
      "\u542B",
      "\u4F01",
      "\u671B",
      "\u5BC6",
      "\u6279",
      "\u8425",
      "\u9879",
      "\u9632",
      "\u4E3E",
      "\u7403",
      "\u82F1",
      "\u6C27",
      "\u52BF",
      "\u544A",
      "\u674E",
      "\u53F0",
      "\u843D",
      "\u6728",
      "\u5E2E",
      "\u8F6E",
      "\u7834",
      "\u4E9A",
      "\u5E08",
      "\u56F4",
      "\u6CE8",
      "\u8FDC",
      "\u5B57",
      "\u6750",
      "\u6392",
      "\u4F9B",
      "\u6CB3",
      "\u6001",
      "\u5C01",
      "\u53E6",
      "\u65BD",
      "\u51CF",
      "\u6811",
      "\u6EB6",
      "\u600E",
      "\u6B62",
      "\u6848",
      "\u8A00",
      "\u58EB",
      "\u5747",
      "\u6B66",
      "\u56FA",
      "\u53F6",
      "\u9C7C",
      "\u6CE2",
      "\u89C6",
      "\u4EC5",
      "\u8D39",
      "\u7D27",
      "\u7231",
      "\u5DE6",
      "\u7AE0",
      "\u65E9",
      "\u671D",
      "\u5BB3",
      "\u7EED",
      "\u8F7B",
      "\u670D",
      "\u8BD5",
      "\u98DF",
      "\u5145",
      "\u5175",
      "\u6E90",
      "\u5224",
      "\u62A4",
      "\u53F8",
      "\u8DB3",
      "\u67D0",
      "\u7EC3",
      "\u5DEE",
      "\u81F4",
      "\u677F",
      "\u7530",
      "\u964D",
      "\u9ED1",
      "\u72AF",
      "\u8D1F",
      "\u51FB",
      "\u8303",
      "\u7EE7",
      "\u5174",
      "\u4F3C",
      "\u4F59",
      "\u575A",
      "\u66F2",
      "\u8F93",
      "\u4FEE",
      "\u6545",
      "\u57CE",
      "\u592B",
      "\u591F",
      "\u9001",
      "\u7B14",
      "\u8239",
      "\u5360",
      "\u53F3",
      "\u8D22",
      "\u5403",
      "\u5BCC",
      "\u6625",
      "\u804C",
      "\u89C9",
      "\u6C49",
      "\u753B",
      "\u529F",
      "\u5DF4",
      "\u8DDF",
      "\u867D",
      "\u6742",
      "\u98DE",
      "\u68C0",
      "\u5438",
      "\u52A9",
      "\u5347",
      "\u9633",
      "\u4E92",
      "\u521D",
      "\u521B",
      "\u6297",
      "\u8003",
      "\u6295",
      "\u574F",
      "\u7B56",
      "\u53E4",
      "\u5F84",
      "\u6362",
      "\u672A",
      "\u8DD1",
      "\u7559",
      "\u94A2",
      "\u66FE",
      "\u7AEF",
      "\u8D23",
      "\u7AD9",
      "\u7B80",
      "\u8FF0",
      "\u94B1",
      "\u526F",
      "\u5C3D",
      "\u5E1D",
      "\u5C04",
      "\u8349",
      "\u51B2",
      "\u627F",
      "\u72EC",
      "\u4EE4",
      "\u9650",
      "\u963F",
      "\u5BA3",
      "\u73AF",
      "\u53CC",
      "\u8BF7",
      "\u8D85",
      "\u5FAE",
      "\u8BA9",
      "\u63A7",
      "\u5DDE",
      "\u826F",
      "\u8F74",
      "\u627E",
      "\u5426",
      "\u7EAA",
      "\u76CA",
      "\u4F9D",
      "\u4F18",
      "\u9876",
      "\u7840",
      "\u8F7D",
      "\u5012",
      "\u623F",
      "\u7A81",
      "\u5750",
      "\u7C89",
      "\u654C",
      "\u7565",
      "\u5BA2",
      "\u8881",
      "\u51B7",
      "\u80DC",
      "\u7EDD",
      "\u6790",
      "\u5757",
      "\u5242",
      "\u6D4B",
      "\u4E1D",
      "\u534F",
      "\u8BC9",
      "\u5FF5",
      "\u9648",
      "\u4ECD",
      "\u7F57",
      "\u76D0",
      "\u53CB",
      "\u6D0B",
      "\u9519",
      "\u82E6",
      "\u591C",
      "\u5211",
      "\u79FB",
      "\u9891",
      "\u9010",
      "\u9760",
      "\u6DF7",
      "\u6BCD",
      "\u77ED",
      "\u76AE",
      "\u7EC8",
      "\u805A",
      "\u6C7D",
      "\u6751",
      "\u4E91",
      "\u54EA",
      "\u65E2",
      "\u8DDD",
      "\u536B",
      "\u505C",
      "\u70C8",
      "\u592E",
      "\u5BDF",
      "\u70E7",
      "\u8FC5",
      "\u5883",
      "\u82E5",
      "\u5370",
      "\u6D32",
      "\u523B",
      "\u62EC",
      "\u6FC0",
      "\u5B54",
      "\u641E",
      "\u751A",
      "\u5BA4",
      "\u5F85",
      "\u6838",
      "\u6821",
      "\u6563",
      "\u4FB5",
      "\u5427",
      "\u7532",
      "\u6E38",
      "\u4E45",
      "\u83DC",
      "\u5473",
      "\u65E7",
      "\u6A21",
      "\u6E56",
      "\u8D27",
      "\u635F",
      "\u9884",
      "\u963B",
      "\u6BEB",
      "\u666E",
      "\u7A33",
      "\u4E59",
      "\u5988",
      "\u690D",
      "\u606F",
      "\u6269",
      "\u94F6",
      "\u8BED",
      "\u6325",
      "\u9152",
      "\u5B88",
      "\u62FF",
      "\u5E8F",
      "\u7EB8",
      "\u533B",
      "\u7F3A",
      "\u96E8",
      "\u5417",
      "\u9488",
      "\u5218",
      "\u554A",
      "\u6025",
      "\u5531",
      "\u8BEF",
      "\u8BAD",
      "\u613F",
      "\u5BA1",
      "\u9644",
      "\u83B7",
      "\u8336",
      "\u9C9C",
      "\u7CAE",
      "\u65A4",
      "\u5B69",
      "\u8131",
      "\u786B",
      "\u80A5",
      "\u5584",
      "\u9F99",
      "\u6F14",
      "\u7236",
      "\u6E10",
      "\u8840",
      "\u6B22",
      "\u68B0",
      "\u638C",
      "\u6B4C",
      "\u6C99",
      "\u521A",
      "\u653B",
      "\u8C13",
      "\u76FE",
      "\u8BA8",
      "\u665A",
      "\u7C92",
      "\u4E71",
      "\u71C3",
      "\u77DB",
      "\u4E4E",
      "\u6740",
      "\u836F",
      "\u5B81",
      "\u9C81",
      "\u8D35",
      "\u949F",
      "\u7164",
      "\u8BFB",
      "\u73ED",
      "\u4F2F",
      "\u9999",
      "\u4ECB",
      "\u8FEB",
      "\u53E5",
      "\u4E30",
      "\u57F9",
      "\u63E1",
      "\u5170",
      "\u62C5",
      "\u5F26",
      "\u86CB",
      "\u6C89",
      "\u5047",
      "\u7A7F",
      "\u6267",
      "\u7B54",
      "\u4E50",
      "\u8C01",
      "\u987A",
      "\u70DF",
      "\u7F29",
      "\u5F81",
      "\u8138",
      "\u559C",
      "\u677E",
      "\u811A",
      "\u56F0",
      "\u5F02",
      "\u514D",
      "\u80CC",
      "\u661F",
      "\u798F",
      "\u4E70",
      "\u67D3",
      "\u4E95",
      "\u6982",
      "\u6162",
      "\u6015",
      "\u78C1",
      "\u500D",
      "\u7956",
      "\u7687",
      "\u4FC3",
      "\u9759",
      "\u8865",
      "\u8BC4",
      "\u7FFB",
      "\u8089",
      "\u8DF5",
      "\u5C3C",
      "\u8863",
      "\u5BBD",
      "\u626C",
      "\u68C9",
      "\u5E0C",
      "\u4F24",
      "\u64CD",
      "\u5782",
      "\u79CB",
      "\u5B9C",
      "\u6C22",
      "\u5957",
      "\u7763",
      "\u632F",
      "\u67B6",
      "\u4EAE",
      "\u672B",
      "\u5BAA",
      "\u5E86",
      "\u7F16",
      "\u725B",
      "\u89E6",
      "\u6620",
      "\u96F7",
      "\u9500",
      "\u8BD7",
      "\u5EA7",
      "\u5C45",
      "\u6293",
      "\u88C2",
      "\u80DE",
      "\u547C",
      "\u5A18",
      "\u666F",
      "\u5A01",
      "\u7EFF",
      "\u6676",
      "\u539A",
      "\u76DF",
      "\u8861",
      "\u9E21",
      "\u5B59",
      "\u5EF6",
      "\u5371",
      "\u80F6",
      "\u5C4B",
      "\u4E61",
      "\u4E34",
      "\u9646",
      "\u987E",
      "\u6389",
      "\u5440",
      "\u706F",
      "\u5C81",
      "\u63AA",
      "\u675F",
      "\u8010",
      "\u5267",
      "\u7389",
      "\u8D75",
      "\u8DF3",
      "\u54E5",
      "\u5B63",
      "\u8BFE",
      "\u51EF",
      "\u80E1",
      "\u989D",
      "\u6B3E",
      "\u7ECD",
      "\u5377",
      "\u9F50",
      "\u4F1F",
      "\u84B8",
      "\u6B96",
      "\u6C38",
      "\u5B97",
      "\u82D7",
      "\u5DDD",
      "\u7089",
      "\u5CA9",
      "\u5F31",
      "\u96F6",
      "\u6768",
      "\u594F",
      "\u6CBF",
      "\u9732",
      "\u6746",
      "\u63A2",
      "\u6ED1",
      "\u9547",
      "\u996D",
      "\u6D53",
      "\u822A",
      "\u6000",
      "\u8D76",
      "\u5E93",
      "\u593A",
      "\u4F0A",
      "\u7075",
      "\u7A0E",
      "\u9014",
      "\u706D",
      "\u8D5B",
      "\u5F52",
      "\u53EC",
      "\u9F13",
      "\u64AD",
      "\u76D8",
      "\u88C1",
      "\u9669",
      "\u5EB7",
      "\u552F",
      "\u5F55",
      "\u83CC",
      "\u7EAF",
      "\u501F",
      "\u7CD6",
      "\u76D6",
      "\u6A2A",
      "\u7B26",
      "\u79C1",
      "\u52AA",
      "\u5802",
      "\u57DF",
      "\u67AA",
      "\u6DA6",
      "\u5E45",
      "\u54C8",
      "\u7ADF",
      "\u719F",
      "\u866B",
      "\u6CFD",
      "\u8111",
      "\u58E4",
      "\u78B3",
      "\u6B27",
      "\u904D",
      "\u4FA7",
      "\u5BE8",
      "\u6562",
      "\u5F7B",
      "\u8651",
      "\u659C",
      "\u8584",
      "\u5EAD",
      "\u7EB3",
      "\u5F39",
      "\u9972",
      "\u4F38",
      "\u6298",
      "\u9EA6",
      "\u6E7F",
      "\u6697",
      "\u8377",
      "\u74E6",
      "\u585E",
      "\u5E8A",
      "\u7B51",
      "\u6076",
      "\u6237",
      "\u8BBF",
      "\u5854",
      "\u5947",
      "\u900F",
      "\u6881",
      "\u5200",
      "\u65CB",
      "\u8FF9",
      "\u5361",
      "\u6C2F",
      "\u9047",
      "\u4EFD",
      "\u6BD2",
      "\u6CE5",
      "\u9000",
      "\u6D17",
      "\u6446",
      "\u7070",
      "\u5F69",
      "\u5356",
      "\u8017",
      "\u590F",
      "\u62E9",
      "\u5FD9",
      "\u94DC",
      "\u732E",
      "\u786C",
      "\u4E88",
      "\u7E41",
      "\u5708",
      "\u96EA",
      "\u51FD",
      "\u4EA6",
      "\u62BD",
      "\u7BC7",
      "\u9635",
      "\u9634",
      "\u4E01",
      "\u5C3A",
      "\u8FFD",
      "\u5806",
      "\u96C4",
      "\u8FCE",
      "\u6CDB",
      "\u7238",
      "\u697C",
      "\u907F",
      "\u8C0B",
      "\u5428",
      "\u91CE",
      "\u732A",
      "\u65D7",
      "\u7D2F",
      "\u504F",
      "\u5178",
      "\u9986",
      "\u7D22",
      "\u79E6",
      "\u8102",
      "\u6F6E",
      "\u7237",
      "\u8C46",
      "\u5FFD",
      "\u6258",
      "\u60CA",
      "\u5851",
      "\u9057",
      "\u6108",
      "\u6731",
      "\u66FF",
      "\u7EA4",
      "\u7C97",
      "\u503E",
      "\u5C1A",
      "\u75DB",
      "\u695A",
      "\u8C22",
      "\u594B",
      "\u8D2D",
      "\u78E8",
      "\u541B",
      "\u6C60",
      "\u65C1",
      "\u788E",
      "\u9AA8",
      "\u76D1",
      "\u6355",
      "\u5F1F",
      "\u66B4",
      "\u5272",
      "\u8D2F",
      "\u6B8A",
      "\u91CA",
      "\u8BCD",
      "\u4EA1",
      "\u58C1",
      "\u987F",
      "\u5B9D",
      "\u5348",
      "\u5C18",
      "\u95FB",
      "\u63ED",
      "\u70AE",
      "\u6B8B",
      "\u51AC",
      "\u6865",
      "\u5987",
      "\u8B66",
      "\u7EFC",
      "\u62DB",
      "\u5434",
      "\u4ED8",
      "\u6D6E",
      "\u906D",
      "\u5F90",
      "\u60A8",
      "\u6447",
      "\u8C37",
      "\u8D5E",
      "\u7BB1",
      "\u9694",
      "\u8BA2",
      "\u7537",
      "\u5439",
      "\u56ED",
      "\u7EB7",
      "\u5510",
      "\u8D25",
      "\u5B8B",
      "\u73BB",
      "\u5DE8",
      "\u8015",
      "\u5766",
      "\u8363",
      "\u95ED",
      "\u6E7E",
      "\u952E",
      "\u51E1",
      "\u9A7B",
      "\u9505",
      "\u6551",
      "\u6069",
      "\u5265",
      "\u51DD",
      "\u78B1",
      "\u9F7F",
      "\u622A",
      "\u70BC",
      "\u9EBB",
      "\u7EBA",
      "\u7981",
      "\u5E9F",
      "\u76DB",
      "\u7248",
      "\u7F13",
      "\u51C0",
      "\u775B",
      "\u660C",
      "\u5A5A",
      "\u6D89",
      "\u7B52",
      "\u5634",
      "\u63D2",
      "\u5CB8",
      "\u6717",
      "\u5E84",
      "\u8857",
      "\u85CF",
      "\u59D1",
      "\u8D38",
      "\u8150",
      "\u5974",
      "\u5566",
      "\u60EF",
      "\u4E58",
      "\u4F19",
      "\u6062",
      "\u5300",
      "\u7EB1",
      "\u624E",
      "\u8FA9",
      "\u8033",
      "\u5F6A",
      "\u81E3",
      "\u4EBF",
      "\u7483",
      "\u62B5",
      "\u8109",
      "\u79C0",
      "\u8428",
      "\u4FC4",
      "\u7F51",
      "\u821E",
      "\u5E97",
      "\u55B7",
      "\u7EB5",
      "\u5BF8",
      "\u6C57",
      "\u6302",
      "\u6D2A",
      "\u8D3A",
      "\u95EA",
      "\u67EC",
      "\u7206",
      "\u70EF",
      "\u6D25",
      "\u7A3B",
      "\u5899",
      "\u8F6F",
      "\u52C7",
      "\u50CF",
      "\u6EDA",
      "\u5398",
      "\u8499",
      "\u82B3",
      "\u80AF",
      "\u5761",
      "\u67F1",
      "\u8361",
      "\u817F",
      "\u4EEA",
      "\u65C5",
      "\u5C3E",
      "\u8F67",
      "\u51B0",
      "\u8D21",
      "\u767B",
      "\u9ECE",
      "\u524A",
      "\u94BB",
      "\u52D2",
      "\u9003",
      "\u969C",
      "\u6C28",
      "\u90ED",
      "\u5CF0",
      "\u5E01",
      "\u6E2F",
      "\u4F0F",
      "\u8F68",
      "\u4EA9",
      "\u6BD5",
      "\u64E6",
      "\u83AB",
      "\u523A",
      "\u6D6A",
      "\u79D8",
      "\u63F4",
      "\u682A",
      "\u5065",
      "\u552E",
      "\u80A1",
      "\u5C9B",
      "\u7518",
      "\u6CE1",
      "\u7761",
      "\u7AE5",
      "\u94F8",
      "\u6C64",
      "\u9600",
      "\u4F11",
      "\u6C47",
      "\u820D",
      "\u7267",
      "\u7ED5",
      "\u70B8",
      "\u54F2",
      "\u78F7",
      "\u7EE9",
      "\u670B",
      "\u6DE1",
      "\u5C16",
      "\u542F",
      "\u9677",
      "\u67F4",
      "\u5448",
      "\u5F92",
      "\u989C",
      "\u6CEA",
      "\u7A0D",
      "\u5FD8",
      "\u6CF5",
      "\u84DD",
      "\u62D6",
      "\u6D1E",
      "\u6388",
      "\u955C",
      "\u8F9B",
      "\u58EE",
      "\u950B",
      "\u8D2B",
      "\u865A",
      "\u5F2F",
      "\u6469",
      "\u6CF0",
      "\u5E7C",
      "\u5EF7",
      "\u5C0A",
      "\u7A97",
      "\u7EB2",
      "\u5F04",
      "\u96B6",
      "\u7591",
      "\u6C0F",
      "\u5BAB",
      "\u59D0",
      "\u9707",
      "\u745E",
      "\u602A",
      "\u5C24",
      "\u7434",
      "\u5FAA",
      "\u63CF",
      "\u819C",
      "\u8FDD",
      "\u5939",
      "\u8170",
      "\u7F18",
      "\u73E0",
      "\u7A77",
      "\u68EE",
      "\u679D",
      "\u7AF9",
      "\u6C9F",
      "\u50AC",
      "\u7EF3",
      "\u5FC6",
      "\u90A6",
      "\u5269",
      "\u5E78",
      "\u6D46",
      "\u680F",
      "\u62E5",
      "\u7259",
      "\u8D2E",
      "\u793C",
      "\u6EE4",
      "\u94A0",
      "\u7EB9",
      "\u7F62",
      "\u62CD",
      "\u54B1",
      "\u558A",
      "\u8896",
      "\u57C3",
      "\u52E4",
      "\u7F5A",
      "\u7126",
      "\u6F5C",
      "\u4F0D",
      "\u58A8",
      "\u6B32",
      "\u7F1D",
      "\u59D3",
      "\u520A",
      "\u9971",
      "\u4EFF",
      "\u5956",
      "\u94DD",
      "\u9B3C",
      "\u4E3D",
      "\u8DE8",
      "\u9ED8",
      "\u6316",
      "\u94FE",
      "\u626B",
      "\u559D",
      "\u888B",
      "\u70AD",
      "\u6C61",
      "\u5E55",
      "\u8BF8",
      "\u5F27",
      "\u52B1",
      "\u6885",
      "\u5976",
      "\u6D01",
      "\u707E",
      "\u821F",
      "\u9274",
      "\u82EF",
      "\u8BBC",
      "\u62B1",
      "\u6BC1",
      "\u61C2",
      "\u5BD2",
      "\u667A",
      "\u57D4",
      "\u5BC4",
      "\u5C4A",
      "\u8DC3",
      "\u6E21",
      "\u6311",
      "\u4E39",
      "\u8270",
      "\u8D1D",
      "\u78B0",
      "\u62D4",
      "\u7239",
      "\u6234",
      "\u7801",
      "\u68A6",
      "\u82BD",
      "\u7194",
      "\u8D64",
      "\u6E14",
      "\u54ED",
      "\u656C",
      "\u9897",
      "\u5954",
      "\u94C5",
      "\u4EF2",
      "\u864E",
      "\u7A00",
      "\u59B9",
      "\u4E4F",
      "\u73CD",
      "\u7533",
      "\u684C",
      "\u9075",
      "\u5141",
      "\u9686",
      "\u87BA",
      "\u4ED3",
      "\u9B4F",
      "\u9510",
      "\u6653",
      "\u6C2E",
      "\u517C",
      "\u9690",
      "\u788D",
      "\u8D6B",
      "\u62E8",
      "\u5FE0",
      "\u8083",
      "\u7F38",
      "\u7275",
      "\u62A2",
      "\u535A",
      "\u5DE7",
      "\u58F3",
      "\u5144",
      "\u675C",
      "\u8BAF",
      "\u8BDA",
      "\u78A7",
      "\u7965",
      "\u67EF",
      "\u9875",
      "\u5DE1",
      "\u77E9",
      "\u60B2",
      "\u704C",
      "\u9F84",
      "\u4F26",
      "\u7968",
      "\u5BFB",
      "\u6842",
      "\u94FA",
      "\u5723",
      "\u6050",
      "\u6070",
      "\u90D1",
      "\u8DA3",
      "\u62AC",
      "\u8352",
      "\u817E",
      "\u8D34",
      "\u67D4",
      "\u6EF4",
      "\u731B",
      "\u9614",
      "\u8F86",
      "\u59BB",
      "\u586B",
      "\u64A4",
      "\u50A8",
      "\u7B7E",
      "\u95F9",
      "\u6270",
      "\u7D2B",
      "\u7802",
      "\u9012",
      "\u620F",
      "\u540A",
      "\u9676",
      "\u4F10",
      "\u5582",
      "\u7597",
      "\u74F6",
      "\u5A46",
      "\u629A",
      "\u81C2",
      "\u6478",
      "\u5FCD",
      "\u867E",
      "\u8721",
      "\u90BB",
      "\u80F8",
      "\u5DE9",
      "\u6324",
      "\u5076",
      "\u5F03",
      "\u69FD",
      "\u52B2",
      "\u4E73",
      "\u9093",
      "\u5409",
      "\u4EC1",
      "\u70C2",
      "\u7816",
      "\u79DF",
      "\u4E4C",
      "\u8230",
      "\u4F34",
      "\u74DC",
      "\u6D45",
      "\u4E19",
      "\u6682",
      "\u71E5",
      "\u6A61",
      "\u67F3",
      "\u8FF7",
      "\u6696",
      "\u724C",
      "\u79E7",
      "\u80C6",
      "\u8BE6",
      "\u7C27",
      "\u8E0F",
      "\u74F7",
      "\u8C31",
      "\u5446",
      "\u5BBE",
      "\u7CCA",
      "\u6D1B",
      "\u8F89",
      "\u6124",
      "\u7ADE",
      "\u9699",
      "\u6012",
      "\u7C98",
      "\u4E43",
      "\u7EEA",
      "\u80A9",
      "\u7C4D",
      "\u654F",
      "\u6D82",
      "\u7199",
      "\u7686",
      "\u4FA6",
      "\u60AC",
      "\u6398",
      "\u4EAB",
      "\u7EA0",
      "\u9192",
      "\u72C2",
      "\u9501",
      "\u6DC0",
      "\u6068",
      "\u7272",
      "\u9738",
      "\u722C",
      "\u8D4F",
      "\u9006",
      "\u73A9",
      "\u9675",
      "\u795D",
      "\u79D2",
      "\u6D59",
      "\u8C8C",
      "\u5F79",
      "\u5F7C",
      "\u6089",
      "\u9E2D",
      "\u8D8B",
      "\u51E4",
      "\u6668",
      "\u755C",
      "\u8F88",
      "\u79E9",
      "\u5375",
      "\u7F72",
      "\u68AF",
      "\u708E",
      "\u6EE9",
      "\u68CB",
      "\u9A71",
      "\u7B5B",
      "\u5CE1",
      "\u5192",
      "\u5565",
      "\u5BFF",
      "\u8BD1",
      "\u6D78",
      "\u6CC9",
      "\u5E3D",
      "\u8FDF",
      "\u7845",
      "\u7586",
      "\u8D37",
      "\u6F0F",
      "\u7A3F",
      "\u51A0",
      "\u5AE9",
      "\u80C1",
      "\u82AF",
      "\u7262",
      "\u53DB",
      "\u8680",
      "\u5965",
      "\u9E23",
      "\u5CAD",
      "\u7F8A",
      "\u51ED",
      "\u4E32",
      "\u5858",
      "\u7ED8",
      "\u9175",
      "\u878D",
      "\u76C6",
      "\u9521",
      "\u5E99",
      "\u7B79",
      "\u51BB",
      "\u8F85",
      "\u6444",
      "\u88AD",
      "\u7B4B",
      "\u62D2",
      "\u50DA",
      "\u65F1",
      "\u94BE",
      "\u9E1F",
      "\u6F06",
      "\u6C88",
      "\u7709",
      "\u758F",
      "\u6DFB",
      "\u68D2",
      "\u7A57",
      "\u785D",
      "\u97E9",
      "\u903C",
      "\u626D",
      "\u4FA8",
      "\u51C9",
      "\u633A",
      "\u7897",
      "\u683D",
      "\u7092",
      "\u676F",
      "\u60A3",
      "\u998F",
      "\u529D",
      "\u8C6A",
      "\u8FBD",
      "\u52C3",
      "\u9E3F",
      "\u65E6",
      "\u540F",
      "\u62DC",
      "\u72D7",
      "\u57CB",
      "\u8F8A",
      "\u63A9",
      "\u996E",
      "\u642C",
      "\u9A82",
      "\u8F9E",
      "\u52FE",
      "\u6263",
      "\u4F30",
      "\u848B",
      "\u7ED2",
      "\u96FE",
      "\u4E08",
      "\u6735",
      "\u59C6",
      "\u62DF",
      "\u5B87",
      "\u8F91",
      "\u9655",
      "\u96D5",
      "\u507F",
      "\u84C4",
      "\u5D07",
      "\u526A",
      "\u5021",
      "\u5385",
      "\u54AC",
      "\u9A76",
      "\u85AF",
      "\u5237",
      "\u65A5",
      "\u756A",
      "\u8D4B",
      "\u5949",
      "\u4F5B",
      "\u6D47",
      "\u6F2B",
      "\u66FC",
      "\u6247",
      "\u9499",
      "\u6843",
      "\u6276",
      "\u4ED4",
      "\u8FD4",
      "\u4FD7",
      "\u4E8F",
      "\u8154",
      "\u978B",
      "\u68F1",
      "\u8986",
      "\u6846",
      "\u6084",
      "\u53D4",
      "\u649E",
      "\u9A97",
      "\u52D8",
      "\u65FA",
      "\u6CB8",
      "\u5B64",
      "\u5410",
      "\u5B5F",
      "\u6E20",
      "\u5C48",
      "\u75BE",
      "\u5999",
      "\u60DC",
      "\u4EF0",
      "\u72E0",
      "\u80C0",
      "\u8C10",
      "\u629B",
      "\u9709",
      "\u6851",
      "\u5C97",
      "\u561B",
      "\u8870",
      "\u76D7",
      "\u6E17",
      "\u810F",
      "\u8D56",
      "\u6D8C",
      "\u751C",
      "\u66F9",
      "\u9605",
      "\u808C",
      "\u54E9",
      "\u5389",
      "\u70C3",
      "\u7EAC",
      "\u6BC5",
      "\u6628",
      "\u4F2A",
      "\u75C7",
      "\u716E",
      "\u53F9",
      "\u9489",
      "\u642D",
      "\u830E",
      "\u7B3C",
      "\u9177",
      "\u5077",
      "\u5F13",
      "\u9525",
      "\u6052",
      "\u6770",
      "\u5751",
      "\u9F3B",
      "\u7FFC",
      "\u7EB6",
      "\u53D9",
      "\u72F1",
      "\u902E",
      "\u7F50",
      "\u7EDC",
      "\u68DA",
      "\u6291",
      "\u81A8",
      "\u852C",
      "\u5BFA",
      "\u9AA4",
      "\u7A46",
      "\u51B6",
      "\u67AF",
      "\u518C",
      "\u5C38",
      "\u51F8",
      "\u7EC5",
      "\u576F",
      "\u727A",
      "\u7130",
      "\u8F70",
      "\u6B23",
      "\u664B",
      "\u7626",
      "\u5FA1",
      "\u952D",
      "\u9526",
      "\u4E27",
      "\u65EC",
      "\u953B",
      "\u5784",
      "\u641C",
      "\u6251",
      "\u9080",
      "\u4EAD",
      "\u916F",
      "\u8FC8",
      "\u8212",
      "\u8106",
      "\u9176",
      "\u95F2",
      "\u5FE7",
      "\u915A",
      "\u987D",
      "\u7FBD",
      "\u6DA8",
      "\u5378",
      "\u4ED7",
      "\u966A",
      "\u8F9F",
      "\u60E9",
      "\u676D",
      "\u59DA",
      "\u809A",
      "\u6349",
      "\u98D8",
      "\u6F02",
      "\u6606",
      "\u6B3A",
      "\u543E",
      "\u90CE",
      "\u70F7",
      "\u6C41",
      "\u5475",
      "\u9970",
      "\u8427",
      "\u96C5",
      "\u90AE",
      "\u8FC1",
      "\u71D5",
      "\u6492",
      "\u59FB",
      "\u8D74",
      "\u5BB4",
      "\u70E6",
      "\u503A",
      "\u5E10",
      "\u6591",
      "\u94C3",
      "\u65E8",
      "\u9187",
      "\u8463",
      "\u997C",
      "\u96CF",
      "\u59FF",
      "\u62CC",
      "\u5085",
      "\u8179",
      "\u59A5",
      "\u63C9",
      "\u8D24",
      "\u62C6",
      "\u6B6A",
      "\u8461",
      "\u80FA",
      "\u4E22",
      "\u6D69",
      "\u5FBD",
      "\u6602",
      "\u57AB",
      "\u6321",
      "\u89C8",
      "\u8D2A",
      "\u6170",
      "\u7F34",
      "\u6C6A",
      "\u614C",
      "\u51AF",
      "\u8BFA",
      "\u59DC",
      "\u8C0A",
      "\u51F6",
      "\u52A3",
      "\u8BEC",
      "\u8000",
      "\u660F",
      "\u8EBA",
      "\u76C8",
      "\u9A91",
      "\u4E54",
      "\u6EAA",
      "\u4E1B",
      "\u5362",
      "\u62B9",
      "\u95F7",
      "\u54A8",
      "\u522E",
      "\u9A7E",
      "\u7F06",
      "\u609F",
      "\u6458",
      "\u94D2",
      "\u63B7",
      "\u9887",
      "\u5E7B",
      "\u67C4",
      "\u60E0",
      "\u60E8",
      "\u4F73",
      "\u4EC7",
      "\u814A",
      "\u7A9D",
      "\u6DA4",
      "\u5251",
      "\u77A7",
      "\u5821",
      "\u6CFC",
      "\u8471",
      "\u7F69",
      "\u970D",
      "\u635E",
      "\u80CE",
      "\u82CD",
      "\u6EE8",
      "\u4FE9",
      "\u6345",
      "\u6E58",
      "\u780D",
      "\u971E",
      "\u90B5",
      "\u8404",
      "\u75AF",
      "\u6DEE",
      "\u9042",
      "\u718A",
      "\u7CAA",
      "\u70D8",
      "\u5BBF",
      "\u6863",
      "\u6208",
      "\u9A73",
      "\u5AC2",
      "\u88D5",
      "\u5F99",
      "\u7BAD",
      "\u6350",
      "\u80A0",
      "\u6491",
      "\u6652",
      "\u8FA8",
      "\u6BBF",
      "\u83B2",
      "\u644A",
      "\u6405",
      "\u9171",
      "\u5C4F",
      "\u75AB",
      "\u54C0",
      "\u8521",
      "\u5835",
      "\u6CAB",
      "\u76B1",
      "\u7545",
      "\u53E0",
      "\u9601",
      "\u83B1",
      "\u6572",
      "\u8F96",
      "\u94A9",
      "\u75D5",
      "\u575D",
      "\u5DF7",
      "\u997F",
      "\u7978",
      "\u4E18",
      "\u7384",
      "\u6E9C",
      "\u66F0",
      "\u903B",
      "\u5F6D",
      "\u5C1D",
      "\u537F",
      "\u59A8",
      "\u8247",
      "\u541E",
      "\u97E6",
      "\u6028",
      "\u77EE",
      "\u6B47"
    ];
  }
});

// node_modules/bip39/src/wordlists/chinese_traditional.json
var require_chinese_traditional = __commonJS({
  "node_modules/bip39/src/wordlists/chinese_traditional.json"(exports2, module2) {
    module2.exports = [
      "\u7684",
      "\u4E00",
      "\u662F",
      "\u5728",
      "\u4E0D",
      "\u4E86",
      "\u6709",
      "\u548C",
      "\u4EBA",
      "\u9019",
      "\u4E2D",
      "\u5927",
      "\u70BA",
      "\u4E0A",
      "\u500B",
      "\u570B",
      "\u6211",
      "\u4EE5",
      "\u8981",
      "\u4ED6",
      "\u6642",
      "\u4F86",
      "\u7528",
      "\u5011",
      "\u751F",
      "\u5230",
      "\u4F5C",
      "\u5730",
      "\u65BC",
      "\u51FA",
      "\u5C31",
      "\u5206",
      "\u5C0D",
      "\u6210",
      "\u6703",
      "\u53EF",
      "\u4E3B",
      "\u767C",
      "\u5E74",
      "\u52D5",
      "\u540C",
      "\u5DE5",
      "\u4E5F",
      "\u80FD",
      "\u4E0B",
      "\u904E",
      "\u5B50",
      "\u8AAA",
      "\u7522",
      "\u7A2E",
      "\u9762",
      "\u800C",
      "\u65B9",
      "\u5F8C",
      "\u591A",
      "\u5B9A",
      "\u884C",
      "\u5B78",
      "\u6CD5",
      "\u6240",
      "\u6C11",
      "\u5F97",
      "\u7D93",
      "\u5341",
      "\u4E09",
      "\u4E4B",
      "\u9032",
      "\u8457",
      "\u7B49",
      "\u90E8",
      "\u5EA6",
      "\u5BB6",
      "\u96FB",
      "\u529B",
      "\u88E1",
      "\u5982",
      "\u6C34",
      "\u5316",
      "\u9AD8",
      "\u81EA",
      "\u4E8C",
      "\u7406",
      "\u8D77",
      "\u5C0F",
      "\u7269",
      "\u73FE",
      "\u5BE6",
      "\u52A0",
      "\u91CF",
      "\u90FD",
      "\u5169",
      "\u9AD4",
      "\u5236",
      "\u6A5F",
      "\u7576",
      "\u4F7F",
      "\u9EDE",
      "\u5F9E",
      "\u696D",
      "\u672C",
      "\u53BB",
      "\u628A",
      "\u6027",
      "\u597D",
      "\u61C9",
      "\u958B",
      "\u5B83",
      "\u5408",
      "\u9084",
      "\u56E0",
      "\u7531",
      "\u5176",
      "\u4E9B",
      "\u7136",
      "\u524D",
      "\u5916",
      "\u5929",
      "\u653F",
      "\u56DB",
      "\u65E5",
      "\u90A3",
      "\u793E",
      "\u7FA9",
      "\u4E8B",
      "\u5E73",
      "\u5F62",
      "\u76F8",
      "\u5168",
      "\u8868",
      "\u9593",
      "\u6A23",
      "\u8207",
      "\u95DC",
      "\u5404",
      "\u91CD",
      "\u65B0",
      "\u7DDA",
      "\u5167",
      "\u6578",
      "\u6B63",
      "\u5FC3",
      "\u53CD",
      "\u4F60",
      "\u660E",
      "\u770B",
      "\u539F",
      "\u53C8",
      "\u9EBC",
      "\u5229",
      "\u6BD4",
      "\u6216",
      "\u4F46",
      "\u8CEA",
      "\u6C23",
      "\u7B2C",
      "\u5411",
      "\u9053",
      "\u547D",
      "\u6B64",
      "\u8B8A",
      "\u689D",
      "\u53EA",
      "\u6C92",
      "\u7D50",
      "\u89E3",
      "\u554F",
      "\u610F",
      "\u5EFA",
      "\u6708",
      "\u516C",
      "\u7121",
      "\u7CFB",
      "\u8ECD",
      "\u5F88",
      "\u60C5",
      "\u8005",
      "\u6700",
      "\u7ACB",
      "\u4EE3",
      "\u60F3",
      "\u5DF2",
      "\u901A",
      "\u4E26",
      "\u63D0",
      "\u76F4",
      "\u984C",
      "\u9EE8",
      "\u7A0B",
      "\u5C55",
      "\u4E94",
      "\u679C",
      "\u6599",
      "\u8C61",
      "\u54E1",
      "\u9769",
      "\u4F4D",
      "\u5165",
      "\u5E38",
      "\u6587",
      "\u7E3D",
      "\u6B21",
      "\u54C1",
      "\u5F0F",
      "\u6D3B",
      "\u8A2D",
      "\u53CA",
      "\u7BA1",
      "\u7279",
      "\u4EF6",
      "\u9577",
      "\u6C42",
      "\u8001",
      "\u982D",
      "\u57FA",
      "\u8CC7",
      "\u908A",
      "\u6D41",
      "\u8DEF",
      "\u7D1A",
      "\u5C11",
      "\u5716",
      "\u5C71",
      "\u7D71",
      "\u63A5",
      "\u77E5",
      "\u8F03",
      "\u5C07",
      "\u7D44",
      "\u898B",
      "\u8A08",
      "\u5225",
      "\u5979",
      "\u624B",
      "\u89D2",
      "\u671F",
      "\u6839",
      "\u8AD6",
      "\u904B",
      "\u8FB2",
      "\u6307",
      "\u5E7E",
      "\u4E5D",
      "\u5340",
      "\u5F37",
      "\u653E",
      "\u6C7A",
      "\u897F",
      "\u88AB",
      "\u5E79",
      "\u505A",
      "\u5FC5",
      "\u6230",
      "\u5148",
      "\u56DE",
      "\u5247",
      "\u4EFB",
      "\u53D6",
      "\u64DA",
      "\u8655",
      "\u968A",
      "\u5357",
      "\u7D66",
      "\u8272",
      "\u5149",
      "\u9580",
      "\u5373",
      "\u4FDD",
      "\u6CBB",
      "\u5317",
      "\u9020",
      "\u767E",
      "\u898F",
      "\u71B1",
      "\u9818",
      "\u4E03",
      "\u6D77",
      "\u53E3",
      "\u6771",
      "\u5C0E",
      "\u5668",
      "\u58D3",
      "\u5FD7",
      "\u4E16",
      "\u91D1",
      "\u589E",
      "\u722D",
      "\u6FDF",
      "\u968E",
      "\u6CB9",
      "\u601D",
      "\u8853",
      "\u6975",
      "\u4EA4",
      "\u53D7",
      "\u806F",
      "\u4EC0",
      "\u8A8D",
      "\u516D",
      "\u5171",
      "\u6B0A",
      "\u6536",
      "\u8B49",
      "\u6539",
      "\u6E05",
      "\u7F8E",
      "\u518D",
      "\u63A1",
      "\u8F49",
      "\u66F4",
      "\u55AE",
      "\u98A8",
      "\u5207",
      "\u6253",
      "\u767D",
      "\u6559",
      "\u901F",
      "\u82B1",
      "\u5E36",
      "\u5B89",
      "\u5834",
      "\u8EAB",
      "\u8ECA",
      "\u4F8B",
      "\u771F",
      "\u52D9",
      "\u5177",
      "\u842C",
      "\u6BCF",
      "\u76EE",
      "\u81F3",
      "\u9054",
      "\u8D70",
      "\u7A4D",
      "\u793A",
      "\u8B70",
      "\u8072",
      "\u5831",
      "\u9B25",
      "\u5B8C",
      "\u985E",
      "\u516B",
      "\u96E2",
      "\u83EF",
      "\u540D",
      "\u78BA",
      "\u624D",
      "\u79D1",
      "\u5F35",
      "\u4FE1",
      "\u99AC",
      "\u7BC0",
      "\u8A71",
      "\u7C73",
      "\u6574",
      "\u7A7A",
      "\u5143",
      "\u6CC1",
      "\u4ECA",
      "\u96C6",
      "\u6EAB",
      "\u50B3",
      "\u571F",
      "\u8A31",
      "\u6B65",
      "\u7FA4",
      "\u5EE3",
      "\u77F3",
      "\u8A18",
      "\u9700",
      "\u6BB5",
      "\u7814",
      "\u754C",
      "\u62C9",
      "\u6797",
      "\u5F8B",
      "\u53EB",
      "\u4E14",
      "\u7A76",
      "\u89C0",
      "\u8D8A",
      "\u7E54",
      "\u88DD",
      "\u5F71",
      "\u7B97",
      "\u4F4E",
      "\u6301",
      "\u97F3",
      "\u773E",
      "\u66F8",
      "\u5E03",
      "\u590D",
      "\u5BB9",
      "\u5152",
      "\u9808",
      "\u969B",
      "\u5546",
      "\u975E",
      "\u9A57",
      "\u9023",
      "\u65B7",
      "\u6DF1",
      "\u96E3",
      "\u8FD1",
      "\u7926",
      "\u5343",
      "\u9031",
      "\u59D4",
      "\u7D20",
      "\u6280",
      "\u5099",
      "\u534A",
      "\u8FA6",
      "\u9752",
      "\u7701",
      "\u5217",
      "\u7FD2",
      "\u97FF",
      "\u7D04",
      "\u652F",
      "\u822C",
      "\u53F2",
      "\u611F",
      "\u52DE",
      "\u4FBF",
      "\u5718",
      "\u5F80",
      "\u9178",
      "\u6B77",
      "\u5E02",
      "\u514B",
      "\u4F55",
      "\u9664",
      "\u6D88",
      "\u69CB",
      "\u5E9C",
      "\u7A31",
      "\u592A",
      "\u6E96",
      "\u7CBE",
      "\u503C",
      "\u865F",
      "\u7387",
      "\u65CF",
      "\u7DAD",
      "\u5283",
      "\u9078",
      "\u6A19",
      "\u5BEB",
      "\u5B58",
      "\u5019",
      "\u6BDB",
      "\u89AA",
      "\u5FEB",
      "\u6548",
      "\u65AF",
      "\u9662",
      "\u67E5",
      "\u6C5F",
      "\u578B",
      "\u773C",
      "\u738B",
      "\u6309",
      "\u683C",
      "\u990A",
      "\u6613",
      "\u7F6E",
      "\u6D3E",
      "\u5C64",
      "\u7247",
      "\u59CB",
      "\u537B",
      "\u5C08",
      "\u72C0",
      "\u80B2",
      "\u5EE0",
      "\u4EAC",
      "\u8B58",
      "\u9069",
      "\u5C6C",
      "\u5713",
      "\u5305",
      "\u706B",
      "\u4F4F",
      "\u8ABF",
      "\u6EFF",
      "\u7E23",
      "\u5C40",
      "\u7167",
      "\u53C3",
      "\u7D05",
      "\u7D30",
      "\u5F15",
      "\u807D",
      "\u8A72",
      "\u9435",
      "\u50F9",
      "\u56B4",
      "\u9996",
      "\u5E95",
      "\u6DB2",
      "\u5B98",
      "\u5FB7",
      "\u96A8",
      "\u75C5",
      "\u8607",
      "\u5931",
      "\u723E",
      "\u6B7B",
      "\u8B1B",
      "\u914D",
      "\u5973",
      "\u9EC3",
      "\u63A8",
      "\u986F",
      "\u8AC7",
      "\u7F6A",
      "\u795E",
      "\u85DD",
      "\u5462",
      "\u5E2D",
      "\u542B",
      "\u4F01",
      "\u671B",
      "\u5BC6",
      "\u6279",
      "\u71DF",
      "\u9805",
      "\u9632",
      "\u8209",
      "\u7403",
      "\u82F1",
      "\u6C27",
      "\u52E2",
      "\u544A",
      "\u674E",
      "\u53F0",
      "\u843D",
      "\u6728",
      "\u5E6B",
      "\u8F2A",
      "\u7834",
      "\u4E9E",
      "\u5E2B",
      "\u570D",
      "\u6CE8",
      "\u9060",
      "\u5B57",
      "\u6750",
      "\u6392",
      "\u4F9B",
      "\u6CB3",
      "\u614B",
      "\u5C01",
      "\u53E6",
      "\u65BD",
      "\u6E1B",
      "\u6A39",
      "\u6EB6",
      "\u600E",
      "\u6B62",
      "\u6848",
      "\u8A00",
      "\u58EB",
      "\u5747",
      "\u6B66",
      "\u56FA",
      "\u8449",
      "\u9B5A",
      "\u6CE2",
      "\u8996",
      "\u50C5",
      "\u8CBB",
      "\u7DCA",
      "\u611B",
      "\u5DE6",
      "\u7AE0",
      "\u65E9",
      "\u671D",
      "\u5BB3",
      "\u7E8C",
      "\u8F15",
      "\u670D",
      "\u8A66",
      "\u98DF",
      "\u5145",
      "\u5175",
      "\u6E90",
      "\u5224",
      "\u8B77",
      "\u53F8",
      "\u8DB3",
      "\u67D0",
      "\u7DF4",
      "\u5DEE",
      "\u81F4",
      "\u677F",
      "\u7530",
      "\u964D",
      "\u9ED1",
      "\u72AF",
      "\u8CA0",
      "\u64CA",
      "\u8303",
      "\u7E7C",
      "\u8208",
      "\u4F3C",
      "\u9918",
      "\u5805",
      "\u66F2",
      "\u8F38",
      "\u4FEE",
      "\u6545",
      "\u57CE",
      "\u592B",
      "\u5920",
      "\u9001",
      "\u7B46",
      "\u8239",
      "\u4F54",
      "\u53F3",
      "\u8CA1",
      "\u5403",
      "\u5BCC",
      "\u6625",
      "\u8077",
      "\u89BA",
      "\u6F22",
      "\u756B",
      "\u529F",
      "\u5DF4",
      "\u8DDF",
      "\u96D6",
      "\u96DC",
      "\u98DB",
      "\u6AA2",
      "\u5438",
      "\u52A9",
      "\u6607",
      "\u967D",
      "\u4E92",
      "\u521D",
      "\u5275",
      "\u6297",
      "\u8003",
      "\u6295",
      "\u58DE",
      "\u7B56",
      "\u53E4",
      "\u5F91",
      "\u63DB",
      "\u672A",
      "\u8DD1",
      "\u7559",
      "\u92FC",
      "\u66FE",
      "\u7AEF",
      "\u8CAC",
      "\u7AD9",
      "\u7C21",
      "\u8FF0",
      "\u9322",
      "\u526F",
      "\u76E1",
      "\u5E1D",
      "\u5C04",
      "\u8349",
      "\u885D",
      "\u627F",
      "\u7368",
      "\u4EE4",
      "\u9650",
      "\u963F",
      "\u5BA3",
      "\u74B0",
      "\u96D9",
      "\u8ACB",
      "\u8D85",
      "\u5FAE",
      "\u8B93",
      "\u63A7",
      "\u5DDE",
      "\u826F",
      "\u8EF8",
      "\u627E",
      "\u5426",
      "\u7D00",
      "\u76CA",
      "\u4F9D",
      "\u512A",
      "\u9802",
      "\u790E",
      "\u8F09",
      "\u5012",
      "\u623F",
      "\u7A81",
      "\u5750",
      "\u7C89",
      "\u6575",
      "\u7565",
      "\u5BA2",
      "\u8881",
      "\u51B7",
      "\u52DD",
      "\u7D55",
      "\u6790",
      "\u584A",
      "\u5291",
      "\u6E2C",
      "\u7D72",
      "\u5354",
      "\u8A34",
      "\u5FF5",
      "\u9673",
      "\u4ECD",
      "\u7F85",
      "\u9E7D",
      "\u53CB",
      "\u6D0B",
      "\u932F",
      "\u82E6",
      "\u591C",
      "\u5211",
      "\u79FB",
      "\u983B",
      "\u9010",
      "\u9760",
      "\u6DF7",
      "\u6BCD",
      "\u77ED",
      "\u76AE",
      "\u7D42",
      "\u805A",
      "\u6C7D",
      "\u6751",
      "\u96F2",
      "\u54EA",
      "\u65E2",
      "\u8DDD",
      "\u885B",
      "\u505C",
      "\u70C8",
      "\u592E",
      "\u5BDF",
      "\u71D2",
      "\u8FC5",
      "\u5883",
      "\u82E5",
      "\u5370",
      "\u6D32",
      "\u523B",
      "\u62EC",
      "\u6FC0",
      "\u5B54",
      "\u641E",
      "\u751A",
      "\u5BA4",
      "\u5F85",
      "\u6838",
      "\u6821",
      "\u6563",
      "\u4FB5",
      "\u5427",
      "\u7532",
      "\u904A",
      "\u4E45",
      "\u83DC",
      "\u5473",
      "\u820A",
      "\u6A21",
      "\u6E56",
      "\u8CA8",
      "\u640D",
      "\u9810",
      "\u963B",
      "\u6BEB",
      "\u666E",
      "\u7A69",
      "\u4E59",
      "\u5ABD",
      "\u690D",
      "\u606F",
      "\u64F4",
      "\u9280",
      "\u8A9E",
      "\u63EE",
      "\u9152",
      "\u5B88",
      "\u62FF",
      "\u5E8F",
      "\u7D19",
      "\u91AB",
      "\u7F3A",
      "\u96E8",
      "\u55CE",
      "\u91DD",
      "\u5289",
      "\u554A",
      "\u6025",
      "\u5531",
      "\u8AA4",
      "\u8A13",
      "\u9858",
      "\u5BE9",
      "\u9644",
      "\u7372",
      "\u8336",
      "\u9BAE",
      "\u7CE7",
      "\u65A4",
      "\u5B69",
      "\u812B",
      "\u786B",
      "\u80A5",
      "\u5584",
      "\u9F8D",
      "\u6F14",
      "\u7236",
      "\u6F38",
      "\u8840",
      "\u6B61",
      "\u68B0",
      "\u638C",
      "\u6B4C",
      "\u6C99",
      "\u525B",
      "\u653B",
      "\u8B02",
      "\u76FE",
      "\u8A0E",
      "\u665A",
      "\u7C92",
      "\u4E82",
      "\u71C3",
      "\u77DB",
      "\u4E4E",
      "\u6BBA",
      "\u85E5",
      "\u5BE7",
      "\u9B6F",
      "\u8CB4",
      "\u9418",
      "\u7164",
      "\u8B80",
      "\u73ED",
      "\u4F2F",
      "\u9999",
      "\u4ECB",
      "\u8FEB",
      "\u53E5",
      "\u8C50",
      "\u57F9",
      "\u63E1",
      "\u862D",
      "\u64D4",
      "\u5F26",
      "\u86CB",
      "\u6C89",
      "\u5047",
      "\u7A7F",
      "\u57F7",
      "\u7B54",
      "\u6A02",
      "\u8AB0",
      "\u9806",
      "\u7159",
      "\u7E2E",
      "\u5FB5",
      "\u81C9",
      "\u559C",
      "\u677E",
      "\u8173",
      "\u56F0",
      "\u7570",
      "\u514D",
      "\u80CC",
      "\u661F",
      "\u798F",
      "\u8CB7",
      "\u67D3",
      "\u4E95",
      "\u6982",
      "\u6162",
      "\u6015",
      "\u78C1",
      "\u500D",
      "\u7956",
      "\u7687",
      "\u4FC3",
      "\u975C",
      "\u88DC",
      "\u8A55",
      "\u7FFB",
      "\u8089",
      "\u8E10",
      "\u5C3C",
      "\u8863",
      "\u5BEC",
      "\u63DA",
      "\u68C9",
      "\u5E0C",
      "\u50B7",
      "\u64CD",
      "\u5782",
      "\u79CB",
      "\u5B9C",
      "\u6C2B",
      "\u5957",
      "\u7763",
      "\u632F",
      "\u67B6",
      "\u4EAE",
      "\u672B",
      "\u61B2",
      "\u6176",
      "\u7DE8",
      "\u725B",
      "\u89F8",
      "\u6620",
      "\u96F7",
      "\u92B7",
      "\u8A69",
      "\u5EA7",
      "\u5C45",
      "\u6293",
      "\u88C2",
      "\u80DE",
      "\u547C",
      "\u5A18",
      "\u666F",
      "\u5A01",
      "\u7DA0",
      "\u6676",
      "\u539A",
      "\u76DF",
      "\u8861",
      "\u96DE",
      "\u5B6B",
      "\u5EF6",
      "\u5371",
      "\u81A0",
      "\u5C4B",
      "\u9109",
      "\u81E8",
      "\u9678",
      "\u9867",
      "\u6389",
      "\u5440",
      "\u71C8",
      "\u6B72",
      "\u63AA",
      "\u675F",
      "\u8010",
      "\u5287",
      "\u7389",
      "\u8D99",
      "\u8DF3",
      "\u54E5",
      "\u5B63",
      "\u8AB2",
      "\u51F1",
      "\u80E1",
      "\u984D",
      "\u6B3E",
      "\u7D39",
      "\u5377",
      "\u9F4A",
      "\u5049",
      "\u84B8",
      "\u6B96",
      "\u6C38",
      "\u5B97",
      "\u82D7",
      "\u5DDD",
      "\u7210",
      "\u5CA9",
      "\u5F31",
      "\u96F6",
      "\u694A",
      "\u594F",
      "\u6CBF",
      "\u9732",
      "\u687F",
      "\u63A2",
      "\u6ED1",
      "\u93AE",
      "\u98EF",
      "\u6FC3",
      "\u822A",
      "\u61F7",
      "\u8D95",
      "\u5EAB",
      "\u596A",
      "\u4F0A",
      "\u9748",
      "\u7A05",
      "\u9014",
      "\u6EC5",
      "\u8CFD",
      "\u6B78",
      "\u53EC",
      "\u9F13",
      "\u64AD",
      "\u76E4",
      "\u88C1",
      "\u96AA",
      "\u5EB7",
      "\u552F",
      "\u9304",
      "\u83CC",
      "\u7D14",
      "\u501F",
      "\u7CD6",
      "\u84CB",
      "\u6A6B",
      "\u7B26",
      "\u79C1",
      "\u52AA",
      "\u5802",
      "\u57DF",
      "\u69CD",
      "\u6F64",
      "\u5E45",
      "\u54C8",
      "\u7ADF",
      "\u719F",
      "\u87F2",
      "\u6FA4",
      "\u8166",
      "\u58E4",
      "\u78B3",
      "\u6B50",
      "\u904D",
      "\u5074",
      "\u5BE8",
      "\u6562",
      "\u5FB9",
      "\u616E",
      "\u659C",
      "\u8584",
      "\u5EAD",
      "\u7D0D",
      "\u5F48",
      "\u98FC",
      "\u4F38",
      "\u6298",
      "\u9EA5",
      "\u6FD5",
      "\u6697",
      "\u8377",
      "\u74E6",
      "\u585E",
      "\u5E8A",
      "\u7BC9",
      "\u60E1",
      "\u6236",
      "\u8A2A",
      "\u5854",
      "\u5947",
      "\u900F",
      "\u6881",
      "\u5200",
      "\u65CB",
      "\u8DE1",
      "\u5361",
      "\u6C2F",
      "\u9047",
      "\u4EFD",
      "\u6BD2",
      "\u6CE5",
      "\u9000",
      "\u6D17",
      "\u64FA",
      "\u7070",
      "\u5F69",
      "\u8CE3",
      "\u8017",
      "\u590F",
      "\u64C7",
      "\u5FD9",
      "\u9285",
      "\u737B",
      "\u786C",
      "\u4E88",
      "\u7E41",
      "\u5708",
      "\u96EA",
      "\u51FD",
      "\u4EA6",
      "\u62BD",
      "\u7BC7",
      "\u9663",
      "\u9670",
      "\u4E01",
      "\u5C3A",
      "\u8FFD",
      "\u5806",
      "\u96C4",
      "\u8FCE",
      "\u6CDB",
      "\u7238",
      "\u6A13",
      "\u907F",
      "\u8B00",
      "\u5678",
      "\u91CE",
      "\u8C6C",
      "\u65D7",
      "\u7D2F",
      "\u504F",
      "\u5178",
      "\u9928",
      "\u7D22",
      "\u79E6",
      "\u8102",
      "\u6F6E",
      "\u723A",
      "\u8C46",
      "\u5FFD",
      "\u6258",
      "\u9A5A",
      "\u5851",
      "\u907A",
      "\u6108",
      "\u6731",
      "\u66FF",
      "\u7E96",
      "\u7C97",
      "\u50BE",
      "\u5C1A",
      "\u75DB",
      "\u695A",
      "\u8B1D",
      "\u596E",
      "\u8CFC",
      "\u78E8",
      "\u541B",
      "\u6C60",
      "\u65C1",
      "\u788E",
      "\u9AA8",
      "\u76E3",
      "\u6355",
      "\u5F1F",
      "\u66B4",
      "\u5272",
      "\u8CAB",
      "\u6B8A",
      "\u91CB",
      "\u8A5E",
      "\u4EA1",
      "\u58C1",
      "\u9813",
      "\u5BF6",
      "\u5348",
      "\u5875",
      "\u805E",
      "\u63ED",
      "\u70AE",
      "\u6B98",
      "\u51AC",
      "\u6A4B",
      "\u5A66",
      "\u8B66",
      "\u7D9C",
      "\u62DB",
      "\u5433",
      "\u4ED8",
      "\u6D6E",
      "\u906D",
      "\u5F90",
      "\u60A8",
      "\u6416",
      "\u8C37",
      "\u8D0A",
      "\u7BB1",
      "\u9694",
      "\u8A02",
      "\u7537",
      "\u5439",
      "\u5712",
      "\u7D1B",
      "\u5510",
      "\u6557",
      "\u5B8B",
      "\u73BB",
      "\u5DE8",
      "\u8015",
      "\u5766",
      "\u69AE",
      "\u9589",
      "\u7063",
      "\u9375",
      "\u51E1",
      "\u99D0",
      "\u934B",
      "\u6551",
      "\u6069",
      "\u525D",
      "\u51DD",
      "\u9E7C",
      "\u9F52",
      "\u622A",
      "\u7149",
      "\u9EBB",
      "\u7D21",
      "\u7981",
      "\u5EE2",
      "\u76DB",
      "\u7248",
      "\u7DE9",
      "\u6DE8",
      "\u775B",
      "\u660C",
      "\u5A5A",
      "\u6D89",
      "\u7B52",
      "\u5634",
      "\u63D2",
      "\u5CB8",
      "\u6717",
      "\u838A",
      "\u8857",
      "\u85CF",
      "\u59D1",
      "\u8CBF",
      "\u8150",
      "\u5974",
      "\u5566",
      "\u6163",
      "\u4E58",
      "\u5925",
      "\u6062",
      "\u52FB",
      "\u7D17",
      "\u624E",
      "\u8FAF",
      "\u8033",
      "\u5F6A",
      "\u81E3",
      "\u5104",
      "\u7483",
      "\u62B5",
      "\u8108",
      "\u79C0",
      "\u85A9",
      "\u4FC4",
      "\u7DB2",
      "\u821E",
      "\u5E97",
      "\u5674",
      "\u7E31",
      "\u5BF8",
      "\u6C57",
      "\u639B",
      "\u6D2A",
      "\u8CC0",
      "\u9583",
      "\u67EC",
      "\u7206",
      "\u70EF",
      "\u6D25",
      "\u7A3B",
      "\u7246",
      "\u8EDF",
      "\u52C7",
      "\u50CF",
      "\u6EFE",
      "\u5398",
      "\u8499",
      "\u82B3",
      "\u80AF",
      "\u5761",
      "\u67F1",
      "\u76EA",
      "\u817F",
      "\u5100",
      "\u65C5",
      "\u5C3E",
      "\u8ECB",
      "\u51B0",
      "\u8CA2",
      "\u767B",
      "\u9ECE",
      "\u524A",
      "\u947D",
      "\u52D2",
      "\u9003",
      "\u969C",
      "\u6C28",
      "\u90ED",
      "\u5CF0",
      "\u5E63",
      "\u6E2F",
      "\u4F0F",
      "\u8ECC",
      "\u755D",
      "\u7562",
      "\u64E6",
      "\u83AB",
      "\u523A",
      "\u6D6A",
      "\u79D8",
      "\u63F4",
      "\u682A",
      "\u5065",
      "\u552E",
      "\u80A1",
      "\u5CF6",
      "\u7518",
      "\u6CE1",
      "\u7761",
      "\u7AE5",
      "\u9444",
      "\u6E6F",
      "\u95A5",
      "\u4F11",
      "\u532F",
      "\u820D",
      "\u7267",
      "\u7E5E",
      "\u70B8",
      "\u54F2",
      "\u78F7",
      "\u7E3E",
      "\u670B",
      "\u6DE1",
      "\u5C16",
      "\u555F",
      "\u9677",
      "\u67F4",
      "\u5448",
      "\u5F92",
      "\u984F",
      "\u6DDA",
      "\u7A0D",
      "\u5FD8",
      "\u6CF5",
      "\u85CD",
      "\u62D6",
      "\u6D1E",
      "\u6388",
      "\u93E1",
      "\u8F9B",
      "\u58EF",
      "\u92D2",
      "\u8CA7",
      "\u865B",
      "\u5F4E",
      "\u6469",
      "\u6CF0",
      "\u5E7C",
      "\u5EF7",
      "\u5C0A",
      "\u7A97",
      "\u7DB1",
      "\u5F04",
      "\u96B8",
      "\u7591",
      "\u6C0F",
      "\u5BAE",
      "\u59D0",
      "\u9707",
      "\u745E",
      "\u602A",
      "\u5C24",
      "\u7434",
      "\u5FAA",
      "\u63CF",
      "\u819C",
      "\u9055",
      "\u593E",
      "\u8170",
      "\u7DE3",
      "\u73E0",
      "\u7AAE",
      "\u68EE",
      "\u679D",
      "\u7AF9",
      "\u6E9D",
      "\u50AC",
      "\u7E69",
      "\u61B6",
      "\u90A6",
      "\u5269",
      "\u5E78",
      "\u6F3F",
      "\u6B04",
      "\u64C1",
      "\u7259",
      "\u8CAF",
      "\u79AE",
      "\u6FFE",
      "\u9209",
      "\u7D0B",
      "\u7F77",
      "\u62CD",
      "\u54B1",
      "\u558A",
      "\u8896",
      "\u57C3",
      "\u52E4",
      "\u7F70",
      "\u7126",
      "\u6F5B",
      "\u4F0D",
      "\u58A8",
      "\u6B32",
      "\u7E2B",
      "\u59D3",
      "\u520A",
      "\u98FD",
      "\u4EFF",
      "\u734E",
      "\u92C1",
      "\u9B3C",
      "\u9E97",
      "\u8DE8",
      "\u9ED8",
      "\u6316",
      "\u93C8",
      "\u6383",
      "\u559D",
      "\u888B",
      "\u70AD",
      "\u6C61",
      "\u5E55",
      "\u8AF8",
      "\u5F27",
      "\u52F5",
      "\u6885",
      "\u5976",
      "\u6F54",
      "\u707D",
      "\u821F",
      "\u9451",
      "\u82EF",
      "\u8A1F",
      "\u62B1",
      "\u6BC0",
      "\u61C2",
      "\u5BD2",
      "\u667A",
      "\u57D4",
      "\u5BC4",
      "\u5C46",
      "\u8E8D",
      "\u6E21",
      "\u6311",
      "\u4E39",
      "\u8271",
      "\u8C9D",
      "\u78B0",
      "\u62D4",
      "\u7239",
      "\u6234",
      "\u78BC",
      "\u5922",
      "\u82BD",
      "\u7194",
      "\u8D64",
      "\u6F01",
      "\u54ED",
      "\u656C",
      "\u9846",
      "\u5954",
      "\u925B",
      "\u4EF2",
      "\u864E",
      "\u7A00",
      "\u59B9",
      "\u4E4F",
      "\u73CD",
      "\u7533",
      "\u684C",
      "\u9075",
      "\u5141",
      "\u9686",
      "\u87BA",
      "\u5009",
      "\u9B4F",
      "\u92B3",
      "\u66C9",
      "\u6C2E",
      "\u517C",
      "\u96B1",
      "\u7919",
      "\u8D6B",
      "\u64A5",
      "\u5FE0",
      "\u8085",
      "\u7F38",
      "\u727D",
      "\u6436",
      "\u535A",
      "\u5DE7",
      "\u6BBC",
      "\u5144",
      "\u675C",
      "\u8A0A",
      "\u8AA0",
      "\u78A7",
      "\u7965",
      "\u67EF",
      "\u9801",
      "\u5DE1",
      "\u77E9",
      "\u60B2",
      "\u704C",
      "\u9F61",
      "\u502B",
      "\u7968",
      "\u5C0B",
      "\u6842",
      "\u92EA",
      "\u8056",
      "\u6050",
      "\u6070",
      "\u912D",
      "\u8DA3",
      "\u62AC",
      "\u8352",
      "\u9A30",
      "\u8CBC",
      "\u67D4",
      "\u6EF4",
      "\u731B",
      "\u95CA",
      "\u8F1B",
      "\u59BB",
      "\u586B",
      "\u64A4",
      "\u5132",
      "\u7C3D",
      "\u9B27",
      "\u64FE",
      "\u7D2B",
      "\u7802",
      "\u905E",
      "\u6232",
      "\u540A",
      "\u9676",
      "\u4F10",
      "\u9935",
      "\u7642",
      "\u74F6",
      "\u5A46",
      "\u64AB",
      "\u81C2",
      "\u6478",
      "\u5FCD",
      "\u8766",
      "\u881F",
      "\u9130",
      "\u80F8",
      "\u978F",
      "\u64E0",
      "\u5076",
      "\u68C4",
      "\u69FD",
      "\u52C1",
      "\u4E73",
      "\u9127",
      "\u5409",
      "\u4EC1",
      "\u721B",
      "\u78DA",
      "\u79DF",
      "\u70CF",
      "\u8266",
      "\u4F34",
      "\u74DC",
      "\u6DFA",
      "\u4E19",
      "\u66AB",
      "\u71E5",
      "\u6A61",
      "\u67F3",
      "\u8FF7",
      "\u6696",
      "\u724C",
      "\u79E7",
      "\u81BD",
      "\u8A73",
      "\u7C27",
      "\u8E0F",
      "\u74F7",
      "\u8B5C",
      "\u5446",
      "\u8CD3",
      "\u7CCA",
      "\u6D1B",
      "\u8F1D",
      "\u61A4",
      "\u7AF6",
      "\u9699",
      "\u6012",
      "\u7C98",
      "\u4E43",
      "\u7DD2",
      "\u80A9",
      "\u7C4D",
      "\u654F",
      "\u5857",
      "\u7199",
      "\u7686",
      "\u5075",
      "\u61F8",
      "\u6398",
      "\u4EAB",
      "\u7CFE",
      "\u9192",
      "\u72C2",
      "\u9396",
      "\u6DC0",
      "\u6068",
      "\u7272",
      "\u9738",
      "\u722C",
      "\u8CDE",
      "\u9006",
      "\u73A9",
      "\u9675",
      "\u795D",
      "\u79D2",
      "\u6D59",
      "\u8C8C",
      "\u5F79",
      "\u5F7C",
      "\u6089",
      "\u9D28",
      "\u8DA8",
      "\u9CF3",
      "\u6668",
      "\u755C",
      "\u8F29",
      "\u79E9",
      "\u5375",
      "\u7F72",
      "\u68AF",
      "\u708E",
      "\u7058",
      "\u68CB",
      "\u9A45",
      "\u7BE9",
      "\u5CFD",
      "\u5192",
      "\u5565",
      "\u58FD",
      "\u8B6F",
      "\u6D78",
      "\u6CC9",
      "\u5E3D",
      "\u9072",
      "\u77FD",
      "\u7586",
      "\u8CB8",
      "\u6F0F",
      "\u7A3F",
      "\u51A0",
      "\u5AE9",
      "\u8105",
      "\u82AF",
      "\u7262",
      "\u53DB",
      "\u8755",
      "\u5967",
      "\u9CF4",
      "\u5DBA",
      "\u7F8A",
      "\u6191",
      "\u4E32",
      "\u5858",
      "\u7E6A",
      "\u9175",
      "\u878D",
      "\u76C6",
      "\u932B",
      "\u5EDF",
      "\u7C4C",
      "\u51CD",
      "\u8F14",
      "\u651D",
      "\u8972",
      "\u7B4B",
      "\u62D2",
      "\u50DA",
      "\u65F1",
      "\u9240",
      "\u9CE5",
      "\u6F06",
      "\u6C88",
      "\u7709",
      "\u758F",
      "\u6DFB",
      "\u68D2",
      "\u7A57",
      "\u785D",
      "\u97D3",
      "\u903C",
      "\u626D",
      "\u50D1",
      "\u6DBC",
      "\u633A",
      "\u7897",
      "\u683D",
      "\u7092",
      "\u676F",
      "\u60A3",
      "\u993E",
      "\u52F8",
      "\u8C6A",
      "\u907C",
      "\u52C3",
      "\u9D3B",
      "\u65E6",
      "\u540F",
      "\u62DC",
      "\u72D7",
      "\u57CB",
      "\u8F25",
      "\u63A9",
      "\u98F2",
      "\u642C",
      "\u7F75",
      "\u8FAD",
      "\u52FE",
      "\u6263",
      "\u4F30",
      "\u8523",
      "\u7D68",
      "\u9727",
      "\u4E08",
      "\u6735",
      "\u59C6",
      "\u64EC",
      "\u5B87",
      "\u8F2F",
      "\u965D",
      "\u96D5",
      "\u511F",
      "\u84C4",
      "\u5D07",
      "\u526A",
      "\u5021",
      "\u5EF3",
      "\u54AC",
      "\u99DB",
      "\u85AF",
      "\u5237",
      "\u65A5",
      "\u756A",
      "\u8CE6",
      "\u5949",
      "\u4F5B",
      "\u6F86",
      "\u6F2B",
      "\u66FC",
      "\u6247",
      "\u9223",
      "\u6843",
      "\u6276",
      "\u4ED4",
      "\u8FD4",
      "\u4FD7",
      "\u8667",
      "\u8154",
      "\u978B",
      "\u68F1",
      "\u8986",
      "\u6846",
      "\u6084",
      "\u53D4",
      "\u649E",
      "\u9A19",
      "\u52D8",
      "\u65FA",
      "\u6CB8",
      "\u5B64",
      "\u5410",
      "\u5B5F",
      "\u6E20",
      "\u5C48",
      "\u75BE",
      "\u5999",
      "\u60DC",
      "\u4EF0",
      "\u72E0",
      "\u8139",
      "\u8AE7",
      "\u62CB",
      "\u9EF4",
      "\u6851",
      "\u5D17",
      "\u561B",
      "\u8870",
      "\u76DC",
      "\u6EF2",
      "\u81DF",
      "\u8CF4",
      "\u6E67",
      "\u751C",
      "\u66F9",
      "\u95B1",
      "\u808C",
      "\u54E9",
      "\u53B2",
      "\u70F4",
      "\u7DEF",
      "\u6BC5",
      "\u6628",
      "\u507D",
      "\u75C7",
      "\u716E",
      "\u5606",
      "\u91D8",
      "\u642D",
      "\u8396",
      "\u7C60",
      "\u9177",
      "\u5077",
      "\u5F13",
      "\u9310",
      "\u6046",
      "\u5091",
      "\u5751",
      "\u9F3B",
      "\u7FFC",
      "\u7DB8",
      "\u6558",
      "\u7344",
      "\u902E",
      "\u7F50",
      "\u7D61",
      "\u68DA",
      "\u6291",
      "\u81A8",
      "\u852C",
      "\u5BFA",
      "\u9A5F",
      "\u7A46",
      "\u51B6",
      "\u67AF",
      "\u518A",
      "\u5C4D",
      "\u51F8",
      "\u7D33",
      "\u576F",
      "\u72A7",
      "\u7130",
      "\u8F5F",
      "\u6B23",
      "\u6649",
      "\u7626",
      "\u79A6",
      "\u9320",
      "\u9326",
      "\u55AA",
      "\u65EC",
      "\u935B",
      "\u58DF",
      "\u641C",
      "\u64B2",
      "\u9080",
      "\u4EAD",
      "\u916F",
      "\u9081",
      "\u8212",
      "\u8106",
      "\u9176",
      "\u9592",
      "\u6182",
      "\u915A",
      "\u9811",
      "\u7FBD",
      "\u6F32",
      "\u5378",
      "\u4ED7",
      "\u966A",
      "\u95E2",
      "\u61F2",
      "\u676D",
      "\u59DA",
      "\u809A",
      "\u6349",
      "\u98C4",
      "\u6F02",
      "\u6606",
      "\u6B3A",
      "\u543E",
      "\u90CE",
      "\u70F7",
      "\u6C41",
      "\u5475",
      "\u98FE",
      "\u856D",
      "\u96C5",
      "\u90F5",
      "\u9077",
      "\u71D5",
      "\u6492",
      "\u59FB",
      "\u8D74",
      "\u5BB4",
      "\u7169",
      "\u50B5",
      "\u5E33",
      "\u6591",
      "\u9234",
      "\u65E8",
      "\u9187",
      "\u8463",
      "\u9905",
      "\u96DB",
      "\u59FF",
      "\u62CC",
      "\u5085",
      "\u8179",
      "\u59A5",
      "\u63C9",
      "\u8CE2",
      "\u62C6",
      "\u6B6A",
      "\u8461",
      "\u80FA",
      "\u4E1F",
      "\u6D69",
      "\u5FBD",
      "\u6602",
      "\u588A",
      "\u64CB",
      "\u89BD",
      "\u8CAA",
      "\u6170",
      "\u7E73",
      "\u6C6A",
      "\u614C",
      "\u99AE",
      "\u8AFE",
      "\u59DC",
      "\u8ABC",
      "\u5147",
      "\u52A3",
      "\u8AA3",
      "\u8000",
      "\u660F",
      "\u8EBA",
      "\u76C8",
      "\u9A0E",
      "\u55AC",
      "\u6EAA",
      "\u53E2",
      "\u76E7",
      "\u62B9",
      "\u60B6",
      "\u8AEE",
      "\u522E",
      "\u99D5",
      "\u7E9C",
      "\u609F",
      "\u6458",
      "\u927A",
      "\u64F2",
      "\u9817",
      "\u5E7B",
      "\u67C4",
      "\u60E0",
      "\u6158",
      "\u4F73",
      "\u4EC7",
      "\u81D8",
      "\u7AA9",
      "\u6ECC",
      "\u528D",
      "\u77A7",
      "\u5821",
      "\u6F51",
      "\u8525",
      "\u7F69",
      "\u970D",
      "\u6488",
      "\u80CE",
      "\u84BC",
      "\u6FF1",
      "\u5006",
      "\u6345",
      "\u6E58",
      "\u780D",
      "\u971E",
      "\u90B5",
      "\u8404",
      "\u760B",
      "\u6DEE",
      "\u9042",
      "\u718A",
      "\u7CDE",
      "\u70D8",
      "\u5BBF",
      "\u6A94",
      "\u6208",
      "\u99C1",
      "\u5AC2",
      "\u88D5",
      "\u5F99",
      "\u7BAD",
      "\u6350",
      "\u8178",
      "\u6490",
      "\u66EC",
      "\u8FA8",
      "\u6BBF",
      "\u84EE",
      "\u6524",
      "\u652A",
      "\u91AC",
      "\u5C4F",
      "\u75AB",
      "\u54C0",
      "\u8521",
      "\u5835",
      "\u6CAB",
      "\u76BA",
      "\u66A2",
      "\u758A",
      "\u95A3",
      "\u840A",
      "\u6572",
      "\u8F44",
      "\u9264",
      "\u75D5",
      "\u58E9",
      "\u5DF7",
      "\u9913",
      "\u798D",
      "\u4E18",
      "\u7384",
      "\u6E9C",
      "\u66F0",
      "\u908F",
      "\u5F6D",
      "\u5617",
      "\u537F",
      "\u59A8",
      "\u8247",
      "\u541E",
      "\u97CB",
      "\u6028",
      "\u77EE",
      "\u6B47"
    ];
  }
});

// node_modules/bip39/src/wordlists/korean.json
var require_korean = __commonJS({
  "node_modules/bip39/src/wordlists/korean.json"(exports2, module2) {
    module2.exports = [
      "\u1100\u1161\u1100\u1167\u11A8",
      "\u1100\u1161\u1101\u1173\u11B7",
      "\u1100\u1161\u1102\u1161\u11AB",
      "\u1100\u1161\u1102\u1173\u11BC",
      "\u1100\u1161\u1103\u1173\u11A8",
      "\u1100\u1161\u1105\u1173\u110E\u1175\u11B7",
      "\u1100\u1161\u1106\u116E\u11B7",
      "\u1100\u1161\u1107\u1161\u11BC",
      "\u1100\u1161\u1109\u1161\u11BC",
      "\u1100\u1161\u1109\u1173\u11B7",
      "\u1100\u1161\u110B\u116E\u11AB\u1103\u1166",
      "\u1100\u1161\u110B\u1173\u11AF",
      "\u1100\u1161\u110B\u1175\u1103\u1173",
      "\u1100\u1161\u110B\u1175\u11B8",
      "\u1100\u1161\u110C\u1161\u11BC",
      "\u1100\u1161\u110C\u1165\u11BC",
      "\u1100\u1161\u110C\u1169\u11A8",
      "\u1100\u1161\u110C\u116E\u11A8",
      "\u1100\u1161\u11A8\u110B\u1169",
      "\u1100\u1161\u11A8\u110C\u1161",
      "\u1100\u1161\u11AB\u1100\u1167\u11A8",
      "\u1100\u1161\u11AB\u1107\u116E",
      "\u1100\u1161\u11AB\u1109\u1165\u11B8",
      "\u1100\u1161\u11AB\u110C\u1161\u11BC",
      "\u1100\u1161\u11AB\u110C\u1165\u11B8",
      "\u1100\u1161\u11AB\u1111\u1161\u11AB",
      "\u1100\u1161\u11AF\u1103\u1173\u11BC",
      "\u1100\u1161\u11AF\u1107\u1175",
      "\u1100\u1161\u11AF\u1109\u1162\u11A8",
      "\u1100\u1161\u11AF\u110C\u1173\u11BC",
      "\u1100\u1161\u11B7\u1100\u1161\u11A8",
      "\u1100\u1161\u11B7\u1100\u1175",
      "\u1100\u1161\u11B7\u1109\u1169",
      "\u1100\u1161\u11B7\u1109\u116E\u1109\u1165\u11BC",
      "\u1100\u1161\u11B7\u110C\u1161",
      "\u1100\u1161\u11B7\u110C\u1165\u11BC",
      "\u1100\u1161\u11B8\u110C\u1161\u1100\u1175",
      "\u1100\u1161\u11BC\u1102\u1161\u11B7",
      "\u1100\u1161\u11BC\u1103\u1161\u11BC",
      "\u1100\u1161\u11BC\u1103\u1169",
      "\u1100\u1161\u11BC\u1105\u1167\u11A8\u1112\u1175",
      "\u1100\u1161\u11BC\u1107\u1167\u11AB",
      "\u1100\u1161\u11BC\u1107\u116E\u11A8",
      "\u1100\u1161\u11BC\u1109\u1161",
      "\u1100\u1161\u11BC\u1109\u116E\u1105\u1163\u11BC",
      "\u1100\u1161\u11BC\u110B\u1161\u110C\u1175",
      "\u1100\u1161\u11BC\u110B\u116F\u11AB\u1103\u1169",
      "\u1100\u1161\u11BC\u110B\u1174",
      "\u1100\u1161\u11BC\u110C\u1166",
      "\u1100\u1161\u11BC\u110C\u1169",
      "\u1100\u1161\u11C0\u110B\u1175",
      "\u1100\u1162\u1100\u116E\u1105\u1175",
      "\u1100\u1162\u1102\u1161\u1105\u1175",
      "\u1100\u1162\u1107\u1161\u11BC",
      "\u1100\u1162\u1107\u1167\u11AF",
      "\u1100\u1162\u1109\u1165\u11AB",
      "\u1100\u1162\u1109\u1165\u11BC",
      "\u1100\u1162\u110B\u1175\u11AB",
      "\u1100\u1162\u11A8\u1100\u116A\u11AB\u110C\u1165\u11A8",
      "\u1100\u1165\u1109\u1175\u11AF",
      "\u1100\u1165\u110B\u1162\u11A8",
      "\u1100\u1165\u110B\u116E\u11AF",
      "\u1100\u1165\u110C\u1175\u11BA",
      "\u1100\u1165\u1111\u116E\u11B7",
      "\u1100\u1165\u11A8\u110C\u1165\u11BC",
      "\u1100\u1165\u11AB\u1100\u1161\u11BC",
      "\u1100\u1165\u11AB\u1106\u116E\u11AF",
      "\u1100\u1165\u11AB\u1109\u1165\u11AF",
      "\u1100\u1165\u11AB\u110C\u1169",
      "\u1100\u1165\u11AB\u110E\u116E\u11A8",
      "\u1100\u1165\u11AF\u110B\u1173\u11B7",
      "\u1100\u1165\u11B7\u1109\u1161",
      "\u1100\u1165\u11B7\u1110\u1169",
      "\u1100\u1166\u1109\u1175\u1111\u1161\u11AB",
      "\u1100\u1166\u110B\u1175\u11B7",
      "\u1100\u1167\u110B\u116E\u11AF",
      "\u1100\u1167\u11AB\u1112\u1162",
      "\u1100\u1167\u11AF\u1100\u116A",
      "\u1100\u1167\u11AF\u1100\u116E\u11A8",
      "\u1100\u1167\u11AF\u1105\u1169\u11AB",
      "\u1100\u1167\u11AF\u1109\u1165\u11A8",
      "\u1100\u1167\u11AF\u1109\u1173\u11BC",
      "\u1100\u1167\u11AF\u1109\u1175\u11B7",
      "\u1100\u1167\u11AF\u110C\u1165\u11BC",
      "\u1100\u1167\u11AF\u1112\u1169\u11AB",
      "\u1100\u1167\u11BC\u1100\u1168",
      "\u1100\u1167\u11BC\u1100\u1169",
      "\u1100\u1167\u11BC\u1100\u1175",
      "\u1100\u1167\u11BC\u1105\u1167\u11A8",
      "\u1100\u1167\u11BC\u1107\u1169\u11A8\u1100\u116E\u11BC",
      "\u1100\u1167\u11BC\u1107\u1175",
      "\u1100\u1167\u11BC\u1109\u1161\u11BC\u1103\u1169",
      "\u1100\u1167\u11BC\u110B\u1167\u11BC",
      "\u1100\u1167\u11BC\u110B\u116E",
      "\u1100\u1167\u11BC\u110C\u1162\u11BC",
      "\u1100\u1167\u11BC\u110C\u1166",
      "\u1100\u1167\u11BC\u110C\u116E",
      "\u1100\u1167\u11BC\u110E\u1161\u11AF",
      "\u1100\u1167\u11BC\u110E\u1175",
      "\u1100\u1167\u11BC\u1112\u1163\u11BC",
      "\u1100\u1167\u11BC\u1112\u1165\u11B7",
      "\u1100\u1168\u1100\u1169\u11A8",
      "\u1100\u1168\u1103\u1161\u11AB",
      "\u1100\u1168\u1105\u1161\u11AB",
      "\u1100\u1168\u1109\u1161\u11AB",
      "\u1100\u1168\u1109\u1169\u11A8",
      "\u1100\u1168\u110B\u1163\u11A8",
      "\u1100\u1168\u110C\u1165\u11AF",
      "\u1100\u1168\u110E\u1173\u11BC",
      "\u1100\u1168\u1112\u116C\u11A8",
      "\u1100\u1169\u1100\u1162\u11A8",
      "\u1100\u1169\u1100\u116E\u1105\u1167",
      "\u1100\u1169\u1100\u116E\u11BC",
      "\u1100\u1169\u1100\u1173\u11B8",
      "\u1100\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
      "\u1100\u1169\u1106\u116E\u1109\u1175\u11AB",
      "\u1100\u1169\u1106\u1175\u11AB",
      "\u1100\u1169\u110B\u1163\u11BC\u110B\u1175",
      "\u1100\u1169\u110C\u1161\u11BC",
      "\u1100\u1169\u110C\u1165\u11AB",
      "\u1100\u1169\u110C\u1175\u11B8",
      "\u1100\u1169\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
      "\u1100\u1169\u1110\u1169\u11BC",
      "\u1100\u1169\u1112\u1163\u11BC",
      "\u1100\u1169\u11A8\u1109\u1175\u11A8",
      "\u1100\u1169\u11AF\u1106\u1169\u11A8",
      "\u1100\u1169\u11AF\u110D\u1161\u1100\u1175",
      "\u1100\u1169\u11AF\u1111\u1173",
      "\u1100\u1169\u11BC\u1100\u1161\u11AB",
      "\u1100\u1169\u11BC\u1100\u1162",
      "\u1100\u1169\u11BC\u1100\u1167\u11A8",
      "\u1100\u1169\u11BC\u1100\u116E\u11AB",
      "\u1100\u1169\u11BC\u1100\u1173\u11B8",
      "\u1100\u1169\u11BC\u1100\u1175",
      "\u1100\u1169\u11BC\u1103\u1169\u11BC",
      "\u1100\u1169\u11BC\u1106\u116E\u110B\u116F\u11AB",
      "\u1100\u1169\u11BC\u1107\u116E",
      "\u1100\u1169\u11BC\u1109\u1161",
      "\u1100\u1169\u11BC\u1109\u1175\u11A8",
      "\u1100\u1169\u11BC\u110B\u1165\u11B8",
      "\u1100\u1169\u11BC\u110B\u1167\u11AB",
      "\u1100\u1169\u11BC\u110B\u116F\u11AB",
      "\u1100\u1169\u11BC\u110C\u1161\u11BC",
      "\u1100\u1169\u11BC\u110D\u1161",
      "\u1100\u1169\u11BC\u110E\u1162\u11A8",
      "\u1100\u1169\u11BC\u1110\u1169\u11BC",
      "\u1100\u1169\u11BC\u1111\u1169",
      "\u1100\u1169\u11BC\u1112\u1161\u11BC",
      "\u1100\u1169\u11BC\u1112\u1172\u110B\u1175\u11AF",
      "\u1100\u116A\u1106\u1169\u11A8",
      "\u1100\u116A\u110B\u1175\u11AF",
      "\u1100\u116A\u110C\u1161\u11BC",
      "\u1100\u116A\u110C\u1165\u11BC",
      "\u1100\u116A\u1112\u1161\u11A8",
      "\u1100\u116A\u11AB\u1100\u1162\u11A8",
      "\u1100\u116A\u11AB\u1100\u1168",
      "\u1100\u116A\u11AB\u1100\u116A\u11BC",
      "\u1100\u116A\u11AB\u1102\u1167\u11B7",
      "\u1100\u116A\u11AB\u1105\u1161\u11B7",
      "\u1100\u116A\u11AB\u1105\u1167\u11AB",
      "\u1100\u116A\u11AB\u1105\u1175",
      "\u1100\u116A\u11AB\u1109\u1173\u11B8",
      "\u1100\u116A\u11AB\u1109\u1175\u11B7",
      "\u1100\u116A\u11AB\u110C\u1165\u11B7",
      "\u1100\u116A\u11AB\u110E\u1161\u11AF",
      "\u1100\u116A\u11BC\u1100\u1167\u11BC",
      "\u1100\u116A\u11BC\u1100\u1169",
      "\u1100\u116A\u11BC\u110C\u1161\u11BC",
      "\u1100\u116A\u11BC\u110C\u116E",
      "\u1100\u116C\u1105\u1169\u110B\u116E\u11B7",
      "\u1100\u116C\u11BC\u110C\u1161\u11BC\u1112\u1175",
      "\u1100\u116D\u1100\u116A\u1109\u1165",
      "\u1100\u116D\u1106\u116E\u11AB",
      "\u1100\u116D\u1107\u1169\u11A8",
      "\u1100\u116D\u1109\u1175\u11AF",
      "\u1100\u116D\u110B\u1163\u11BC",
      "\u1100\u116D\u110B\u1172\u11A8",
      "\u1100\u116D\u110C\u1161\u11BC",
      "\u1100\u116D\u110C\u1175\u11A8",
      "\u1100\u116D\u1110\u1169\u11BC",
      "\u1100\u116D\u1112\u116A\u11AB",
      "\u1100\u116D\u1112\u116E\u11AB",
      "\u1100\u116E\u1100\u1167\u11BC",
      "\u1100\u116E\u1105\u1173\u11B7",
      "\u1100\u116E\u1106\u1165\u11BC",
      "\u1100\u116E\u1107\u1167\u11AF",
      "\u1100\u116E\u1107\u116E\u11AB",
      "\u1100\u116E\u1109\u1165\u11A8",
      "\u1100\u116E\u1109\u1165\u11BC",
      "\u1100\u116E\u1109\u1169\u11A8",
      "\u1100\u116E\u110B\u1167\u11A8",
      "\u1100\u116E\u110B\u1175\u11B8",
      "\u1100\u116E\u110E\u1165\u11BC",
      "\u1100\u116E\u110E\u1166\u110C\u1165\u11A8",
      "\u1100\u116E\u11A8\u1100\u1161",
      "\u1100\u116E\u11A8\u1100\u1175",
      "\u1100\u116E\u11A8\u1102\u1162",
      "\u1100\u116E\u11A8\u1105\u1175\u11B8",
      "\u1100\u116E\u11A8\u1106\u116E\u11AF",
      "\u1100\u116E\u11A8\u1106\u1175\u11AB",
      "\u1100\u116E\u11A8\u1109\u116E",
      "\u1100\u116E\u11A8\u110B\u1165",
      "\u1100\u116E\u11A8\u110B\u116A\u11BC",
      "\u1100\u116E\u11A8\u110C\u1165\u11A8",
      "\u1100\u116E\u11A8\u110C\u1166",
      "\u1100\u116E\u11A8\u1112\u116C",
      "\u1100\u116E\u11AB\u1103\u1162",
      "\u1100\u116E\u11AB\u1109\u1161",
      "\u1100\u116E\u11AB\u110B\u1175\u11AB",
      "\u1100\u116E\u11BC\u1100\u1173\u11A8\u110C\u1165\u11A8",
      "\u1100\u116F\u11AB\u1105\u1175",
      "\u1100\u116F\u11AB\u110B\u1171",
      "\u1100\u116F\u11AB\u1110\u116E",
      "\u1100\u1171\u1100\u116E\u11A8",
      "\u1100\u1171\u1109\u1175\u11AB",
      "\u1100\u1172\u110C\u1165\u11BC",
      "\u1100\u1172\u110E\u1175\u11A8",
      "\u1100\u1172\u11AB\u1112\u1167\u11BC",
      "\u1100\u1173\u1102\u1161\u11AF",
      "\u1100\u1173\u1102\u1163\u11BC",
      "\u1100\u1173\u1102\u1173\u11AF",
      "\u1100\u1173\u1105\u1165\u1102\u1161",
      "\u1100\u1173\u1105\u116E\u11B8",
      "\u1100\u1173\u1105\u1173\u11BA",
      "\u1100\u1173\u1105\u1175\u11B7",
      "\u1100\u1173\u110C\u1166\u1109\u1165\u110B\u1163",
      "\u1100\u1173\u1110\u1169\u1105\u1169\u11A8",
      "\u1100\u1173\u11A8\u1107\u1169\u11A8",
      "\u1100\u1173\u11A8\u1112\u1175",
      "\u1100\u1173\u11AB\u1100\u1165",
      "\u1100\u1173\u11AB\u1100\u116D",
      "\u1100\u1173\u11AB\u1105\u1162",
      "\u1100\u1173\u11AB\u1105\u1169",
      "\u1100\u1173\u11AB\u1106\u116E",
      "\u1100\u1173\u11AB\u1107\u1169\u11AB",
      "\u1100\u1173\u11AB\u110B\u116F\u11AB",
      "\u1100\u1173\u11AB\u110B\u1172\u11A8",
      "\u1100\u1173\u11AB\u110E\u1165",
      "\u1100\u1173\u11AF\u110A\u1175",
      "\u1100\u1173\u11AF\u110C\u1161",
      "\u1100\u1173\u11B7\u1100\u1161\u11BC\u1109\u1161\u11AB",
      "\u1100\u1173\u11B7\u1100\u1169",
      "\u1100\u1173\u11B7\u1102\u1167\u11AB",
      "\u1100\u1173\u11B7\u1106\u1166\u1103\u1161\u11AF",
      "\u1100\u1173\u11B7\u110B\u1162\u11A8",
      "\u1100\u1173\u11B7\u110B\u1167\u11AB",
      "\u1100\u1173\u11B7\u110B\u116D\u110B\u1175\u11AF",
      "\u1100\u1173\u11B7\u110C\u1175",
      "\u1100\u1173\u11BC\u110C\u1165\u11BC\u110C\u1165\u11A8",
      "\u1100\u1175\u1100\u1161\u11AB",
      "\u1100\u1175\u1100\u116A\u11AB",
      "\u1100\u1175\u1102\u1167\u11B7",
      "\u1100\u1175\u1102\u1173\u11BC",
      "\u1100\u1175\u1103\u1169\u11A8\u1100\u116D",
      "\u1100\u1175\u1103\u116E\u11BC",
      "\u1100\u1175\u1105\u1169\u11A8",
      "\u1100\u1175\u1105\u1173\u11B7",
      "\u1100\u1175\u1107\u1165\u11B8",
      "\u1100\u1175\u1107\u1169\u11AB",
      "\u1100\u1175\u1107\u116E\u11AB",
      "\u1100\u1175\u1108\u1173\u11B7",
      "\u1100\u1175\u1109\u116E\u11A8\u1109\u1161",
      "\u1100\u1175\u1109\u116E\u11AF",
      "\u1100\u1175\u110B\u1165\u11A8",
      "\u1100\u1175\u110B\u1165\u11B8",
      "\u1100\u1175\u110B\u1169\u11AB",
      "\u1100\u1175\u110B\u116E\u11AB",
      "\u1100\u1175\u110B\u116F\u11AB",
      "\u1100\u1175\u110C\u1165\u11A8",
      "\u1100\u1175\u110C\u116E\u11AB",
      "\u1100\u1175\u110E\u1175\u11B7",
      "\u1100\u1175\u1112\u1169\u11AB",
      "\u1100\u1175\u1112\u116C\u11A8",
      "\u1100\u1175\u11AB\u1100\u1173\u11B8",
      "\u1100\u1175\u11AB\u110C\u1161\u11BC",
      "\u1100\u1175\u11AF\u110B\u1175",
      "\u1100\u1175\u11B7\u1107\u1161\u11B8",
      "\u1100\u1175\u11B7\u110E\u1175",
      "\u1100\u1175\u11B7\u1111\u1169\u1100\u1169\u11BC\u1112\u1161\u11BC",
      "\u1101\u1161\u11A8\u1103\u116E\u1100\u1175",
      "\u1101\u1161\u11B7\u1108\u1161\u11A8",
      "\u1101\u1162\u1103\u1161\u11AF\u110B\u1173\u11B7",
      "\u1101\u1162\u1109\u1169\u1100\u1173\u11B7",
      "\u1101\u1165\u11B8\u110C\u1175\u11AF",
      "\u1101\u1169\u11A8\u1103\u1162\u1100\u1175",
      "\u1101\u1169\u11BE\u110B\u1175\u11C1",
      "\u1102\u1161\u1103\u1173\u11AF\u110B\u1175",
      "\u1102\u1161\u1105\u1161\u11AB\u1112\u1175",
      "\u1102\u1161\u1106\u1165\u110C\u1175",
      "\u1102\u1161\u1106\u116E\u11AF",
      "\u1102\u1161\u110E\u1175\u11B7\u1107\u1161\u11AB",
      "\u1102\u1161\u1112\u1173\u11AF",
      "\u1102\u1161\u11A8\u110B\u1167\u11B8",
      "\u1102\u1161\u11AB\u1107\u1161\u11BC",
      "\u1102\u1161\u11AF\u1100\u1162",
      "\u1102\u1161\u11AF\u110A\u1175",
      "\u1102\u1161\u11AF\u110D\u1161",
      "\u1102\u1161\u11B7\u1102\u1167",
      "\u1102\u1161\u11B7\u1103\u1162\u1106\u116E\u11AB",
      "\u1102\u1161\u11B7\u1106\u1162",
      "\u1102\u1161\u11B7\u1109\u1161\u11AB",
      "\u1102\u1161\u11B7\u110C\u1161",
      "\u1102\u1161\u11B7\u1111\u1167\u11AB",
      "\u1102\u1161\u11B7\u1112\u1161\u11A8\u1109\u1162\u11BC",
      "\u1102\u1161\u11BC\u1107\u1175",
      "\u1102\u1161\u11C0\u1106\u1161\u11AF",
      "\u1102\u1162\u1102\u1167\u11AB",
      "\u1102\u1162\u110B\u116D\u11BC",
      "\u1102\u1162\u110B\u1175\u11AF",
      "\u1102\u1162\u11B7\u1107\u1175",
      "\u1102\u1162\u11B7\u1109\u1162",
      "\u1102\u1162\u11BA\u1106\u116E\u11AF",
      "\u1102\u1162\u11BC\u1103\u1169\u11BC",
      "\u1102\u1162\u11BC\u1106\u1167\u11AB",
      "\u1102\u1162\u11BC\u1107\u1161\u11BC",
      "\u1102\u1162\u11BC\u110C\u1161\u11BC\u1100\u1169",
      "\u1102\u1166\u11A8\u1110\u1161\u110B\u1175",
      "\u1102\u1166\u11BA\u110D\u1162",
      "\u1102\u1169\u1103\u1169\u11BC",
      "\u1102\u1169\u1105\u1161\u11AB\u1109\u1162\u11A8",
      "\u1102\u1169\u1105\u1167\u11A8",
      "\u1102\u1169\u110B\u1175\u11AB",
      "\u1102\u1169\u11A8\u110B\u1173\u11B7",
      "\u1102\u1169\u11A8\u110E\u1161",
      "\u1102\u1169\u11A8\u1112\u116A",
      "\u1102\u1169\u11AB\u1105\u1175",
      "\u1102\u1169\u11AB\u1106\u116E\u11AB",
      "\u1102\u1169\u11AB\u110C\u1162\u11BC",
      "\u1102\u1169\u11AF\u110B\u1175",
      "\u1102\u1169\u11BC\u1100\u116E",
      "\u1102\u1169\u11BC\u1103\u1161\u11B7",
      "\u1102\u1169\u11BC\u1106\u1175\u11AB",
      "\u1102\u1169\u11BC\u1107\u116E",
      "\u1102\u1169\u11BC\u110B\u1165\u11B8",
      "\u1102\u1169\u11BC\u110C\u1161\u11BC",
      "\u1102\u1169\u11BC\u110E\u1169\u11AB",
      "\u1102\u1169\u11C1\u110B\u1175",
      "\u1102\u116E\u11AB\u1103\u1169\u11BC\u110C\u1161",
      "\u1102\u116E\u11AB\u1106\u116E\u11AF",
      "\u1102\u116E\u11AB\u110A\u1165\u11B8",
      "\u1102\u1172\u110B\u116D\u11A8",
      "\u1102\u1173\u1101\u1175\u11B7",
      "\u1102\u1173\u11A8\u1103\u1162",
      "\u1102\u1173\u11BC\u1103\u1169\u11BC\u110C\u1165\u11A8",
      "\u1102\u1173\u11BC\u1105\u1167\u11A8",
      "\u1103\u1161\u1107\u1161\u11BC",
      "\u1103\u1161\u110B\u1163\u11BC\u1109\u1165\u11BC",
      "\u1103\u1161\u110B\u1173\u11B7",
      "\u1103\u1161\u110B\u1175\u110B\u1165\u1110\u1173",
      "\u1103\u1161\u1112\u1162\u11BC",
      "\u1103\u1161\u11AB\u1100\u1168",
      "\u1103\u1161\u11AB\u1100\u1169\u11AF",
      "\u1103\u1161\u11AB\u1103\u1169\u11A8",
      "\u1103\u1161\u11AB\u1106\u1161\u11BA",
      "\u1103\u1161\u11AB\u1109\u116E\u11AB",
      "\u1103\u1161\u11AB\u110B\u1165",
      "\u1103\u1161\u11AB\u110B\u1171",
      "\u1103\u1161\u11AB\u110C\u1165\u11B7",
      "\u1103\u1161\u11AB\u110E\u1166",
      "\u1103\u1161\u11AB\u110E\u116E",
      "\u1103\u1161\u11AB\u1111\u1167\u11AB",
      "\u1103\u1161\u11AB\u1111\u116E\u11BC",
      "\u1103\u1161\u11AF\u1100\u1163\u11AF",
      "\u1103\u1161\u11AF\u1105\u1165",
      "\u1103\u1161\u11AF\u1105\u1167\u11A8",
      "\u1103\u1161\u11AF\u1105\u1175",
      "\u1103\u1161\u11B0\u1100\u1169\u1100\u1175",
      "\u1103\u1161\u11B7\u1103\u1161\u11BC",
      "\u1103\u1161\u11B7\u1107\u1162",
      "\u1103\u1161\u11B7\u110B\u116D",
      "\u1103\u1161\u11B7\u110B\u1175\u11B7",
      "\u1103\u1161\u11B8\u1107\u1167\u11AB",
      "\u1103\u1161\u11B8\u110C\u1161\u11BC",
      "\u1103\u1161\u11BC\u1100\u1173\u11AB",
      "\u1103\u1161\u11BC\u1107\u116E\u11AB\u1100\u1161\u11AB",
      "\u1103\u1161\u11BC\u110B\u1167\u11AB\u1112\u1175",
      "\u1103\u1161\u11BC\u110C\u1161\u11BC",
      "\u1103\u1162\u1100\u1172\u1106\u1169",
      "\u1103\u1162\u1102\u1161\u11BD",
      "\u1103\u1162\u1103\u1161\u11AB\u1112\u1175",
      "\u1103\u1162\u1103\u1161\u11B8",
      "\u1103\u1162\u1103\u1169\u1109\u1175",
      "\u1103\u1162\u1105\u1163\u11A8",
      "\u1103\u1162\u1105\u1163\u11BC",
      "\u1103\u1162\u1105\u1172\u11A8",
      "\u1103\u1162\u1106\u116E\u11AB",
      "\u1103\u1162\u1107\u116E\u1107\u116E\u11AB",
      "\u1103\u1162\u1109\u1175\u11AB",
      "\u1103\u1162\u110B\u1173\u11BC",
      "\u1103\u1162\u110C\u1161\u11BC",
      "\u1103\u1162\u110C\u1165\u11AB",
      "\u1103\u1162\u110C\u1165\u11B8",
      "\u1103\u1162\u110C\u116E\u11BC",
      "\u1103\u1162\u110E\u1162\u11A8",
      "\u1103\u1162\u110E\u116E\u11AF",
      "\u1103\u1162\u110E\u116E\u11BC",
      "\u1103\u1162\u1110\u1169\u11BC\u1105\u1167\u11BC",
      "\u1103\u1162\u1112\u1161\u11A8",
      "\u1103\u1162\u1112\u1161\u11AB\u1106\u1175\u11AB\u1100\u116E\u11A8",
      "\u1103\u1162\u1112\u1161\u11B8\u1109\u1175\u11AF",
      "\u1103\u1162\u1112\u1167\u11BC",
      "\u1103\u1165\u11BC\u110B\u1165\u1105\u1175",
      "\u1103\u1166\u110B\u1175\u1110\u1173",
      "\u1103\u1169\u1103\u1162\u110E\u1166",
      "\u1103\u1169\u1103\u1165\u11A8",
      "\u1103\u1169\u1103\u116E\u11A8",
      "\u1103\u1169\u1106\u1161\u11BC",
      "\u1103\u1169\u1109\u1165\u1100\u116A\u11AB",
      "\u1103\u1169\u1109\u1175\u11B7",
      "\u1103\u1169\u110B\u116E\u11B7",
      "\u1103\u1169\u110B\u1175\u11B8",
      "\u1103\u1169\u110C\u1161\u1100\u1175",
      "\u1103\u1169\u110C\u1165\u1112\u1175",
      "\u1103\u1169\u110C\u1165\u11AB",
      "\u1103\u1169\u110C\u116E\u11BC",
      "\u1103\u1169\u110E\u1161\u11A8",
      "\u1103\u1169\u11A8\u1100\u1161\u11B7",
      "\u1103\u1169\u11A8\u1105\u1175\u11B8",
      "\u1103\u1169\u11A8\u1109\u1165",
      "\u1103\u1169\u11A8\u110B\u1175\u11AF",
      "\u1103\u1169\u11A8\u110E\u1161\u11BC\u110C\u1165\u11A8",
      "\u1103\u1169\u11BC\u1112\u116A\u110E\u1162\u11A8",
      "\u1103\u1171\u11BA\u1106\u1169\u1109\u1173\u11B8",
      "\u1103\u1171\u11BA\u1109\u1161\u11AB",
      "\u1104\u1161\u11AF\u110B\u1161\u110B\u1175",
      "\u1106\u1161\u1102\u116E\u1105\u1161",
      "\u1106\u1161\u1102\u1173\u11AF",
      "\u1106\u1161\u1103\u1161\u11BC",
      "\u1106\u1161\u1105\u1161\u1110\u1169\u11AB",
      "\u1106\u1161\u1105\u1167\u11AB",
      "\u1106\u1161\u1106\u116E\u1105\u1175",
      "\u1106\u1161\u1109\u1161\u110C\u1175",
      "\u1106\u1161\u110B\u1163\u11A8",
      "\u1106\u1161\u110B\u116D\u1102\u1166\u110C\u1173",
      "\u1106\u1161\u110B\u1173\u11AF",
      "\u1106\u1161\u110B\u1173\u11B7",
      "\u1106\u1161\u110B\u1175\u110F\u1173",
      "\u1106\u1161\u110C\u116E\u11BC",
      "\u1106\u1161\u110C\u1175\u1106\u1161\u11A8",
      "\u1106\u1161\u110E\u1161\u11AB\u1100\u1161\u110C\u1175",
      "\u1106\u1161\u110E\u1161\u11AF",
      "\u1106\u1161\u1112\u1173\u11AB",
      "\u1106\u1161\u11A8\u1100\u1165\u11AF\u1105\u1175",
      "\u1106\u1161\u11A8\u1102\u1162",
      "\u1106\u1161\u11A8\u1109\u1161\u11BC",
      "\u1106\u1161\u11AB\u1102\u1161\u11B7",
      "\u1106\u1161\u11AB\u1103\u116E",
      "\u1106\u1161\u11AB\u1109\u1166",
      "\u1106\u1161\u11AB\u110B\u1163\u11A8",
      "\u1106\u1161\u11AB\u110B\u1175\u11AF",
      "\u1106\u1161\u11AB\u110C\u1165\u11B7",
      "\u1106\u1161\u11AB\u110C\u1169\u11A8",
      "\u1106\u1161\u11AB\u1112\u116A",
      "\u1106\u1161\u11AD\u110B\u1175",
      "\u1106\u1161\u11AF\u1100\u1175",
      "\u1106\u1161\u11AF\u110A\u1173\u11B7",
      "\u1106\u1161\u11AF\u1110\u116E",
      "\u1106\u1161\u11B7\u1103\u1162\u1105\u1169",
      "\u1106\u1161\u11BC\u110B\u116F\u11AB\u1100\u1167\u11BC",
      "\u1106\u1162\u1102\u1167\u11AB",
      "\u1106\u1162\u1103\u1161\u11AF",
      "\u1106\u1162\u1105\u1167\u11A8",
      "\u1106\u1162\u1107\u1165\u11AB",
      "\u1106\u1162\u1109\u1173\u110F\u1165\u11B7",
      "\u1106\u1162\u110B\u1175\u11AF",
      "\u1106\u1162\u110C\u1161\u11BC",
      "\u1106\u1162\u11A8\u110C\u116E",
      "\u1106\u1165\u11A8\u110B\u1175",
      "\u1106\u1165\u11AB\u110C\u1165",
      "\u1106\u1165\u11AB\u110C\u1175",
      "\u1106\u1165\u11AF\u1105\u1175",
      "\u1106\u1166\u110B\u1175\u11AF",
      "\u1106\u1167\u1102\u1173\u1105\u1175",
      "\u1106\u1167\u110E\u1175\u11AF",
      "\u1106\u1167\u11AB\u1103\u1161\u11B7",
      "\u1106\u1167\u11AF\u110E\u1175",
      "\u1106\u1167\u11BC\u1103\u1161\u11AB",
      "\u1106\u1167\u11BC\u1105\u1167\u11BC",
      "\u1106\u1167\u11BC\u110B\u1168",
      "\u1106\u1167\u11BC\u110B\u1174",
      "\u1106\u1167\u11BC\u110C\u1165\u11AF",
      "\u1106\u1167\u11BC\u110E\u1175\u11BC",
      "\u1106\u1167\u11BC\u1112\u1161\u11B7",
      "\u1106\u1169\u1100\u1173\u11B7",
      "\u1106\u1169\u1102\u1175\u1110\u1165",
      "\u1106\u1169\u1103\u1166\u11AF",
      "\u1106\u1169\u1103\u1173\u11AB",
      "\u1106\u1169\u1107\u1165\u11B7",
      "\u1106\u1169\u1109\u1173\u11B8",
      "\u1106\u1169\u110B\u1163\u11BC",
      "\u1106\u1169\u110B\u1175\u11B7",
      "\u1106\u1169\u110C\u1169\u1105\u1175",
      "\u1106\u1169\u110C\u1175\u11B8",
      "\u1106\u1169\u1110\u116E\u11BC\u110B\u1175",
      "\u1106\u1169\u11A8\u1100\u1165\u11AF\u110B\u1175",
      "\u1106\u1169\u11A8\u1105\u1169\u11A8",
      "\u1106\u1169\u11A8\u1109\u1161",
      "\u1106\u1169\u11A8\u1109\u1169\u1105\u1175",
      "\u1106\u1169\u11A8\u1109\u116E\u11B7",
      "\u1106\u1169\u11A8\u110C\u1165\u11A8",
      "\u1106\u1169\u11A8\u1111\u116D",
      "\u1106\u1169\u11AF\u1105\u1162",
      "\u1106\u1169\u11B7\u1106\u1162",
      "\u1106\u1169\u11B7\u1106\u116E\u1100\u1166",
      "\u1106\u1169\u11B7\u1109\u1161\u11AF",
      "\u1106\u1169\u11B7\u1109\u1169\u11A8",
      "\u1106\u1169\u11B7\u110C\u1175\u11BA",
      "\u1106\u1169\u11B7\u1110\u1169\u11BC",
      "\u1106\u1169\u11B8\u1109\u1175",
      "\u1106\u116E\u1100\u116A\u11AB\u1109\u1175\u11B7",
      "\u1106\u116E\u1100\u116E\u11BC\u1112\u116A",
      "\u1106\u116E\u1103\u1165\u110B\u1171",
      "\u1106\u116E\u1103\u1165\u11B7",
      "\u1106\u116E\u1105\u1173\u11C1",
      "\u1106\u116E\u1109\u1173\u11AB",
      "\u1106\u116E\u110B\u1165\u11BA",
      "\u1106\u116E\u110B\u1167\u11A8",
      "\u1106\u116E\u110B\u116D\u11BC",
      "\u1106\u116E\u110C\u1169\u1100\u1165\u11AB",
      "\u1106\u116E\u110C\u1175\u1100\u1162",
      "\u1106\u116E\u110E\u1165\u11A8",
      "\u1106\u116E\u11AB\u1100\u116E",
      "\u1106\u116E\u11AB\u1103\u1173\u11A8",
      "\u1106\u116E\u11AB\u1107\u1165\u11B8",
      "\u1106\u116E\u11AB\u1109\u1165",
      "\u1106\u116E\u11AB\u110C\u1166",
      "\u1106\u116E\u11AB\u1112\u1161\u11A8",
      "\u1106\u116E\u11AB\u1112\u116A",
      "\u1106\u116E\u11AF\u1100\u1161",
      "\u1106\u116E\u11AF\u1100\u1165\u11AB",
      "\u1106\u116E\u11AF\u1100\u1167\u11AF",
      "\u1106\u116E\u11AF\u1100\u1169\u1100\u1175",
      "\u1106\u116E\u11AF\u1105\u1169\u11AB",
      "\u1106\u116E\u11AF\u1105\u1175\u1112\u1161\u11A8",
      "\u1106\u116E\u11AF\u110B\u1173\u11B7",
      "\u1106\u116E\u11AF\u110C\u1175\u11AF",
      "\u1106\u116E\u11AF\u110E\u1166",
      "\u1106\u1175\u1100\u116E\u11A8",
      "\u1106\u1175\u1103\u1175\u110B\u1165",
      "\u1106\u1175\u1109\u1161\u110B\u1175\u11AF",
      "\u1106\u1175\u1109\u116E\u11AF",
      "\u1106\u1175\u110B\u1167\u11A8",
      "\u1106\u1175\u110B\u116D\u11BC\u1109\u1175\u11AF",
      "\u1106\u1175\u110B\u116E\u11B7",
      "\u1106\u1175\u110B\u1175\u11AB",
      "\u1106\u1175\u1110\u1175\u11BC",
      "\u1106\u1175\u1112\u1169\u11AB",
      "\u1106\u1175\u11AB\u1100\u1161\u11AB",
      "\u1106\u1175\u11AB\u110C\u1169\u11A8",
      "\u1106\u1175\u11AB\u110C\u116E",
      "\u1106\u1175\u11AE\u110B\u1173\u11B7",
      "\u1106\u1175\u11AF\u1100\u1161\u1105\u116E",
      "\u1106\u1175\u11AF\u1105\u1175\u1106\u1175\u1110\u1165",
      "\u1106\u1175\u11C0\u1107\u1161\u1103\u1161\u11A8",
      "\u1107\u1161\u1100\u1161\u110C\u1175",
      "\u1107\u1161\u1100\u116E\u1102\u1175",
      "\u1107\u1161\u1102\u1161\u1102\u1161",
      "\u1107\u1161\u1102\u1173\u11AF",
      "\u1107\u1161\u1103\u1161\u11A8",
      "\u1107\u1161\u1103\u1161\u11BA\u1100\u1161",
      "\u1107\u1161\u1105\u1161\u11B7",
      "\u1107\u1161\u110B\u1175\u1105\u1165\u1109\u1173",
      "\u1107\u1161\u1110\u1161\u11BC",
      "\u1107\u1161\u11A8\u1106\u116E\u11AF\u1100\u116A\u11AB",
      "\u1107\u1161\u11A8\u1109\u1161",
      "\u1107\u1161\u11A8\u1109\u116E",
      "\u1107\u1161\u11AB\u1103\u1162",
      "\u1107\u1161\u11AB\u1103\u1173\u1109\u1175",
      "\u1107\u1161\u11AB\u1106\u1161\u11AF",
      "\u1107\u1161\u11AB\u1107\u1161\u11AF",
      "\u1107\u1161\u11AB\u1109\u1165\u11BC",
      "\u1107\u1161\u11AB\u110B\u1173\u11BC",
      "\u1107\u1161\u11AB\u110C\u1161\u11BC",
      "\u1107\u1161\u11AB\u110C\u116E\u11A8",
      "\u1107\u1161\u11AB\u110C\u1175",
      "\u1107\u1161\u11AB\u110E\u1161\u11AB",
      "\u1107\u1161\u11AE\u110E\u1175\u11B7",
      "\u1107\u1161\u11AF\u1100\u1161\u1105\u1161\u11A8",
      "\u1107\u1161\u11AF\u1100\u1165\u11AF\u110B\u1173\u11B7",
      "\u1107\u1161\u11AF\u1100\u1167\u11AB",
      "\u1107\u1161\u11AF\u1103\u1161\u11AF",
      "\u1107\u1161\u11AF\u1105\u1166",
      "\u1107\u1161\u11AF\u1106\u1169\u11A8",
      "\u1107\u1161\u11AF\u1107\u1161\u1103\u1161\u11A8",
      "\u1107\u1161\u11AF\u1109\u1162\u11BC",
      "\u1107\u1161\u11AF\u110B\u1173\u11B7",
      "\u1107\u1161\u11AF\u110C\u1161\u1100\u116E\u11A8",
      "\u1107\u1161\u11AF\u110C\u1165\u11AB",
      "\u1107\u1161\u11AF\u1110\u1169\u11B8",
      "\u1107\u1161\u11AF\u1111\u116D",
      "\u1107\u1161\u11B7\u1112\u1161\u1102\u1173\u11AF",
      "\u1107\u1161\u11B8\u1100\u1173\u1105\u1173\u11BA",
      "\u1107\u1161\u11B8\u1106\u1161\u11BA",
      "\u1107\u1161\u11B8\u1109\u1161\u11BC",
      "\u1107\u1161\u11B8\u1109\u1169\u11C0",
      "\u1107\u1161\u11BC\u1100\u1173\u11B7",
      "\u1107\u1161\u11BC\u1106\u1167\u11AB",
      "\u1107\u1161\u11BC\u1106\u116E\u11AB",
      "\u1107\u1161\u11BC\u1107\u1161\u1103\u1161\u11A8",
      "\u1107\u1161\u11BC\u1107\u1165\u11B8",
      "\u1107\u1161\u11BC\u1109\u1169\u11BC",
      "\u1107\u1161\u11BC\u1109\u1175\u11A8",
      "\u1107\u1161\u11BC\u110B\u1161\u11AB",
      "\u1107\u1161\u11BC\u110B\u116E\u11AF",
      "\u1107\u1161\u11BC\u110C\u1175",
      "\u1107\u1161\u11BC\u1112\u1161\u11A8",
      "\u1107\u1161\u11BC\u1112\u1162",
      "\u1107\u1161\u11BC\u1112\u1163\u11BC",
      "\u1107\u1162\u1100\u1167\u11BC",
      "\u1107\u1162\u1101\u1169\u11B8",
      "\u1107\u1162\u1103\u1161\u11AF",
      "\u1107\u1162\u1103\u1173\u1106\u1175\u11AB\u1110\u1165\u11AB",
      "\u1107\u1162\u11A8\u1103\u116E\u1109\u1161\u11AB",
      "\u1107\u1162\u11A8\u1109\u1162\u11A8",
      "\u1107\u1162\u11A8\u1109\u1165\u11BC",
      "\u1107\u1162\u11A8\u110B\u1175\u11AB",
      "\u1107\u1162\u11A8\u110C\u1166",
      "\u1107\u1162\u11A8\u1112\u116A\u110C\u1165\u11B7",
      "\u1107\u1165\u1105\u1173\u11BA",
      "\u1107\u1165\u1109\u1165\u11BA",
      "\u1107\u1165\u1110\u1173\u11AB",
      "\u1107\u1165\u11AB\u1100\u1162",
      "\u1107\u1165\u11AB\u110B\u1167\u11A8",
      "\u1107\u1165\u11AB\u110C\u1175",
      "\u1107\u1165\u11AB\u1112\u1169",
      "\u1107\u1165\u11AF\u1100\u1173\u11B7",
      "\u1107\u1165\u11AF\u1105\u1166",
      "\u1107\u1165\u11AF\u110A\u1165",
      "\u1107\u1165\u11B7\u110B\u1171",
      "\u1107\u1165\u11B7\u110B\u1175\u11AB",
      "\u1107\u1165\u11B7\u110C\u116C",
      "\u1107\u1165\u11B8\u1105\u1172\u11AF",
      "\u1107\u1165\u11B8\u110B\u116F\u11AB",
      "\u1107\u1165\u11B8\u110C\u1165\u11A8",
      "\u1107\u1165\u11B8\u110E\u1175\u11A8",
      "\u1107\u1166\u110B\u1175\u110C\u1175\u11BC",
      "\u1107\u1166\u11AF\u1110\u1173",
      "\u1107\u1167\u11AB\u1100\u1167\u11BC",
      "\u1107\u1167\u11AB\u1103\u1169\u11BC",
      "\u1107\u1167\u11AB\u1106\u1167\u11BC",
      "\u1107\u1167\u11AB\u1109\u1175\u11AB",
      "\u1107\u1167\u11AB\u1112\u1169\u1109\u1161",
      "\u1107\u1167\u11AB\u1112\u116A",
      "\u1107\u1167\u11AF\u1103\u1169",
      "\u1107\u1167\u11AF\u1106\u1167\u11BC",
      "\u1107\u1167\u11AF\u110B\u1175\u11AF",
      "\u1107\u1167\u11BC\u1109\u1175\u11AF",
      "\u1107\u1167\u11BC\u110B\u1161\u1105\u1175",
      "\u1107\u1167\u11BC\u110B\u116F\u11AB",
      "\u1107\u1169\u1100\u116A\u11AB",
      "\u1107\u1169\u1102\u1165\u1109\u1173",
      "\u1107\u1169\u1105\u1161\u1109\u1162\u11A8",
      "\u1107\u1169\u1105\u1161\u11B7",
      "\u1107\u1169\u1105\u1173\u11B7",
      "\u1107\u1169\u1109\u1161\u11BC",
      "\u1107\u1169\u110B\u1161\u11AB",
      "\u1107\u1169\u110C\u1161\u1100\u1175",
      "\u1107\u1169\u110C\u1161\u11BC",
      "\u1107\u1169\u110C\u1165\u11AB",
      "\u1107\u1169\u110C\u1169\u11AB",
      "\u1107\u1169\u1110\u1169\u11BC",
      "\u1107\u1169\u1111\u1167\u11AB\u110C\u1165\u11A8",
      "\u1107\u1169\u1112\u1165\u11B7",
      "\u1107\u1169\u11A8\u1103\u1169",
      "\u1107\u1169\u11A8\u1109\u1161",
      "\u1107\u1169\u11A8\u1109\u116E\u11BC\u110B\u1161",
      "\u1107\u1169\u11A8\u1109\u1173\u11B8",
      "\u1107\u1169\u11A9\u110B\u1173\u11B7",
      "\u1107\u1169\u11AB\u1100\u1167\u11A8\u110C\u1165\u11A8",
      "\u1107\u1169\u11AB\u1105\u1162",
      "\u1107\u1169\u11AB\u1107\u116E",
      "\u1107\u1169\u11AB\u1109\u1161",
      "\u1107\u1169\u11AB\u1109\u1165\u11BC",
      "\u1107\u1169\u11AB\u110B\u1175\u11AB",
      "\u1107\u1169\u11AB\u110C\u1175\u11AF",
      "\u1107\u1169\u11AF\u1111\u1166\u11AB",
      "\u1107\u1169\u11BC\u1109\u1161",
      "\u1107\u1169\u11BC\u110C\u1175",
      "\u1107\u1169\u11BC\u1110\u116E",
      "\u1107\u116E\u1100\u1173\u11AB",
      "\u1107\u116E\u1101\u1173\u1105\u1165\u110B\u116E\u11B7",
      "\u1107\u116E\u1103\u1161\u11B7",
      "\u1107\u116E\u1103\u1169\u11BC\u1109\u1161\u11AB",
      "\u1107\u116E\u1106\u116E\u11AB",
      "\u1107\u116E\u1107\u116E\u11AB",
      "\u1107\u116E\u1109\u1161\u11AB",
      "\u1107\u116E\u1109\u1161\u11BC",
      "\u1107\u116E\u110B\u1165\u11BF",
      "\u1107\u116E\u110B\u1175\u11AB",
      "\u1107\u116E\u110C\u1161\u11A8\u110B\u116D\u11BC",
      "\u1107\u116E\u110C\u1161\u11BC",
      "\u1107\u116E\u110C\u1165\u11BC",
      "\u1107\u116E\u110C\u1169\u11A8",
      "\u1107\u116E\u110C\u1175\u1105\u1165\u11AB\u1112\u1175",
      "\u1107\u116E\u110E\u1175\u11AB",
      "\u1107\u116E\u1110\u1161\u11A8",
      "\u1107\u116E\u1111\u116E\u11B7",
      "\u1107\u116E\u1112\u116C\u110C\u1161\u11BC",
      "\u1107\u116E\u11A8\u1107\u116E",
      "\u1107\u116E\u11A8\u1112\u1161\u11AB",
      "\u1107\u116E\u11AB\u1102\u1169",
      "\u1107\u116E\u11AB\u1105\u1163\u11BC",
      "\u1107\u116E\u11AB\u1105\u1175",
      "\u1107\u116E\u11AB\u1106\u1167\u11BC",
      "\u1107\u116E\u11AB\u1109\u1165\u11A8",
      "\u1107\u116E\u11AB\u110B\u1163",
      "\u1107\u116E\u11AB\u110B\u1171\u1100\u1175",
      "\u1107\u116E\u11AB\u1111\u1175\u11AF",
      "\u1107\u116E\u11AB\u1112\u1169\u11BC\u1109\u1162\u11A8",
      "\u1107\u116E\u11AF\u1100\u1169\u1100\u1175",
      "\u1107\u116E\u11AF\u1100\u116A",
      "\u1107\u116E\u11AF\u1100\u116D",
      "\u1107\u116E\u11AF\u1101\u1169\u11BE",
      "\u1107\u116E\u11AF\u1106\u1161\u11AB",
      "\u1107\u116E\u11AF\u1107\u1165\u11B8",
      "\u1107\u116E\u11AF\u1107\u1175\u11BE",
      "\u1107\u116E\u11AF\u110B\u1161\u11AB",
      "\u1107\u116E\u11AF\u110B\u1175\u110B\u1175\u11A8",
      "\u1107\u116E\u11AF\u1112\u1162\u11BC",
      "\u1107\u1173\u1105\u1162\u11AB\u1103\u1173",
      "\u1107\u1175\u1100\u1173\u11A8",
      "\u1107\u1175\u1102\u1161\u11AB",
      "\u1107\u1175\u1102\u1175\u11AF",
      "\u1107\u1175\u1103\u116E\u11AF\u1100\u1175",
      "\u1107\u1175\u1103\u1175\u110B\u1169",
      "\u1107\u1175\u1105\u1169\u1109\u1169",
      "\u1107\u1175\u1106\u1161\u11AB",
      "\u1107\u1175\u1106\u1167\u11BC",
      "\u1107\u1175\u1106\u1175\u11AF",
      "\u1107\u1175\u1107\u1161\u1105\u1161\u11B7",
      "\u1107\u1175\u1107\u1175\u11B7\u1107\u1161\u11B8",
      "\u1107\u1175\u1109\u1161\u11BC",
      "\u1107\u1175\u110B\u116D\u11BC",
      "\u1107\u1175\u110B\u1172\u11AF",
      "\u1107\u1175\u110C\u116E\u11BC",
      "\u1107\u1175\u1110\u1161\u1106\u1175\u11AB",
      "\u1107\u1175\u1111\u1161\u11AB",
      "\u1107\u1175\u11AF\u1103\u1175\u11BC",
      "\u1107\u1175\u11BA\u1106\u116E\u11AF",
      "\u1107\u1175\u11BA\u1107\u1161\u11BC\u110B\u116E\u11AF",
      "\u1107\u1175\u11BA\u110C\u116E\u11AF\u1100\u1175",
      "\u1107\u1175\u11BE\u1101\u1161\u11AF",
      "\u1108\u1161\u11AF\u1100\u1161\u11AB\u1109\u1162\u11A8",
      "\u1108\u1161\u11AF\u1105\u1162",
      "\u1108\u1161\u11AF\u1105\u1175",
      "\u1109\u1161\u1100\u1165\u11AB",
      "\u1109\u1161\u1100\u1168\u110C\u1165\u11AF",
      "\u1109\u1161\u1102\u1161\u110B\u1175",
      "\u1109\u1161\u1102\u1163\u11BC",
      "\u1109\u1161\u1105\u1161\u11B7",
      "\u1109\u1161\u1105\u1161\u11BC",
      "\u1109\u1161\u1105\u1175\u11B8",
      "\u1109\u1161\u1106\u1169\u1102\u1175\u11B7",
      "\u1109\u1161\u1106\u116E\u11AF",
      "\u1109\u1161\u1107\u1161\u11BC",
      "\u1109\u1161\u1109\u1161\u11BC",
      "\u1109\u1161\u1109\u1162\u11BC\u1112\u116A\u11AF",
      "\u1109\u1161\u1109\u1165\u11AF",
      "\u1109\u1161\u1109\u1173\u11B7",
      "\u1109\u1161\u1109\u1175\u11AF",
      "\u1109\u1161\u110B\u1165\u11B8",
      "\u1109\u1161\u110B\u116D\u11BC",
      "\u1109\u1161\u110B\u116F\u11AF",
      "\u1109\u1161\u110C\u1161\u11BC",
      "\u1109\u1161\u110C\u1165\u11AB",
      "\u1109\u1161\u110C\u1175\u11AB",
      "\u1109\u1161\u110E\u1169\u11AB",
      "\u1109\u1161\u110E\u116E\u11AB\u1100\u1175",
      "\u1109\u1161\u1110\u1161\u11BC",
      "\u1109\u1161\u1110\u116E\u1105\u1175",
      "\u1109\u1161\u1112\u1173\u11AF",
      "\u1109\u1161\u11AB\u1100\u1175\u11AF",
      "\u1109\u1161\u11AB\u1107\u116E\u110B\u1175\u11AB\u1100\u116A",
      "\u1109\u1161\u11AB\u110B\u1165\u11B8",
      "\u1109\u1161\u11AB\u110E\u1162\u11A8",
      "\u1109\u1161\u11AF\u1105\u1175\u11B7",
      "\u1109\u1161\u11AF\u110B\u1175\u11AB",
      "\u1109\u1161\u11AF\u110D\u1161\u11A8",
      "\u1109\u1161\u11B7\u1100\u1168\u1110\u1161\u11BC",
      "\u1109\u1161\u11B7\u1100\u116E\u11A8",
      "\u1109\u1161\u11B7\u1109\u1175\u11B8",
      "\u1109\u1161\u11B7\u110B\u116F\u11AF",
      "\u1109\u1161\u11B7\u110E\u1169\u11AB",
      "\u1109\u1161\u11BC\u1100\u116A\u11AB",
      "\u1109\u1161\u11BC\u1100\u1173\u11B7",
      "\u1109\u1161\u11BC\u1103\u1162",
      "\u1109\u1161\u11BC\u1105\u1172",
      "\u1109\u1161\u11BC\u1107\u1161\u11AB\u1100\u1175",
      "\u1109\u1161\u11BC\u1109\u1161\u11BC",
      "\u1109\u1161\u11BC\u1109\u1175\u11A8",
      "\u1109\u1161\u11BC\u110B\u1165\u11B8",
      "\u1109\u1161\u11BC\u110B\u1175\u11AB",
      "\u1109\u1161\u11BC\u110C\u1161",
      "\u1109\u1161\u11BC\u110C\u1165\u11B7",
      "\u1109\u1161\u11BC\u110E\u1165",
      "\u1109\u1161\u11BC\u110E\u116E",
      "\u1109\u1161\u11BC\u1110\u1162",
      "\u1109\u1161\u11BC\u1111\u116D",
      "\u1109\u1161\u11BC\u1111\u116E\u11B7",
      "\u1109\u1161\u11BC\u1112\u116A\u11BC",
      "\u1109\u1162\u1107\u1167\u11A8",
      "\u1109\u1162\u11A8\u1101\u1161\u11AF",
      "\u1109\u1162\u11A8\u110B\u1167\u11AB\u1111\u1175\u11AF",
      "\u1109\u1162\u11BC\u1100\u1161\u11A8",
      "\u1109\u1162\u11BC\u1106\u1167\u11BC",
      "\u1109\u1162\u11BC\u1106\u116E\u11AF",
      "\u1109\u1162\u11BC\u1107\u1161\u11BC\u1109\u1169\u11BC",
      "\u1109\u1162\u11BC\u1109\u1161\u11AB",
      "\u1109\u1162\u11BC\u1109\u1165\u11AB",
      "\u1109\u1162\u11BC\u1109\u1175\u11AB",
      "\u1109\u1162\u11BC\u110B\u1175\u11AF",
      "\u1109\u1162\u11BC\u1112\u116A\u11AF",
      "\u1109\u1165\u1105\u1161\u11B8",
      "\u1109\u1165\u1105\u1173\u11AB",
      "\u1109\u1165\u1106\u1167\u11BC",
      "\u1109\u1165\u1106\u1175\u11AB",
      "\u1109\u1165\u1107\u1175\u1109\u1173",
      "\u1109\u1165\u110B\u1163\u11BC",
      "\u1109\u1165\u110B\u116E\u11AF",
      "\u1109\u1165\u110C\u1165\u11A8",
      "\u1109\u1165\u110C\u1165\u11B7",
      "\u1109\u1165\u110D\u1169\u11A8",
      "\u1109\u1165\u110F\u1173\u11AF",
      "\u1109\u1165\u11A8\u1109\u1161",
      "\u1109\u1165\u11A8\u110B\u1172",
      "\u1109\u1165\u11AB\u1100\u1165",
      "\u1109\u1165\u11AB\u1106\u116E\u11AF",
      "\u1109\u1165\u11AB\u1107\u1162",
      "\u1109\u1165\u11AB\u1109\u1162\u11BC",
      "\u1109\u1165\u11AB\u1109\u116E",
      "\u1109\u1165\u11AB\u110B\u116F\u11AB",
      "\u1109\u1165\u11AB\u110C\u1161\u11BC",
      "\u1109\u1165\u11AB\u110C\u1165\u11AB",
      "\u1109\u1165\u11AB\u1110\u1162\u11A8",
      "\u1109\u1165\u11AB\u1111\u116E\u11BC\u1100\u1175",
      "\u1109\u1165\u11AF\u1100\u1165\u110C\u1175",
      "\u1109\u1165\u11AF\u1102\u1161\u11AF",
      "\u1109\u1165\u11AF\u1105\u1165\u11BC\u1110\u1161\u11BC",
      "\u1109\u1165\u11AF\u1106\u1167\u11BC",
      "\u1109\u1165\u11AF\u1106\u116E\u11AB",
      "\u1109\u1165\u11AF\u1109\u1161",
      "\u1109\u1165\u11AF\u110B\u1161\u11A8\u1109\u1161\u11AB",
      "\u1109\u1165\u11AF\u110E\u1175",
      "\u1109\u1165\u11AF\u1110\u1161\u11BC",
      "\u1109\u1165\u11B8\u110A\u1175",
      "\u1109\u1165\u11BC\u1100\u1169\u11BC",
      "\u1109\u1165\u11BC\u1103\u1161\u11BC",
      "\u1109\u1165\u11BC\u1106\u1167\u11BC",
      "\u1109\u1165\u11BC\u1107\u1167\u11AF",
      "\u1109\u1165\u11BC\u110B\u1175\u11AB",
      "\u1109\u1165\u11BC\u110C\u1161\u11BC",
      "\u1109\u1165\u11BC\u110C\u1165\u11A8",
      "\u1109\u1165\u11BC\u110C\u1175\u11AF",
      "\u1109\u1165\u11BC\u1112\u1161\u11B7",
      "\u1109\u1166\u1100\u1173\u11B7",
      "\u1109\u1166\u1106\u1175\u1102\u1161",
      "\u1109\u1166\u1109\u1161\u11BC",
      "\u1109\u1166\u110B\u116F\u11AF",
      "\u1109\u1166\u110C\u1169\u11BC\u1103\u1162\u110B\u116A\u11BC",
      "\u1109\u1166\u1110\u1161\u11A8",
      "\u1109\u1166\u11AB\u1110\u1165",
      "\u1109\u1166\u11AB\u1110\u1175\u1106\u1175\u1110\u1165",
      "\u1109\u1166\u11BA\u110D\u1162",
      "\u1109\u1169\u1100\u1172\u1106\u1169",
      "\u1109\u1169\u1100\u1173\u11A8\u110C\u1165\u11A8",
      "\u1109\u1169\u1100\u1173\u11B7",
      "\u1109\u1169\u1102\u1161\u1100\u1175",
      "\u1109\u1169\u1102\u1167\u11AB",
      "\u1109\u1169\u1103\u1173\u11A8",
      "\u1109\u1169\u1106\u1161\u11BC",
      "\u1109\u1169\u1106\u116E\u11AB",
      "\u1109\u1169\u1109\u1165\u11AF",
      "\u1109\u1169\u1109\u1169\u11A8",
      "\u1109\u1169\u110B\u1161\u1100\u116A",
      "\u1109\u1169\u110B\u116D\u11BC",
      "\u1109\u1169\u110B\u116F\u11AB",
      "\u1109\u1169\u110B\u1173\u11B7",
      "\u1109\u1169\u110C\u116E\u11BC\u1112\u1175",
      "\u1109\u1169\u110C\u1175\u1111\u116E\u11B7",
      "\u1109\u1169\u110C\u1175\u11AF",
      "\u1109\u1169\u1111\u116E\u11BC",
      "\u1109\u1169\u1112\u1167\u11BC",
      "\u1109\u1169\u11A8\u1103\u1161\u11B7",
      "\u1109\u1169\u11A8\u1103\u1169",
      "\u1109\u1169\u11A8\u110B\u1169\u11BA",
      "\u1109\u1169\u11AB\u1100\u1161\u1105\u1161\u11A8",
      "\u1109\u1169\u11AB\u1100\u1175\u11AF",
      "\u1109\u1169\u11AB\u1102\u1167",
      "\u1109\u1169\u11AB\u1102\u1175\u11B7",
      "\u1109\u1169\u11AB\u1103\u1173\u11BC",
      "\u1109\u1169\u11AB\u1106\u1169\u11A8",
      "\u1109\u1169\u11AB\u1108\u1167\u11A8",
      "\u1109\u1169\u11AB\u1109\u1175\u11AF",
      "\u1109\u1169\u11AB\u110C\u1175\u11AF",
      "\u1109\u1169\u11AB\u1110\u1169\u11B8",
      "\u1109\u1169\u11AB\u1112\u1162",
      "\u1109\u1169\u11AF\u110C\u1175\u11A8\u1112\u1175",
      "\u1109\u1169\u11B7\u110A\u1175",
      "\u1109\u1169\u11BC\u110B\u1161\u110C\u1175",
      "\u1109\u1169\u11BC\u110B\u1175",
      "\u1109\u1169\u11BC\u1111\u1167\u11AB",
      "\u1109\u116C\u1100\u1169\u1100\u1175",
      "\u1109\u116D\u1111\u1175\u11BC",
      "\u1109\u116E\u1100\u1165\u11AB",
      "\u1109\u116E\u1102\u1167\u11AB",
      "\u1109\u116E\u1103\u1161\u11AB",
      "\u1109\u116E\u1103\u1169\u11BA\u1106\u116E\u11AF",
      "\u1109\u116E\u1103\u1169\u11BC\u110C\u1165\u11A8",
      "\u1109\u116E\u1106\u1167\u11AB",
      "\u1109\u116E\u1106\u1167\u11BC",
      "\u1109\u116E\u1107\u1161\u11A8",
      "\u1109\u116E\u1109\u1161\u11BC",
      "\u1109\u116E\u1109\u1165\u11A8",
      "\u1109\u116E\u1109\u116E\u11AF",
      "\u1109\u116E\u1109\u1175\u1105\u1169",
      "\u1109\u116E\u110B\u1165\u11B8",
      "\u1109\u116E\u110B\u1167\u11B7",
      "\u1109\u116E\u110B\u1167\u11BC",
      "\u1109\u116E\u110B\u1175\u11B8",
      "\u1109\u116E\u110C\u116E\u11AB",
      "\u1109\u116E\u110C\u1175\u11B8",
      "\u1109\u116E\u110E\u116E\u11AF",
      "\u1109\u116E\u110F\u1165\u11BA",
      "\u1109\u116E\u1111\u1175\u11AF",
      "\u1109\u116E\u1112\u1161\u11A8",
      "\u1109\u116E\u1112\u1165\u11B7\u1109\u1162\u11BC",
      "\u1109\u116E\u1112\u116A\u1100\u1175",
      "\u1109\u116E\u11A8\u1102\u1167",
      "\u1109\u116E\u11A8\u1109\u1169",
      "\u1109\u116E\u11A8\u110C\u1166",
      "\u1109\u116E\u11AB\u1100\u1161\u11AB",
      "\u1109\u116E\u11AB\u1109\u1165",
      "\u1109\u116E\u11AB\u1109\u116E",
      "\u1109\u116E\u11AB\u1109\u1175\u11A8\u1100\u1161\u11AB",
      "\u1109\u116E\u11AB\u110B\u1171",
      "\u1109\u116E\u11AE\u1100\u1161\u1105\u1161\u11A8",
      "\u1109\u116E\u11AF\u1107\u1167\u11BC",
      "\u1109\u116E\u11AF\u110C\u1175\u11B8",
      "\u1109\u116E\u11BA\u110C\u1161",
      "\u1109\u1173\u1102\u1175\u11B7",
      "\u1109\u1173\u1106\u116E\u11AF",
      "\u1109\u1173\u1109\u1173\u1105\u1169",
      "\u1109\u1173\u1109\u1173\u11BC",
      "\u1109\u1173\u110B\u1170\u1110\u1165",
      "\u1109\u1173\u110B\u1171\u110E\u1175",
      "\u1109\u1173\u110F\u1166\u110B\u1175\u1110\u1173",
      "\u1109\u1173\u1110\u1172\u1103\u1175\u110B\u1169",
      "\u1109\u1173\u1110\u1173\u1105\u1166\u1109\u1173",
      "\u1109\u1173\u1111\u1169\u110E\u1173",
      "\u1109\u1173\u11AF\u110D\u1165\u11A8",
      "\u1109\u1173\u11AF\u1111\u1173\u11B7",
      "\u1109\u1173\u11B8\u1100\u116A\u11AB",
      "\u1109\u1173\u11B8\u1100\u1175",
      "\u1109\u1173\u11BC\u1100\u1162\u11A8",
      "\u1109\u1173\u11BC\u1105\u1175",
      "\u1109\u1173\u11BC\u1107\u116E",
      "\u1109\u1173\u11BC\u110B\u116D\u11BC\u110E\u1161",
      "\u1109\u1173\u11BC\u110C\u1175\u11AB",
      "\u1109\u1175\u1100\u1161\u11A8",
      "\u1109\u1175\u1100\u1161\u11AB",
      "\u1109\u1175\u1100\u1169\u11AF",
      "\u1109\u1175\u1100\u1173\u11B7\u110E\u1175",
      "\u1109\u1175\u1102\u1161\u1105\u1175\u110B\u1169",
      "\u1109\u1175\u1103\u1162\u11A8",
      "\u1109\u1175\u1105\u1175\u110C\u1173",
      "\u1109\u1175\u1106\u1166\u11AB\u1110\u1173",
      "\u1109\u1175\u1106\u1175\u11AB",
      "\u1109\u1175\u1107\u116E\u1106\u1169",
      "\u1109\u1175\u1109\u1165\u11AB",
      "\u1109\u1175\u1109\u1165\u11AF",
      "\u1109\u1175\u1109\u1173\u1110\u1166\u11B7",
      "\u1109\u1175\u110B\u1161\u1107\u1165\u110C\u1175",
      "\u1109\u1175\u110B\u1165\u1106\u1165\u1102\u1175",
      "\u1109\u1175\u110B\u116F\u11AF",
      "\u1109\u1175\u110B\u1175\u11AB",
      "\u1109\u1175\u110B\u1175\u11AF",
      "\u1109\u1175\u110C\u1161\u11A8",
      "\u1109\u1175\u110C\u1161\u11BC",
      "\u1109\u1175\u110C\u1165\u11AF",
      "\u1109\u1175\u110C\u1165\u11B7",
      "\u1109\u1175\u110C\u116E\u11BC",
      "\u1109\u1175\u110C\u1173\u11AB",
      "\u1109\u1175\u110C\u1175\u11B8",
      "\u1109\u1175\u110E\u1165\u11BC",
      "\u1109\u1175\u1112\u1161\u11B8",
      "\u1109\u1175\u1112\u1165\u11B7",
      "\u1109\u1175\u11A8\u1100\u116E",
      "\u1109\u1175\u11A8\u1100\u1175",
      "\u1109\u1175\u11A8\u1103\u1161\u11BC",
      "\u1109\u1175\u11A8\u1105\u1163\u11BC",
      "\u1109\u1175\u11A8\u1105\u116D\u1111\u116E\u11B7",
      "\u1109\u1175\u11A8\u1106\u116E\u11AF",
      "\u1109\u1175\u11A8\u1108\u1161\u11BC",
      "\u1109\u1175\u11A8\u1109\u1161",
      "\u1109\u1175\u11A8\u1109\u1162\u11BC\u1112\u116A\u11AF",
      "\u1109\u1175\u11A8\u110E\u1169",
      "\u1109\u1175\u11A8\u1110\u1161\u11A8",
      "\u1109\u1175\u11A8\u1111\u116E\u11B7",
      "\u1109\u1175\u11AB\u1100\u1169",
      "\u1109\u1175\u11AB\u1100\u1172",
      "\u1109\u1175\u11AB\u1102\u1167\u11B7",
      "\u1109\u1175\u11AB\u1106\u116E\u11AB",
      "\u1109\u1175\u11AB\u1107\u1161\u11AF",
      "\u1109\u1175\u11AB\u1107\u1175",
      "\u1109\u1175\u11AB\u1109\u1161",
      "\u1109\u1175\u11AB\u1109\u1166",
      "\u1109\u1175\u11AB\u110B\u116D\u11BC",
      "\u1109\u1175\u11AB\u110C\u1166\u1111\u116E\u11B7",
      "\u1109\u1175\u11AB\u110E\u1165\u11BC",
      "\u1109\u1175\u11AB\u110E\u1166",
      "\u1109\u1175\u11AB\u1112\u116A",
      "\u1109\u1175\u11AF\u1100\u1161\u11B7",
      "\u1109\u1175\u11AF\u1102\u1162",
      "\u1109\u1175\u11AF\u1105\u1167\u11A8",
      "\u1109\u1175\u11AF\u1105\u1168",
      "\u1109\u1175\u11AF\u1106\u1161\u11BC",
      "\u1109\u1175\u11AF\u1109\u116E",
      "\u1109\u1175\u11AF\u1109\u1173\u11B8",
      "\u1109\u1175\u11AF\u1109\u1175",
      "\u1109\u1175\u11AF\u110C\u1161\u11BC",
      "\u1109\u1175\u11AF\u110C\u1165\u11BC",
      "\u1109\u1175\u11AF\u110C\u1175\u11AF\u110C\u1165\u11A8",
      "\u1109\u1175\u11AF\u110E\u1165\u11AB",
      "\u1109\u1175\u11AF\u110E\u1166",
      "\u1109\u1175\u11AF\u110F\u1165\u11BA",
      "\u1109\u1175\u11AF\u1110\u1162",
      "\u1109\u1175\u11AF\u1111\u1162",
      "\u1109\u1175\u11AF\u1112\u1165\u11B7",
      "\u1109\u1175\u11AF\u1112\u1167\u11AB",
      "\u1109\u1175\u11B7\u1105\u1175",
      "\u1109\u1175\u11B7\u1107\u116E\u1105\u1173\u11B7",
      "\u1109\u1175\u11B7\u1109\u1161",
      "\u1109\u1175\u11B7\u110C\u1161\u11BC",
      "\u1109\u1175\u11B7\u110C\u1165\u11BC",
      "\u1109\u1175\u11B7\u1111\u1161\u11AB",
      "\u110A\u1161\u11BC\u1103\u116E\u11BC\u110B\u1175",
      "\u110A\u1175\u1105\u1173\u11B7",
      "\u110A\u1175\u110B\u1161\u11BA",
      "\u110B\u1161\u1100\u1161\u110A\u1175",
      "\u110B\u1161\u1102\u1161\u110B\u116E\u11AB\u1109\u1165",
      "\u110B\u1161\u1103\u1173\u1102\u1175\u11B7",
      "\u110B\u1161\u1103\u1173\u11AF",
      "\u110B\u1161\u1109\u1171\u110B\u116E\u11B7",
      "\u110B\u1161\u1109\u1173\u1111\u1161\u11AF\u1110\u1173",
      "\u110B\u1161\u1109\u1175\u110B\u1161",
      "\u110B\u1161\u110B\u116E\u11AF\u1105\u1165",
      "\u110B\u1161\u110C\u1165\u110A\u1175",
      "\u110B\u1161\u110C\u116E\u11B7\u1106\u1161",
      "\u110B\u1161\u110C\u1175\u11A8",
      "\u110B\u1161\u110E\u1175\u11B7",
      "\u110B\u1161\u1111\u1161\u1110\u1173",
      "\u110B\u1161\u1111\u1173\u1105\u1175\u110F\u1161",
      "\u110B\u1161\u1111\u1173\u11B7",
      "\u110B\u1161\u1112\u1169\u11B8",
      "\u110B\u1161\u1112\u1173\u11AB",
      "\u110B\u1161\u11A8\u1100\u1175",
      "\u110B\u1161\u11A8\u1106\u1169\u11BC",
      "\u110B\u1161\u11A8\u1109\u116E",
      "\u110B\u1161\u11AB\u1100\u1162",
      "\u110B\u1161\u11AB\u1100\u1167\u11BC",
      "\u110B\u1161\u11AB\u1100\u116A",
      "\u110B\u1161\u11AB\u1102\u1162",
      "\u110B\u1161\u11AB\u1102\u1167\u11BC",
      "\u110B\u1161\u11AB\u1103\u1169\u11BC",
      "\u110B\u1161\u11AB\u1107\u1161\u11BC",
      "\u110B\u1161\u11AB\u1107\u116E",
      "\u110B\u1161\u11AB\u110C\u116E",
      "\u110B\u1161\u11AF\u1105\u116E\u1106\u1175\u1102\u1172\u11B7",
      "\u110B\u1161\u11AF\u110F\u1169\u110B\u1169\u11AF",
      "\u110B\u1161\u11B7\u1109\u1175",
      "\u110B\u1161\u11B7\u110F\u1165\u11BA",
      "\u110B\u1161\u11B8\u1105\u1167\u11A8",
      "\u110B\u1161\u11C1\u1102\u1161\u11AF",
      "\u110B\u1161\u11C1\u1106\u116E\u11AB",
      "\u110B\u1162\u110B\u1175\u11AB",
      "\u110B\u1162\u110C\u1165\u11BC",
      "\u110B\u1162\u11A8\u1109\u116E",
      "\u110B\u1162\u11AF\u1107\u1165\u11B7",
      "\u110B\u1163\u1100\u1161\u11AB",
      "\u110B\u1163\u1103\u1161\u11AB",
      "\u110B\u1163\u110B\u1169\u11BC",
      "\u110B\u1163\u11A8\u1100\u1161\u11AB",
      "\u110B\u1163\u11A8\u1100\u116E\u11A8",
      "\u110B\u1163\u11A8\u1109\u1169\u11A8",
      "\u110B\u1163\u11A8\u1109\u116E",
      "\u110B\u1163\u11A8\u110C\u1165\u11B7",
      "\u110B\u1163\u11A8\u1111\u116E\u11B7",
      "\u110B\u1163\u11A8\u1112\u1169\u11AB\u1102\u1167",
      "\u110B\u1163\u11BC\u1102\u1167\u11B7",
      "\u110B\u1163\u11BC\u1105\u1167\u11A8",
      "\u110B\u1163\u11BC\u1106\u1161\u11AF",
      "\u110B\u1163\u11BC\u1107\u1162\u110E\u116E",
      "\u110B\u1163\u11BC\u110C\u116E",
      "\u110B\u1163\u11BC\u1111\u1161",
      "\u110B\u1165\u1103\u116E\u11B7",
      "\u110B\u1165\u1105\u1167\u110B\u116E\u11B7",
      "\u110B\u1165\u1105\u1173\u11AB",
      "\u110B\u1165\u110C\u1166\u11BA\u1107\u1161\u11B7",
      "\u110B\u1165\u110D\u1162\u11BB\u1103\u1173\u11AB",
      "\u110B\u1165\u110D\u1165\u1103\u1161\u1100\u1161",
      "\u110B\u1165\u110D\u1165\u11AB\u110C\u1175",
      "\u110B\u1165\u11AB\u1102\u1175",
      "\u110B\u1165\u11AB\u1103\u1165\u11A8",
      "\u110B\u1165\u11AB\u1105\u1169\u11AB",
      "\u110B\u1165\u11AB\u110B\u1165",
      "\u110B\u1165\u11AF\u1100\u116E\u11AF",
      "\u110B\u1165\u11AF\u1105\u1173\u11AB",
      "\u110B\u1165\u11AF\u110B\u1173\u11B7",
      "\u110B\u1165\u11AF\u1111\u1175\u11BA",
      "\u110B\u1165\u11B7\u1106\u1161",
      "\u110B\u1165\u11B8\u1106\u116E",
      "\u110B\u1165\u11B8\u110C\u1169\u11BC",
      "\u110B\u1165\u11B8\u110E\u1166",
      "\u110B\u1165\u11BC\u1103\u1165\u11BC\u110B\u1175",
      "\u110B\u1165\u11BC\u1106\u1161\u11BC",
      "\u110B\u1165\u11BC\u1110\u1165\u1105\u1175",
      "\u110B\u1165\u11BD\u1100\u1173\u110C\u1166",
      "\u110B\u1166\u1102\u1165\u110C\u1175",
      "\u110B\u1166\u110B\u1165\u110F\u1165\u11AB",
      "\u110B\u1166\u11AB\u110C\u1175\u11AB",
      "\u110B\u1167\u1100\u1165\u11AB",
      "\u110B\u1167\u1100\u1169\u1109\u1162\u11BC",
      "\u110B\u1167\u1100\u116A\u11AB",
      "\u110B\u1167\u1100\u116E\u11AB",
      "\u110B\u1167\u1100\u116F\u11AB",
      "\u110B\u1167\u1103\u1162\u1109\u1162\u11BC",
      "\u110B\u1167\u1103\u1165\u11B2",
      "\u110B\u1167\u1103\u1169\u11BC\u1109\u1162\u11BC",
      "\u110B\u1167\u1103\u1173\u11AB",
      "\u110B\u1167\u1105\u1169\u11AB",
      "\u110B\u1167\u1105\u1173\u11B7",
      "\u110B\u1167\u1109\u1165\u11BA",
      "\u110B\u1167\u1109\u1165\u11BC",
      "\u110B\u1167\u110B\u116A\u11BC",
      "\u110B\u1167\u110B\u1175\u11AB",
      "\u110B\u1167\u110C\u1165\u11AB\u1112\u1175",
      "\u110B\u1167\u110C\u1175\u11A8\u110B\u116F\u11AB",
      "\u110B\u1167\u1112\u1161\u11A8\u1109\u1162\u11BC",
      "\u110B\u1167\u1112\u1162\u11BC",
      "\u110B\u1167\u11A8\u1109\u1161",
      "\u110B\u1167\u11A8\u1109\u1175",
      "\u110B\u1167\u11A8\u1112\u1161\u11AF",
      "\u110B\u1167\u11AB\u1100\u1167\u11AF",
      "\u110B\u1167\u11AB\u1100\u116E",
      "\u110B\u1167\u11AB\u1100\u1173\u11A8",
      "\u110B\u1167\u11AB\u1100\u1175",
      "\u110B\u1167\u11AB\u1105\u1161\u11A8",
      "\u110B\u1167\u11AB\u1109\u1165\u11AF",
      "\u110B\u1167\u11AB\u1109\u1166",
      "\u110B\u1167\u11AB\u1109\u1169\u11A8",
      "\u110B\u1167\u11AB\u1109\u1173\u11B8",
      "\u110B\u1167\u11AB\u110B\u1162",
      "\u110B\u1167\u11AB\u110B\u1168\u110B\u1175\u11AB",
      "\u110B\u1167\u11AB\u110B\u1175\u11AB",
      "\u110B\u1167\u11AB\u110C\u1161\u11BC",
      "\u110B\u1167\u11AB\u110C\u116E",
      "\u110B\u1167\u11AB\u110E\u116E\u11AF",
      "\u110B\u1167\u11AB\u1111\u1175\u11AF",
      "\u110B\u1167\u11AB\u1112\u1161\u11B8",
      "\u110B\u1167\u11AB\u1112\u1172",
      "\u110B\u1167\u11AF\u1100\u1175",
      "\u110B\u1167\u11AF\u1106\u1162",
      "\u110B\u1167\u11AF\u1109\u116C",
      "\u110B\u1167\u11AF\u1109\u1175\u11B7\u1112\u1175",
      "\u110B\u1167\u11AF\u110C\u1165\u11BC",
      "\u110B\u1167\u11AF\u110E\u1161",
      "\u110B\u1167\u11AF\u1112\u1173\u11AF",
      "\u110B\u1167\u11B7\u1105\u1167",
      "\u110B\u1167\u11B8\u1109\u1165",
      "\u110B\u1167\u11BC\u1100\u116E\u11A8",
      "\u110B\u1167\u11BC\u1102\u1161\u11B7",
      "\u110B\u1167\u11BC\u1109\u1161\u11BC",
      "\u110B\u1167\u11BC\u110B\u1163\u11BC",
      "\u110B\u1167\u11BC\u110B\u1167\u11A8",
      "\u110B\u1167\u11BC\u110B\u116E\u11BC",
      "\u110B\u1167\u11BC\u110B\u116F\u11AB\u1112\u1175",
      "\u110B\u1167\u11BC\u1112\u1161",
      "\u110B\u1167\u11BC\u1112\u1163\u11BC",
      "\u110B\u1167\u11BC\u1112\u1169\u11AB",
      "\u110B\u1167\u11BC\u1112\u116A",
      "\u110B\u1167\u11C1\u1100\u116E\u1105\u1175",
      "\u110B\u1167\u11C1\u1107\u1161\u11BC",
      "\u110B\u1167\u11C1\u110C\u1175\u11B8",
      "\u110B\u1168\u1100\u1161\u11B7",
      "\u110B\u1168\u1100\u1173\u11B7",
      "\u110B\u1168\u1107\u1161\u11BC",
      "\u110B\u1168\u1109\u1161\u11AB",
      "\u110B\u1168\u1109\u1161\u11BC",
      "\u110B\u1168\u1109\u1165\u11AB",
      "\u110B\u1168\u1109\u116E\u11AF",
      "\u110B\u1168\u1109\u1173\u11B8",
      "\u110B\u1168\u1109\u1175\u11A8\u110C\u1161\u11BC",
      "\u110B\u1168\u110B\u1163\u11A8",
      "\u110B\u1168\u110C\u1165\u11AB",
      "\u110B\u1168\u110C\u1165\u11AF",
      "\u110B\u1168\u110C\u1165\u11BC",
      "\u110B\u1168\u110F\u1165\u11AB\u1103\u1162",
      "\u110B\u1168\u11BA\u1102\u1161\u11AF",
      "\u110B\u1169\u1102\u1173\u11AF",
      "\u110B\u1169\u1105\u1161\u11A8",
      "\u110B\u1169\u1105\u1162\u11BA\u1103\u1169\u11BC\u110B\u1161\u11AB",
      "\u110B\u1169\u1105\u1166\u11AB\u110C\u1175",
      "\u110B\u1169\u1105\u1169\u110C\u1175",
      "\u110B\u1169\u1105\u1173\u11AB\u1107\u1161\u11AF",
      "\u110B\u1169\u1107\u1173\u11AB",
      "\u110B\u1169\u1109\u1175\u11B8",
      "\u110B\u1169\u110B\u1167\u11B7",
      "\u110B\u1169\u110B\u116F\u11AF",
      "\u110B\u1169\u110C\u1165\u11AB",
      "\u110B\u1169\u110C\u1175\u11A8",
      "\u110B\u1169\u110C\u1175\u11BC\u110B\u1165",
      "\u110B\u1169\u1111\u1166\u1105\u1161",
      "\u110B\u1169\u1111\u1175\u1109\u1173\u1110\u1166\u11AF",
      "\u110B\u1169\u1112\u1175\u1105\u1167",
      "\u110B\u1169\u11A8\u1109\u1161\u11BC",
      "\u110B\u1169\u11A8\u1109\u116E\u1109\u116E",
      "\u110B\u1169\u11AB\u1100\u1161\u11BD",
      "\u110B\u1169\u11AB\u1105\u1161\u110B\u1175\u11AB",
      "\u110B\u1169\u11AB\u1106\u1169\u11B7",
      "\u110B\u1169\u11AB\u110C\u1169\u11BC\u110B\u1175\u11AF",
      "\u110B\u1169\u11AB\u1110\u1169\u11BC",
      "\u110B\u1169\u11AF\u1100\u1161\u110B\u1173\u11AF",
      "\u110B\u1169\u11AF\u1105\u1175\u11B7\u1111\u1175\u11A8",
      "\u110B\u1169\u11AF\u1112\u1162",
      "\u110B\u1169\u11BA\u110E\u1161\u1105\u1175\u11B7",
      "\u110B\u116A\u110B\u1175\u1109\u1167\u110E\u1173",
      "\u110B\u116A\u110B\u1175\u11AB",
      "\u110B\u116A\u11AB\u1109\u1165\u11BC",
      "\u110B\u116A\u11AB\u110C\u1165\u11AB",
      "\u110B\u116A\u11BC\u1107\u1175",
      "\u110B\u116A\u11BC\u110C\u1161",
      "\u110B\u116B\u1102\u1163\u1112\u1161\u1106\u1167\u11AB",
      "\u110B\u116B\u11AB\u110C\u1175",
      "\u110B\u116C\u1100\u1161\u11BA\u110C\u1175\u11B8",
      "\u110B\u116C\u1100\u116E\u11A8",
      "\u110B\u116C\u1105\u1169\u110B\u116E\u11B7",
      "\u110B\u116C\u1109\u1161\u11B7\u110E\u1169\u11AB",
      "\u110B\u116C\u110E\u116E\u11AF",
      "\u110B\u116C\u110E\u1175\u11B7",
      "\u110B\u116C\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
      "\u110B\u116C\u11AB\u1107\u1161\u11AF",
      "\u110B\u116C\u11AB\u1109\u1169\u11AB",
      "\u110B\u116C\u11AB\u110D\u1169\u11A8",
      "\u110B\u116D\u1100\u1173\u11B7",
      "\u110B\u116D\u110B\u1175\u11AF",
      "\u110B\u116D\u110C\u1173\u11B7",
      "\u110B\u116D\u110E\u1165\u11BC",
      "\u110B\u116D\u11BC\u1100\u1175",
      "\u110B\u116D\u11BC\u1109\u1165",
      "\u110B\u116D\u11BC\u110B\u1165",
      "\u110B\u116E\u1109\u1161\u11AB",
      "\u110B\u116E\u1109\u1165\u11AB",
      "\u110B\u116E\u1109\u1173\u11BC",
      "\u110B\u116E\u110B\u1167\u11AB\u1112\u1175",
      "\u110B\u116E\u110C\u1165\u11BC",
      "\u110B\u116E\u110E\u1166\u1100\u116E\u11A8",
      "\u110B\u116E\u1111\u1167\u11AB",
      "\u110B\u116E\u11AB\u1103\u1169\u11BC",
      "\u110B\u116E\u11AB\u1106\u1167\u11BC",
      "\u110B\u116E\u11AB\u1107\u1161\u11AB",
      "\u110B\u116E\u11AB\u110C\u1165\u11AB",
      "\u110B\u116E\u11AB\u1112\u1162\u11BC",
      "\u110B\u116E\u11AF\u1109\u1161\u11AB",
      "\u110B\u116E\u11AF\u110B\u1173\u11B7",
      "\u110B\u116E\u11B7\u110C\u1175\u11A8\u110B\u1175\u11B7",
      "\u110B\u116E\u11BA\u110B\u1165\u1105\u1173\u11AB",
      "\u110B\u116E\u11BA\u110B\u1173\u11B7",
      "\u110B\u116F\u1102\u1161\u11A8",
      "\u110B\u116F\u11AB\u1100\u1169",
      "\u110B\u116F\u11AB\u1105\u1162",
      "\u110B\u116F\u11AB\u1109\u1165",
      "\u110B\u116F\u11AB\u1109\u116E\u11BC\u110B\u1175",
      "\u110B\u116F\u11AB\u110B\u1175\u11AB",
      "\u110B\u116F\u11AB\u110C\u1161\u11BC",
      "\u110B\u116F\u11AB\u1111\u1175\u1109\u1173",
      "\u110B\u116F\u11AF\u1100\u1173\u11B8",
      "\u110B\u116F\u11AF\u1103\u1173\u110F\u1165\u11B8",
      "\u110B\u116F\u11AF\u1109\u1166",
      "\u110B\u116F\u11AF\u110B\u116D\u110B\u1175\u11AF",
      "\u110B\u1170\u110B\u1175\u1110\u1165",
      "\u110B\u1171\u1107\u1161\u11AB",
      "\u110B\u1171\u1107\u1165\u11B8",
      "\u110B\u1171\u1109\u1165\u11BC",
      "\u110B\u1171\u110B\u116F\u11AB",
      "\u110B\u1171\u1112\u1165\u11B7",
      "\u110B\u1171\u1112\u1167\u11B8",
      "\u110B\u1171\u11BA\u1109\u1161\u1105\u1161\u11B7",
      "\u110B\u1172\u1102\u1161\u11AB\u1112\u1175",
      "\u110B\u1172\u1105\u1165\u11B8",
      "\u110B\u1172\u1106\u1167\u11BC",
      "\u110B\u1172\u1106\u116E\u11AF",
      "\u110B\u1172\u1109\u1161\u11AB",
      "\u110B\u1172\u110C\u1165\u11A8",
      "\u110B\u1172\u110E\u1175\u110B\u116F\u11AB",
      "\u110B\u1172\u1112\u1161\u11A8",
      "\u110B\u1172\u1112\u1162\u11BC",
      "\u110B\u1172\u1112\u1167\u11BC",
      "\u110B\u1172\u11A8\u1100\u116E\u11AB",
      "\u110B\u1172\u11A8\u1109\u1161\u11BC",
      "\u110B\u1172\u11A8\u1109\u1175\u11B8",
      "\u110B\u1172\u11A8\u110E\u1166",
      "\u110B\u1173\u11AB\u1112\u1162\u11BC",
      "\u110B\u1173\u11B7\u1105\u1167\u11A8",
      "\u110B\u1173\u11B7\u1105\u116D",
      "\u110B\u1173\u11B7\u1107\u1161\u11AB",
      "\u110B\u1173\u11B7\u1109\u1165\u11BC",
      "\u110B\u1173\u11B7\u1109\u1175\u11A8",
      "\u110B\u1173\u11B7\u110B\u1161\u11A8",
      "\u110B\u1173\u11B7\u110C\u116E",
      "\u110B\u1174\u1100\u1167\u11AB",
      "\u110B\u1174\u1102\u1169\u11AB",
      "\u110B\u1174\u1106\u116E\u11AB",
      "\u110B\u1174\u1107\u1169\u11A8",
      "\u110B\u1174\u1109\u1175\u11A8",
      "\u110B\u1174\u1109\u1175\u11B7",
      "\u110B\u1174\u110B\u116C\u1105\u1169",
      "\u110B\u1174\u110B\u116D\u11A8",
      "\u110B\u1174\u110B\u116F\u11AB",
      "\u110B\u1174\u1112\u1161\u11A8",
      "\u110B\u1175\u1100\u1165\u11BA",
      "\u110B\u1175\u1100\u1169\u11BA",
      "\u110B\u1175\u1102\u1167\u11B7",
      "\u110B\u1175\u1102\u1169\u11B7",
      "\u110B\u1175\u1103\u1161\u11AF",
      "\u110B\u1175\u1103\u1162\u1105\u1169",
      "\u110B\u1175\u1103\u1169\u11BC",
      "\u110B\u1175\u1105\u1165\u11C2\u1100\u1166",
      "\u110B\u1175\u1105\u1167\u11A8\u1109\u1165",
      "\u110B\u1175\u1105\u1169\u11AB\u110C\u1165\u11A8",
      "\u110B\u1175\u1105\u1173\u11B7",
      "\u110B\u1175\u1106\u1175\u11AB",
      "\u110B\u1175\u1107\u1161\u11AF\u1109\u1169",
      "\u110B\u1175\u1107\u1167\u11AF",
      "\u110B\u1175\u1107\u116E\u11AF",
      "\u110B\u1175\u1108\u1161\u11AF",
      "\u110B\u1175\u1109\u1161\u11BC",
      "\u110B\u1175\u1109\u1165\u11BC",
      "\u110B\u1175\u1109\u1173\u11AF",
      "\u110B\u1175\u110B\u1163\u1100\u1175",
      "\u110B\u1175\u110B\u116D\u11BC",
      "\u110B\u1175\u110B\u116E\u11BA",
      "\u110B\u1175\u110B\u116F\u11AF",
      "\u110B\u1175\u110B\u1173\u11A8\u1100\u1169",
      "\u110B\u1175\u110B\u1175\u11A8",
      "\u110B\u1175\u110C\u1165\u11AB",
      "\u110B\u1175\u110C\u116E\u11BC",
      "\u110B\u1175\u1110\u1173\u11AE\u1102\u1161\u11AF",
      "\u110B\u1175\u1110\u1173\u11AF",
      "\u110B\u1175\u1112\u1169\u11AB",
      "\u110B\u1175\u11AB\u1100\u1161\u11AB",
      "\u110B\u1175\u11AB\u1100\u1167\u11A8",
      "\u110B\u1175\u11AB\u1100\u1169\u11BC",
      "\u110B\u1175\u11AB\u1100\u116E",
      "\u110B\u1175\u11AB\u1100\u1173\u11AB",
      "\u110B\u1175\u11AB\u1100\u1175",
      "\u110B\u1175\u11AB\u1103\u1169",
      "\u110B\u1175\u11AB\u1105\u1172",
      "\u110B\u1175\u11AB\u1106\u116E\u11AF",
      "\u110B\u1175\u11AB\u1109\u1162\u11BC",
      "\u110B\u1175\u11AB\u1109\u116B",
      "\u110B\u1175\u11AB\u110B\u1167\u11AB",
      "\u110B\u1175\u11AB\u110B\u116F\u11AB",
      "\u110B\u1175\u11AB\u110C\u1162",
      "\u110B\u1175\u11AB\u110C\u1169\u11BC",
      "\u110B\u1175\u11AB\u110E\u1165\u11AB",
      "\u110B\u1175\u11AB\u110E\u1166",
      "\u110B\u1175\u11AB\u1110\u1165\u1102\u1166\u11BA",
      "\u110B\u1175\u11AB\u1112\u1161",
      "\u110B\u1175\u11AB\u1112\u1167\u11BC",
      "\u110B\u1175\u11AF\u1100\u1169\u11B8",
      "\u110B\u1175\u11AF\u1100\u1175",
      "\u110B\u1175\u11AF\u1103\u1161\u11AB",
      "\u110B\u1175\u11AF\u1103\u1162",
      "\u110B\u1175\u11AF\u1103\u1173\u11BC",
      "\u110B\u1175\u11AF\u1107\u1161\u11AB",
      "\u110B\u1175\u11AF\u1107\u1169\u11AB",
      "\u110B\u1175\u11AF\u1107\u116E",
      "\u110B\u1175\u11AF\u1109\u1161\u11BC",
      "\u110B\u1175\u11AF\u1109\u1162\u11BC",
      "\u110B\u1175\u11AF\u1109\u1169\u11AB",
      "\u110B\u1175\u11AF\u110B\u116D\u110B\u1175\u11AF",
      "\u110B\u1175\u11AF\u110B\u116F\u11AF",
      "\u110B\u1175\u11AF\u110C\u1165\u11BC",
      "\u110B\u1175\u11AF\u110C\u1169\u11BC",
      "\u110B\u1175\u11AF\u110C\u116E\u110B\u1175\u11AF",
      "\u110B\u1175\u11AF\u110D\u1175\u11A8",
      "\u110B\u1175\u11AF\u110E\u1166",
      "\u110B\u1175\u11AF\u110E\u1175",
      "\u110B\u1175\u11AF\u1112\u1162\u11BC",
      "\u110B\u1175\u11AF\u1112\u116C\u110B\u116D\u11BC",
      "\u110B\u1175\u11B7\u1100\u1173\u11B7",
      "\u110B\u1175\u11B7\u1106\u116E",
      "\u110B\u1175\u11B8\u1103\u1162",
      "\u110B\u1175\u11B8\u1105\u1167\u11A8",
      "\u110B\u1175\u11B8\u1106\u1161\u11BA",
      "\u110B\u1175\u11B8\u1109\u1161",
      "\u110B\u1175\u11B8\u1109\u116E\u11AF",
      "\u110B\u1175\u11B8\u1109\u1175",
      "\u110B\u1175\u11B8\u110B\u116F\u11AB",
      "\u110B\u1175\u11B8\u110C\u1161\u11BC",
      "\u110B\u1175\u11B8\u1112\u1161\u11A8",
      "\u110C\u1161\u1100\u1161\u110B\u116D\u11BC",
      "\u110C\u1161\u1100\u1167\u11A8",
      "\u110C\u1161\u1100\u1173\u11A8",
      "\u110C\u1161\u1103\u1169\u11BC",
      "\u110C\u1161\u1105\u1161\u11BC",
      "\u110C\u1161\u1107\u116E\u1109\u1175\u11B7",
      "\u110C\u1161\u1109\u1175\u11A8",
      "\u110C\u1161\u1109\u1175\u11AB",
      "\u110C\u1161\u110B\u1167\u11AB",
      "\u110C\u1161\u110B\u116F\u11AB",
      "\u110C\u1161\u110B\u1172\u11AF",
      "\u110C\u1161\u110C\u1165\u11AB\u1100\u1165",
      "\u110C\u1161\u110C\u1165\u11BC",
      "\u110C\u1161\u110C\u1169\u11AB\u1109\u1175\u11B7",
      "\u110C\u1161\u1111\u1161\u11AB",
      "\u110C\u1161\u11A8\u1100\u1161",
      "\u110C\u1161\u11A8\u1102\u1167\u11AB",
      "\u110C\u1161\u11A8\u1109\u1165\u11BC",
      "\u110C\u1161\u11A8\u110B\u1165\u11B8",
      "\u110C\u1161\u11A8\u110B\u116D\u11BC",
      "\u110C\u1161\u11A8\u110B\u1173\u11AB\u1104\u1161\u11AF",
      "\u110C\u1161\u11A8\u1111\u116E\u11B7",
      "\u110C\u1161\u11AB\u1103\u1175",
      "\u110C\u1161\u11AB\u1104\u1173\u11A8",
      "\u110C\u1161\u11AB\u110E\u1175",
      "\u110C\u1161\u11AF\u1106\u1169\u11BA",
      "\u110C\u1161\u11B7\u1101\u1161\u11AB",
      "\u110C\u1161\u11B7\u1109\u116E\u1112\u1161\u11B7",
      "\u110C\u1161\u11B7\u1109\u1175",
      "\u110C\u1161\u11B7\u110B\u1169\u11BA",
      "\u110C\u1161\u11B7\u110C\u1161\u1105\u1175",
      "\u110C\u1161\u11B8\u110C\u1175",
      "\u110C\u1161\u11BC\u1100\u116A\u11AB",
      "\u110C\u1161\u11BC\u1100\u116E\u11AB",
      "\u110C\u1161\u11BC\u1100\u1175\u1100\u1161\u11AB",
      "\u110C\u1161\u11BC\u1105\u1162",
      "\u110C\u1161\u11BC\u1105\u1168",
      "\u110C\u1161\u11BC\u1105\u1173",
      "\u110C\u1161\u11BC\u1106\u1161",
      "\u110C\u1161\u11BC\u1106\u1167\u11AB",
      "\u110C\u1161\u11BC\u1106\u1169",
      "\u110C\u1161\u11BC\u1106\u1175",
      "\u110C\u1161\u11BC\u1107\u1175",
      "\u110C\u1161\u11BC\u1109\u1161",
      "\u110C\u1161\u11BC\u1109\u1169",
      "\u110C\u1161\u11BC\u1109\u1175\u11A8",
      "\u110C\u1161\u11BC\u110B\u1162\u110B\u1175\u11AB",
      "\u110C\u1161\u11BC\u110B\u1175\u11AB",
      "\u110C\u1161\u11BC\u110C\u1165\u11B7",
      "\u110C\u1161\u11BC\u110E\u1161",
      "\u110C\u1161\u11BC\u1112\u1161\u11A8\u1100\u1173\u11B7",
      "\u110C\u1162\u1102\u1173\u11BC",
      "\u110C\u1162\u1108\u1161\u11AF\u1105\u1175",
      "\u110C\u1162\u1109\u1161\u11AB",
      "\u110C\u1162\u1109\u1162\u11BC",
      "\u110C\u1162\u110C\u1161\u11A8\u1102\u1167\u11AB",
      "\u110C\u1162\u110C\u1165\u11BC",
      "\u110C\u1162\u110E\u1162\u1100\u1175",
      "\u110C\u1162\u1111\u1161\u11AB",
      "\u110C\u1162\u1112\u1161\u11A8",
      "\u110C\u1162\u1112\u116A\u11AF\u110B\u116D\u11BC",
      "\u110C\u1165\u1100\u1165\u11BA",
      "\u110C\u1165\u1100\u1169\u1105\u1175",
      "\u110C\u1165\u1100\u1169\u11BA",
      "\u110C\u1165\u1102\u1167\u11A8",
      "\u110C\u1165\u1105\u1165\u11AB",
      "\u110C\u1165\u1105\u1165\u11C2\u1100\u1166",
      "\u110C\u1165\u1107\u1165\u11AB",
      "\u110C\u1165\u110B\u116E\u11AF",
      "\u110C\u1165\u110C\u1165\u11AF\u1105\u1169",
      "\u110C\u1165\u110E\u116E\u11A8",
      "\u110C\u1165\u11A8\u1100\u1173\u11A8",
      "\u110C\u1165\u11A8\u1103\u1161\u11BC\u1112\u1175",
      "\u110C\u1165\u11A8\u1109\u1165\u11BC",
      "\u110C\u1165\u11A8\u110B\u116D\u11BC",
      "\u110C\u1165\u11A8\u110B\u1173\u11BC",
      "\u110C\u1165\u11AB\u1100\u1162",
      "\u110C\u1165\u11AB\u1100\u1169\u11BC",
      "\u110C\u1165\u11AB\u1100\u1175",
      "\u110C\u1165\u11AB\u1103\u1161\u11AF",
      "\u110C\u1165\u11AB\u1105\u1161\u1103\u1169",
      "\u110C\u1165\u11AB\u1106\u1161\u11BC",
      "\u110C\u1165\u11AB\u1106\u116E\u11AB",
      "\u110C\u1165\u11AB\u1107\u1161\u11AB",
      "\u110C\u1165\u11AB\u1107\u116E",
      "\u110C\u1165\u11AB\u1109\u1166",
      "\u110C\u1165\u11AB\u1109\u1175",
      "\u110C\u1165\u11AB\u110B\u116D\u11BC",
      "\u110C\u1165\u11AB\u110C\u1161",
      "\u110C\u1165\u11AB\u110C\u1162\u11BC",
      "\u110C\u1165\u11AB\u110C\u116E",
      "\u110C\u1165\u11AB\u110E\u1165\u11AF",
      "\u110C\u1165\u11AB\u110E\u1166",
      "\u110C\u1165\u11AB\u1110\u1169\u11BC",
      "\u110C\u1165\u11AB\u1112\u1167",
      "\u110C\u1165\u11AB\u1112\u116E",
      "\u110C\u1165\u11AF\u1103\u1162",
      "\u110C\u1165\u11AF\u1106\u1161\u11BC",
      "\u110C\u1165\u11AF\u1107\u1161\u11AB",
      "\u110C\u1165\u11AF\u110B\u1163\u11A8",
      "\u110C\u1165\u11AF\u110E\u1161",
      "\u110C\u1165\u11B7\u1100\u1165\u11B7",
      "\u110C\u1165\u11B7\u1109\u116E",
      "\u110C\u1165\u11B7\u1109\u1175\u11B7",
      "\u110C\u1165\u11B7\u110B\u116F\u11AB",
      "\u110C\u1165\u11B7\u110C\u1165\u11B7",
      "\u110C\u1165\u11B7\u110E\u1161",
      "\u110C\u1165\u11B8\u1100\u1173\u11AB",
      "\u110C\u1165\u11B8\u1109\u1175",
      "\u110C\u1165\u11B8\u110E\u1169\u11A8",
      "\u110C\u1165\u11BA\u1100\u1161\u1105\u1161\u11A8",
      "\u110C\u1165\u11BC\u1100\u1165\u110C\u1161\u11BC",
      "\u110C\u1165\u11BC\u1103\u1169",
      "\u110C\u1165\u11BC\u1105\u1172\u110C\u1161\u11BC",
      "\u110C\u1165\u11BC\u1105\u1175",
      "\u110C\u1165\u11BC\u1106\u1161\u11AF",
      "\u110C\u1165\u11BC\u1106\u1167\u11AB",
      "\u110C\u1165\u11BC\u1106\u116E\u11AB",
      "\u110C\u1165\u11BC\u1107\u1161\u11AB\u1103\u1162",
      "\u110C\u1165\u11BC\u1107\u1169",
      "\u110C\u1165\u11BC\u1107\u116E",
      "\u110C\u1165\u11BC\u1107\u1175",
      "\u110C\u1165\u11BC\u1109\u1161\u11BC",
      "\u110C\u1165\u11BC\u1109\u1165\u11BC",
      "\u110C\u1165\u11BC\u110B\u1169",
      "\u110C\u1165\u11BC\u110B\u116F\u11AB",
      "\u110C\u1165\u11BC\u110C\u1161\u11BC",
      "\u110C\u1165\u11BC\u110C\u1175",
      "\u110C\u1165\u11BC\u110E\u1175",
      "\u110C\u1165\u11BC\u1112\u116A\u11A8\u1112\u1175",
      "\u110C\u1166\u1100\u1169\u11BC",
      "\u110C\u1166\u1100\u116A\u110C\u1165\u11B7",
      "\u110C\u1166\u1103\u1162\u1105\u1169",
      "\u110C\u1166\u1106\u1169\u11A8",
      "\u110C\u1166\u1107\u1161\u11AF",
      "\u110C\u1166\u1107\u1165\u11B8",
      "\u110C\u1166\u1109\u1161\u11BA\u1102\u1161\u11AF",
      "\u110C\u1166\u110B\u1161\u11AB",
      "\u110C\u1166\u110B\u1175\u11AF",
      "\u110C\u1166\u110C\u1161\u11A8",
      "\u110C\u1166\u110C\u116E\u1103\u1169",
      "\u110C\u1166\u110E\u116E\u11AF",
      "\u110C\u1166\u1111\u116E\u11B7",
      "\u110C\u1166\u1112\u1161\u11AB",
      "\u110C\u1169\u1100\u1161\u11A8",
      "\u110C\u1169\u1100\u1165\u11AB",
      "\u110C\u1169\u1100\u1173\u11B7",
      "\u110C\u1169\u1100\u1175\u11BC",
      "\u110C\u1169\u1106\u1167\u11BC",
      "\u110C\u1169\u1106\u1175\u1105\u116D",
      "\u110C\u1169\u1109\u1161\u11BC",
      "\u110C\u1169\u1109\u1165\u11AB",
      "\u110C\u1169\u110B\u116D\u11BC\u1112\u1175",
      "\u110C\u1169\u110C\u1165\u11AF",
      "\u110C\u1169\u110C\u1165\u11BC",
      "\u110C\u1169\u110C\u1175\u11A8",
      "\u110C\u1169\u11AB\u1103\u1162\u11BA\u1106\u1161\u11AF",
      "\u110C\u1169\u11AB\u110C\u1162",
      "\u110C\u1169\u11AF\u110B\u1165\u11B8",
      "\u110C\u1169\u11AF\u110B\u1173\u11B7",
      "\u110C\u1169\u11BC\u1100\u116D",
      "\u110C\u1169\u11BC\u1105\u1169",
      "\u110C\u1169\u11BC\u1105\u1172",
      "\u110C\u1169\u11BC\u1109\u1169\u1105\u1175",
      "\u110C\u1169\u11BC\u110B\u1165\u11B8\u110B\u116F\u11AB",
      "\u110C\u1169\u11BC\u110C\u1169\u11BC",
      "\u110C\u1169\u11BC\u1112\u1161\u11B8",
      "\u110C\u116A\u1109\u1165\u11A8",
      "\u110C\u116C\u110B\u1175\u11AB",
      "\u110C\u116E\u1100\u116A\u11AB\u110C\u1165\u11A8",
      "\u110C\u116E\u1105\u1173\u11B7",
      "\u110C\u116E\u1106\u1161\u11AF",
      "\u110C\u116E\u1106\u1165\u1102\u1175",
      "\u110C\u116E\u1106\u1165\u11A8",
      "\u110C\u116E\u1106\u116E\u11AB",
      "\u110C\u116E\u1106\u1175\u11AB",
      "\u110C\u116E\u1107\u1161\u11BC",
      "\u110C\u116E\u1107\u1167\u11AB",
      "\u110C\u116E\u1109\u1175\u11A8",
      "\u110C\u116E\u110B\u1175\u11AB",
      "\u110C\u116E\u110B\u1175\u11AF",
      "\u110C\u116E\u110C\u1161\u11BC",
      "\u110C\u116E\u110C\u1165\u11AB\u110C\u1161",
      "\u110C\u116E\u1110\u1162\u11A8",
      "\u110C\u116E\u11AB\u1107\u1175",
      "\u110C\u116E\u11AF\u1100\u1165\u1105\u1175",
      "\u110C\u116E\u11AF\u1100\u1175",
      "\u110C\u116E\u11AF\u1106\u116E\u1102\u1174",
      "\u110C\u116E\u11BC\u1100\u1161\u11AB",
      "\u110C\u116E\u11BC\u1100\u1168\u1107\u1161\u11BC\u1109\u1169\u11BC",
      "\u110C\u116E\u11BC\u1100\u116E\u11A8",
      "\u110C\u116E\u11BC\u1102\u1167\u11AB",
      "\u110C\u116E\u11BC\u1103\u1161\u11AB",
      "\u110C\u116E\u11BC\u1103\u1169\u11A8",
      "\u110C\u116E\u11BC\u1107\u1161\u11AB",
      "\u110C\u116E\u11BC\u1107\u116E",
      "\u110C\u116E\u11BC\u1109\u1166",
      "\u110C\u116E\u11BC\u1109\u1169\u1100\u1175\u110B\u1165\u11B8",
      "\u110C\u116E\u11BC\u1109\u116E\u11AB",
      "\u110C\u116E\u11BC\u110B\u1161\u11BC",
      "\u110C\u116E\u11BC\u110B\u116D",
      "\u110C\u116E\u11BC\u1112\u1161\u11A8\u1100\u116D",
      "\u110C\u1173\u11A8\u1109\u1165\u11A8",
      "\u110C\u1173\u11A8\u1109\u1175",
      "\u110C\u1173\u11AF\u1100\u1165\u110B\u116E\u11B7",
      "\u110C\u1173\u11BC\u1100\u1161",
      "\u110C\u1173\u11BC\u1100\u1165",
      "\u110C\u1173\u11BC\u1100\u116F\u11AB",
      "\u110C\u1173\u11BC\u1109\u1161\u11BC",
      "\u110C\u1173\u11BC\u1109\u1166",
      "\u110C\u1175\u1100\u1161\u11A8",
      "\u110C\u1175\u1100\u1161\u11B8",
      "\u110C\u1175\u1100\u1167\u11BC",
      "\u110C\u1175\u1100\u1173\u11A8\u1112\u1175",
      "\u110C\u1175\u1100\u1173\u11B7",
      "\u110C\u1175\u1100\u1173\u11B8",
      "\u110C\u1175\u1102\u1173\u11BC",
      "\u110C\u1175\u1105\u1173\u11B7\u1100\u1175\u11AF",
      "\u110C\u1175\u1105\u1175\u1109\u1161\u11AB",
      "\u110C\u1175\u1107\u1161\u11BC",
      "\u110C\u1175\u1107\u116E\u11BC",
      "\u110C\u1175\u1109\u1175\u11A8",
      "\u110C\u1175\u110B\u1167\u11A8",
      "\u110C\u1175\u110B\u116E\u1100\u1162",
      "\u110C\u1175\u110B\u116F\u11AB",
      "\u110C\u1175\u110C\u1165\u11A8",
      "\u110C\u1175\u110C\u1165\u11B7",
      "\u110C\u1175\u110C\u1175\u11AB",
      "\u110C\u1175\u110E\u116E\u11AF",
      "\u110C\u1175\u11A8\u1109\u1165\u11AB",
      "\u110C\u1175\u11A8\u110B\u1165\u11B8",
      "\u110C\u1175\u11A8\u110B\u116F\u11AB",
      "\u110C\u1175\u11A8\u110C\u1161\u11BC",
      "\u110C\u1175\u11AB\u1100\u1173\u11B8",
      "\u110C\u1175\u11AB\u1103\u1169\u11BC",
      "\u110C\u1175\u11AB\u1105\u1169",
      "\u110C\u1175\u11AB\u1105\u116D",
      "\u110C\u1175\u11AB\u1105\u1175",
      "\u110C\u1175\u11AB\u110D\u1161",
      "\u110C\u1175\u11AB\u110E\u1161\u11AF",
      "\u110C\u1175\u11AB\u110E\u116E\u11AF",
      "\u110C\u1175\u11AB\u1110\u1169\u11BC",
      "\u110C\u1175\u11AB\u1112\u1162\u11BC",
      "\u110C\u1175\u11AF\u1106\u116E\u11AB",
      "\u110C\u1175\u11AF\u1107\u1167\u11BC",
      "\u110C\u1175\u11AF\u1109\u1165",
      "\u110C\u1175\u11B7\u110C\u1161\u11A8",
      "\u110C\u1175\u11B8\u1103\u1161\u11AB",
      "\u110C\u1175\u11B8\u110B\u1161\u11AB",
      "\u110C\u1175\u11B8\u110C\u116E\u11BC",
      "\u110D\u1161\u110C\u1173\u11BC",
      "\u110D\u1175\u1101\u1165\u1100\u1175",
      "\u110E\u1161\u1102\u1161\u11B7",
      "\u110E\u1161\u1105\u1161\u1105\u1175",
      "\u110E\u1161\u1105\u1163\u11BC",
      "\u110E\u1161\u1105\u1175\u11B7",
      "\u110E\u1161\u1107\u1167\u11AF",
      "\u110E\u1161\u1109\u1165\u11AB",
      "\u110E\u1161\u110E\u1173\u11B7",
      "\u110E\u1161\u11A8\u1100\u1161\u11A8",
      "\u110E\u1161\u11AB\u1106\u116E\u11AF",
      "\u110E\u1161\u11AB\u1109\u1165\u11BC",
      "\u110E\u1161\u11B7\u1100\u1161",
      "\u110E\u1161\u11B7\u1100\u1175\u1105\u1173\u11B7",
      "\u110E\u1161\u11B7\u1109\u1162",
      "\u110E\u1161\u11B7\u1109\u1165\u11A8",
      "\u110E\u1161\u11B7\u110B\u1167",
      "\u110E\u1161\u11B7\u110B\u116C",
      "\u110E\u1161\u11B7\u110C\u1169",
      "\u110E\u1161\u11BA\u110C\u1161\u11AB",
      "\u110E\u1161\u11BC\u1100\u1161",
      "\u110E\u1161\u11BC\u1100\u1169",
      "\u110E\u1161\u11BC\u1100\u116E",
      "\u110E\u1161\u11BC\u1106\u116E\u11AB",
      "\u110E\u1161\u11BC\u1107\u1161\u11A9",
      "\u110E\u1161\u11BC\u110C\u1161\u11A8",
      "\u110E\u1161\u11BC\u110C\u1169",
      "\u110E\u1162\u1102\u1165\u11AF",
      "\u110E\u1162\u110C\u1165\u11B7",
      "\u110E\u1162\u11A8\u1100\u1161\u1107\u1161\u11BC",
      "\u110E\u1162\u11A8\u1107\u1161\u11BC",
      "\u110E\u1162\u11A8\u1109\u1161\u11BC",
      "\u110E\u1162\u11A8\u110B\u1175\u11B7",
      "\u110E\u1162\u11B7\u1111\u1175\u110B\u1165\u11AB",
      "\u110E\u1165\u1107\u1165\u11AF",
      "\u110E\u1165\u110B\u1173\u11B7",
      "\u110E\u1165\u11AB\u1100\u116E\u11A8",
      "\u110E\u1165\u11AB\u1103\u116E\u11BC",
      "\u110E\u1165\u11AB\u110C\u1161\u11BC",
      "\u110E\u1165\u11AB\u110C\u1162",
      "\u110E\u1165\u11AB\u110E\u1165\u11AB\u1112\u1175",
      "\u110E\u1165\u11AF\u1103\u1169",
      "\u110E\u1165\u11AF\u110C\u1165\u1112\u1175",
      "\u110E\u1165\u11AF\u1112\u1161\u11A8",
      "\u110E\u1165\u11BA\u1102\u1161\u11AF",
      "\u110E\u1165\u11BA\u110D\u1162",
      "\u110E\u1165\u11BC\u1102\u1167\u11AB",
      "\u110E\u1165\u11BC\u1107\u1161\u110C\u1175",
      "\u110E\u1165\u11BC\u1109\u1169",
      "\u110E\u1165\u11BC\u110E\u116E\u11AB",
      "\u110E\u1166\u1100\u1168",
      "\u110E\u1166\u1105\u1167\u11A8",
      "\u110E\u1166\u110B\u1169\u11AB",
      "\u110E\u1166\u110B\u1172\u11A8",
      "\u110E\u1166\u110C\u116E\u11BC",
      "\u110E\u1166\u1112\u1165\u11B7",
      "\u110E\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
      "\u110E\u1169\u1107\u1161\u11AB",
      "\u110E\u1169\u1107\u1161\u11B8",
      "\u110E\u1169\u1109\u1161\u11BC\u1112\u116A",
      "\u110E\u1169\u1109\u116E\u11AB",
      "\u110E\u1169\u110B\u1167\u1105\u1173\u11B7",
      "\u110E\u1169\u110B\u116F\u11AB",
      "\u110E\u1169\u110C\u1165\u1102\u1167\u11A8",
      "\u110E\u1169\u110C\u1165\u11B7",
      "\u110E\u1169\u110E\u1165\u11BC",
      "\u110E\u1169\u110F\u1169\u11AF\u1105\u1175\u11BA",
      "\u110E\u1169\u11BA\u1107\u116E\u11AF",
      "\u110E\u1169\u11BC\u1100\u1161\u11A8",
      "\u110E\u1169\u11BC\u1105\u1175",
      "\u110E\u1169\u11BC\u110C\u1161\u11BC",
      "\u110E\u116A\u11AF\u110B\u1167\u11BC",
      "\u110E\u116C\u1100\u1173\u11AB",
      "\u110E\u116C\u1109\u1161\u11BC",
      "\u110E\u116C\u1109\u1165\u11AB",
      "\u110E\u116C\u1109\u1175\u11AB",
      "\u110E\u116C\u110B\u1161\u11A8",
      "\u110E\u116C\u110C\u1169\u11BC",
      "\u110E\u116E\u1109\u1165\u11A8",
      "\u110E\u116E\u110B\u1165\u11A8",
      "\u110E\u116E\u110C\u1175\u11AB",
      "\u110E\u116E\u110E\u1165\u11AB",
      "\u110E\u116E\u110E\u1173\u11A8",
      "\u110E\u116E\u11A8\u1100\u116E",
      "\u110E\u116E\u11A8\u1109\u1169",
      "\u110E\u116E\u11A8\u110C\u1166",
      "\u110E\u116E\u11A8\u1112\u1161",
      "\u110E\u116E\u11AF\u1100\u1173\u11AB",
      "\u110E\u116E\u11AF\u1107\u1161\u11AF",
      "\u110E\u116E\u11AF\u1109\u1161\u11AB",
      "\u110E\u116E\u11AF\u1109\u1175\u11AB",
      "\u110E\u116E\u11AF\u110B\u1167\u11AB",
      "\u110E\u116E\u11AF\u110B\u1175\u11B8",
      "\u110E\u116E\u11AF\u110C\u1161\u11BC",
      "\u110E\u116E\u11AF\u1111\u1161\u11AB",
      "\u110E\u116E\u11BC\u1100\u1167\u11A8",
      "\u110E\u116E\u11BC\u1100\u1169",
      "\u110E\u116E\u11BC\u1103\u1169\u11AF",
      "\u110E\u116E\u11BC\u1107\u116E\u11AB\u1112\u1175",
      "\u110E\u116E\u11BC\u110E\u1165\u11BC\u1103\u1169",
      "\u110E\u1171\u110B\u1165\u11B8",
      "\u110E\u1171\u110C\u1175\u11A8",
      "\u110E\u1171\u1112\u1163\u11BC",
      "\u110E\u1175\u110B\u1163\u11A8",
      "\u110E\u1175\u11AB\u1100\u116E",
      "\u110E\u1175\u11AB\u110E\u1165\u11A8",
      "\u110E\u1175\u11AF\u1109\u1175\u11B8",
      "\u110E\u1175\u11AF\u110B\u116F\u11AF",
      "\u110E\u1175\u11AF\u1111\u1161\u11AB",
      "\u110E\u1175\u11B7\u1103\u1162",
      "\u110E\u1175\u11B7\u1106\u116E\u11A8",
      "\u110E\u1175\u11B7\u1109\u1175\u11AF",
      "\u110E\u1175\u11BA\u1109\u1169\u11AF",
      "\u110E\u1175\u11BC\u110E\u1161\u11AB",
      "\u110F\u1161\u1106\u1166\u1105\u1161",
      "\u110F\u1161\u110B\u116E\u11AB\u1110\u1165",
      "\u110F\u1161\u11AF\u1100\u116E\u11A8\u1109\u116E",
      "\u110F\u1162\u1105\u1175\u11A8\u1110\u1165",
      "\u110F\u1162\u11B7\u1111\u1165\u1109\u1173",
      "\u110F\u1162\u11B7\u1111\u1166\u110B\u1175\u11AB",
      "\u110F\u1165\u1110\u1173\u11AB",
      "\u110F\u1165\u11AB\u1103\u1175\u1109\u1167\u11AB",
      "\u110F\u1165\u11AF\u1105\u1165",
      "\u110F\u1165\u11B7\u1111\u1172\u1110\u1165",
      "\u110F\u1169\u1101\u1175\u1105\u1175",
      "\u110F\u1169\u1106\u1175\u1103\u1175",
      "\u110F\u1169\u11AB\u1109\u1165\u1110\u1173",
      "\u110F\u1169\u11AF\u1105\u1161",
      "\u110F\u1169\u11B7\u1111\u1173\u11AF\u1105\u1166\u11A8\u1109\u1173",
      "\u110F\u1169\u11BC\u1102\u1161\u1106\u116E\u11AF",
      "\u110F\u116B\u1100\u1161\u11B7",
      "\u110F\u116E\u1103\u1166\u1110\u1161",
      "\u110F\u1173\u1105\u1175\u11B7",
      "\u110F\u1173\u11AB\u1100\u1175\u11AF",
      "\u110F\u1173\u11AB\u1104\u1161\u11AF",
      "\u110F\u1173\u11AB\u1109\u1169\u1105\u1175",
      "\u110F\u1173\u11AB\u110B\u1161\u1103\u1173\u11AF",
      "\u110F\u1173\u11AB\u110B\u1165\u1106\u1165\u1102\u1175",
      "\u110F\u1173\u11AB\u110B\u1175\u11AF",
      "\u110F\u1173\u11AB\u110C\u1165\u11AF",
      "\u110F\u1173\u11AF\u1105\u1162\u1109\u1175\u11A8",
      "\u110F\u1173\u11AF\u1105\u1165\u11B8",
      "\u110F\u1175\u11AF\u1105\u1169",
      "\u1110\u1161\u110B\u1175\u11B8",
      "\u1110\u1161\u110C\u1161\u1100\u1175",
      "\u1110\u1161\u11A8\u1100\u116E",
      "\u1110\u1161\u11A8\u110C\u1161",
      "\u1110\u1161\u11AB\u1109\u1162\u11BC",
      "\u1110\u1162\u1100\u116F\u11AB\u1103\u1169",
      "\u1110\u1162\u110B\u1163\u11BC",
      "\u1110\u1162\u1111\u116E\u11BC",
      "\u1110\u1162\u11A8\u1109\u1175",
      "\u1110\u1162\u11AF\u1105\u1165\u11AB\u1110\u1173",
      "\u1110\u1165\u1102\u1165\u11AF",
      "\u1110\u1165\u1106\u1175\u1102\u1165\u11AF",
      "\u1110\u1166\u1102\u1175\u1109\u1173",
      "\u1110\u1166\u1109\u1173\u1110\u1173",
      "\u1110\u1166\u110B\u1175\u1107\u1173\u11AF",
      "\u1110\u1166\u11AF\u1105\u1166\u1107\u1175\u110C\u1165\u11AB",
      "\u1110\u1169\u1105\u1169\u11AB",
      "\u1110\u1169\u1106\u1161\u1110\u1169",
      "\u1110\u1169\u110B\u116D\u110B\u1175\u11AF",
      "\u1110\u1169\u11BC\u1100\u1168",
      "\u1110\u1169\u11BC\u1100\u116A",
      "\u1110\u1169\u11BC\u1105\u1169",
      "\u1110\u1169\u11BC\u1109\u1175\u11AB",
      "\u1110\u1169\u11BC\u110B\u1167\u11A8",
      "\u1110\u1169\u11BC\u110B\u1175\u11AF",
      "\u1110\u1169\u11BC\u110C\u1161\u11BC",
      "\u1110\u1169\u11BC\u110C\u1166",
      "\u1110\u1169\u11BC\u110C\u1173\u11BC",
      "\u1110\u1169\u11BC\u1112\u1161\u11B8",
      "\u1110\u1169\u11BC\u1112\u116A",
      "\u1110\u116C\u1100\u1173\u11AB",
      "\u1110\u116C\u110B\u116F\u11AB",
      "\u1110\u116C\u110C\u1175\u11A8\u1100\u1173\u11B7",
      "\u1110\u1171\u1100\u1175\u11B7",
      "\u1110\u1173\u1105\u1165\u11A8",
      "\u1110\u1173\u11A8\u1100\u1173\u11B8",
      "\u1110\u1173\u11A8\u1107\u1167\u11AF",
      "\u1110\u1173\u11A8\u1109\u1165\u11BC",
      "\u1110\u1173\u11A8\u1109\u116E",
      "\u1110\u1173\u11A8\u110C\u1175\u11BC",
      "\u1110\u1173\u11A8\u1112\u1175",
      "\u1110\u1173\u11AB\u1110\u1173\u11AB\u1112\u1175",
      "\u1110\u1175\u1109\u1167\u110E\u1173",
      "\u1111\u1161\u1105\u1161\u11AB\u1109\u1162\u11A8",
      "\u1111\u1161\u110B\u1175\u11AF",
      "\u1111\u1161\u110E\u116E\u11AF\u1109\u1169",
      "\u1111\u1161\u11AB\u1100\u1167\u11AF",
      "\u1111\u1161\u11AB\u1103\u1161\u11AB",
      "\u1111\u1161\u11AB\u1106\u1162",
      "\u1111\u1161\u11AB\u1109\u1161",
      "\u1111\u1161\u11AF\u1109\u1175\u11B8",
      "\u1111\u1161\u11AF\u110B\u116F\u11AF",
      "\u1111\u1161\u11B8\u1109\u1169\u11BC",
      "\u1111\u1162\u1109\u1167\u11AB",
      "\u1111\u1162\u11A8\u1109\u1173",
      "\u1111\u1162\u11A8\u1109\u1175\u1106\u1175\u11AF\u1105\u1175",
      "\u1111\u1162\u11AB\u1110\u1175",
      "\u1111\u1165\u1109\u1166\u11AB\u1110\u1173",
      "\u1111\u1166\u110B\u1175\u11AB\u1110\u1173",
      "\u1111\u1167\u11AB\u1100\u1167\u11AB",
      "\u1111\u1167\u11AB\u110B\u1174",
      "\u1111\u1167\u11AB\u110C\u1175",
      "\u1111\u1167\u11AB\u1112\u1175",
      "\u1111\u1167\u11BC\u1100\u1161",
      "\u1111\u1167\u11BC\u1100\u1172\u11AB",
      "\u1111\u1167\u11BC\u1109\u1162\u11BC",
      "\u1111\u1167\u11BC\u1109\u1169",
      "\u1111\u1167\u11BC\u110B\u1163\u11BC",
      "\u1111\u1167\u11BC\u110B\u1175\u11AF",
      "\u1111\u1167\u11BC\u1112\u116A",
      "\u1111\u1169\u1109\u1173\u1110\u1165",
      "\u1111\u1169\u110B\u1175\u11AB\u1110\u1173",
      "\u1111\u1169\u110C\u1161\u11BC",
      "\u1111\u1169\u1112\u1161\u11B7",
      "\u1111\u116D\u1106\u1167\u11AB",
      "\u1111\u116D\u110C\u1165\u11BC",
      "\u1111\u116D\u110C\u116E\u11AB",
      "\u1111\u116D\u1112\u1167\u11AB",
      "\u1111\u116E\u11B7\u1106\u1169\u11A8",
      "\u1111\u116E\u11B7\u110C\u1175\u11AF",
      "\u1111\u116E\u11BC\u1100\u1167\u11BC",
      "\u1111\u116E\u11BC\u1109\u1169\u11A8",
      "\u1111\u116E\u11BC\u1109\u1173\u11B8",
      "\u1111\u1173\u1105\u1161\u11BC\u1109\u1173",
      "\u1111\u1173\u1105\u1175\u11AB\u1110\u1165",
      "\u1111\u1173\u11AF\u1105\u1161\u1109\u1173\u1110\u1175\u11A8",
      "\u1111\u1175\u1100\u1169\u11AB",
      "\u1111\u1175\u1106\u1161\u11BC",
      "\u1111\u1175\u110B\u1161\u1102\u1169",
      "\u1111\u1175\u11AF\u1105\u1173\u11B7",
      "\u1111\u1175\u11AF\u1109\u116E",
      "\u1111\u1175\u11AF\u110B\u116D",
      "\u1111\u1175\u11AF\u110C\u1161",
      "\u1111\u1175\u11AF\u1110\u1169\u11BC",
      "\u1111\u1175\u11BC\u1100\u1168",
      "\u1112\u1161\u1102\u1173\u1102\u1175\u11B7",
      "\u1112\u1161\u1102\u1173\u11AF",
      "\u1112\u1161\u1103\u1173\u110B\u1170\u110B\u1165",
      "\u1112\u1161\u1105\u116E\u11BA\u1107\u1161\u11B7",
      "\u1112\u1161\u1107\u1161\u11AB\u1100\u1175",
      "\u1112\u1161\u1109\u116E\u11A8\u110C\u1175\u11B8",
      "\u1112\u1161\u1109\u116E\u11AB",
      "\u1112\u1161\u110B\u1167\u1110\u1173\u11AB",
      "\u1112\u1161\u110C\u1175\u1106\u1161\u11AB",
      "\u1112\u1161\u110E\u1165\u11AB",
      "\u1112\u1161\u1111\u116E\u11B7",
      "\u1112\u1161\u1111\u1175\u11AF",
      "\u1112\u1161\u11A8\u1100\u116A",
      "\u1112\u1161\u11A8\u1100\u116D",
      "\u1112\u1161\u11A8\u1100\u1173\u11B8",
      "\u1112\u1161\u11A8\u1100\u1175",
      "\u1112\u1161\u11A8\u1102\u1167\u11AB",
      "\u1112\u1161\u11A8\u1105\u1167\u11A8",
      "\u1112\u1161\u11A8\u1107\u1165\u11AB",
      "\u1112\u1161\u11A8\u1107\u116E\u1106\u1169",
      "\u1112\u1161\u11A8\u1107\u1175",
      "\u1112\u1161\u11A8\u1109\u1162\u11BC",
      "\u1112\u1161\u11A8\u1109\u116E\u11AF",
      "\u1112\u1161\u11A8\u1109\u1173\u11B8",
      "\u1112\u1161\u11A8\u110B\u116D\u11BC\u1111\u116E\u11B7",
      "\u1112\u1161\u11A8\u110B\u116F\u11AB",
      "\u1112\u1161\u11A8\u110B\u1171",
      "\u1112\u1161\u11A8\u110C\u1161",
      "\u1112\u1161\u11A8\u110C\u1165\u11B7",
      "\u1112\u1161\u11AB\u1100\u1168",
      "\u1112\u1161\u11AB\u1100\u1173\u11AF",
      "\u1112\u1161\u11AB\u1101\u1165\u1107\u1165\u11AB\u110B\u1166",
      "\u1112\u1161\u11AB\u1102\u1161\u11BD",
      "\u1112\u1161\u11AB\u1102\u116E\u11AB",
      "\u1112\u1161\u11AB\u1103\u1169\u11BC\u110B\u1161\u11AB",
      "\u1112\u1161\u11AB\u1104\u1162",
      "\u1112\u1161\u11AB\u1105\u1161\u1109\u1161\u11AB",
      "\u1112\u1161\u11AB\u1106\u1161\u1103\u1175",
      "\u1112\u1161\u11AB\u1106\u116E\u11AB",
      "\u1112\u1161\u11AB\u1107\u1165\u11AB",
      "\u1112\u1161\u11AB\u1107\u1169\u11A8",
      "\u1112\u1161\u11AB\u1109\u1175\u11A8",
      "\u1112\u1161\u11AB\u110B\u1167\u1105\u1173\u11B7",
      "\u1112\u1161\u11AB\u110D\u1169\u11A8",
      "\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
      "\u1112\u1161\u11AF\u110B\u1161\u1107\u1165\u110C\u1175",
      "\u1112\u1161\u11AF\u110B\u1175\u11AB",
      "\u1112\u1161\u11B7\u1101\u1166",
      "\u1112\u1161\u11B7\u1107\u116E\u1105\u1169",
      "\u1112\u1161\u11B8\u1100\u1167\u11A8",
      "\u1112\u1161\u11B8\u1105\u1175\u110C\u1165\u11A8",
      "\u1112\u1161\u11BC\u1100\u1169\u11BC",
      "\u1112\u1161\u11BC\u1100\u116E",
      "\u1112\u1161\u11BC\u1109\u1161\u11BC",
      "\u1112\u1161\u11BC\u110B\u1174",
      "\u1112\u1162\u1100\u1167\u11AF",
      "\u1112\u1162\u1100\u116E\u11AB",
      "\u1112\u1162\u1103\u1161\u11B8",
      "\u1112\u1162\u1103\u1161\u11BC",
      "\u1112\u1162\u1106\u116E\u11AF",
      "\u1112\u1162\u1109\u1165\u11A8",
      "\u1112\u1162\u1109\u1165\u11AF",
      "\u1112\u1162\u1109\u116E\u110B\u116D\u11A8\u110C\u1161\u11BC",
      "\u1112\u1162\u110B\u1161\u11AB",
      "\u1112\u1162\u11A8\u1109\u1175\u11B7",
      "\u1112\u1162\u11AB\u1103\u1173\u1107\u1162\u11A8",
      "\u1112\u1162\u11B7\u1107\u1165\u1100\u1165",
      "\u1112\u1162\u11BA\u1107\u1167\u11C0",
      "\u1112\u1162\u11BA\u1109\u1161\u11AF",
      "\u1112\u1162\u11BC\u1103\u1169\u11BC",
      "\u1112\u1162\u11BC\u1107\u1169\u11A8",
      "\u1112\u1162\u11BC\u1109\u1161",
      "\u1112\u1162\u11BC\u110B\u116E\u11AB",
      "\u1112\u1162\u11BC\u110B\u1171",
      "\u1112\u1163\u11BC\u1100\u1175",
      "\u1112\u1163\u11BC\u1109\u1161\u11BC",
      "\u1112\u1163\u11BC\u1109\u116E",
      "\u1112\u1165\u1105\u1161\u11A8",
      "\u1112\u1165\u110B\u116D\u11BC",
      "\u1112\u1166\u11AF\u1100\u1175",
      "\u1112\u1167\u11AB\u1100\u116A\u11AB",
      "\u1112\u1167\u11AB\u1100\u1173\u11B7",
      "\u1112\u1167\u11AB\u1103\u1162",
      "\u1112\u1167\u11AB\u1109\u1161\u11BC",
      "\u1112\u1167\u11AB\u1109\u1175\u11AF",
      "\u1112\u1167\u11AB\u110C\u1161\u11BC",
      "\u1112\u1167\u11AB\u110C\u1162",
      "\u1112\u1167\u11AB\u110C\u1175",
      "\u1112\u1167\u11AF\u110B\u1162\u11A8",
      "\u1112\u1167\u11B8\u1105\u1167\u11A8",
      "\u1112\u1167\u11BC\u1107\u116E",
      "\u1112\u1167\u11BC\u1109\u1161",
      "\u1112\u1167\u11BC\u1109\u116E",
      "\u1112\u1167\u11BC\u1109\u1175\u11A8",
      "\u1112\u1167\u11BC\u110C\u1166",
      "\u1112\u1167\u11BC\u1110\u1162",
      "\u1112\u1167\u11BC\u1111\u1167\u11AB",
      "\u1112\u1168\u1110\u1162\u11A8",
      "\u1112\u1169\u1100\u1175\u1109\u1175\u11B7",
      "\u1112\u1169\u1102\u1161\u11B7",
      "\u1112\u1169\u1105\u1161\u11BC\u110B\u1175",
      "\u1112\u1169\u1107\u1161\u11A8",
      "\u1112\u1169\u1110\u1166\u11AF",
      "\u1112\u1169\u1112\u1173\u11B8",
      "\u1112\u1169\u11A8\u1109\u1175",
      "\u1112\u1169\u11AF\u1105\u1169",
      "\u1112\u1169\u11B7\u1111\u1166\u110B\u1175\u110C\u1175",
      "\u1112\u1169\u11BC\u1107\u1169",
      "\u1112\u1169\u11BC\u1109\u116E",
      "\u1112\u1169\u11BC\u110E\u1161",
      "\u1112\u116A\u1106\u1167\u11AB",
      "\u1112\u116A\u1107\u116E\u11AB",
      "\u1112\u116A\u1109\u1161\u11AF",
      "\u1112\u116A\u110B\u116D\u110B\u1175\u11AF",
      "\u1112\u116A\u110C\u1161\u11BC",
      "\u1112\u116A\u1112\u1161\u11A8",
      "\u1112\u116A\u11A8\u1107\u1169",
      "\u1112\u116A\u11A8\u110B\u1175\u11AB",
      "\u1112\u116A\u11A8\u110C\u1161\u11BC",
      "\u1112\u116A\u11A8\u110C\u1165\u11BC",
      "\u1112\u116A\u11AB\u1100\u1161\u11B8",
      "\u1112\u116A\u11AB\u1100\u1167\u11BC",
      "\u1112\u116A\u11AB\u110B\u1167\u11BC",
      "\u1112\u116A\u11AB\u110B\u1172\u11AF",
      "\u1112\u116A\u11AB\u110C\u1161",
      "\u1112\u116A\u11AF\u1100\u1175",
      "\u1112\u116A\u11AF\u1103\u1169\u11BC",
      "\u1112\u116A\u11AF\u1107\u1161\u11AF\u1112\u1175",
      "\u1112\u116A\u11AF\u110B\u116D\u11BC",
      "\u1112\u116A\u11AF\u110D\u1161\u11A8",
      "\u1112\u116C\u1100\u1167\u11AB",
      "\u1112\u116C\u1100\u116A\u11AB",
      "\u1112\u116C\u1107\u1169\u11A8",
      "\u1112\u116C\u1109\u1162\u11A8",
      "\u1112\u116C\u110B\u116F\u11AB",
      "\u1112\u116C\u110C\u1161\u11BC",
      "\u1112\u116C\u110C\u1165\u11AB",
      "\u1112\u116C\u11BA\u1109\u116E",
      "\u1112\u116C\u11BC\u1103\u1161\u11AB\u1107\u1169\u1103\u1169",
      "\u1112\u116D\u110B\u1172\u11AF\u110C\u1165\u11A8",
      "\u1112\u116E\u1107\u1161\u11AB",
      "\u1112\u116E\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
      "\u1112\u116E\u11AB\u1105\u1167\u11AB",
      "\u1112\u116F\u11AF\u110A\u1175\u11AB",
      "\u1112\u1172\u1109\u1175\u11A8",
      "\u1112\u1172\u110B\u1175\u11AF",
      "\u1112\u1172\u11BC\u1102\u1162",
      "\u1112\u1173\u1105\u1173\u11B7",
      "\u1112\u1173\u11A8\u1107\u1162\u11A8",
      "\u1112\u1173\u11A8\u110B\u1175\u11AB",
      "\u1112\u1173\u11AB\u110C\u1165\u11A8",
      "\u1112\u1173\u11AB\u1112\u1175",
      "\u1112\u1173\u11BC\u1106\u1175",
      "\u1112\u1173\u11BC\u1107\u116E\u11AB",
      "\u1112\u1174\u1100\u1169\u11A8",
      "\u1112\u1174\u1106\u1161\u11BC",
      "\u1112\u1174\u1109\u1162\u11BC",
      "\u1112\u1174\u11AB\u1109\u1162\u11A8",
      "\u1112\u1175\u11B7\u1101\u1165\u11BA"
    ];
  }
});

// node_modules/bip39/src/wordlists/french.json
var require_french = __commonJS({
  "node_modules/bip39/src/wordlists/french.json"(exports2, module2) {
    module2.exports = [
      "abaisser",
      "abandon",
      "abdiquer",
      "abeille",
      "abolir",
      "aborder",
      "aboutir",
      "aboyer",
      "abrasif",
      "abreuver",
      "abriter",
      "abroger",
      "abrupt",
      "absence",
      "absolu",
      "absurde",
      "abusif",
      "abyssal",
      "acade\u0301mie",
      "acajou",
      "acarien",
      "accabler",
      "accepter",
      "acclamer",
      "accolade",
      "accroche",
      "accuser",
      "acerbe",
      "achat",
      "acheter",
      "aciduler",
      "acier",
      "acompte",
      "acque\u0301rir",
      "acronyme",
      "acteur",
      "actif",
      "actuel",
      "adepte",
      "ade\u0301quat",
      "adhe\u0301sif",
      "adjectif",
      "adjuger",
      "admettre",
      "admirer",
      "adopter",
      "adorer",
      "adoucir",
      "adresse",
      "adroit",
      "adulte",
      "adverbe",
      "ae\u0301rer",
      "ae\u0301ronef",
      "affaire",
      "affecter",
      "affiche",
      "affreux",
      "affubler",
      "agacer",
      "agencer",
      "agile",
      "agiter",
      "agrafer",
      "agre\u0301able",
      "agrume",
      "aider",
      "aiguille",
      "ailier",
      "aimable",
      "aisance",
      "ajouter",
      "ajuster",
      "alarmer",
      "alchimie",
      "alerte",
      "alge\u0300bre",
      "algue",
      "alie\u0301ner",
      "aliment",
      "alle\u0301ger",
      "alliage",
      "allouer",
      "allumer",
      "alourdir",
      "alpaga",
      "altesse",
      "alve\u0301ole",
      "amateur",
      "ambigu",
      "ambre",
      "ame\u0301nager",
      "amertume",
      "amidon",
      "amiral",
      "amorcer",
      "amour",
      "amovible",
      "amphibie",
      "ampleur",
      "amusant",
      "analyse",
      "anaphore",
      "anarchie",
      "anatomie",
      "ancien",
      "ane\u0301antir",
      "angle",
      "angoisse",
      "anguleux",
      "animal",
      "annexer",
      "annonce",
      "annuel",
      "anodin",
      "anomalie",
      "anonyme",
      "anormal",
      "antenne",
      "antidote",
      "anxieux",
      "apaiser",
      "ape\u0301ritif",
      "aplanir",
      "apologie",
      "appareil",
      "appeler",
      "apporter",
      "appuyer",
      "aquarium",
      "aqueduc",
      "arbitre",
      "arbuste",
      "ardeur",
      "ardoise",
      "argent",
      "arlequin",
      "armature",
      "armement",
      "armoire",
      "armure",
      "arpenter",
      "arracher",
      "arriver",
      "arroser",
      "arsenic",
      "arte\u0301riel",
      "article",
      "aspect",
      "asphalte",
      "aspirer",
      "assaut",
      "asservir",
      "assiette",
      "associer",
      "assurer",
      "asticot",
      "astre",
      "astuce",
      "atelier",
      "atome",
      "atrium",
      "atroce",
      "attaque",
      "attentif",
      "attirer",
      "attraper",
      "aubaine",
      "auberge",
      "audace",
      "audible",
      "augurer",
      "aurore",
      "automne",
      "autruche",
      "avaler",
      "avancer",
      "avarice",
      "avenir",
      "averse",
      "aveugle",
      "aviateur",
      "avide",
      "avion",
      "aviser",
      "avoine",
      "avouer",
      "avril",
      "axial",
      "axiome",
      "badge",
      "bafouer",
      "bagage",
      "baguette",
      "baignade",
      "balancer",
      "balcon",
      "baleine",
      "balisage",
      "bambin",
      "bancaire",
      "bandage",
      "banlieue",
      "bannie\u0300re",
      "banquier",
      "barbier",
      "baril",
      "baron",
      "barque",
      "barrage",
      "bassin",
      "bastion",
      "bataille",
      "bateau",
      "batterie",
      "baudrier",
      "bavarder",
      "belette",
      "be\u0301lier",
      "belote",
      "be\u0301ne\u0301fice",
      "berceau",
      "berger",
      "berline",
      "bermuda",
      "besace",
      "besogne",
      "be\u0301tail",
      "beurre",
      "biberon",
      "bicycle",
      "bidule",
      "bijou",
      "bilan",
      "bilingue",
      "billard",
      "binaire",
      "biologie",
      "biopsie",
      "biotype",
      "biscuit",
      "bison",
      "bistouri",
      "bitume",
      "bizarre",
      "blafard",
      "blague",
      "blanchir",
      "blessant",
      "blinder",
      "blond",
      "bloquer",
      "blouson",
      "bobard",
      "bobine",
      "boire",
      "boiser",
      "bolide",
      "bonbon",
      "bondir",
      "bonheur",
      "bonifier",
      "bonus",
      "bordure",
      "borne",
      "botte",
      "boucle",
      "boueux",
      "bougie",
      "boulon",
      "bouquin",
      "bourse",
      "boussole",
      "boutique",
      "boxeur",
      "branche",
      "brasier",
      "brave",
      "brebis",
      "bre\u0300che",
      "breuvage",
      "bricoler",
      "brigade",
      "brillant",
      "brioche",
      "brique",
      "brochure",
      "broder",
      "bronzer",
      "brousse",
      "broyeur",
      "brume",
      "brusque",
      "brutal",
      "bruyant",
      "buffle",
      "buisson",
      "bulletin",
      "bureau",
      "burin",
      "bustier",
      "butiner",
      "butoir",
      "buvable",
      "buvette",
      "cabanon",
      "cabine",
      "cachette",
      "cadeau",
      "cadre",
      "cafe\u0301ine",
      "caillou",
      "caisson",
      "calculer",
      "calepin",
      "calibre",
      "calmer",
      "calomnie",
      "calvaire",
      "camarade",
      "came\u0301ra",
      "camion",
      "campagne",
      "canal",
      "caneton",
      "canon",
      "cantine",
      "canular",
      "capable",
      "caporal",
      "caprice",
      "capsule",
      "capter",
      "capuche",
      "carabine",
      "carbone",
      "caresser",
      "caribou",
      "carnage",
      "carotte",
      "carreau",
      "carton",
      "cascade",
      "casier",
      "casque",
      "cassure",
      "causer",
      "caution",
      "cavalier",
      "caverne",
      "caviar",
      "ce\u0301dille",
      "ceinture",
      "ce\u0301leste",
      "cellule",
      "cendrier",
      "censurer",
      "central",
      "cercle",
      "ce\u0301re\u0301bral",
      "cerise",
      "cerner",
      "cerveau",
      "cesser",
      "chagrin",
      "chaise",
      "chaleur",
      "chambre",
      "chance",
      "chapitre",
      "charbon",
      "chasseur",
      "chaton",
      "chausson",
      "chavirer",
      "chemise",
      "chenille",
      "che\u0301quier",
      "chercher",
      "cheval",
      "chien",
      "chiffre",
      "chignon",
      "chime\u0300re",
      "chiot",
      "chlorure",
      "chocolat",
      "choisir",
      "chose",
      "chouette",
      "chrome",
      "chute",
      "cigare",
      "cigogne",
      "cimenter",
      "cine\u0301ma",
      "cintrer",
      "circuler",
      "cirer",
      "cirque",
      "citerne",
      "citoyen",
      "citron",
      "civil",
      "clairon",
      "clameur",
      "claquer",
      "classe",
      "clavier",
      "client",
      "cligner",
      "climat",
      "clivage",
      "cloche",
      "clonage",
      "cloporte",
      "cobalt",
      "cobra",
      "cocasse",
      "cocotier",
      "coder",
      "codifier",
      "coffre",
      "cogner",
      "cohe\u0301sion",
      "coiffer",
      "coincer",
      "cole\u0300re",
      "colibri",
      "colline",
      "colmater",
      "colonel",
      "combat",
      "come\u0301die",
      "commande",
      "compact",
      "concert",
      "conduire",
      "confier",
      "congeler",
      "connoter",
      "consonne",
      "contact",
      "convexe",
      "copain",
      "copie",
      "corail",
      "corbeau",
      "cordage",
      "corniche",
      "corpus",
      "correct",
      "corte\u0300ge",
      "cosmique",
      "costume",
      "coton",
      "coude",
      "coupure",
      "courage",
      "couteau",
      "couvrir",
      "coyote",
      "crabe",
      "crainte",
      "cravate",
      "crayon",
      "cre\u0301ature",
      "cre\u0301diter",
      "cre\u0301meux",
      "creuser",
      "crevette",
      "cribler",
      "crier",
      "cristal",
      "crite\u0300re",
      "croire",
      "croquer",
      "crotale",
      "crucial",
      "cruel",
      "crypter",
      "cubique",
      "cueillir",
      "cuille\u0300re",
      "cuisine",
      "cuivre",
      "culminer",
      "cultiver",
      "cumuler",
      "cupide",
      "curatif",
      "curseur",
      "cyanure",
      "cycle",
      "cylindre",
      "cynique",
      "daigner",
      "damier",
      "danger",
      "danseur",
      "dauphin",
      "de\u0301battre",
      "de\u0301biter",
      "de\u0301border",
      "de\u0301brider",
      "de\u0301butant",
      "de\u0301caler",
      "de\u0301cembre",
      "de\u0301chirer",
      "de\u0301cider",
      "de\u0301clarer",
      "de\u0301corer",
      "de\u0301crire",
      "de\u0301cupler",
      "de\u0301dale",
      "de\u0301ductif",
      "de\u0301esse",
      "de\u0301fensif",
      "de\u0301filer",
      "de\u0301frayer",
      "de\u0301gager",
      "de\u0301givrer",
      "de\u0301glutir",
      "de\u0301grafer",
      "de\u0301jeuner",
      "de\u0301lice",
      "de\u0301loger",
      "demander",
      "demeurer",
      "de\u0301molir",
      "de\u0301nicher",
      "de\u0301nouer",
      "dentelle",
      "de\u0301nuder",
      "de\u0301part",
      "de\u0301penser",
      "de\u0301phaser",
      "de\u0301placer",
      "de\u0301poser",
      "de\u0301ranger",
      "de\u0301rober",
      "de\u0301sastre",
      "descente",
      "de\u0301sert",
      "de\u0301signer",
      "de\u0301sobe\u0301ir",
      "dessiner",
      "destrier",
      "de\u0301tacher",
      "de\u0301tester",
      "de\u0301tourer",
      "de\u0301tresse",
      "devancer",
      "devenir",
      "deviner",
      "devoir",
      "diable",
      "dialogue",
      "diamant",
      "dicter",
      "diffe\u0301rer",
      "dige\u0301rer",
      "digital",
      "digne",
      "diluer",
      "dimanche",
      "diminuer",
      "dioxyde",
      "directif",
      "diriger",
      "discuter",
      "disposer",
      "dissiper",
      "distance",
      "divertir",
      "diviser",
      "docile",
      "docteur",
      "dogme",
      "doigt",
      "domaine",
      "domicile",
      "dompter",
      "donateur",
      "donjon",
      "donner",
      "dopamine",
      "dortoir",
      "dorure",
      "dosage",
      "doseur",
      "dossier",
      "dotation",
      "douanier",
      "double",
      "douceur",
      "douter",
      "doyen",
      "dragon",
      "draper",
      "dresser",
      "dribbler",
      "droiture",
      "duperie",
      "duplexe",
      "durable",
      "durcir",
      "dynastie",
      "e\u0301blouir",
      "e\u0301carter",
      "e\u0301charpe",
      "e\u0301chelle",
      "e\u0301clairer",
      "e\u0301clipse",
      "e\u0301clore",
      "e\u0301cluse",
      "e\u0301cole",
      "e\u0301conomie",
      "e\u0301corce",
      "e\u0301couter",
      "e\u0301craser",
      "e\u0301cre\u0301mer",
      "e\u0301crivain",
      "e\u0301crou",
      "e\u0301cume",
      "e\u0301cureuil",
      "e\u0301difier",
      "e\u0301duquer",
      "effacer",
      "effectif",
      "effigie",
      "effort",
      "effrayer",
      "effusion",
      "e\u0301galiser",
      "e\u0301garer",
      "e\u0301jecter",
      "e\u0301laborer",
      "e\u0301largir",
      "e\u0301lectron",
      "e\u0301le\u0301gant",
      "e\u0301le\u0301phant",
      "e\u0301le\u0300ve",
      "e\u0301ligible",
      "e\u0301litisme",
      "e\u0301loge",
      "e\u0301lucider",
      "e\u0301luder",
      "emballer",
      "embellir",
      "embryon",
      "e\u0301meraude",
      "e\u0301mission",
      "emmener",
      "e\u0301motion",
      "e\u0301mouvoir",
      "empereur",
      "employer",
      "emporter",
      "emprise",
      "e\u0301mulsion",
      "encadrer",
      "enche\u0300re",
      "enclave",
      "encoche",
      "endiguer",
      "endosser",
      "endroit",
      "enduire",
      "e\u0301nergie",
      "enfance",
      "enfermer",
      "enfouir",
      "engager",
      "engin",
      "englober",
      "e\u0301nigme",
      "enjamber",
      "enjeu",
      "enlever",
      "ennemi",
      "ennuyeux",
      "enrichir",
      "enrobage",
      "enseigne",
      "entasser",
      "entendre",
      "entier",
      "entourer",
      "entraver",
      "e\u0301nume\u0301rer",
      "envahir",
      "enviable",
      "envoyer",
      "enzyme",
      "e\u0301olien",
      "e\u0301paissir",
      "e\u0301pargne",
      "e\u0301patant",
      "e\u0301paule",
      "e\u0301picerie",
      "e\u0301pide\u0301mie",
      "e\u0301pier",
      "e\u0301pilogue",
      "e\u0301pine",
      "e\u0301pisode",
      "e\u0301pitaphe",
      "e\u0301poque",
      "e\u0301preuve",
      "e\u0301prouver",
      "e\u0301puisant",
      "e\u0301querre",
      "e\u0301quipe",
      "e\u0301riger",
      "e\u0301rosion",
      "erreur",
      "e\u0301ruption",
      "escalier",
      "espadon",
      "espe\u0300ce",
      "espie\u0300gle",
      "espoir",
      "esprit",
      "esquiver",
      "essayer",
      "essence",
      "essieu",
      "essorer",
      "estime",
      "estomac",
      "estrade",
      "e\u0301tage\u0300re",
      "e\u0301taler",
      "e\u0301tanche",
      "e\u0301tatique",
      "e\u0301teindre",
      "e\u0301tendoir",
      "e\u0301ternel",
      "e\u0301thanol",
      "e\u0301thique",
      "ethnie",
      "e\u0301tirer",
      "e\u0301toffer",
      "e\u0301toile",
      "e\u0301tonnant",
      "e\u0301tourdir",
      "e\u0301trange",
      "e\u0301troit",
      "e\u0301tude",
      "euphorie",
      "e\u0301valuer",
      "e\u0301vasion",
      "e\u0301ventail",
      "e\u0301vidence",
      "e\u0301viter",
      "e\u0301volutif",
      "e\u0301voquer",
      "exact",
      "exage\u0301rer",
      "exaucer",
      "exceller",
      "excitant",
      "exclusif",
      "excuse",
      "exe\u0301cuter",
      "exemple",
      "exercer",
      "exhaler",
      "exhorter",
      "exigence",
      "exiler",
      "exister",
      "exotique",
      "expe\u0301dier",
      "explorer",
      "exposer",
      "exprimer",
      "exquis",
      "extensif",
      "extraire",
      "exulter",
      "fable",
      "fabuleux",
      "facette",
      "facile",
      "facture",
      "faiblir",
      "falaise",
      "fameux",
      "famille",
      "farceur",
      "farfelu",
      "farine",
      "farouche",
      "fasciner",
      "fatal",
      "fatigue",
      "faucon",
      "fautif",
      "faveur",
      "favori",
      "fe\u0301brile",
      "fe\u0301conder",
      "fe\u0301de\u0301rer",
      "fe\u0301lin",
      "femme",
      "fe\u0301mur",
      "fendoir",
      "fe\u0301odal",
      "fermer",
      "fe\u0301roce",
      "ferveur",
      "festival",
      "feuille",
      "feutre",
      "fe\u0301vrier",
      "fiasco",
      "ficeler",
      "fictif",
      "fide\u0300le",
      "figure",
      "filature",
      "filetage",
      "filie\u0300re",
      "filleul",
      "filmer",
      "filou",
      "filtrer",
      "financer",
      "finir",
      "fiole",
      "firme",
      "fissure",
      "fixer",
      "flairer",
      "flamme",
      "flasque",
      "flatteur",
      "fle\u0301au",
      "fle\u0300che",
      "fleur",
      "flexion",
      "flocon",
      "flore",
      "fluctuer",
      "fluide",
      "fluvial",
      "folie",
      "fonderie",
      "fongible",
      "fontaine",
      "forcer",
      "forgeron",
      "formuler",
      "fortune",
      "fossile",
      "foudre",
      "fouge\u0300re",
      "fouiller",
      "foulure",
      "fourmi",
      "fragile",
      "fraise",
      "franchir",
      "frapper",
      "frayeur",
      "fre\u0301gate",
      "freiner",
      "frelon",
      "fre\u0301mir",
      "fre\u0301ne\u0301sie",
      "fre\u0300re",
      "friable",
      "friction",
      "frisson",
      "frivole",
      "froid",
      "fromage",
      "frontal",
      "frotter",
      "fruit",
      "fugitif",
      "fuite",
      "fureur",
      "furieux",
      "furtif",
      "fusion",
      "futur",
      "gagner",
      "galaxie",
      "galerie",
      "gambader",
      "garantir",
      "gardien",
      "garnir",
      "garrigue",
      "gazelle",
      "gazon",
      "ge\u0301ant",
      "ge\u0301latine",
      "ge\u0301lule",
      "gendarme",
      "ge\u0301ne\u0301ral",
      "ge\u0301nie",
      "genou",
      "gentil",
      "ge\u0301ologie",
      "ge\u0301ome\u0300tre",
      "ge\u0301ranium",
      "germe",
      "gestuel",
      "geyser",
      "gibier",
      "gicler",
      "girafe",
      "givre",
      "glace",
      "glaive",
      "glisser",
      "globe",
      "gloire",
      "glorieux",
      "golfeur",
      "gomme",
      "gonfler",
      "gorge",
      "gorille",
      "goudron",
      "gouffre",
      "goulot",
      "goupille",
      "gourmand",
      "goutte",
      "graduel",
      "graffiti",
      "graine",
      "grand",
      "grappin",
      "gratuit",
      "gravir",
      "grenat",
      "griffure",
      "griller",
      "grimper",
      "grogner",
      "gronder",
      "grotte",
      "groupe",
      "gruger",
      "grutier",
      "gruye\u0300re",
      "gue\u0301pard",
      "guerrier",
      "guide",
      "guimauve",
      "guitare",
      "gustatif",
      "gymnaste",
      "gyrostat",
      "habitude",
      "hachoir",
      "halte",
      "hameau",
      "hangar",
      "hanneton",
      "haricot",
      "harmonie",
      "harpon",
      "hasard",
      "he\u0301lium",
      "he\u0301matome",
      "herbe",
      "he\u0301risson",
      "hermine",
      "he\u0301ron",
      "he\u0301siter",
      "heureux",
      "hiberner",
      "hibou",
      "hilarant",
      "histoire",
      "hiver",
      "homard",
      "hommage",
      "homoge\u0300ne",
      "honneur",
      "honorer",
      "honteux",
      "horde",
      "horizon",
      "horloge",
      "hormone",
      "horrible",
      "houleux",
      "housse",
      "hublot",
      "huileux",
      "humain",
      "humble",
      "humide",
      "humour",
      "hurler",
      "hydromel",
      "hygie\u0300ne",
      "hymne",
      "hypnose",
      "idylle",
      "ignorer",
      "iguane",
      "illicite",
      "illusion",
      "image",
      "imbiber",
      "imiter",
      "immense",
      "immobile",
      "immuable",
      "impact",
      "impe\u0301rial",
      "implorer",
      "imposer",
      "imprimer",
      "imputer",
      "incarner",
      "incendie",
      "incident",
      "incliner",
      "incolore",
      "indexer",
      "indice",
      "inductif",
      "ine\u0301dit",
      "ineptie",
      "inexact",
      "infini",
      "infliger",
      "informer",
      "infusion",
      "inge\u0301rer",
      "inhaler",
      "inhiber",
      "injecter",
      "injure",
      "innocent",
      "inoculer",
      "inonder",
      "inscrire",
      "insecte",
      "insigne",
      "insolite",
      "inspirer",
      "instinct",
      "insulter",
      "intact",
      "intense",
      "intime",
      "intrigue",
      "intuitif",
      "inutile",
      "invasion",
      "inventer",
      "inviter",
      "invoquer",
      "ironique",
      "irradier",
      "irre\u0301el",
      "irriter",
      "isoler",
      "ivoire",
      "ivresse",
      "jaguar",
      "jaillir",
      "jambe",
      "janvier",
      "jardin",
      "jauger",
      "jaune",
      "javelot",
      "jetable",
      "jeton",
      "jeudi",
      "jeunesse",
      "joindre",
      "joncher",
      "jongler",
      "joueur",
      "jouissif",
      "journal",
      "jovial",
      "joyau",
      "joyeux",
      "jubiler",
      "jugement",
      "junior",
      "jupon",
      "juriste",
      "justice",
      "juteux",
      "juve\u0301nile",
      "kayak",
      "kimono",
      "kiosque",
      "label",
      "labial",
      "labourer",
      "lace\u0301rer",
      "lactose",
      "lagune",
      "laine",
      "laisser",
      "laitier",
      "lambeau",
      "lamelle",
      "lampe",
      "lanceur",
      "langage",
      "lanterne",
      "lapin",
      "largeur",
      "larme",
      "laurier",
      "lavabo",
      "lavoir",
      "lecture",
      "le\u0301gal",
      "le\u0301ger",
      "le\u0301gume",
      "lessive",
      "lettre",
      "levier",
      "lexique",
      "le\u0301zard",
      "liasse",
      "libe\u0301rer",
      "libre",
      "licence",
      "licorne",
      "lie\u0300ge",
      "lie\u0300vre",
      "ligature",
      "ligoter",
      "ligue",
      "limer",
      "limite",
      "limonade",
      "limpide",
      "line\u0301aire",
      "lingot",
      "lionceau",
      "liquide",
      "lisie\u0300re",
      "lister",
      "lithium",
      "litige",
      "littoral",
      "livreur",
      "logique",
      "lointain",
      "loisir",
      "lombric",
      "loterie",
      "louer",
      "lourd",
      "loutre",
      "louve",
      "loyal",
      "lubie",
      "lucide",
      "lucratif",
      "lueur",
      "lugubre",
      "luisant",
      "lumie\u0300re",
      "lunaire",
      "lundi",
      "luron",
      "lutter",
      "luxueux",
      "machine",
      "magasin",
      "magenta",
      "magique",
      "maigre",
      "maillon",
      "maintien",
      "mairie",
      "maison",
      "majorer",
      "malaxer",
      "male\u0301fice",
      "malheur",
      "malice",
      "mallette",
      "mammouth",
      "mandater",
      "maniable",
      "manquant",
      "manteau",
      "manuel",
      "marathon",
      "marbre",
      "marchand",
      "mardi",
      "maritime",
      "marqueur",
      "marron",
      "marteler",
      "mascotte",
      "massif",
      "mate\u0301riel",
      "matie\u0300re",
      "matraque",
      "maudire",
      "maussade",
      "mauve",
      "maximal",
      "me\u0301chant",
      "me\u0301connu",
      "me\u0301daille",
      "me\u0301decin",
      "me\u0301diter",
      "me\u0301duse",
      "meilleur",
      "me\u0301lange",
      "me\u0301lodie",
      "membre",
      "me\u0301moire",
      "menacer",
      "mener",
      "menhir",
      "mensonge",
      "mentor",
      "mercredi",
      "me\u0301rite",
      "merle",
      "messager",
      "mesure",
      "me\u0301tal",
      "me\u0301te\u0301ore",
      "me\u0301thode",
      "me\u0301tier",
      "meuble",
      "miauler",
      "microbe",
      "miette",
      "mignon",
      "migrer",
      "milieu",
      "million",
      "mimique",
      "mince",
      "mine\u0301ral",
      "minimal",
      "minorer",
      "minute",
      "miracle",
      "miroiter",
      "missile",
      "mixte",
      "mobile",
      "moderne",
      "moelleux",
      "mondial",
      "moniteur",
      "monnaie",
      "monotone",
      "monstre",
      "montagne",
      "monument",
      "moqueur",
      "morceau",
      "morsure",
      "mortier",
      "moteur",
      "motif",
      "mouche",
      "moufle",
      "moulin",
      "mousson",
      "mouton",
      "mouvant",
      "multiple",
      "munition",
      "muraille",
      "mure\u0300ne",
      "murmure",
      "muscle",
      "muse\u0301um",
      "musicien",
      "mutation",
      "muter",
      "mutuel",
      "myriade",
      "myrtille",
      "myste\u0300re",
      "mythique",
      "nageur",
      "nappe",
      "narquois",
      "narrer",
      "natation",
      "nation",
      "nature",
      "naufrage",
      "nautique",
      "navire",
      "ne\u0301buleux",
      "nectar",
      "ne\u0301faste",
      "ne\u0301gation",
      "ne\u0301gliger",
      "ne\u0301gocier",
      "neige",
      "nerveux",
      "nettoyer",
      "neurone",
      "neutron",
      "neveu",
      "niche",
      "nickel",
      "nitrate",
      "niveau",
      "noble",
      "nocif",
      "nocturne",
      "noirceur",
      "noisette",
      "nomade",
      "nombreux",
      "nommer",
      "normatif",
      "notable",
      "notifier",
      "notoire",
      "nourrir",
      "nouveau",
      "novateur",
      "novembre",
      "novice",
      "nuage",
      "nuancer",
      "nuire",
      "nuisible",
      "nume\u0301ro",
      "nuptial",
      "nuque",
      "nutritif",
      "obe\u0301ir",
      "objectif",
      "obliger",
      "obscur",
      "observer",
      "obstacle",
      "obtenir",
      "obturer",
      "occasion",
      "occuper",
      "oce\u0301an",
      "octobre",
      "octroyer",
      "octupler",
      "oculaire",
      "odeur",
      "odorant",
      "offenser",
      "officier",
      "offrir",
      "ogive",
      "oiseau",
      "oisillon",
      "olfactif",
      "olivier",
      "ombrage",
      "omettre",
      "onctueux",
      "onduler",
      "one\u0301reux",
      "onirique",
      "opale",
      "opaque",
      "ope\u0301rer",
      "opinion",
      "opportun",
      "opprimer",
      "opter",
      "optique",
      "orageux",
      "orange",
      "orbite",
      "ordonner",
      "oreille",
      "organe",
      "orgueil",
      "orifice",
      "ornement",
      "orque",
      "ortie",
      "osciller",
      "osmose",
      "ossature",
      "otarie",
      "ouragan",
      "ourson",
      "outil",
      "outrager",
      "ouvrage",
      "ovation",
      "oxyde",
      "oxyge\u0300ne",
      "ozone",
      "paisible",
      "palace",
      "palmare\u0300s",
      "palourde",
      "palper",
      "panache",
      "panda",
      "pangolin",
      "paniquer",
      "panneau",
      "panorama",
      "pantalon",
      "papaye",
      "papier",
      "papoter",
      "papyrus",
      "paradoxe",
      "parcelle",
      "paresse",
      "parfumer",
      "parler",
      "parole",
      "parrain",
      "parsemer",
      "partager",
      "parure",
      "parvenir",
      "passion",
      "paste\u0300que",
      "paternel",
      "patience",
      "patron",
      "pavillon",
      "pavoiser",
      "payer",
      "paysage",
      "peigne",
      "peintre",
      "pelage",
      "pe\u0301lican",
      "pelle",
      "pelouse",
      "peluche",
      "pendule",
      "pe\u0301ne\u0301trer",
      "pe\u0301nible",
      "pensif",
      "pe\u0301nurie",
      "pe\u0301pite",
      "pe\u0301plum",
      "perdrix",
      "perforer",
      "pe\u0301riode",
      "permuter",
      "perplexe",
      "persil",
      "perte",
      "peser",
      "pe\u0301tale",
      "petit",
      "pe\u0301trir",
      "peuple",
      "pharaon",
      "phobie",
      "phoque",
      "photon",
      "phrase",
      "physique",
      "piano",
      "pictural",
      "pie\u0300ce",
      "pierre",
      "pieuvre",
      "pilote",
      "pinceau",
      "pipette",
      "piquer",
      "pirogue",
      "piscine",
      "piston",
      "pivoter",
      "pixel",
      "pizza",
      "placard",
      "plafond",
      "plaisir",
      "planer",
      "plaque",
      "plastron",
      "plateau",
      "pleurer",
      "plexus",
      "pliage",
      "plomb",
      "plonger",
      "pluie",
      "plumage",
      "pochette",
      "poe\u0301sie",
      "poe\u0300te",
      "pointe",
      "poirier",
      "poisson",
      "poivre",
      "polaire",
      "policier",
      "pollen",
      "polygone",
      "pommade",
      "pompier",
      "ponctuel",
      "ponde\u0301rer",
      "poney",
      "portique",
      "position",
      "posse\u0301der",
      "posture",
      "potager",
      "poteau",
      "potion",
      "pouce",
      "poulain",
      "poumon",
      "pourpre",
      "poussin",
      "pouvoir",
      "prairie",
      "pratique",
      "pre\u0301cieux",
      "pre\u0301dire",
      "pre\u0301fixe",
      "pre\u0301lude",
      "pre\u0301nom",
      "pre\u0301sence",
      "pre\u0301texte",
      "pre\u0301voir",
      "primitif",
      "prince",
      "prison",
      "priver",
      "proble\u0300me",
      "proce\u0301der",
      "prodige",
      "profond",
      "progre\u0300s",
      "proie",
      "projeter",
      "prologue",
      "promener",
      "propre",
      "prospe\u0300re",
      "prote\u0301ger",
      "prouesse",
      "proverbe",
      "prudence",
      "pruneau",
      "psychose",
      "public",
      "puceron",
      "puiser",
      "pulpe",
      "pulsar",
      "punaise",
      "punitif",
      "pupitre",
      "purifier",
      "puzzle",
      "pyramide",
      "quasar",
      "querelle",
      "question",
      "quie\u0301tude",
      "quitter",
      "quotient",
      "racine",
      "raconter",
      "radieux",
      "ragondin",
      "raideur",
      "raisin",
      "ralentir",
      "rallonge",
      "ramasser",
      "rapide",
      "rasage",
      "ratisser",
      "ravager",
      "ravin",
      "rayonner",
      "re\u0301actif",
      "re\u0301agir",
      "re\u0301aliser",
      "re\u0301animer",
      "recevoir",
      "re\u0301citer",
      "re\u0301clamer",
      "re\u0301colter",
      "recruter",
      "reculer",
      "recycler",
      "re\u0301diger",
      "redouter",
      "refaire",
      "re\u0301flexe",
      "re\u0301former",
      "refrain",
      "refuge",
      "re\u0301galien",
      "re\u0301gion",
      "re\u0301glage",
      "re\u0301gulier",
      "re\u0301ite\u0301rer",
      "rejeter",
      "rejouer",
      "relatif",
      "relever",
      "relief",
      "remarque",
      "reme\u0300de",
      "remise",
      "remonter",
      "remplir",
      "remuer",
      "renard",
      "renfort",
      "renifler",
      "renoncer",
      "rentrer",
      "renvoi",
      "replier",
      "reporter",
      "reprise",
      "reptile",
      "requin",
      "re\u0301serve",
      "re\u0301sineux",
      "re\u0301soudre",
      "respect",
      "rester",
      "re\u0301sultat",
      "re\u0301tablir",
      "retenir",
      "re\u0301ticule",
      "retomber",
      "retracer",
      "re\u0301union",
      "re\u0301ussir",
      "revanche",
      "revivre",
      "re\u0301volte",
      "re\u0301vulsif",
      "richesse",
      "rideau",
      "rieur",
      "rigide",
      "rigoler",
      "rincer",
      "riposter",
      "risible",
      "risque",
      "rituel",
      "rival",
      "rivie\u0300re",
      "rocheux",
      "romance",
      "rompre",
      "ronce",
      "rondin",
      "roseau",
      "rosier",
      "rotatif",
      "rotor",
      "rotule",
      "rouge",
      "rouille",
      "rouleau",
      "routine",
      "royaume",
      "ruban",
      "rubis",
      "ruche",
      "ruelle",
      "rugueux",
      "ruiner",
      "ruisseau",
      "ruser",
      "rustique",
      "rythme",
      "sabler",
      "saboter",
      "sabre",
      "sacoche",
      "safari",
      "sagesse",
      "saisir",
      "salade",
      "salive",
      "salon",
      "saluer",
      "samedi",
      "sanction",
      "sanglier",
      "sarcasme",
      "sardine",
      "saturer",
      "saugrenu",
      "saumon",
      "sauter",
      "sauvage",
      "savant",
      "savonner",
      "scalpel",
      "scandale",
      "sce\u0301le\u0301rat",
      "sce\u0301nario",
      "sceptre",
      "sche\u0301ma",
      "science",
      "scinder",
      "score",
      "scrutin",
      "sculpter",
      "se\u0301ance",
      "se\u0301cable",
      "se\u0301cher",
      "secouer",
      "se\u0301cre\u0301ter",
      "se\u0301datif",
      "se\u0301duire",
      "seigneur",
      "se\u0301jour",
      "se\u0301lectif",
      "semaine",
      "sembler",
      "semence",
      "se\u0301minal",
      "se\u0301nateur",
      "sensible",
      "sentence",
      "se\u0301parer",
      "se\u0301quence",
      "serein",
      "sergent",
      "se\u0301rieux",
      "serrure",
      "se\u0301rum",
      "service",
      "se\u0301same",
      "se\u0301vir",
      "sevrage",
      "sextuple",
      "side\u0301ral",
      "sie\u0300cle",
      "sie\u0301ger",
      "siffler",
      "sigle",
      "signal",
      "silence",
      "silicium",
      "simple",
      "since\u0300re",
      "sinistre",
      "siphon",
      "sirop",
      "sismique",
      "situer",
      "skier",
      "social",
      "socle",
      "sodium",
      "soigneux",
      "soldat",
      "soleil",
      "solitude",
      "soluble",
      "sombre",
      "sommeil",
      "somnoler",
      "sonde",
      "songeur",
      "sonnette",
      "sonore",
      "sorcier",
      "sortir",
      "sosie",
      "sottise",
      "soucieux",
      "soudure",
      "souffle",
      "soulever",
      "soupape",
      "source",
      "soutirer",
      "souvenir",
      "spacieux",
      "spatial",
      "spe\u0301cial",
      "sphe\u0300re",
      "spiral",
      "stable",
      "station",
      "sternum",
      "stimulus",
      "stipuler",
      "strict",
      "studieux",
      "stupeur",
      "styliste",
      "sublime",
      "substrat",
      "subtil",
      "subvenir",
      "succe\u0300s",
      "sucre",
      "suffixe",
      "sugge\u0301rer",
      "suiveur",
      "sulfate",
      "superbe",
      "supplier",
      "surface",
      "suricate",
      "surmener",
      "surprise",
      "sursaut",
      "survie",
      "suspect",
      "syllabe",
      "symbole",
      "syme\u0301trie",
      "synapse",
      "syntaxe",
      "syste\u0300me",
      "tabac",
      "tablier",
      "tactile",
      "tailler",
      "talent",
      "talisman",
      "talonner",
      "tambour",
      "tamiser",
      "tangible",
      "tapis",
      "taquiner",
      "tarder",
      "tarif",
      "tartine",
      "tasse",
      "tatami",
      "tatouage",
      "taupe",
      "taureau",
      "taxer",
      "te\u0301moin",
      "temporel",
      "tenaille",
      "tendre",
      "teneur",
      "tenir",
      "tension",
      "terminer",
      "terne",
      "terrible",
      "te\u0301tine",
      "texte",
      "the\u0300me",
      "the\u0301orie",
      "the\u0301rapie",
      "thorax",
      "tibia",
      "tie\u0300de",
      "timide",
      "tirelire",
      "tiroir",
      "tissu",
      "titane",
      "titre",
      "tituber",
      "toboggan",
      "tole\u0301rant",
      "tomate",
      "tonique",
      "tonneau",
      "toponyme",
      "torche",
      "tordre",
      "tornade",
      "torpille",
      "torrent",
      "torse",
      "tortue",
      "totem",
      "toucher",
      "tournage",
      "tousser",
      "toxine",
      "traction",
      "trafic",
      "tragique",
      "trahir",
      "train",
      "trancher",
      "travail",
      "tre\u0300fle",
      "tremper",
      "tre\u0301sor",
      "treuil",
      "triage",
      "tribunal",
      "tricoter",
      "trilogie",
      "triomphe",
      "tripler",
      "triturer",
      "trivial",
      "trombone",
      "tronc",
      "tropical",
      "troupeau",
      "tuile",
      "tulipe",
      "tumulte",
      "tunnel",
      "turbine",
      "tuteur",
      "tutoyer",
      "tuyau",
      "tympan",
      "typhon",
      "typique",
      "tyran",
      "ubuesque",
      "ultime",
      "ultrason",
      "unanime",
      "unifier",
      "union",
      "unique",
      "unitaire",
      "univers",
      "uranium",
      "urbain",
      "urticant",
      "usage",
      "usine",
      "usuel",
      "usure",
      "utile",
      "utopie",
      "vacarme",
      "vaccin",
      "vagabond",
      "vague",
      "vaillant",
      "vaincre",
      "vaisseau",
      "valable",
      "valise",
      "vallon",
      "valve",
      "vampire",
      "vanille",
      "vapeur",
      "varier",
      "vaseux",
      "vassal",
      "vaste",
      "vecteur",
      "vedette",
      "ve\u0301ge\u0301tal",
      "ve\u0301hicule",
      "veinard",
      "ve\u0301loce",
      "vendredi",
      "ve\u0301ne\u0301rer",
      "venger",
      "venimeux",
      "ventouse",
      "verdure",
      "ve\u0301rin",
      "vernir",
      "verrou",
      "verser",
      "vertu",
      "veston",
      "ve\u0301te\u0301ran",
      "ve\u0301tuste",
      "vexant",
      "vexer",
      "viaduc",
      "viande",
      "victoire",
      "vidange",
      "vide\u0301o",
      "vignette",
      "vigueur",
      "vilain",
      "village",
      "vinaigre",
      "violon",
      "vipe\u0300re",
      "virement",
      "virtuose",
      "virus",
      "visage",
      "viseur",
      "vision",
      "visqueux",
      "visuel",
      "vital",
      "vitesse",
      "viticole",
      "vitrine",
      "vivace",
      "vivipare",
      "vocation",
      "voguer",
      "voile",
      "voisin",
      "voiture",
      "volaille",
      "volcan",
      "voltiger",
      "volume",
      "vorace",
      "vortex",
      "voter",
      "vouloir",
      "voyage",
      "voyelle",
      "wagon",
      "xe\u0301non",
      "yacht",
      "ze\u0300bre",
      "ze\u0301nith",
      "zeste",
      "zoologie"
    ];
  }
});

// node_modules/bip39/src/wordlists/italian.json
var require_italian = __commonJS({
  "node_modules/bip39/src/wordlists/italian.json"(exports2, module2) {
    module2.exports = [
      "abaco",
      "abbaglio",
      "abbinato",
      "abete",
      "abisso",
      "abolire",
      "abrasivo",
      "abrogato",
      "accadere",
      "accenno",
      "accusato",
      "acetone",
      "achille",
      "acido",
      "acqua",
      "acre",
      "acrilico",
      "acrobata",
      "acuto",
      "adagio",
      "addebito",
      "addome",
      "adeguato",
      "aderire",
      "adipe",
      "adottare",
      "adulare",
      "affabile",
      "affetto",
      "affisso",
      "affranto",
      "aforisma",
      "afoso",
      "africano",
      "agave",
      "agente",
      "agevole",
      "aggancio",
      "agire",
      "agitare",
      "agonismo",
      "agricolo",
      "agrumeto",
      "aguzzo",
      "alabarda",
      "alato",
      "albatro",
      "alberato",
      "albo",
      "albume",
      "alce",
      "alcolico",
      "alettone",
      "alfa",
      "algebra",
      "aliante",
      "alibi",
      "alimento",
      "allagato",
      "allegro",
      "allievo",
      "allodola",
      "allusivo",
      "almeno",
      "alogeno",
      "alpaca",
      "alpestre",
      "altalena",
      "alterno",
      "alticcio",
      "altrove",
      "alunno",
      "alveolo",
      "alzare",
      "amalgama",
      "amanita",
      "amarena",
      "ambito",
      "ambrato",
      "ameba",
      "america",
      "ametista",
      "amico",
      "ammasso",
      "ammenda",
      "ammirare",
      "ammonito",
      "amore",
      "ampio",
      "ampliare",
      "amuleto",
      "anacardo",
      "anagrafe",
      "analista",
      "anarchia",
      "anatra",
      "anca",
      "ancella",
      "ancora",
      "andare",
      "andrea",
      "anello",
      "angelo",
      "angolare",
      "angusto",
      "anima",
      "annegare",
      "annidato",
      "anno",
      "annuncio",
      "anonimo",
      "anticipo",
      "anzi",
      "apatico",
      "apertura",
      "apode",
      "apparire",
      "appetito",
      "appoggio",
      "approdo",
      "appunto",
      "aprile",
      "arabica",
      "arachide",
      "aragosta",
      "araldica",
      "arancio",
      "aratura",
      "arazzo",
      "arbitro",
      "archivio",
      "ardito",
      "arenile",
      "argento",
      "argine",
      "arguto",
      "aria",
      "armonia",
      "arnese",
      "arredato",
      "arringa",
      "arrosto",
      "arsenico",
      "arso",
      "artefice",
      "arzillo",
      "asciutto",
      "ascolto",
      "asepsi",
      "asettico",
      "asfalto",
      "asino",
      "asola",
      "aspirato",
      "aspro",
      "assaggio",
      "asse",
      "assoluto",
      "assurdo",
      "asta",
      "astenuto",
      "astice",
      "astratto",
      "atavico",
      "ateismo",
      "atomico",
      "atono",
      "attesa",
      "attivare",
      "attorno",
      "attrito",
      "attuale",
      "ausilio",
      "austria",
      "autista",
      "autonomo",
      "autunno",
      "avanzato",
      "avere",
      "avvenire",
      "avviso",
      "avvolgere",
      "azione",
      "azoto",
      "azzimo",
      "azzurro",
      "babele",
      "baccano",
      "bacino",
      "baco",
      "badessa",
      "badilata",
      "bagnato",
      "baita",
      "balcone",
      "baldo",
      "balena",
      "ballata",
      "balzano",
      "bambino",
      "bandire",
      "baraonda",
      "barbaro",
      "barca",
      "baritono",
      "barlume",
      "barocco",
      "basilico",
      "basso",
      "batosta",
      "battuto",
      "baule",
      "bava",
      "bavosa",
      "becco",
      "beffa",
      "belgio",
      "belva",
      "benda",
      "benevole",
      "benigno",
      "benzina",
      "bere",
      "berlina",
      "beta",
      "bibita",
      "bici",
      "bidone",
      "bifido",
      "biga",
      "bilancia",
      "bimbo",
      "binocolo",
      "biologo",
      "bipede",
      "bipolare",
      "birbante",
      "birra",
      "biscotto",
      "bisesto",
      "bisnonno",
      "bisonte",
      "bisturi",
      "bizzarro",
      "blando",
      "blatta",
      "bollito",
      "bonifico",
      "bordo",
      "bosco",
      "botanico",
      "bottino",
      "bozzolo",
      "braccio",
      "bradipo",
      "brama",
      "branca",
      "bravura",
      "bretella",
      "brevetto",
      "brezza",
      "briglia",
      "brillante",
      "brindare",
      "broccolo",
      "brodo",
      "bronzina",
      "brullo",
      "bruno",
      "bubbone",
      "buca",
      "budino",
      "buffone",
      "buio",
      "bulbo",
      "buono",
      "burlone",
      "burrasca",
      "bussola",
      "busta",
      "cadetto",
      "caduco",
      "calamaro",
      "calcolo",
      "calesse",
      "calibro",
      "calmo",
      "caloria",
      "cambusa",
      "camerata",
      "camicia",
      "cammino",
      "camola",
      "campale",
      "canapa",
      "candela",
      "cane",
      "canino",
      "canotto",
      "cantina",
      "capace",
      "capello",
      "capitolo",
      "capogiro",
      "cappero",
      "capra",
      "capsula",
      "carapace",
      "carcassa",
      "cardo",
      "carisma",
      "carovana",
      "carretto",
      "cartolina",
      "casaccio",
      "cascata",
      "caserma",
      "caso",
      "cassone",
      "castello",
      "casuale",
      "catasta",
      "catena",
      "catrame",
      "cauto",
      "cavillo",
      "cedibile",
      "cedrata",
      "cefalo",
      "celebre",
      "cellulare",
      "cena",
      "cenone",
      "centesimo",
      "ceramica",
      "cercare",
      "certo",
      "cerume",
      "cervello",
      "cesoia",
      "cespo",
      "ceto",
      "chela",
      "chiaro",
      "chicca",
      "chiedere",
      "chimera",
      "china",
      "chirurgo",
      "chitarra",
      "ciao",
      "ciclismo",
      "cifrare",
      "cigno",
      "cilindro",
      "ciottolo",
      "circa",
      "cirrosi",
      "citrico",
      "cittadino",
      "ciuffo",
      "civetta",
      "civile",
      "classico",
      "clinica",
      "cloro",
      "cocco",
      "codardo",
      "codice",
      "coerente",
      "cognome",
      "collare",
      "colmato",
      "colore",
      "colposo",
      "coltivato",
      "colza",
      "coma",
      "cometa",
      "commando",
      "comodo",
      "computer",
      "comune",
      "conciso",
      "condurre",
      "conferma",
      "congelare",
      "coniuge",
      "connesso",
      "conoscere",
      "consumo",
      "continuo",
      "convegno",
      "coperto",
      "copione",
      "coppia",
      "copricapo",
      "corazza",
      "cordata",
      "coricato",
      "cornice",
      "corolla",
      "corpo",
      "corredo",
      "corsia",
      "cortese",
      "cosmico",
      "costante",
      "cottura",
      "covato",
      "cratere",
      "cravatta",
      "creato",
      "credere",
      "cremoso",
      "crescita",
      "creta",
      "criceto",
      "crinale",
      "crisi",
      "critico",
      "croce",
      "cronaca",
      "crostata",
      "cruciale",
      "crusca",
      "cucire",
      "cuculo",
      "cugino",
      "cullato",
      "cupola",
      "curatore",
      "cursore",
      "curvo",
      "cuscino",
      "custode",
      "dado",
      "daino",
      "dalmata",
      "damerino",
      "daniela",
      "dannoso",
      "danzare",
      "datato",
      "davanti",
      "davvero",
      "debutto",
      "decennio",
      "deciso",
      "declino",
      "decollo",
      "decreto",
      "dedicato",
      "definito",
      "deforme",
      "degno",
      "delegare",
      "delfino",
      "delirio",
      "delta",
      "demenza",
      "denotato",
      "dentro",
      "deposito",
      "derapata",
      "derivare",
      "deroga",
      "descritto",
      "deserto",
      "desiderio",
      "desumere",
      "detersivo",
      "devoto",
      "diametro",
      "dicembre",
      "diedro",
      "difeso",
      "diffuso",
      "digerire",
      "digitale",
      "diluvio",
      "dinamico",
      "dinnanzi",
      "dipinto",
      "diploma",
      "dipolo",
      "diradare",
      "dire",
      "dirotto",
      "dirupo",
      "disagio",
      "discreto",
      "disfare",
      "disgelo",
      "disposto",
      "distanza",
      "disumano",
      "dito",
      "divano",
      "divelto",
      "dividere",
      "divorato",
      "doblone",
      "docente",
      "doganale",
      "dogma",
      "dolce",
      "domato",
      "domenica",
      "dominare",
      "dondolo",
      "dono",
      "dormire",
      "dote",
      "dottore",
      "dovuto",
      "dozzina",
      "drago",
      "druido",
      "dubbio",
      "dubitare",
      "ducale",
      "duna",
      "duomo",
      "duplice",
      "duraturo",
      "ebano",
      "eccesso",
      "ecco",
      "eclissi",
      "economia",
      "edera",
      "edicola",
      "edile",
      "editoria",
      "educare",
      "egemonia",
      "egli",
      "egoismo",
      "egregio",
      "elaborato",
      "elargire",
      "elegante",
      "elencato",
      "eletto",
      "elevare",
      "elfico",
      "elica",
      "elmo",
      "elsa",
      "eluso",
      "emanato",
      "emblema",
      "emesso",
      "emiro",
      "emotivo",
      "emozione",
      "empirico",
      "emulo",
      "endemico",
      "enduro",
      "energia",
      "enfasi",
      "enoteca",
      "entrare",
      "enzima",
      "epatite",
      "epilogo",
      "episodio",
      "epocale",
      "eppure",
      "equatore",
      "erario",
      "erba",
      "erboso",
      "erede",
      "eremita",
      "erigere",
      "ermetico",
      "eroe",
      "erosivo",
      "errante",
      "esagono",
      "esame",
      "esanime",
      "esaudire",
      "esca",
      "esempio",
      "esercito",
      "esibito",
      "esigente",
      "esistere",
      "esito",
      "esofago",
      "esortato",
      "esoso",
      "espanso",
      "espresso",
      "essenza",
      "esso",
      "esteso",
      "estimare",
      "estonia",
      "estroso",
      "esultare",
      "etilico",
      "etnico",
      "etrusco",
      "etto",
      "euclideo",
      "europa",
      "evaso",
      "evidenza",
      "evitato",
      "evoluto",
      "evviva",
      "fabbrica",
      "faccenda",
      "fachiro",
      "falco",
      "famiglia",
      "fanale",
      "fanfara",
      "fango",
      "fantasma",
      "fare",
      "farfalla",
      "farinoso",
      "farmaco",
      "fascia",
      "fastoso",
      "fasullo",
      "faticare",
      "fato",
      "favoloso",
      "febbre",
      "fecola",
      "fede",
      "fegato",
      "felpa",
      "feltro",
      "femmina",
      "fendere",
      "fenomeno",
      "fermento",
      "ferro",
      "fertile",
      "fessura",
      "festivo",
      "fetta",
      "feudo",
      "fiaba",
      "fiducia",
      "fifa",
      "figurato",
      "filo",
      "finanza",
      "finestra",
      "finire",
      "fiore",
      "fiscale",
      "fisico",
      "fiume",
      "flacone",
      "flamenco",
      "flebo",
      "flemma",
      "florido",
      "fluente",
      "fluoro",
      "fobico",
      "focaccia",
      "focoso",
      "foderato",
      "foglio",
      "folata",
      "folclore",
      "folgore",
      "fondente",
      "fonetico",
      "fonia",
      "fontana",
      "forbito",
      "forchetta",
      "foresta",
      "formica",
      "fornaio",
      "foro",
      "fortezza",
      "forzare",
      "fosfato",
      "fosso",
      "fracasso",
      "frana",
      "frassino",
      "fratello",
      "freccetta",
      "frenata",
      "fresco",
      "frigo",
      "frollino",
      "fronde",
      "frugale",
      "frutta",
      "fucilata",
      "fucsia",
      "fuggente",
      "fulmine",
      "fulvo",
      "fumante",
      "fumetto",
      "fumoso",
      "fune",
      "funzione",
      "fuoco",
      "furbo",
      "furgone",
      "furore",
      "fuso",
      "futile",
      "gabbiano",
      "gaffe",
      "galateo",
      "gallina",
      "galoppo",
      "gambero",
      "gamma",
      "garanzia",
      "garbo",
      "garofano",
      "garzone",
      "gasdotto",
      "gasolio",
      "gastrico",
      "gatto",
      "gaudio",
      "gazebo",
      "gazzella",
      "geco",
      "gelatina",
      "gelso",
      "gemello",
      "gemmato",
      "gene",
      "genitore",
      "gennaio",
      "genotipo",
      "gergo",
      "ghepardo",
      "ghiaccio",
      "ghisa",
      "giallo",
      "gilda",
      "ginepro",
      "giocare",
      "gioiello",
      "giorno",
      "giove",
      "girato",
      "girone",
      "gittata",
      "giudizio",
      "giurato",
      "giusto",
      "globulo",
      "glutine",
      "gnomo",
      "gobba",
      "golf",
      "gomito",
      "gommone",
      "gonfio",
      "gonna",
      "governo",
      "gracile",
      "grado",
      "grafico",
      "grammo",
      "grande",
      "grattare",
      "gravoso",
      "grazia",
      "greca",
      "gregge",
      "grifone",
      "grigio",
      "grinza",
      "grotta",
      "gruppo",
      "guadagno",
      "guaio",
      "guanto",
      "guardare",
      "gufo",
      "guidare",
      "ibernato",
      "icona",
      "identico",
      "idillio",
      "idolo",
      "idra",
      "idrico",
      "idrogeno",
      "igiene",
      "ignaro",
      "ignorato",
      "ilare",
      "illeso",
      "illogico",
      "illudere",
      "imballo",
      "imbevuto",
      "imbocco",
      "imbuto",
      "immane",
      "immerso",
      "immolato",
      "impacco",
      "impeto",
      "impiego",
      "importo",
      "impronta",
      "inalare",
      "inarcare",
      "inattivo",
      "incanto",
      "incendio",
      "inchino",
      "incisivo",
      "incluso",
      "incontro",
      "incrocio",
      "incubo",
      "indagine",
      "india",
      "indole",
      "inedito",
      "infatti",
      "infilare",
      "inflitto",
      "ingaggio",
      "ingegno",
      "inglese",
      "ingordo",
      "ingrosso",
      "innesco",
      "inodore",
      "inoltrare",
      "inondato",
      "insano",
      "insetto",
      "insieme",
      "insonnia",
      "insulina",
      "intasato",
      "intero",
      "intonaco",
      "intuito",
      "inumidire",
      "invalido",
      "invece",
      "invito",
      "iperbole",
      "ipnotico",
      "ipotesi",
      "ippica",
      "iride",
      "irlanda",
      "ironico",
      "irrigato",
      "irrorare",
      "isolato",
      "isotopo",
      "isterico",
      "istituto",
      "istrice",
      "italia",
      "iterare",
      "labbro",
      "labirinto",
      "lacca",
      "lacerato",
      "lacrima",
      "lacuna",
      "laddove",
      "lago",
      "lampo",
      "lancetta",
      "lanterna",
      "lardoso",
      "larga",
      "laringe",
      "lastra",
      "latenza",
      "latino",
      "lattuga",
      "lavagna",
      "lavoro",
      "legale",
      "leggero",
      "lembo",
      "lentezza",
      "lenza",
      "leone",
      "lepre",
      "lesivo",
      "lessato",
      "lesto",
      "letterale",
      "leva",
      "levigato",
      "libero",
      "lido",
      "lievito",
      "lilla",
      "limatura",
      "limitare",
      "limpido",
      "lineare",
      "lingua",
      "liquido",
      "lira",
      "lirica",
      "lisca",
      "lite",
      "litigio",
      "livrea",
      "locanda",
      "lode",
      "logica",
      "lombare",
      "londra",
      "longevo",
      "loquace",
      "lorenzo",
      "loto",
      "lotteria",
      "luce",
      "lucidato",
      "lumaca",
      "luminoso",
      "lungo",
      "lupo",
      "luppolo",
      "lusinga",
      "lusso",
      "lutto",
      "macabro",
      "macchina",
      "macero",
      "macinato",
      "madama",
      "magico",
      "maglia",
      "magnete",
      "magro",
      "maiolica",
      "malafede",
      "malgrado",
      "malinteso",
      "malsano",
      "malto",
      "malumore",
      "mana",
      "mancia",
      "mandorla",
      "mangiare",
      "manifesto",
      "mannaro",
      "manovra",
      "mansarda",
      "mantide",
      "manubrio",
      "mappa",
      "maratona",
      "marcire",
      "maretta",
      "marmo",
      "marsupio",
      "maschera",
      "massaia",
      "mastino",
      "materasso",
      "matricola",
      "mattone",
      "maturo",
      "mazurca",
      "meandro",
      "meccanico",
      "mecenate",
      "medesimo",
      "meditare",
      "mega",
      "melassa",
      "melis",
      "melodia",
      "meninge",
      "meno",
      "mensola",
      "mercurio",
      "merenda",
      "merlo",
      "meschino",
      "mese",
      "messere",
      "mestolo",
      "metallo",
      "metodo",
      "mettere",
      "miagolare",
      "mica",
      "micelio",
      "michele",
      "microbo",
      "midollo",
      "miele",
      "migliore",
      "milano",
      "milite",
      "mimosa",
      "minerale",
      "mini",
      "minore",
      "mirino",
      "mirtillo",
      "miscela",
      "missiva",
      "misto",
      "misurare",
      "mitezza",
      "mitigare",
      "mitra",
      "mittente",
      "mnemonico",
      "modello",
      "modifica",
      "modulo",
      "mogano",
      "mogio",
      "mole",
      "molosso",
      "monastero",
      "monco",
      "mondina",
      "monetario",
      "monile",
      "monotono",
      "monsone",
      "montato",
      "monviso",
      "mora",
      "mordere",
      "morsicato",
      "mostro",
      "motivato",
      "motosega",
      "motto",
      "movenza",
      "movimento",
      "mozzo",
      "mucca",
      "mucosa",
      "muffa",
      "mughetto",
      "mugnaio",
      "mulatto",
      "mulinello",
      "multiplo",
      "mummia",
      "munto",
      "muovere",
      "murale",
      "musa",
      "muscolo",
      "musica",
      "mutevole",
      "muto",
      "nababbo",
      "nafta",
      "nanometro",
      "narciso",
      "narice",
      "narrato",
      "nascere",
      "nastrare",
      "naturale",
      "nautica",
      "naviglio",
      "nebulosa",
      "necrosi",
      "negativo",
      "negozio",
      "nemmeno",
      "neofita",
      "neretto",
      "nervo",
      "nessuno",
      "nettuno",
      "neutrale",
      "neve",
      "nevrotico",
      "nicchia",
      "ninfa",
      "nitido",
      "nobile",
      "nocivo",
      "nodo",
      "nome",
      "nomina",
      "nordico",
      "normale",
      "norvegese",
      "nostrano",
      "notare",
      "notizia",
      "notturno",
      "novella",
      "nucleo",
      "nulla",
      "numero",
      "nuovo",
      "nutrire",
      "nuvola",
      "nuziale",
      "oasi",
      "obbedire",
      "obbligo",
      "obelisco",
      "oblio",
      "obolo",
      "obsoleto",
      "occasione",
      "occhio",
      "occidente",
      "occorrere",
      "occultare",
      "ocra",
      "oculato",
      "odierno",
      "odorare",
      "offerta",
      "offrire",
      "offuscato",
      "oggetto",
      "oggi",
      "ognuno",
      "olandese",
      "olfatto",
      "oliato",
      "oliva",
      "ologramma",
      "oltre",
      "omaggio",
      "ombelico",
      "ombra",
      "omega",
      "omissione",
      "ondoso",
      "onere",
      "onice",
      "onnivoro",
      "onorevole",
      "onta",
      "operato",
      "opinione",
      "opposto",
      "oracolo",
      "orafo",
      "ordine",
      "orecchino",
      "orefice",
      "orfano",
      "organico",
      "origine",
      "orizzonte",
      "orma",
      "ormeggio",
      "ornativo",
      "orologio",
      "orrendo",
      "orribile",
      "ortensia",
      "ortica",
      "orzata",
      "orzo",
      "osare",
      "oscurare",
      "osmosi",
      "ospedale",
      "ospite",
      "ossa",
      "ossidare",
      "ostacolo",
      "oste",
      "otite",
      "otre",
      "ottagono",
      "ottimo",
      "ottobre",
      "ovale",
      "ovest",
      "ovino",
      "oviparo",
      "ovocito",
      "ovunque",
      "ovviare",
      "ozio",
      "pacchetto",
      "pace",
      "pacifico",
      "padella",
      "padrone",
      "paese",
      "paga",
      "pagina",
      "palazzina",
      "palesare",
      "pallido",
      "palo",
      "palude",
      "pandoro",
      "pannello",
      "paolo",
      "paonazzo",
      "paprica",
      "parabola",
      "parcella",
      "parere",
      "pargolo",
      "pari",
      "parlato",
      "parola",
      "partire",
      "parvenza",
      "parziale",
      "passivo",
      "pasticca",
      "patacca",
      "patologia",
      "pattume",
      "pavone",
      "peccato",
      "pedalare",
      "pedonale",
      "peggio",
      "peloso",
      "penare",
      "pendice",
      "penisola",
      "pennuto",
      "penombra",
      "pensare",
      "pentola",
      "pepe",
      "pepita",
      "perbene",
      "percorso",
      "perdonato",
      "perforare",
      "pergamena",
      "periodo",
      "permesso",
      "perno",
      "perplesso",
      "persuaso",
      "pertugio",
      "pervaso",
      "pesatore",
      "pesista",
      "peso",
      "pestifero",
      "petalo",
      "pettine",
      "petulante",
      "pezzo",
      "piacere",
      "pianta",
      "piattino",
      "piccino",
      "picozza",
      "piega",
      "pietra",
      "piffero",
      "pigiama",
      "pigolio",
      "pigro",
      "pila",
      "pilifero",
      "pillola",
      "pilota",
      "pimpante",
      "pineta",
      "pinna",
      "pinolo",
      "pioggia",
      "piombo",
      "piramide",
      "piretico",
      "pirite",
      "pirolisi",
      "pitone",
      "pizzico",
      "placebo",
      "planare",
      "plasma",
      "platano",
      "plenario",
      "pochezza",
      "poderoso",
      "podismo",
      "poesia",
      "poggiare",
      "polenta",
      "poligono",
      "pollice",
      "polmonite",
      "polpetta",
      "polso",
      "poltrona",
      "polvere",
      "pomice",
      "pomodoro",
      "ponte",
      "popoloso",
      "porfido",
      "poroso",
      "porpora",
      "porre",
      "portata",
      "posa",
      "positivo",
      "possesso",
      "postulato",
      "potassio",
      "potere",
      "pranzo",
      "prassi",
      "pratica",
      "precluso",
      "predica",
      "prefisso",
      "pregiato",
      "prelievo",
      "premere",
      "prenotare",
      "preparato",
      "presenza",
      "pretesto",
      "prevalso",
      "prima",
      "principe",
      "privato",
      "problema",
      "procura",
      "produrre",
      "profumo",
      "progetto",
      "prolunga",
      "promessa",
      "pronome",
      "proposta",
      "proroga",
      "proteso",
      "prova",
      "prudente",
      "prugna",
      "prurito",
      "psiche",
      "pubblico",
      "pudica",
      "pugilato",
      "pugno",
      "pulce",
      "pulito",
      "pulsante",
      "puntare",
      "pupazzo",
      "pupilla",
      "puro",
      "quadro",
      "qualcosa",
      "quasi",
      "querela",
      "quota",
      "raccolto",
      "raddoppio",
      "radicale",
      "radunato",
      "raffica",
      "ragazzo",
      "ragione",
      "ragno",
      "ramarro",
      "ramingo",
      "ramo",
      "randagio",
      "rantolare",
      "rapato",
      "rapina",
      "rappreso",
      "rasatura",
      "raschiato",
      "rasente",
      "rassegna",
      "rastrello",
      "rata",
      "ravveduto",
      "reale",
      "recepire",
      "recinto",
      "recluta",
      "recondito",
      "recupero",
      "reddito",
      "redimere",
      "regalato",
      "registro",
      "regola",
      "regresso",
      "relazione",
      "remare",
      "remoto",
      "renna",
      "replica",
      "reprimere",
      "reputare",
      "resa",
      "residente",
      "responso",
      "restauro",
      "rete",
      "retina",
      "retorica",
      "rettifica",
      "revocato",
      "riassunto",
      "ribadire",
      "ribelle",
      "ribrezzo",
      "ricarica",
      "ricco",
      "ricevere",
      "riciclato",
      "ricordo",
      "ricreduto",
      "ridicolo",
      "ridurre",
      "rifasare",
      "riflesso",
      "riforma",
      "rifugio",
      "rigare",
      "rigettato",
      "righello",
      "rilassato",
      "rilevato",
      "rimanere",
      "rimbalzo",
      "rimedio",
      "rimorchio",
      "rinascita",
      "rincaro",
      "rinforzo",
      "rinnovo",
      "rinomato",
      "rinsavito",
      "rintocco",
      "rinuncia",
      "rinvenire",
      "riparato",
      "ripetuto",
      "ripieno",
      "riportare",
      "ripresa",
      "ripulire",
      "risata",
      "rischio",
      "riserva",
      "risibile",
      "riso",
      "rispetto",
      "ristoro",
      "risultato",
      "risvolto",
      "ritardo",
      "ritegno",
      "ritmico",
      "ritrovo",
      "riunione",
      "riva",
      "riverso",
      "rivincita",
      "rivolto",
      "rizoma",
      "roba",
      "robotico",
      "robusto",
      "roccia",
      "roco",
      "rodaggio",
      "rodere",
      "roditore",
      "rogito",
      "rollio",
      "romantico",
      "rompere",
      "ronzio",
      "rosolare",
      "rospo",
      "rotante",
      "rotondo",
      "rotula",
      "rovescio",
      "rubizzo",
      "rubrica",
      "ruga",
      "rullino",
      "rumine",
      "rumoroso",
      "ruolo",
      "rupe",
      "russare",
      "rustico",
      "sabato",
      "sabbiare",
      "sabotato",
      "sagoma",
      "salasso",
      "saldatura",
      "salgemma",
      "salivare",
      "salmone",
      "salone",
      "saltare",
      "saluto",
      "salvo",
      "sapere",
      "sapido",
      "saporito",
      "saraceno",
      "sarcasmo",
      "sarto",
      "sassoso",
      "satellite",
      "satira",
      "satollo",
      "saturno",
      "savana",
      "savio",
      "saziato",
      "sbadiglio",
      "sbalzo",
      "sbancato",
      "sbarra",
      "sbattere",
      "sbavare",
      "sbendare",
      "sbirciare",
      "sbloccato",
      "sbocciato",
      "sbrinare",
      "sbruffone",
      "sbuffare",
      "scabroso",
      "scadenza",
      "scala",
      "scambiare",
      "scandalo",
      "scapola",
      "scarso",
      "scatenare",
      "scavato",
      "scelto",
      "scenico",
      "scettro",
      "scheda",
      "schiena",
      "sciarpa",
      "scienza",
      "scindere",
      "scippo",
      "sciroppo",
      "scivolo",
      "sclerare",
      "scodella",
      "scolpito",
      "scomparto",
      "sconforto",
      "scoprire",
      "scorta",
      "scossone",
      "scozzese",
      "scriba",
      "scrollare",
      "scrutinio",
      "scuderia",
      "scultore",
      "scuola",
      "scuro",
      "scusare",
      "sdebitare",
      "sdoganare",
      "seccatura",
      "secondo",
      "sedano",
      "seggiola",
      "segnalato",
      "segregato",
      "seguito",
      "selciato",
      "selettivo",
      "sella",
      "selvaggio",
      "semaforo",
      "sembrare",
      "seme",
      "seminato",
      "sempre",
      "senso",
      "sentire",
      "sepolto",
      "sequenza",
      "serata",
      "serbato",
      "sereno",
      "serio",
      "serpente",
      "serraglio",
      "servire",
      "sestina",
      "setola",
      "settimana",
      "sfacelo",
      "sfaldare",
      "sfamato",
      "sfarzoso",
      "sfaticato",
      "sfera",
      "sfida",
      "sfilato",
      "sfinge",
      "sfocato",
      "sfoderare",
      "sfogo",
      "sfoltire",
      "sforzato",
      "sfratto",
      "sfruttato",
      "sfuggito",
      "sfumare",
      "sfuso",
      "sgabello",
      "sgarbato",
      "sgonfiare",
      "sgorbio",
      "sgrassato",
      "sguardo",
      "sibilo",
      "siccome",
      "sierra",
      "sigla",
      "signore",
      "silenzio",
      "sillaba",
      "simbolo",
      "simpatico",
      "simulato",
      "sinfonia",
      "singolo",
      "sinistro",
      "sino",
      "sintesi",
      "sinusoide",
      "sipario",
      "sisma",
      "sistole",
      "situato",
      "slitta",
      "slogatura",
      "sloveno",
      "smarrito",
      "smemorato",
      "smentito",
      "smeraldo",
      "smilzo",
      "smontare",
      "smottato",
      "smussato",
      "snellire",
      "snervato",
      "snodo",
      "sobbalzo",
      "sobrio",
      "soccorso",
      "sociale",
      "sodale",
      "soffitto",
      "sogno",
      "soldato",
      "solenne",
      "solido",
      "sollazzo",
      "solo",
      "solubile",
      "solvente",
      "somatico",
      "somma",
      "sonda",
      "sonetto",
      "sonnifero",
      "sopire",
      "soppeso",
      "sopra",
      "sorgere",
      "sorpasso",
      "sorriso",
      "sorso",
      "sorteggio",
      "sorvolato",
      "sospiro",
      "sosta",
      "sottile",
      "spada",
      "spalla",
      "spargere",
      "spatola",
      "spavento",
      "spazzola",
      "specie",
      "spedire",
      "spegnere",
      "spelatura",
      "speranza",
      "spessore",
      "spettrale",
      "spezzato",
      "spia",
      "spigoloso",
      "spillato",
      "spinoso",
      "spirale",
      "splendido",
      "sportivo",
      "sposo",
      "spranga",
      "sprecare",
      "spronato",
      "spruzzo",
      "spuntino",
      "squillo",
      "sradicare",
      "srotolato",
      "stabile",
      "stacco",
      "staffa",
      "stagnare",
      "stampato",
      "stantio",
      "starnuto",
      "stasera",
      "statuto",
      "stelo",
      "steppa",
      "sterzo",
      "stiletto",
      "stima",
      "stirpe",
      "stivale",
      "stizzoso",
      "stonato",
      "storico",
      "strappo",
      "stregato",
      "stridulo",
      "strozzare",
      "strutto",
      "stuccare",
      "stufo",
      "stupendo",
      "subentro",
      "succoso",
      "sudore",
      "suggerito",
      "sugo",
      "sultano",
      "suonare",
      "superbo",
      "supporto",
      "surgelato",
      "surrogato",
      "sussurro",
      "sutura",
      "svagare",
      "svedese",
      "sveglio",
      "svelare",
      "svenuto",
      "svezia",
      "sviluppo",
      "svista",
      "svizzera",
      "svolta",
      "svuotare",
      "tabacco",
      "tabulato",
      "tacciare",
      "taciturno",
      "tale",
      "talismano",
      "tampone",
      "tannino",
      "tara",
      "tardivo",
      "targato",
      "tariffa",
      "tarpare",
      "tartaruga",
      "tasto",
      "tattico",
      "taverna",
      "tavolata",
      "tazza",
      "teca",
      "tecnico",
      "telefono",
      "temerario",
      "tempo",
      "temuto",
      "tendone",
      "tenero",
      "tensione",
      "tentacolo",
      "teorema",
      "terme",
      "terrazzo",
      "terzetto",
      "tesi",
      "tesserato",
      "testato",
      "tetro",
      "tettoia",
      "tifare",
      "tigella",
      "timbro",
      "tinto",
      "tipico",
      "tipografo",
      "tiraggio",
      "tiro",
      "titanio",
      "titolo",
      "titubante",
      "tizio",
      "tizzone",
      "toccare",
      "tollerare",
      "tolto",
      "tombola",
      "tomo",
      "tonfo",
      "tonsilla",
      "topazio",
      "topologia",
      "toppa",
      "torba",
      "tornare",
      "torrone",
      "tortora",
      "toscano",
      "tossire",
      "tostatura",
      "totano",
      "trabocco",
      "trachea",
      "trafila",
      "tragedia",
      "tralcio",
      "tramonto",
      "transito",
      "trapano",
      "trarre",
      "trasloco",
      "trattato",
      "trave",
      "treccia",
      "tremolio",
      "trespolo",
      "tributo",
      "tricheco",
      "trifoglio",
      "trillo",
      "trincea",
      "trio",
      "tristezza",
      "triturato",
      "trivella",
      "tromba",
      "trono",
      "troppo",
      "trottola",
      "trovare",
      "truccato",
      "tubatura",
      "tuffato",
      "tulipano",
      "tumulto",
      "tunisia",
      "turbare",
      "turchino",
      "tuta",
      "tutela",
      "ubicato",
      "uccello",
      "uccisore",
      "udire",
      "uditivo",
      "uffa",
      "ufficio",
      "uguale",
      "ulisse",
      "ultimato",
      "umano",
      "umile",
      "umorismo",
      "uncinetto",
      "ungere",
      "ungherese",
      "unicorno",
      "unificato",
      "unisono",
      "unitario",
      "unte",
      "uovo",
      "upupa",
      "uragano",
      "urgenza",
      "urlo",
      "usanza",
      "usato",
      "uscito",
      "usignolo",
      "usuraio",
      "utensile",
      "utilizzo",
      "utopia",
      "vacante",
      "vaccinato",
      "vagabondo",
      "vagliato",
      "valanga",
      "valgo",
      "valico",
      "valletta",
      "valoroso",
      "valutare",
      "valvola",
      "vampata",
      "vangare",
      "vanitoso",
      "vano",
      "vantaggio",
      "vanvera",
      "vapore",
      "varano",
      "varcato",
      "variante",
      "vasca",
      "vedetta",
      "vedova",
      "veduto",
      "vegetale",
      "veicolo",
      "velcro",
      "velina",
      "velluto",
      "veloce",
      "venato",
      "vendemmia",
      "vento",
      "verace",
      "verbale",
      "vergogna",
      "verifica",
      "vero",
      "verruca",
      "verticale",
      "vescica",
      "vessillo",
      "vestale",
      "veterano",
      "vetrina",
      "vetusto",
      "viandante",
      "vibrante",
      "vicenda",
      "vichingo",
      "vicinanza",
      "vidimare",
      "vigilia",
      "vigneto",
      "vigore",
      "vile",
      "villano",
      "vimini",
      "vincitore",
      "viola",
      "vipera",
      "virgola",
      "virologo",
      "virulento",
      "viscoso",
      "visione",
      "vispo",
      "vissuto",
      "visura",
      "vita",
      "vitello",
      "vittima",
      "vivanda",
      "vivido",
      "viziare",
      "voce",
      "voga",
      "volatile",
      "volere",
      "volpe",
      "voragine",
      "vulcano",
      "zampogna",
      "zanna",
      "zappato",
      "zattera",
      "zavorra",
      "zefiro",
      "zelante",
      "zelo",
      "zenzero",
      "zerbino",
      "zibetto",
      "zinco",
      "zircone",
      "zitto",
      "zolla",
      "zotico",
      "zucchero",
      "zufolo",
      "zulu",
      "zuppa"
    ];
  }
});

// node_modules/bip39/src/wordlists/spanish.json
var require_spanish = __commonJS({
  "node_modules/bip39/src/wordlists/spanish.json"(exports2, module2) {
    module2.exports = [
      "a\u0301baco",
      "abdomen",
      "abeja",
      "abierto",
      "abogado",
      "abono",
      "aborto",
      "abrazo",
      "abrir",
      "abuelo",
      "abuso",
      "acabar",
      "academia",
      "acceso",
      "accio\u0301n",
      "aceite",
      "acelga",
      "acento",
      "aceptar",
      "a\u0301cido",
      "aclarar",
      "acne\u0301",
      "acoger",
      "acoso",
      "activo",
      "acto",
      "actriz",
      "actuar",
      "acudir",
      "acuerdo",
      "acusar",
      "adicto",
      "admitir",
      "adoptar",
      "adorno",
      "aduana",
      "adulto",
      "ae\u0301reo",
      "afectar",
      "aficio\u0301n",
      "afinar",
      "afirmar",
      "a\u0301gil",
      "agitar",
      "agoni\u0301a",
      "agosto",
      "agotar",
      "agregar",
      "agrio",
      "agua",
      "agudo",
      "a\u0301guila",
      "aguja",
      "ahogo",
      "ahorro",
      "aire",
      "aislar",
      "ajedrez",
      "ajeno",
      "ajuste",
      "alacra\u0301n",
      "alambre",
      "alarma",
      "alba",
      "a\u0301lbum",
      "alcalde",
      "aldea",
      "alegre",
      "alejar",
      "alerta",
      "aleta",
      "alfiler",
      "alga",
      "algodo\u0301n",
      "aliado",
      "aliento",
      "alivio",
      "alma",
      "almeja",
      "almi\u0301bar",
      "altar",
      "alteza",
      "altivo",
      "alto",
      "altura",
      "alumno",
      "alzar",
      "amable",
      "amante",
      "amapola",
      "amargo",
      "amasar",
      "a\u0301mbar",
      "a\u0301mbito",
      "ameno",
      "amigo",
      "amistad",
      "amor",
      "amparo",
      "amplio",
      "ancho",
      "anciano",
      "ancla",
      "andar",
      "ande\u0301n",
      "anemia",
      "a\u0301ngulo",
      "anillo",
      "a\u0301nimo",
      "ani\u0301s",
      "anotar",
      "antena",
      "antiguo",
      "antojo",
      "anual",
      "anular",
      "anuncio",
      "an\u0303adir",
      "an\u0303ejo",
      "an\u0303o",
      "apagar",
      "aparato",
      "apetito",
      "apio",
      "aplicar",
      "apodo",
      "aporte",
      "apoyo",
      "aprender",
      "aprobar",
      "apuesta",
      "apuro",
      "arado",
      "aran\u0303a",
      "arar",
      "a\u0301rbitro",
      "a\u0301rbol",
      "arbusto",
      "archivo",
      "arco",
      "arder",
      "ardilla",
      "arduo",
      "a\u0301rea",
      "a\u0301rido",
      "aries",
      "armoni\u0301a",
      "arne\u0301s",
      "aroma",
      "arpa",
      "arpo\u0301n",
      "arreglo",
      "arroz",
      "arruga",
      "arte",
      "artista",
      "asa",
      "asado",
      "asalto",
      "ascenso",
      "asegurar",
      "aseo",
      "asesor",
      "asiento",
      "asilo",
      "asistir",
      "asno",
      "asombro",
      "a\u0301spero",
      "astilla",
      "astro",
      "astuto",
      "asumir",
      "asunto",
      "atajo",
      "ataque",
      "atar",
      "atento",
      "ateo",
      "a\u0301tico",
      "atleta",
      "a\u0301tomo",
      "atraer",
      "atroz",
      "atu\u0301n",
      "audaz",
      "audio",
      "auge",
      "aula",
      "aumento",
      "ausente",
      "autor",
      "aval",
      "avance",
      "avaro",
      "ave",
      "avellana",
      "avena",
      "avestruz",
      "avio\u0301n",
      "aviso",
      "ayer",
      "ayuda",
      "ayuno",
      "azafra\u0301n",
      "azar",
      "azote",
      "azu\u0301car",
      "azufre",
      "azul",
      "baba",
      "babor",
      "bache",
      "bahi\u0301a",
      "baile",
      "bajar",
      "balanza",
      "balco\u0301n",
      "balde",
      "bambu\u0301",
      "banco",
      "banda",
      "ban\u0303o",
      "barba",
      "barco",
      "barniz",
      "barro",
      "ba\u0301scula",
      "basto\u0301n",
      "basura",
      "batalla",
      "bateri\u0301a",
      "batir",
      "batuta",
      "bau\u0301l",
      "bazar",
      "bebe\u0301",
      "bebida",
      "bello",
      "besar",
      "beso",
      "bestia",
      "bicho",
      "bien",
      "bingo",
      "blanco",
      "bloque",
      "blusa",
      "boa",
      "bobina",
      "bobo",
      "boca",
      "bocina",
      "boda",
      "bodega",
      "boina",
      "bola",
      "bolero",
      "bolsa",
      "bomba",
      "bondad",
      "bonito",
      "bono",
      "bonsa\u0301i",
      "borde",
      "borrar",
      "bosque",
      "bote",
      "boti\u0301n",
      "bo\u0301veda",
      "bozal",
      "bravo",
      "brazo",
      "brecha",
      "breve",
      "brillo",
      "brinco",
      "brisa",
      "broca",
      "broma",
      "bronce",
      "brote",
      "bruja",
      "brusco",
      "bruto",
      "buceo",
      "bucle",
      "bueno",
      "buey",
      "bufanda",
      "bufo\u0301n",
      "bu\u0301ho",
      "buitre",
      "bulto",
      "burbuja",
      "burla",
      "burro",
      "buscar",
      "butaca",
      "buzo\u0301n",
      "caballo",
      "cabeza",
      "cabina",
      "cabra",
      "cacao",
      "cada\u0301ver",
      "cadena",
      "caer",
      "cafe\u0301",
      "cai\u0301da",
      "caima\u0301n",
      "caja",
      "cajo\u0301n",
      "cal",
      "calamar",
      "calcio",
      "caldo",
      "calidad",
      "calle",
      "calma",
      "calor",
      "calvo",
      "cama",
      "cambio",
      "camello",
      "camino",
      "campo",
      "ca\u0301ncer",
      "candil",
      "canela",
      "canguro",
      "canica",
      "canto",
      "can\u0303a",
      "can\u0303o\u0301n",
      "caoba",
      "caos",
      "capaz",
      "capita\u0301n",
      "capote",
      "captar",
      "capucha",
      "cara",
      "carbo\u0301n",
      "ca\u0301rcel",
      "careta",
      "carga",
      "carin\u0303o",
      "carne",
      "carpeta",
      "carro",
      "carta",
      "casa",
      "casco",
      "casero",
      "caspa",
      "castor",
      "catorce",
      "catre",
      "caudal",
      "causa",
      "cazo",
      "cebolla",
      "ceder",
      "cedro",
      "celda",
      "ce\u0301lebre",
      "celoso",
      "ce\u0301lula",
      "cemento",
      "ceniza",
      "centro",
      "cerca",
      "cerdo",
      "cereza",
      "cero",
      "cerrar",
      "certeza",
      "ce\u0301sped",
      "cetro",
      "chacal",
      "chaleco",
      "champu\u0301",
      "chancla",
      "chapa",
      "charla",
      "chico",
      "chiste",
      "chivo",
      "choque",
      "choza",
      "chuleta",
      "chupar",
      "ciclo\u0301n",
      "ciego",
      "cielo",
      "cien",
      "cierto",
      "cifra",
      "cigarro",
      "cima",
      "cinco",
      "cine",
      "cinta",
      "cipre\u0301s",
      "circo",
      "ciruela",
      "cisne",
      "cita",
      "ciudad",
      "clamor",
      "clan",
      "claro",
      "clase",
      "clave",
      "cliente",
      "clima",
      "cli\u0301nica",
      "cobre",
      "coccio\u0301n",
      "cochino",
      "cocina",
      "coco",
      "co\u0301digo",
      "codo",
      "cofre",
      "coger",
      "cohete",
      "coji\u0301n",
      "cojo",
      "cola",
      "colcha",
      "colegio",
      "colgar",
      "colina",
      "collar",
      "colmo",
      "columna",
      "combate",
      "comer",
      "comida",
      "co\u0301modo",
      "compra",
      "conde",
      "conejo",
      "conga",
      "conocer",
      "consejo",
      "contar",
      "copa",
      "copia",
      "corazo\u0301n",
      "corbata",
      "corcho",
      "cordo\u0301n",
      "corona",
      "correr",
      "coser",
      "cosmos",
      "costa",
      "cra\u0301neo",
      "cra\u0301ter",
      "crear",
      "crecer",
      "crei\u0301do",
      "crema",
      "cri\u0301a",
      "crimen",
      "cripta",
      "crisis",
      "cromo",
      "cro\u0301nica",
      "croqueta",
      "crudo",
      "cruz",
      "cuadro",
      "cuarto",
      "cuatro",
      "cubo",
      "cubrir",
      "cuchara",
      "cuello",
      "cuento",
      "cuerda",
      "cuesta",
      "cueva",
      "cuidar",
      "culebra",
      "culpa",
      "culto",
      "cumbre",
      "cumplir",
      "cuna",
      "cuneta",
      "cuota",
      "cupo\u0301n",
      "cu\u0301pula",
      "curar",
      "curioso",
      "curso",
      "curva",
      "cutis",
      "dama",
      "danza",
      "dar",
      "dardo",
      "da\u0301til",
      "deber",
      "de\u0301bil",
      "de\u0301cada",
      "decir",
      "dedo",
      "defensa",
      "definir",
      "dejar",
      "delfi\u0301n",
      "delgado",
      "delito",
      "demora",
      "denso",
      "dental",
      "deporte",
      "derecho",
      "derrota",
      "desayuno",
      "deseo",
      "desfile",
      "desnudo",
      "destino",
      "desvi\u0301o",
      "detalle",
      "detener",
      "deuda",
      "di\u0301a",
      "diablo",
      "diadema",
      "diamante",
      "diana",
      "diario",
      "dibujo",
      "dictar",
      "diente",
      "dieta",
      "diez",
      "difi\u0301cil",
      "digno",
      "dilema",
      "diluir",
      "dinero",
      "directo",
      "dirigir",
      "disco",
      "disen\u0303o",
      "disfraz",
      "diva",
      "divino",
      "doble",
      "doce",
      "dolor",
      "domingo",
      "don",
      "donar",
      "dorado",
      "dormir",
      "dorso",
      "dos",
      "dosis",
      "drago\u0301n",
      "droga",
      "ducha",
      "duda",
      "duelo",
      "duen\u0303o",
      "dulce",
      "du\u0301o",
      "duque",
      "durar",
      "dureza",
      "duro",
      "e\u0301bano",
      "ebrio",
      "echar",
      "eco",
      "ecuador",
      "edad",
      "edicio\u0301n",
      "edificio",
      "editor",
      "educar",
      "efecto",
      "eficaz",
      "eje",
      "ejemplo",
      "elefante",
      "elegir",
      "elemento",
      "elevar",
      "elipse",
      "e\u0301lite",
      "elixir",
      "elogio",
      "eludir",
      "embudo",
      "emitir",
      "emocio\u0301n",
      "empate",
      "empen\u0303o",
      "empleo",
      "empresa",
      "enano",
      "encargo",
      "enchufe",
      "enci\u0301a",
      "enemigo",
      "enero",
      "enfado",
      "enfermo",
      "engan\u0303o",
      "enigma",
      "enlace",
      "enorme",
      "enredo",
      "ensayo",
      "ensen\u0303ar",
      "entero",
      "entrar",
      "envase",
      "envi\u0301o",
      "e\u0301poca",
      "equipo",
      "erizo",
      "escala",
      "escena",
      "escolar",
      "escribir",
      "escudo",
      "esencia",
      "esfera",
      "esfuerzo",
      "espada",
      "espejo",
      "espi\u0301a",
      "esposa",
      "espuma",
      "esqui\u0301",
      "estar",
      "este",
      "estilo",
      "estufa",
      "etapa",
      "eterno",
      "e\u0301tica",
      "etnia",
      "evadir",
      "evaluar",
      "evento",
      "evitar",
      "exacto",
      "examen",
      "exceso",
      "excusa",
      "exento",
      "exigir",
      "exilio",
      "existir",
      "e\u0301xito",
      "experto",
      "explicar",
      "exponer",
      "extremo",
      "fa\u0301brica",
      "fa\u0301bula",
      "fachada",
      "fa\u0301cil",
      "factor",
      "faena",
      "faja",
      "falda",
      "fallo",
      "falso",
      "faltar",
      "fama",
      "familia",
      "famoso",
      "farao\u0301n",
      "farmacia",
      "farol",
      "farsa",
      "fase",
      "fatiga",
      "fauna",
      "favor",
      "fax",
      "febrero",
      "fecha",
      "feliz",
      "feo",
      "feria",
      "feroz",
      "fe\u0301rtil",
      "fervor",
      "festi\u0301n",
      "fiable",
      "fianza",
      "fiar",
      "fibra",
      "ficcio\u0301n",
      "ficha",
      "fideo",
      "fiebre",
      "fiel",
      "fiera",
      "fiesta",
      "figura",
      "fijar",
      "fijo",
      "fila",
      "filete",
      "filial",
      "filtro",
      "fin",
      "finca",
      "fingir",
      "finito",
      "firma",
      "flaco",
      "flauta",
      "flecha",
      "flor",
      "flota",
      "fluir",
      "flujo",
      "flu\u0301or",
      "fobia",
      "foca",
      "fogata",
      "fogo\u0301n",
      "folio",
      "folleto",
      "fondo",
      "forma",
      "forro",
      "fortuna",
      "forzar",
      "fosa",
      "foto",
      "fracaso",
      "fra\u0301gil",
      "franja",
      "frase",
      "fraude",
      "frei\u0301r",
      "freno",
      "fresa",
      "fri\u0301o",
      "frito",
      "fruta",
      "fuego",
      "fuente",
      "fuerza",
      "fuga",
      "fumar",
      "funcio\u0301n",
      "funda",
      "furgo\u0301n",
      "furia",
      "fusil",
      "fu\u0301tbol",
      "futuro",
      "gacela",
      "gafas",
      "gaita",
      "gajo",
      "gala",
      "galeri\u0301a",
      "gallo",
      "gamba",
      "ganar",
      "gancho",
      "ganga",
      "ganso",
      "garaje",
      "garza",
      "gasolina",
      "gastar",
      "gato",
      "gavila\u0301n",
      "gemelo",
      "gemir",
      "gen",
      "ge\u0301nero",
      "genio",
      "gente",
      "geranio",
      "gerente",
      "germen",
      "gesto",
      "gigante",
      "gimnasio",
      "girar",
      "giro",
      "glaciar",
      "globo",
      "gloria",
      "gol",
      "golfo",
      "goloso",
      "golpe",
      "goma",
      "gordo",
      "gorila",
      "gorra",
      "gota",
      "goteo",
      "gozar",
      "grada",
      "gra\u0301fico",
      "grano",
      "grasa",
      "gratis",
      "grave",
      "grieta",
      "grillo",
      "gripe",
      "gris",
      "grito",
      "grosor",
      "gru\u0301a",
      "grueso",
      "grumo",
      "grupo",
      "guante",
      "guapo",
      "guardia",
      "guerra",
      "gui\u0301a",
      "guin\u0303o",
      "guion",
      "guiso",
      "guitarra",
      "gusano",
      "gustar",
      "haber",
      "ha\u0301bil",
      "hablar",
      "hacer",
      "hacha",
      "hada",
      "hallar",
      "hamaca",
      "harina",
      "haz",
      "hazan\u0303a",
      "hebilla",
      "hebra",
      "hecho",
      "helado",
      "helio",
      "hembra",
      "herir",
      "hermano",
      "he\u0301roe",
      "hervir",
      "hielo",
      "hierro",
      "hi\u0301gado",
      "higiene",
      "hijo",
      "himno",
      "historia",
      "hocico",
      "hogar",
      "hoguera",
      "hoja",
      "hombre",
      "hongo",
      "honor",
      "honra",
      "hora",
      "hormiga",
      "horno",
      "hostil",
      "hoyo",
      "hueco",
      "huelga",
      "huerta",
      "hueso",
      "huevo",
      "huida",
      "huir",
      "humano",
      "hu\u0301medo",
      "humilde",
      "humo",
      "hundir",
      "huraca\u0301n",
      "hurto",
      "icono",
      "ideal",
      "idioma",
      "i\u0301dolo",
      "iglesia",
      "iglu\u0301",
      "igual",
      "ilegal",
      "ilusio\u0301n",
      "imagen",
      "ima\u0301n",
      "imitar",
      "impar",
      "imperio",
      "imponer",
      "impulso",
      "incapaz",
      "i\u0301ndice",
      "inerte",
      "infiel",
      "informe",
      "ingenio",
      "inicio",
      "inmenso",
      "inmune",
      "innato",
      "insecto",
      "instante",
      "intere\u0301s",
      "i\u0301ntimo",
      "intuir",
      "inu\u0301til",
      "invierno",
      "ira",
      "iris",
      "ironi\u0301a",
      "isla",
      "islote",
      "jabali\u0301",
      "jabo\u0301n",
      "jamo\u0301n",
      "jarabe",
      "jardi\u0301n",
      "jarra",
      "jaula",
      "jazmi\u0301n",
      "jefe",
      "jeringa",
      "jinete",
      "jornada",
      "joroba",
      "joven",
      "joya",
      "juerga",
      "jueves",
      "juez",
      "jugador",
      "jugo",
      "juguete",
      "juicio",
      "junco",
      "jungla",
      "junio",
      "juntar",
      "ju\u0301piter",
      "jurar",
      "justo",
      "juvenil",
      "juzgar",
      "kilo",
      "koala",
      "labio",
      "lacio",
      "lacra",
      "lado",
      "ladro\u0301n",
      "lagarto",
      "la\u0301grima",
      "laguna",
      "laico",
      "lamer",
      "la\u0301mina",
      "la\u0301mpara",
      "lana",
      "lancha",
      "langosta",
      "lanza",
      "la\u0301piz",
      "largo",
      "larva",
      "la\u0301stima",
      "lata",
      "la\u0301tex",
      "latir",
      "laurel",
      "lavar",
      "lazo",
      "leal",
      "leccio\u0301n",
      "leche",
      "lector",
      "leer",
      "legio\u0301n",
      "legumbre",
      "lejano",
      "lengua",
      "lento",
      "len\u0303a",
      "leo\u0301n",
      "leopardo",
      "lesio\u0301n",
      "letal",
      "letra",
      "leve",
      "leyenda",
      "libertad",
      "libro",
      "licor",
      "li\u0301der",
      "lidiar",
      "lienzo",
      "liga",
      "ligero",
      "lima",
      "li\u0301mite",
      "limo\u0301n",
      "limpio",
      "lince",
      "lindo",
      "li\u0301nea",
      "lingote",
      "lino",
      "linterna",
      "li\u0301quido",
      "liso",
      "lista",
      "litera",
      "litio",
      "litro",
      "llaga",
      "llama",
      "llanto",
      "llave",
      "llegar",
      "llenar",
      "llevar",
      "llorar",
      "llover",
      "lluvia",
      "lobo",
      "locio\u0301n",
      "loco",
      "locura",
      "lo\u0301gica",
      "logro",
      "lombriz",
      "lomo",
      "lonja",
      "lote",
      "lucha",
      "lucir",
      "lugar",
      "lujo",
      "luna",
      "lunes",
      "lupa",
      "lustro",
      "luto",
      "luz",
      "maceta",
      "macho",
      "madera",
      "madre",
      "maduro",
      "maestro",
      "mafia",
      "magia",
      "mago",
      "mai\u0301z",
      "maldad",
      "maleta",
      "malla",
      "malo",
      "mama\u0301",
      "mambo",
      "mamut",
      "manco",
      "mando",
      "manejar",
      "manga",
      "maniqui\u0301",
      "manjar",
      "mano",
      "manso",
      "manta",
      "man\u0303ana",
      "mapa",
      "ma\u0301quina",
      "mar",
      "marco",
      "marea",
      "marfil",
      "margen",
      "marido",
      "ma\u0301rmol",
      "marro\u0301n",
      "martes",
      "marzo",
      "masa",
      "ma\u0301scara",
      "masivo",
      "matar",
      "materia",
      "matiz",
      "matriz",
      "ma\u0301ximo",
      "mayor",
      "mazorca",
      "mecha",
      "medalla",
      "medio",
      "me\u0301dula",
      "mejilla",
      "mejor",
      "melena",
      "melo\u0301n",
      "memoria",
      "menor",
      "mensaje",
      "mente",
      "menu\u0301",
      "mercado",
      "merengue",
      "me\u0301rito",
      "mes",
      "meso\u0301n",
      "meta",
      "meter",
      "me\u0301todo",
      "metro",
      "mezcla",
      "miedo",
      "miel",
      "miembro",
      "miga",
      "mil",
      "milagro",
      "militar",
      "millo\u0301n",
      "mimo",
      "mina",
      "minero",
      "mi\u0301nimo",
      "minuto",
      "miope",
      "mirar",
      "misa",
      "miseria",
      "misil",
      "mismo",
      "mitad",
      "mito",
      "mochila",
      "mocio\u0301n",
      "moda",
      "modelo",
      "moho",
      "mojar",
      "molde",
      "moler",
      "molino",
      "momento",
      "momia",
      "monarca",
      "moneda",
      "monja",
      "monto",
      "mon\u0303o",
      "morada",
      "morder",
      "moreno",
      "morir",
      "morro",
      "morsa",
      "mortal",
      "mosca",
      "mostrar",
      "motivo",
      "mover",
      "mo\u0301vil",
      "mozo",
      "mucho",
      "mudar",
      "mueble",
      "muela",
      "muerte",
      "muestra",
      "mugre",
      "mujer",
      "mula",
      "muleta",
      "multa",
      "mundo",
      "mun\u0303eca",
      "mural",
      "muro",
      "mu\u0301sculo",
      "museo",
      "musgo",
      "mu\u0301sica",
      "muslo",
      "na\u0301car",
      "nacio\u0301n",
      "nadar",
      "naipe",
      "naranja",
      "nariz",
      "narrar",
      "nasal",
      "natal",
      "nativo",
      "natural",
      "na\u0301usea",
      "naval",
      "nave",
      "navidad",
      "necio",
      "ne\u0301ctar",
      "negar",
      "negocio",
      "negro",
      "neo\u0301n",
      "nervio",
      "neto",
      "neutro",
      "nevar",
      "nevera",
      "nicho",
      "nido",
      "niebla",
      "nieto",
      "nin\u0303ez",
      "nin\u0303o",
      "ni\u0301tido",
      "nivel",
      "nobleza",
      "noche",
      "no\u0301mina",
      "noria",
      "norma",
      "norte",
      "nota",
      "noticia",
      "novato",
      "novela",
      "novio",
      "nube",
      "nuca",
      "nu\u0301cleo",
      "nudillo",
      "nudo",
      "nuera",
      "nueve",
      "nuez",
      "nulo",
      "nu\u0301mero",
      "nutria",
      "oasis",
      "obeso",
      "obispo",
      "objeto",
      "obra",
      "obrero",
      "observar",
      "obtener",
      "obvio",
      "oca",
      "ocaso",
      "oce\u0301ano",
      "ochenta",
      "ocho",
      "ocio",
      "ocre",
      "octavo",
      "octubre",
      "oculto",
      "ocupar",
      "ocurrir",
      "odiar",
      "odio",
      "odisea",
      "oeste",
      "ofensa",
      "oferta",
      "oficio",
      "ofrecer",
      "ogro",
      "oi\u0301do",
      "oi\u0301r",
      "ojo",
      "ola",
      "oleada",
      "olfato",
      "olivo",
      "olla",
      "olmo",
      "olor",
      "olvido",
      "ombligo",
      "onda",
      "onza",
      "opaco",
      "opcio\u0301n",
      "o\u0301pera",
      "opinar",
      "oponer",
      "optar",
      "o\u0301ptica",
      "opuesto",
      "oracio\u0301n",
      "orador",
      "oral",
      "o\u0301rbita",
      "orca",
      "orden",
      "oreja",
      "o\u0301rgano",
      "orgi\u0301a",
      "orgullo",
      "oriente",
      "origen",
      "orilla",
      "oro",
      "orquesta",
      "oruga",
      "osadi\u0301a",
      "oscuro",
      "osezno",
      "oso",
      "ostra",
      "oton\u0303o",
      "otro",
      "oveja",
      "o\u0301vulo",
      "o\u0301xido",
      "oxi\u0301geno",
      "oyente",
      "ozono",
      "pacto",
      "padre",
      "paella",
      "pa\u0301gina",
      "pago",
      "pai\u0301s",
      "pa\u0301jaro",
      "palabra",
      "palco",
      "paleta",
      "pa\u0301lido",
      "palma",
      "paloma",
      "palpar",
      "pan",
      "panal",
      "pa\u0301nico",
      "pantera",
      "pan\u0303uelo",
      "papa\u0301",
      "papel",
      "papilla",
      "paquete",
      "parar",
      "parcela",
      "pared",
      "parir",
      "paro",
      "pa\u0301rpado",
      "parque",
      "pa\u0301rrafo",
      "parte",
      "pasar",
      "paseo",
      "pasio\u0301n",
      "paso",
      "pasta",
      "pata",
      "patio",
      "patria",
      "pausa",
      "pauta",
      "pavo",
      "payaso",
      "peato\u0301n",
      "pecado",
      "pecera",
      "pecho",
      "pedal",
      "pedir",
      "pegar",
      "peine",
      "pelar",
      "peldan\u0303o",
      "pelea",
      "peligro",
      "pellejo",
      "pelo",
      "peluca",
      "pena",
      "pensar",
      "pen\u0303o\u0301n",
      "peo\u0301n",
      "peor",
      "pepino",
      "pequen\u0303o",
      "pera",
      "percha",
      "perder",
      "pereza",
      "perfil",
      "perico",
      "perla",
      "permiso",
      "perro",
      "persona",
      "pesa",
      "pesca",
      "pe\u0301simo",
      "pestan\u0303a",
      "pe\u0301talo",
      "petro\u0301leo",
      "pez",
      "pezun\u0303a",
      "picar",
      "picho\u0301n",
      "pie",
      "piedra",
      "pierna",
      "pieza",
      "pijama",
      "pilar",
      "piloto",
      "pimienta",
      "pino",
      "pintor",
      "pinza",
      "pin\u0303a",
      "piojo",
      "pipa",
      "pirata",
      "pisar",
      "piscina",
      "piso",
      "pista",
      "pito\u0301n",
      "pizca",
      "placa",
      "plan",
      "plata",
      "playa",
      "plaza",
      "pleito",
      "pleno",
      "plomo",
      "pluma",
      "plural",
      "pobre",
      "poco",
      "poder",
      "podio",
      "poema",
      "poesi\u0301a",
      "poeta",
      "polen",
      "polici\u0301a",
      "pollo",
      "polvo",
      "pomada",
      "pomelo",
      "pomo",
      "pompa",
      "poner",
      "porcio\u0301n",
      "portal",
      "posada",
      "poseer",
      "posible",
      "poste",
      "potencia",
      "potro",
      "pozo",
      "prado",
      "precoz",
      "pregunta",
      "premio",
      "prensa",
      "preso",
      "previo",
      "primo",
      "pri\u0301ncipe",
      "prisio\u0301n",
      "privar",
      "proa",
      "probar",
      "proceso",
      "producto",
      "proeza",
      "profesor",
      "programa",
      "prole",
      "promesa",
      "pronto",
      "propio",
      "pro\u0301ximo",
      "prueba",
      "pu\u0301blico",
      "puchero",
      "pudor",
      "pueblo",
      "puerta",
      "puesto",
      "pulga",
      "pulir",
      "pulmo\u0301n",
      "pulpo",
      "pulso",
      "puma",
      "punto",
      "pun\u0303al",
      "pun\u0303o",
      "pupa",
      "pupila",
      "pure\u0301",
      "quedar",
      "queja",
      "quemar",
      "querer",
      "queso",
      "quieto",
      "qui\u0301mica",
      "quince",
      "quitar",
      "ra\u0301bano",
      "rabia",
      "rabo",
      "racio\u0301n",
      "radical",
      "rai\u0301z",
      "rama",
      "rampa",
      "rancho",
      "rango",
      "rapaz",
      "ra\u0301pido",
      "rapto",
      "rasgo",
      "raspa",
      "rato",
      "rayo",
      "raza",
      "razo\u0301n",
      "reaccio\u0301n",
      "realidad",
      "reban\u0303o",
      "rebote",
      "recaer",
      "receta",
      "rechazo",
      "recoger",
      "recreo",
      "recto",
      "recurso",
      "red",
      "redondo",
      "reducir",
      "reflejo",
      "reforma",
      "refra\u0301n",
      "refugio",
      "regalo",
      "regir",
      "regla",
      "regreso",
      "rehe\u0301n",
      "reino",
      "rei\u0301r",
      "reja",
      "relato",
      "relevo",
      "relieve",
      "relleno",
      "reloj",
      "remar",
      "remedio",
      "remo",
      "rencor",
      "rendir",
      "renta",
      "reparto",
      "repetir",
      "reposo",
      "reptil",
      "res",
      "rescate",
      "resina",
      "respeto",
      "resto",
      "resumen",
      "retiro",
      "retorno",
      "retrato",
      "reunir",
      "reve\u0301s",
      "revista",
      "rey",
      "rezar",
      "rico",
      "riego",
      "rienda",
      "riesgo",
      "rifa",
      "ri\u0301gido",
      "rigor",
      "rinco\u0301n",
      "rin\u0303o\u0301n",
      "ri\u0301o",
      "riqueza",
      "risa",
      "ritmo",
      "rito",
      "rizo",
      "roble",
      "roce",
      "rociar",
      "rodar",
      "rodeo",
      "rodilla",
      "roer",
      "rojizo",
      "rojo",
      "romero",
      "romper",
      "ron",
      "ronco",
      "ronda",
      "ropa",
      "ropero",
      "rosa",
      "rosca",
      "rostro",
      "rotar",
      "rubi\u0301",
      "rubor",
      "rudo",
      "rueda",
      "rugir",
      "ruido",
      "ruina",
      "ruleta",
      "rulo",
      "rumbo",
      "rumor",
      "ruptura",
      "ruta",
      "rutina",
      "sa\u0301bado",
      "saber",
      "sabio",
      "sable",
      "sacar",
      "sagaz",
      "sagrado",
      "sala",
      "saldo",
      "salero",
      "salir",
      "salmo\u0301n",
      "salo\u0301n",
      "salsa",
      "salto",
      "salud",
      "salvar",
      "samba",
      "sancio\u0301n",
      "sandi\u0301a",
      "sanear",
      "sangre",
      "sanidad",
      "sano",
      "santo",
      "sapo",
      "saque",
      "sardina",
      "sarte\u0301n",
      "sastre",
      "sata\u0301n",
      "sauna",
      "saxofo\u0301n",
      "seccio\u0301n",
      "seco",
      "secreto",
      "secta",
      "sed",
      "seguir",
      "seis",
      "sello",
      "selva",
      "semana",
      "semilla",
      "senda",
      "sensor",
      "sen\u0303al",
      "sen\u0303or",
      "separar",
      "sepia",
      "sequi\u0301a",
      "ser",
      "serie",
      "sermo\u0301n",
      "servir",
      "sesenta",
      "sesio\u0301n",
      "seta",
      "setenta",
      "severo",
      "sexo",
      "sexto",
      "sidra",
      "siesta",
      "siete",
      "siglo",
      "signo",
      "si\u0301laba",
      "silbar",
      "silencio",
      "silla",
      "si\u0301mbolo",
      "simio",
      "sirena",
      "sistema",
      "sitio",
      "situar",
      "sobre",
      "socio",
      "sodio",
      "sol",
      "solapa",
      "soldado",
      "soledad",
      "so\u0301lido",
      "soltar",
      "solucio\u0301n",
      "sombra",
      "sondeo",
      "sonido",
      "sonoro",
      "sonrisa",
      "sopa",
      "soplar",
      "soporte",
      "sordo",
      "sorpresa",
      "sorteo",
      "soste\u0301n",
      "so\u0301tano",
      "suave",
      "subir",
      "suceso",
      "sudor",
      "suegra",
      "suelo",
      "suen\u0303o",
      "suerte",
      "sufrir",
      "sujeto",
      "sulta\u0301n",
      "sumar",
      "superar",
      "suplir",
      "suponer",
      "supremo",
      "sur",
      "surco",
      "suren\u0303o",
      "surgir",
      "susto",
      "sutil",
      "tabaco",
      "tabique",
      "tabla",
      "tabu\u0301",
      "taco",
      "tacto",
      "tajo",
      "talar",
      "talco",
      "talento",
      "talla",
      "talo\u0301n",
      "taman\u0303o",
      "tambor",
      "tango",
      "tanque",
      "tapa",
      "tapete",
      "tapia",
      "tapo\u0301n",
      "taquilla",
      "tarde",
      "tarea",
      "tarifa",
      "tarjeta",
      "tarot",
      "tarro",
      "tarta",
      "tatuaje",
      "tauro",
      "taza",
      "tazo\u0301n",
      "teatro",
      "techo",
      "tecla",
      "te\u0301cnica",
      "tejado",
      "tejer",
      "tejido",
      "tela",
      "tele\u0301fono",
      "tema",
      "temor",
      "templo",
      "tenaz",
      "tender",
      "tener",
      "tenis",
      "tenso",
      "teori\u0301a",
      "terapia",
      "terco",
      "te\u0301rmino",
      "ternura",
      "terror",
      "tesis",
      "tesoro",
      "testigo",
      "tetera",
      "texto",
      "tez",
      "tibio",
      "tiburo\u0301n",
      "tiempo",
      "tienda",
      "tierra",
      "tieso",
      "tigre",
      "tijera",
      "tilde",
      "timbre",
      "ti\u0301mido",
      "timo",
      "tinta",
      "ti\u0301o",
      "ti\u0301pico",
      "tipo",
      "tira",
      "tiro\u0301n",
      "tita\u0301n",
      "ti\u0301tere",
      "ti\u0301tulo",
      "tiza",
      "toalla",
      "tobillo",
      "tocar",
      "tocino",
      "todo",
      "toga",
      "toldo",
      "tomar",
      "tono",
      "tonto",
      "topar",
      "tope",
      "toque",
      "to\u0301rax",
      "torero",
      "tormenta",
      "torneo",
      "toro",
      "torpedo",
      "torre",
      "torso",
      "tortuga",
      "tos",
      "tosco",
      "toser",
      "to\u0301xico",
      "trabajo",
      "tractor",
      "traer",
      "tra\u0301fico",
      "trago",
      "traje",
      "tramo",
      "trance",
      "trato",
      "trauma",
      "trazar",
      "tre\u0301bol",
      "tregua",
      "treinta",
      "tren",
      "trepar",
      "tres",
      "tribu",
      "trigo",
      "tripa",
      "triste",
      "triunfo",
      "trofeo",
      "trompa",
      "tronco",
      "tropa",
      "trote",
      "trozo",
      "truco",
      "trueno",
      "trufa",
      "tuberi\u0301a",
      "tubo",
      "tuerto",
      "tumba",
      "tumor",
      "tu\u0301nel",
      "tu\u0301nica",
      "turbina",
      "turismo",
      "turno",
      "tutor",
      "ubicar",
      "u\u0301lcera",
      "umbral",
      "unidad",
      "unir",
      "universo",
      "uno",
      "untar",
      "un\u0303a",
      "urbano",
      "urbe",
      "urgente",
      "urna",
      "usar",
      "usuario",
      "u\u0301til",
      "utopi\u0301a",
      "uva",
      "vaca",
      "vaci\u0301o",
      "vacuna",
      "vagar",
      "vago",
      "vaina",
      "vajilla",
      "vale",
      "va\u0301lido",
      "valle",
      "valor",
      "va\u0301lvula",
      "vampiro",
      "vara",
      "variar",
      "varo\u0301n",
      "vaso",
      "vecino",
      "vector",
      "vehi\u0301culo",
      "veinte",
      "vejez",
      "vela",
      "velero",
      "veloz",
      "vena",
      "vencer",
      "venda",
      "veneno",
      "vengar",
      "venir",
      "venta",
      "venus",
      "ver",
      "verano",
      "verbo",
      "verde",
      "vereda",
      "verja",
      "verso",
      "verter",
      "vi\u0301a",
      "viaje",
      "vibrar",
      "vicio",
      "vi\u0301ctima",
      "vida",
      "vi\u0301deo",
      "vidrio",
      "viejo",
      "viernes",
      "vigor",
      "vil",
      "villa",
      "vinagre",
      "vino",
      "vin\u0303edo",
      "violi\u0301n",
      "viral",
      "virgo",
      "virtud",
      "visor",
      "vi\u0301spera",
      "vista",
      "vitamina",
      "viudo",
      "vivaz",
      "vivero",
      "vivir",
      "vivo",
      "volca\u0301n",
      "volumen",
      "volver",
      "voraz",
      "votar",
      "voto",
      "voz",
      "vuelo",
      "vulgar",
      "yacer",
      "yate",
      "yegua",
      "yema",
      "yerno",
      "yeso",
      "yodo",
      "yoga",
      "yogur",
      "zafiro",
      "zanja",
      "zapato",
      "zarza",
      "zona",
      "zorro",
      "zumo",
      "zurdo"
    ];
  }
});

// node_modules/bip39/src/wordlists/japanese.json
var require_japanese = __commonJS({
  "node_modules/bip39/src/wordlists/japanese.json"(exports2, module2) {
    module2.exports = [
      "\u3042\u3044\u3053\u304F\u3057\u3093",
      "\u3042\u3044\u3055\u3064",
      "\u3042\u3044\u305F\u3099",
      "\u3042\u304A\u305D\u3099\u3089",
      "\u3042\u304B\u3061\u3083\u3093",
      "\u3042\u304D\u308B",
      "\u3042\u3051\u304B\u3099\u305F",
      "\u3042\u3051\u308B",
      "\u3042\u3053\u304B\u3099\u308C\u308B",
      "\u3042\u3055\u3044",
      "\u3042\u3055\u3072",
      "\u3042\u3057\u3042\u3068",
      "\u3042\u3057\u3099\u308F\u3046",
      "\u3042\u3059\u3099\u304B\u308B",
      "\u3042\u3059\u3099\u304D",
      "\u3042\u305D\u3075\u3099",
      "\u3042\u305F\u3048\u308B",
      "\u3042\u305F\u305F\u3081\u308B",
      "\u3042\u305F\u308A\u307E\u3048",
      "\u3042\u305F\u308B",
      "\u3042\u3064\u3044",
      "\u3042\u3064\u304B\u3046",
      "\u3042\u3063\u3057\u3085\u304F",
      "\u3042\u3064\u307E\u308A",
      "\u3042\u3064\u3081\u308B",
      "\u3042\u3066\u306A",
      "\u3042\u3066\u306F\u307E\u308B",
      "\u3042\u3072\u308B",
      "\u3042\u3075\u3099\u3089",
      "\u3042\u3075\u3099\u308B",
      "\u3042\u3075\u308C\u308B",
      "\u3042\u307E\u3044",
      "\u3042\u307E\u3068\u3099",
      "\u3042\u307E\u3084\u304B\u3059",
      "\u3042\u307E\u308A",
      "\u3042\u307F\u3082\u306E",
      "\u3042\u3081\u308A\u304B",
      "\u3042\u3084\u307E\u308B",
      "\u3042\u3086\u3080",
      "\u3042\u3089\u3044\u304F\u3099\u307E",
      "\u3042\u3089\u3057",
      "\u3042\u3089\u3059\u3057\u3099",
      "\u3042\u3089\u305F\u3081\u308B",
      "\u3042\u3089\u3086\u308B",
      "\u3042\u3089\u308F\u3059",
      "\u3042\u308A\u304B\u3099\u3068\u3046",
      "\u3042\u308F\u305B\u308B",
      "\u3042\u308F\u3066\u308B",
      "\u3042\u3093\u3044",
      "\u3042\u3093\u304B\u3099\u3044",
      "\u3042\u3093\u3053",
      "\u3042\u3093\u305B\u3099\u3093",
      "\u3042\u3093\u3066\u3044",
      "\u3042\u3093\u306A\u3044",
      "\u3042\u3093\u307E\u308A",
      "\u3044\u3044\u305F\u3099\u3059",
      "\u3044\u304A\u3093",
      "\u3044\u304B\u3099\u3044",
      "\u3044\u304B\u3099\u304F",
      "\u3044\u304D\u304A\u3044",
      "\u3044\u304D\u306A\u308A",
      "\u3044\u304D\u3082\u306E",
      "\u3044\u304D\u308B",
      "\u3044\u304F\u3057\u3099",
      "\u3044\u304F\u3075\u3099\u3093",
      "\u3044\u3051\u306F\u3099\u306A",
      "\u3044\u3051\u3093",
      "\u3044\u3053\u3046",
      "\u3044\u3053\u304F",
      "\u3044\u3053\u3064",
      "\u3044\u3055\u307E\u3057\u3044",
      "\u3044\u3055\u3093",
      "\u3044\u3057\u304D",
      "\u3044\u3057\u3099\u3085\u3046",
      "\u3044\u3057\u3099\u3087\u3046",
      "\u3044\u3057\u3099\u308F\u308B",
      "\u3044\u3059\u3099\u307F",
      "\u3044\u3059\u3099\u308C",
      "\u3044\u305B\u3044",
      "\u3044\u305B\u3048\u3072\u3099",
      "\u3044\u305B\u304B\u3044",
      "\u3044\u305B\u304D",
      "\u3044\u305B\u3099\u3093",
      "\u3044\u305D\u3046\u308D\u3046",
      "\u3044\u305D\u304B\u3099\u3057\u3044",
      "\u3044\u305F\u3099\u3044",
      "\u3044\u305F\u3099\u304F",
      "\u3044\u305F\u3059\u3099\u3089",
      "\u3044\u305F\u307F",
      "\u3044\u305F\u308A\u3042",
      "\u3044\u3061\u304A\u3046",
      "\u3044\u3061\u3057\u3099",
      "\u3044\u3061\u3068\u3099",
      "\u3044\u3061\u306F\u3099",
      "\u3044\u3061\u3075\u3099",
      "\u3044\u3061\u308A\u3085\u3046",
      "\u3044\u3064\u304B",
      "\u3044\u3063\u3057\u3085\u3093",
      "\u3044\u3063\u305B\u3044",
      "\u3044\u3063\u305D\u3046",
      "\u3044\u3063\u305F\u3093",
      "\u3044\u3063\u3061",
      "\u3044\u3063\u3066\u3044",
      "\u3044\u3063\u307B\u309A\u3046",
      "\u3044\u3066\u3055\u3099",
      "\u3044\u3066\u3093",
      "\u3044\u3068\u3099\u3046",
      "\u3044\u3068\u3053",
      "\u3044\u306A\u3044",
      "\u3044\u306A\u304B",
      "\u3044\u306D\u3080\u308A",
      "\u3044\u306E\u3061",
      "\u3044\u306E\u308B",
      "\u3044\u306F\u3064",
      "\u3044\u306F\u3099\u308B",
      "\u3044\u306F\u3093",
      "\u3044\u3072\u3099\u304D",
      "\u3044\u3072\u3093",
      "\u3044\u3075\u304F",
      "\u3044\u3078\u3093",
      "\u3044\u307B\u3046",
      "\u3044\u307F\u3093",
      "\u3044\u3082\u3046\u3068",
      "\u3044\u3082\u305F\u308C",
      "\u3044\u3082\u308A",
      "\u3044\u3084\u304B\u3099\u308B",
      "\u3044\u3084\u3059",
      "\u3044\u3088\u304B\u3093",
      "\u3044\u3088\u304F",
      "\u3044\u3089\u3044",
      "\u3044\u3089\u3059\u3068",
      "\u3044\u308A\u304F\u3099\u3061",
      "\u3044\u308A\u3087\u3046",
      "\u3044\u308C\u3044",
      "\u3044\u308C\u3082\u306E",
      "\u3044\u308C\u308B",
      "\u3044\u308D\u3048\u3093\u3072\u309A\u3064",
      "\u3044\u308F\u3044",
      "\u3044\u308F\u3046",
      "\u3044\u308F\u304B\u3093",
      "\u3044\u308F\u306F\u3099",
      "\u3044\u308F\u3086\u308B",
      "\u3044\u3093\u3051\u3099\u3093\u307E\u3081",
      "\u3044\u3093\u3055\u3064",
      "\u3044\u3093\u3057\u3087\u3046",
      "\u3044\u3093\u3088\u3046",
      "\u3046\u3048\u304D",
      "\u3046\u3048\u308B",
      "\u3046\u304A\u3055\u3099",
      "\u3046\u304B\u3099\u3044",
      "\u3046\u304B\u3075\u3099",
      "\u3046\u304B\u3078\u3099\u308B",
      "\u3046\u304D\u308F",
      "\u3046\u304F\u3089\u3044\u306A",
      "\u3046\u304F\u308C\u308C",
      "\u3046\u3051\u305F\u307E\u308F\u308B",
      "\u3046\u3051\u3064\u3051",
      "\u3046\u3051\u3068\u308B",
      "\u3046\u3051\u3082\u3064",
      "\u3046\u3051\u308B",
      "\u3046\u3053\u3099\u304B\u3059",
      "\u3046\u3053\u3099\u304F",
      "\u3046\u3053\u3093",
      "\u3046\u3055\u304D\u3099",
      "\u3046\u3057\u306A\u3046",
      "\u3046\u3057\u308D\u304B\u3099\u307F",
      "\u3046\u3059\u3044",
      "\u3046\u3059\u304D\u3099",
      "\u3046\u3059\u304F\u3099\u3089\u3044",
      "\u3046\u3059\u3081\u308B",
      "\u3046\u305B\u3064",
      "\u3046\u3061\u3042\u308F\u305B",
      "\u3046\u3061\u304B\u3099\u308F",
      "\u3046\u3061\u304D",
      "\u3046\u3061\u3085\u3046",
      "\u3046\u3063\u304B\u308A",
      "\u3046\u3064\u304F\u3057\u3044",
      "\u3046\u3063\u305F\u3048\u308B",
      "\u3046\u3064\u308B",
      "\u3046\u3068\u3099\u3093",
      "\u3046\u306A\u304D\u3099",
      "\u3046\u306A\u3057\u3099",
      "\u3046\u306A\u3059\u3099\u304F",
      "\u3046\u306A\u308B",
      "\u3046\u306D\u308B",
      "\u3046\u306E\u3046",
      "\u3046\u3075\u3099\u3051\u3099",
      "\u3046\u3075\u3099\u3053\u3099\u3048",
      "\u3046\u307E\u308C\u308B",
      "\u3046\u3081\u308B",
      "\u3046\u3082\u3046",
      "\u3046\u3084\u307E\u3046",
      "\u3046\u3088\u304F",
      "\u3046\u3089\u304B\u3099\u3048\u3059",
      "\u3046\u3089\u304F\u3099\u3061",
      "\u3046\u3089\u306A\u3044",
      "\u3046\u308A\u3042\u3051\u3099",
      "\u3046\u308A\u304D\u308C",
      "\u3046\u308B\u3055\u3044",
      "\u3046\u308C\u3057\u3044",
      "\u3046\u308C\u3086\u304D",
      "\u3046\u308C\u308B",
      "\u3046\u308D\u3053",
      "\u3046\u308F\u304D",
      "\u3046\u308F\u3055",
      "\u3046\u3093\u3053\u3046",
      "\u3046\u3093\u3061\u3093",
      "\u3046\u3093\u3066\u3093",
      "\u3046\u3093\u3068\u3099\u3046",
      "\u3048\u3044\u3048\u3093",
      "\u3048\u3044\u304B\u3099",
      "\u3048\u3044\u304D\u3087\u3046",
      "\u3048\u3044\u3053\u3099",
      "\u3048\u3044\u305B\u3044",
      "\u3048\u3044\u3075\u3099\u3093",
      "\u3048\u3044\u3088\u3046",
      "\u3048\u3044\u308F",
      "\u3048\u304A\u308A",
      "\u3048\u304B\u3099\u304A",
      "\u3048\u304B\u3099\u304F",
      "\u3048\u304D\u305F\u3044",
      "\u3048\u304F\u305B\u308B",
      "\u3048\u3057\u3083\u304F",
      "\u3048\u3059\u3066",
      "\u3048\u3064\u3089\u3093",
      "\u3048\u306E\u304F\u3099",
      "\u3048\u307B\u3046\u307E\u304D",
      "\u3048\u307B\u3093",
      "\u3048\u307E\u304D",
      "\u3048\u3082\u3057\u3099",
      "\u3048\u3082\u306E",
      "\u3048\u3089\u3044",
      "\u3048\u3089\u3075\u3099",
      "\u3048\u308A\u3042",
      "\u3048\u3093\u3048\u3093",
      "\u3048\u3093\u304B\u3044",
      "\u3048\u3093\u304D\u3099",
      "\u3048\u3093\u3051\u3099\u304D",
      "\u3048\u3093\u3057\u3085\u3046",
      "\u3048\u3093\u305B\u3099\u3064",
      "\u3048\u3093\u305D\u304F",
      "\u3048\u3093\u3061\u3087\u3046",
      "\u3048\u3093\u3068\u3064",
      "\u304A\u3044\u304B\u3051\u308B",
      "\u304A\u3044\u3053\u3059",
      "\u304A\u3044\u3057\u3044",
      "\u304A\u3044\u3064\u304F",
      "\u304A\u3046\u3048\u3093",
      "\u304A\u3046\u3055\u307E",
      "\u304A\u3046\u3057\u3099",
      "\u304A\u3046\u305B\u3064",
      "\u304A\u3046\u305F\u3044",
      "\u304A\u3046\u3075\u304F",
      "\u304A\u3046\u3078\u3099\u3044",
      "\u304A\u3046\u3088\u3046",
      "\u304A\u3048\u308B",
      "\u304A\u304A\u3044",
      "\u304A\u304A\u3046",
      "\u304A\u304A\u3068\u3099\u304A\u308A",
      "\u304A\u304A\u3084",
      "\u304A\u304A\u3088\u305D",
      "\u304A\u304B\u3048\u308A",
      "\u304A\u304B\u3059\u3099",
      "\u304A\u304B\u3099\u3080",
      "\u304A\u304B\u308F\u308A",
      "\u304A\u304D\u3099\u306A\u3046",
      "\u304A\u304D\u308B",
      "\u304A\u304F\u3055\u307E",
      "\u304A\u304F\u3057\u3099\u3087\u3046",
      "\u304A\u304F\u308A\u304B\u3099\u306A",
      "\u304A\u304F\u308B",
      "\u304A\u304F\u308C\u308B",
      "\u304A\u3053\u3059",
      "\u304A\u3053\u306A\u3046",
      "\u304A\u3053\u308B",
      "\u304A\u3055\u3048\u308B",
      "\u304A\u3055\u306A\u3044",
      "\u304A\u3055\u3081\u308B",
      "\u304A\u3057\u3044\u308C",
      "\u304A\u3057\u3048\u308B",
      "\u304A\u3057\u3099\u304D\u3099",
      "\u304A\u3057\u3099\u3055\u3093",
      "\u304A\u3057\u3083\u308C",
      "\u304A\u305D\u3089\u304F",
      "\u304A\u305D\u308F\u308B",
      "\u304A\u305F\u304B\u3099\u3044",
      "\u304A\u305F\u304F",
      "\u304A\u305F\u3099\u3084\u304B",
      "\u304A\u3061\u3064\u304F",
      "\u304A\u3063\u3068",
      "\u304A\u3064\u308A",
      "\u304A\u3066\u3099\u304B\u3051",
      "\u304A\u3068\u3057\u3082\u306E",
      "\u304A\u3068\u306A\u3057\u3044",
      "\u304A\u3068\u3099\u308A",
      "\u304A\u3068\u3099\u308D\u304B\u3059",
      "\u304A\u306F\u3099\u3055\u3093",
      "\u304A\u307E\u3044\u308A",
      "\u304A\u3081\u3066\u3099\u3068\u3046",
      "\u304A\u3082\u3044\u3066\u3099",
      "\u304A\u3082\u3046",
      "\u304A\u3082\u305F\u3044",
      "\u304A\u3082\u3061\u3083",
      "\u304A\u3084\u3064",
      "\u304A\u3084\u3086\u3072\u3099",
      "\u304A\u3088\u307B\u3099\u3059",
      "\u304A\u3089\u3093\u305F\u3099",
      "\u304A\u308D\u3059",
      "\u304A\u3093\u304B\u3099\u304F",
      "\u304A\u3093\u3051\u3044",
      "\u304A\u3093\u3057\u3083",
      "\u304A\u3093\u305B\u3093",
      "\u304A\u3093\u305F\u3099\u3093",
      "\u304A\u3093\u3061\u3085\u3046",
      "\u304A\u3093\u3068\u3099\u3051\u3044",
      "\u304B\u3042\u3064",
      "\u304B\u3044\u304B\u3099",
      "\u304B\u3099\u3044\u304D",
      "\u304B\u3099\u3044\u3051\u3093",
      "\u304B\u3099\u3044\u3053\u3046",
      "\u304B\u3044\u3055\u3064",
      "\u304B\u3044\u3057\u3083",
      "\u304B\u3044\u3059\u3044\u3088\u304F",
      "\u304B\u3044\u305B\u3099\u3093",
      "\u304B\u3044\u305D\u3099\u3046\u3068\u3099",
      "\u304B\u3044\u3064\u3046",
      "\u304B\u3044\u3066\u3093",
      "\u304B\u3044\u3068\u3046",
      "\u304B\u3044\u3075\u304F",
      "\u304B\u3099\u3044\u3078\u304D",
      "\u304B\u3044\u307B\u3046",
      "\u304B\u3044\u3088\u3046",
      "\u304B\u3099\u3044\u3089\u3044",
      "\u304B\u3044\u308F",
      "\u304B\u3048\u308B",
      "\u304B\u304A\u308A",
      "\u304B\u304B\u3048\u308B",
      "\u304B\u304B\u3099\u304F",
      "\u304B\u304B\u3099\u3057",
      "\u304B\u304B\u3099\u307F",
      "\u304B\u304F\u3053\u3099",
      "\u304B\u304F\u3068\u304F",
      "\u304B\u3055\u3099\u308B",
      "\u304B\u3099\u305D\u3099\u3046",
      "\u304B\u305F\u3044",
      "\u304B\u305F\u3061",
      "\u304B\u3099\u3061\u3087\u3046",
      "\u304B\u3099\u3063\u304D\u3085\u3046",
      "\u304B\u3099\u3063\u3053\u3046",
      "\u304B\u3099\u3063\u3055\u3093",
      "\u304B\u3099\u3063\u3057\u3087\u3046",
      "\u304B\u306A\u3055\u3099\u308F\u3057",
      "\u304B\u306E\u3046",
      "\u304B\u3099\u306F\u304F",
      "\u304B\u3075\u3099\u304B",
      "\u304B\u307B\u3046",
      "\u304B\u307B\u3053\u3099",
      "\u304B\u307E\u3046",
      "\u304B\u307E\u307B\u3099\u3053",
      "\u304B\u3081\u308C\u304A\u3093",
      "\u304B\u3086\u3044",
      "\u304B\u3088\u3046\u3072\u3099",
      "\u304B\u3089\u3044",
      "\u304B\u308B\u3044",
      "\u304B\u308D\u3046",
      "\u304B\u308F\u304F",
      "\u304B\u308F\u3089",
      "\u304B\u3099\u3093\u304B",
      "\u304B\u3093\u3051\u3044",
      "\u304B\u3093\u3053\u3046",
      "\u304B\u3093\u3057\u3083",
      "\u304B\u3093\u305D\u3046",
      "\u304B\u3093\u305F\u3093",
      "\u304B\u3093\u3061",
      "\u304B\u3099\u3093\u306F\u3099\u308B",
      "\u304D\u3042\u3044",
      "\u304D\u3042\u3064",
      "\u304D\u3044\u308D",
      "\u304D\u3099\u3044\u3093",
      "\u304D\u3046\u3044",
      "\u304D\u3046\u3093",
      "\u304D\u3048\u308B",
      "\u304D\u304A\u3046",
      "\u304D\u304A\u304F",
      "\u304D\u304A\u3061",
      "\u304D\u304A\u3093",
      "\u304D\u304B\u3044",
      "\u304D\u304B\u304F",
      "\u304D\u304B\u3093\u3057\u3083",
      "\u304D\u304D\u3066",
      "\u304D\u304F\u306F\u3099\u308A",
      "\u304D\u304F\u3089\u3051\u3099",
      "\u304D\u3051\u3093\u305B\u3044",
      "\u304D\u3053\u3046",
      "\u304D\u3053\u3048\u308B",
      "\u304D\u3053\u304F",
      "\u304D\u3055\u3044",
      "\u304D\u3055\u304F",
      "\u304D\u3055\u307E",
      "\u304D\u3055\u3089\u304D\u3099",
      "\u304D\u3099\u3057\u3099\u304B\u304B\u3099\u304F",
      "\u304D\u3099\u3057\u304D",
      "\u304D\u3099\u3057\u3099\u305F\u3044\u3051\u3093",
      "\u304D\u3099\u3057\u3099\u306B\u3063\u3066\u3044",
      "\u304D\u3099\u3057\u3099\u3085\u3064\u3057\u3083",
      "\u304D\u3059\u3046",
      "\u304D\u305B\u3044",
      "\u304D\u305B\u304D",
      "\u304D\u305B\u3064",
      "\u304D\u305D\u3046",
      "\u304D\u305D\u3099\u304F",
      "\u304D\u305D\u3099\u3093",
      "\u304D\u305F\u3048\u308B",
      "\u304D\u3061\u3087\u3046",
      "\u304D\u3064\u3048\u3093",
      "\u304D\u3099\u3063\u3061\u308A",
      "\u304D\u3064\u3064\u304D",
      "\u304D\u3064\u306D",
      "\u304D\u3066\u3044",
      "\u304D\u3068\u3099\u3046",
      "\u304D\u3068\u3099\u304F",
      "\u304D\u306A\u3044",
      "\u304D\u306A\u304B\u3099",
      "\u304D\u306A\u3053",
      "\u304D\u306C\u3053\u3099\u3057",
      "\u304D\u306D\u3093",
      "\u304D\u306E\u3046",
      "\u304D\u306E\u3057\u305F",
      "\u304D\u306F\u304F",
      "\u304D\u3072\u3099\u3057\u3044",
      "\u304D\u3072\u3093",
      "\u304D\u3075\u304F",
      "\u304D\u3075\u3099\u3093",
      "\u304D\u307B\u3099\u3046",
      "\u304D\u307B\u3093",
      "\u304D\u307E\u308B",
      "\u304D\u307F\u3064",
      "\u304D\u3080\u3059\u3099\u304B\u3057\u3044",
      "\u304D\u3081\u308B",
      "\u304D\u3082\u305F\u3099\u3081\u3057",
      "\u304D\u3082\u3061",
      "\u304D\u3082\u306E",
      "\u304D\u3083\u304F",
      "\u304D\u3084\u304F",
      "\u304D\u3099\u3085\u3046\u306B\u304F",
      "\u304D\u3088\u3046",
      "\u304D\u3087\u3046\u308A\u3085\u3046",
      "\u304D\u3089\u3044",
      "\u304D\u3089\u304F",
      "\u304D\u308A\u3093",
      "\u304D\u308C\u3044",
      "\u304D\u308C\u3064",
      "\u304D\u308D\u304F",
      "\u304D\u3099\u308D\u3093",
      "\u304D\u308F\u3081\u308B",
      "\u304D\u3099\u3093\u3044\u308D",
      "\u304D\u3093\u304B\u304F\u3057\u3099",
      "\u304D\u3093\u3057\u3099\u3087",
      "\u304D\u3093\u3088\u3046\u3072\u3099",
      "\u304F\u3099\u3042\u3044",
      "\u304F\u3044\u3059\u3099",
      "\u304F\u3046\u304B\u3093",
      "\u304F\u3046\u304D",
      "\u304F\u3046\u304F\u3099\u3093",
      "\u304F\u3046\u3053\u3046",
      "\u304F\u3099\u3046\u305B\u3044",
      "\u304F\u3046\u305D\u3046",
      "\u304F\u3099\u3046\u305F\u3089",
      "\u304F\u3046\u3075\u304F",
      "\u304F\u3046\u307B\u3099",
      "\u304F\u304B\u3093",
      "\u304F\u304D\u3087\u3046",
      "\u304F\u3051\u3099\u3093",
      "\u304F\u3099\u3053\u3046",
      "\u304F\u3055\u3044",
      "\u304F\u3055\u304D",
      "\u304F\u3055\u306F\u3099\u306A",
      "\u304F\u3055\u308B",
      "\u304F\u3057\u3083\u307F",
      "\u304F\u3057\u3087\u3046",
      "\u304F\u3059\u306E\u304D",
      "\u304F\u3059\u308A\u3086\u3072\u3099",
      "\u304F\u305B\u3051\u3099",
      "\u304F\u305B\u3093",
      "\u304F\u3099\u305F\u3044\u3066\u304D",
      "\u304F\u305F\u3099\u3055\u308B",
      "\u304F\u305F\u3072\u3099\u308C\u308B",
      "\u304F\u3061\u3053\u307F",
      "\u304F\u3061\u3055\u304D",
      "\u304F\u3064\u3057\u305F",
      "\u304F\u3099\u3063\u3059\u308A",
      "\u304F\u3064\u308D\u304F\u3099",
      "\u304F\u3068\u3046\u3066\u3093",
      "\u304F\u3068\u3099\u304F",
      "\u304F\u306A\u3093",
      "\u304F\u306D\u304F\u306D",
      "\u304F\u306E\u3046",
      "\u304F\u3075\u3046",
      "\u304F\u307F\u3042\u308F\u305B",
      "\u304F\u307F\u305F\u3066\u308B",
      "\u304F\u3081\u308B",
      "\u304F\u3084\u304F\u3057\u3087",
      "\u304F\u3089\u3059",
      "\u304F\u3089\u3078\u3099\u308B",
      "\u304F\u308B\u307E",
      "\u304F\u308C\u308B",
      "\u304F\u308D\u3046",
      "\u304F\u308F\u3057\u3044",
      "\u304F\u3099\u3093\u304B\u3093",
      "\u304F\u3099\u3093\u3057\u3087\u304F",
      "\u304F\u3099\u3093\u305F\u3044",
      "\u304F\u3099\u3093\u3066",
      "\u3051\u3042\u306A",
      "\u3051\u3044\u304B\u304F",
      "\u3051\u3044\u3051\u3093",
      "\u3051\u3044\u3053",
      "\u3051\u3044\u3055\u3064",
      "\u3051\u3099\u3044\u3057\u3099\u3085\u3064",
      "\u3051\u3044\u305F\u3044",
      "\u3051\u3099\u3044\u306E\u3046\u3057\u3099\u3093",
      "\u3051\u3044\u308C\u304D",
      "\u3051\u3044\u308D",
      "\u3051\u304A\u3068\u3059",
      "\u3051\u304A\u308A\u3082\u306E",
      "\u3051\u3099\u304D\u304B",
      "\u3051\u3099\u304D\u3051\u3099\u3093",
      "\u3051\u3099\u304D\u305F\u3099\u3093",
      "\u3051\u3099\u304D\u3061\u3093",
      "\u3051\u3099\u304D\u3068\u3064",
      "\u3051\u3099\u304D\u306F",
      "\u3051\u3099\u304D\u3084\u304F",
      "\u3051\u3099\u3053\u3046",
      "\u3051\u3099\u3053\u304F\u3057\u3099\u3087\u3046",
      "\u3051\u3099\u3055\u3099\u3044",
      "\u3051\u3055\u304D",
      "\u3051\u3099\u3055\u3099\u3093",
      "\u3051\u3057\u304D",
      "\u3051\u3057\u3053\u3099\u3080",
      "\u3051\u3057\u3087\u3046",
      "\u3051\u3099\u3059\u3068",
      "\u3051\u305F\u306F\u3099",
      "\u3051\u3061\u3083\u3063\u3075\u309A",
      "\u3051\u3061\u3089\u3059",
      "\u3051\u3064\u3042\u3064",
      "\u3051\u3064\u3044",
      "\u3051\u3064\u3048\u304D",
      "\u3051\u3063\u3053\u3093",
      "\u3051\u3064\u3057\u3099\u3087",
      "\u3051\u3063\u305B\u304D",
      "\u3051\u3063\u3066\u3044",
      "\u3051\u3064\u307E\u3064",
      "\u3051\u3099\u3064\u3088\u3046\u3072\u3099",
      "\u3051\u3099\u3064\u308C\u3044",
      "\u3051\u3064\u308D\u3093",
      "\u3051\u3099\u3068\u3099\u304F",
      "\u3051\u3068\u306F\u3099\u3059",
      "\u3051\u3068\u308B",
      "\u3051\u306A\u3051\u3099",
      "\u3051\u306A\u3059",
      "\u3051\u306A\u307F",
      "\u3051\u306C\u304D",
      "\u3051\u3099\u306D\u3064",
      "\u3051\u306D\u3093",
      "\u3051\u306F\u3044",
      "\u3051\u3099\u3072\u3093",
      "\u3051\u3075\u3099\u304B\u3044",
      "\u3051\u3099\u307B\u3099\u304F",
      "\u3051\u307E\u308A",
      "\u3051\u307F\u304B\u308B",
      "\u3051\u3080\u3057",
      "\u3051\u3080\u308A",
      "\u3051\u3082\u306E",
      "\u3051\u3089\u3044",
      "\u3051\u308D\u3051\u308D",
      "\u3051\u308F\u3057\u3044",
      "\u3051\u3093\u3044",
      "\u3051\u3093\u3048\u3064",
      "\u3051\u3093\u304A",
      "\u3051\u3093\u304B",
      "\u3051\u3099\u3093\u304D",
      "\u3051\u3093\u3051\u3099\u3093",
      "\u3051\u3093\u3053\u3046",
      "\u3051\u3093\u3055\u304F",
      "\u3051\u3093\u3057\u3085\u3046",
      "\u3051\u3093\u3059\u3046",
      "\u3051\u3099\u3093\u305D\u3046",
      "\u3051\u3093\u3061\u304F",
      "\u3051\u3093\u3066\u3044",
      "\u3051\u3093\u3068\u3046",
      "\u3051\u3093\u306A\u3044",
      "\u3051\u3093\u306B\u3093",
      "\u3051\u3099\u3093\u3075\u3099\u3064",
      "\u3051\u3093\u307E",
      "\u3051\u3093\u307F\u3093",
      "\u3051\u3093\u3081\u3044",
      "\u3051\u3093\u3089\u3093",
      "\u3051\u3093\u308A",
      "\u3053\u3042\u304F\u307E",
      "\u3053\u3044\u306C",
      "\u3053\u3044\u3072\u3099\u3068",
      "\u3053\u3099\u3046\u3044",
      "\u3053\u3046\u3048\u3093",
      "\u3053\u3046\u304A\u3093",
      "\u3053\u3046\u304B\u3093",
      "\u3053\u3099\u3046\u304D\u3085\u3046",
      "\u3053\u3099\u3046\u3051\u3044",
      "\u3053\u3046\u3053\u3046",
      "\u3053\u3046\u3055\u3044",
      "\u3053\u3046\u3057\u3099",
      "\u3053\u3046\u3059\u3044",
      "\u3053\u3099\u3046\u305B\u3044",
      "\u3053\u3046\u305D\u304F",
      "\u3053\u3046\u305F\u3044",
      "\u3053\u3046\u3061\u3083",
      "\u3053\u3046\u3064\u3046",
      "\u3053\u3046\u3066\u3044",
      "\u3053\u3046\u3068\u3099\u3046",
      "\u3053\u3046\u306A\u3044",
      "\u3053\u3046\u306F\u3044",
      "\u3053\u3099\u3046\u307B\u3046",
      "\u3053\u3099\u3046\u307E\u3093",
      "\u3053\u3046\u3082\u304F",
      "\u3053\u3046\u308A\u3064",
      "\u3053\u3048\u308B",
      "\u3053\u304A\u308A",
      "\u3053\u3099\u304B\u3044",
      "\u3053\u3099\u304B\u3099\u3064",
      "\u3053\u3099\u304B\u3093",
      "\u3053\u304F\u3053\u3099",
      "\u3053\u304F\u3055\u3044",
      "\u3053\u304F\u3068\u3046",
      "\u3053\u304F\u306A\u3044",
      "\u3053\u304F\u306F\u304F",
      "\u3053\u304F\u3099\u307E",
      "\u3053\u3051\u3044",
      "\u3053\u3051\u308B",
      "\u3053\u3053\u306E\u304B",
      "\u3053\u3053\u308D",
      "\u3053\u3055\u3081",
      "\u3053\u3057\u3064",
      "\u3053\u3059\u3046",
      "\u3053\u305B\u3044",
      "\u3053\u305B\u304D",
      "\u3053\u305B\u3099\u3093",
      "\u3053\u305D\u305F\u3099\u3066",
      "\u3053\u305F\u3044",
      "\u3053\u305F\u3048\u308B",
      "\u3053\u305F\u3064",
      "\u3053\u3061\u3087\u3046",
      "\u3053\u3063\u304B",
      "\u3053\u3064\u3053\u3064",
      "\u3053\u3064\u306F\u3099\u3093",
      "\u3053\u3064\u3075\u3099",
      "\u3053\u3066\u3044",
      "\u3053\u3066\u3093",
      "\u3053\u3068\u304B\u3099\u3089",
      "\u3053\u3068\u3057",
      "\u3053\u3068\u306F\u3099",
      "\u3053\u3068\u308A",
      "\u3053\u306A\u3053\u3099\u306A",
      "\u3053\u306D\u3053\u306D",
      "\u3053\u306E\u307E\u307E",
      "\u3053\u306E\u307F",
      "\u3053\u306E\u3088",
      "\u3053\u3099\u306F\u3093",
      "\u3053\u3072\u3064\u3057\u3099",
      "\u3053\u3075\u3046",
      "\u3053\u3075\u3093",
      "\u3053\u307B\u3099\u308C\u308B",
      "\u3053\u3099\u307E\u3042\u3075\u3099\u3089",
      "\u3053\u307E\u304B\u3044",
      "\u3053\u3099\u307E\u3059\u308A",
      "\u3053\u307E\u3064\u306A",
      "\u3053\u307E\u308B",
      "\u3053\u3080\u304D\u3099\u3053",
      "\u3053\u3082\u3057\u3099",
      "\u3053\u3082\u3061",
      "\u3053\u3082\u306E",
      "\u3053\u3082\u3093",
      "\u3053\u3084\u304F",
      "\u3053\u3084\u307E",
      "\u3053\u3086\u3046",
      "\u3053\u3086\u3072\u3099",
      "\u3053\u3088\u3044",
      "\u3053\u3088\u3046",
      "\u3053\u308A\u308B",
      "\u3053\u308C\u304F\u3057\u3087\u3093",
      "\u3053\u308D\u3063\u3051",
      "\u3053\u308F\u3082\u3066",
      "\u3053\u308F\u308C\u308B",
      "\u3053\u3093\u3044\u3093",
      "\u3053\u3093\u304B\u3044",
      "\u3053\u3093\u304D",
      "\u3053\u3093\u3057\u3085\u3046",
      "\u3053\u3093\u3059\u3044",
      "\u3053\u3093\u305F\u3099\u3066",
      "\u3053\u3093\u3068\u3093",
      "\u3053\u3093\u306A\u3093",
      "\u3053\u3093\u3072\u3099\u306B",
      "\u3053\u3093\u307B\u309A\u3093",
      "\u3053\u3093\u307E\u3051",
      "\u3053\u3093\u3084",
      "\u3053\u3093\u308C\u3044",
      "\u3053\u3093\u308F\u304F",
      "\u3055\u3099\u3044\u3048\u304D",
      "\u3055\u3044\u304B\u3044",
      "\u3055\u3044\u304D\u3093",
      "\u3055\u3099\u3044\u3051\u3099\u3093",
      "\u3055\u3099\u3044\u3053",
      "\u3055\u3044\u3057\u3087",
      "\u3055\u3044\u305B\u3044",
      "\u3055\u3099\u3044\u305F\u304F",
      "\u3055\u3099\u3044\u3061\u3085\u3046",
      "\u3055\u3044\u3066\u304D",
      "\u3055\u3099\u3044\u308A\u3087\u3046",
      "\u3055\u3046\u306A",
      "\u3055\u304B\u3044\u3057",
      "\u3055\u304B\u3099\u3059",
      "\u3055\u304B\u306A",
      "\u3055\u304B\u307F\u3061",
      "\u3055\u304B\u3099\u308B",
      "\u3055\u304D\u3099\u3087\u3046",
      "\u3055\u304F\u3057",
      "\u3055\u304F\u3072\u3093",
      "\u3055\u304F\u3089",
      "\u3055\u3053\u304F",
      "\u3055\u3053\u3064",
      "\u3055\u3059\u3099\u304B\u308B",
      "\u3055\u3099\u305B\u304D",
      "\u3055\u305F\u3093",
      "\u3055\u3064\u3048\u3044",
      "\u3055\u3099\u3064\u304A\u3093",
      "\u3055\u3099\u3063\u304B",
      "\u3055\u3099\u3064\u304B\u3099\u304F",
      "\u3055\u3063\u304D\u3087\u304F",
      "\u3055\u3099\u3063\u3057",
      "\u3055\u3064\u3057\u3099\u3093",
      "\u3055\u3099\u3063\u305D\u3046",
      "\u3055\u3064\u305F\u306F\u3099",
      "\u3055\u3064\u307E\u3044\u3082",
      "\u3055\u3066\u3044",
      "\u3055\u3068\u3044\u3082",
      "\u3055\u3068\u3046",
      "\u3055\u3068\u304A\u3084",
      "\u3055\u3068\u3057",
      "\u3055\u3068\u308B",
      "\u3055\u306E\u3046",
      "\u3055\u306F\u3099\u304F",
      "\u3055\u3072\u3099\u3057\u3044",
      "\u3055\u3078\u3099\u3064",
      "\u3055\u307B\u3046",
      "\u3055\u307B\u3068\u3099",
      "\u3055\u307E\u3059",
      "\u3055\u307F\u3057\u3044",
      "\u3055\u307F\u305F\u3099\u308C",
      "\u3055\u3080\u3051",
      "\u3055\u3081\u308B",
      "\u3055\u3084\u3048\u3093\u3068\u3099\u3046",
      "\u3055\u3086\u3046",
      "\u3055\u3088\u3046",
      "\u3055\u3088\u304F",
      "\u3055\u3089\u305F\u3099",
      "\u3055\u3099\u308B\u305D\u306F\u3099",
      "\u3055\u308F\u3084\u304B",
      "\u3055\u308F\u308B",
      "\u3055\u3093\u3044\u3093",
      "\u3055\u3093\u304B",
      "\u3055\u3093\u304D\u3083\u304F",
      "\u3055\u3093\u3053\u3046",
      "\u3055\u3093\u3055\u3044",
      "\u3055\u3099\u3093\u3057\u3087",
      "\u3055\u3093\u3059\u3046",
      "\u3055\u3093\u305B\u3044",
      "\u3055\u3093\u305D",
      "\u3055\u3093\u3061",
      "\u3055\u3093\u307E",
      "\u3055\u3093\u307F",
      "\u3055\u3093\u3089\u3093",
      "\u3057\u3042\u3044",
      "\u3057\u3042\u3051\u3099",
      "\u3057\u3042\u3055\u3063\u3066",
      "\u3057\u3042\u308F\u305B",
      "\u3057\u3044\u304F",
      "\u3057\u3044\u3093",
      "\u3057\u3046\u3061",
      "\u3057\u3048\u3044",
      "\u3057\u304A\u3051",
      "\u3057\u304B\u3044",
      "\u3057\u304B\u304F",
      "\u3057\u3099\u304B\u3093",
      "\u3057\u3053\u3099\u3068",
      "\u3057\u3059\u3046",
      "\u3057\u3099\u305F\u3099\u3044",
      "\u3057\u305F\u3046\u3051",
      "\u3057\u305F\u304D\u3099",
      "\u3057\u305F\u3066",
      "\u3057\u305F\u307F",
      "\u3057\u3061\u3087\u3046",
      "\u3057\u3061\u308A\u3093",
      "\u3057\u3063\u304B\u308A",
      "\u3057\u3064\u3057\u3099",
      "\u3057\u3064\u3082\u3093",
      "\u3057\u3066\u3044",
      "\u3057\u3066\u304D",
      "\u3057\u3066\u3064",
      "\u3057\u3099\u3066\u3093",
      "\u3057\u3099\u3068\u3099\u3046",
      "\u3057\u306A\u304D\u3099\u308C",
      "\u3057\u306A\u3082\u306E",
      "\u3057\u306A\u3093",
      "\u3057\u306D\u307E",
      "\u3057\u306D\u3093",
      "\u3057\u306E\u304F\u3099",
      "\u3057\u306E\u3075\u3099",
      "\u3057\u306F\u3044",
      "\u3057\u306F\u3099\u304B\u308A",
      "\u3057\u306F\u3064",
      "\u3057\u306F\u3089\u3044",
      "\u3057\u306F\u3093",
      "\u3057\u3072\u3087\u3046",
      "\u3057\u3075\u304F",
      "\u3057\u3099\u3075\u3099\u3093",
      "\u3057\u3078\u3044",
      "\u3057\u307B\u3046",
      "\u3057\u307B\u3093",
      "\u3057\u307E\u3046",
      "\u3057\u307E\u308B",
      "\u3057\u307F\u3093",
      "\u3057\u3080\u3051\u308B",
      "\u3057\u3099\u3080\u3057\u3087",
      "\u3057\u3081\u3044",
      "\u3057\u3081\u308B",
      "\u3057\u3082\u3093",
      "\u3057\u3083\u3044\u3093",
      "\u3057\u3083\u3046\u3093",
      "\u3057\u3083\u304A\u3093",
      "\u3057\u3099\u3083\u304B\u3099\u3044\u3082",
      "\u3057\u3084\u304F\u3057\u3087",
      "\u3057\u3083\u304F\u307B\u3046",
      "\u3057\u3083\u3051\u3093",
      "\u3057\u3083\u3053",
      "\u3057\u3083\u3055\u3099\u3044",
      "\u3057\u3083\u3057\u3093",
      "\u3057\u3083\u305B\u3093",
      "\u3057\u3083\u305D\u3046",
      "\u3057\u3083\u305F\u3044",
      "\u3057\u3083\u3061\u3087\u3046",
      "\u3057\u3083\u3063\u304D\u3093",
      "\u3057\u3099\u3083\u307E",
      "\u3057\u3083\u308A\u3093",
      "\u3057\u3083\u308C\u3044",
      "\u3057\u3099\u3086\u3046",
      "\u3057\u3099\u3085\u3046\u3057\u3087",
      "\u3057\u3085\u304F\u306F\u304F",
      "\u3057\u3099\u3085\u3057\u3093",
      "\u3057\u3085\u3063\u305B\u304D",
      "\u3057\u3085\u307F",
      "\u3057\u3085\u3089\u306F\u3099",
      "\u3057\u3099\u3085\u3093\u306F\u3099\u3093",
      "\u3057\u3087\u3046\u304B\u3044",
      "\u3057\u3087\u304F\u305F\u304F",
      "\u3057\u3087\u3063\u3051\u3093",
      "\u3057\u3087\u3068\u3099\u3046",
      "\u3057\u3087\u3082\u3064",
      "\u3057\u3089\u305B\u308B",
      "\u3057\u3089\u3078\u3099\u308B",
      "\u3057\u3093\u304B",
      "\u3057\u3093\u3053\u3046",
      "\u3057\u3099\u3093\u3057\u3099\u3083",
      "\u3057\u3093\u305B\u3044\u3057\u3099",
      "\u3057\u3093\u3061\u304F",
      "\u3057\u3093\u308A\u3093",
      "\u3059\u3042\u3051\u3099",
      "\u3059\u3042\u3057",
      "\u3059\u3042\u306A",
      "\u3059\u3099\u3042\u3093",
      "\u3059\u3044\u3048\u3044",
      "\u3059\u3044\u304B",
      "\u3059\u3044\u3068\u3046",
      "\u3059\u3099\u3044\u3075\u3099\u3093",
      "\u3059\u3044\u3088\u3046\u3072\u3099",
      "\u3059\u3046\u304B\u3099\u304F",
      "\u3059\u3046\u3057\u3099\u3064",
      "\u3059\u3046\u305B\u3093",
      "\u3059\u304A\u3068\u3099\u308A",
      "\u3059\u304D\u307E",
      "\u3059\u304F\u3046",
      "\u3059\u304F\u306A\u3044",
      "\u3059\u3051\u308B",
      "\u3059\u3053\u3099\u3044",
      "\u3059\u3053\u3057",
      "\u3059\u3099\u3055\u3093",
      "\u3059\u3059\u3099\u3057\u3044",
      "\u3059\u3059\u3080",
      "\u3059\u3059\u3081\u308B",
      "\u3059\u3063\u304B\u308A",
      "\u3059\u3099\u3063\u3057\u308A",
      "\u3059\u3099\u3063\u3068",
      "\u3059\u3066\u304D",
      "\u3059\u3066\u308B",
      "\u3059\u306D\u308B",
      "\u3059\u306E\u3053",
      "\u3059\u306F\u305F\u3099",
      "\u3059\u306F\u3099\u3089\u3057\u3044",
      "\u3059\u3099\u3072\u3087\u3046",
      "\u3059\u3099\u3075\u3099\u306C\u308C",
      "\u3059\u3075\u3099\u308A",
      "\u3059\u3075\u308C",
      "\u3059\u3078\u3099\u3066",
      "\u3059\u3078\u3099\u308B",
      "\u3059\u3099\u307B\u3046",
      "\u3059\u307B\u3099\u3093",
      "\u3059\u307E\u3044",
      "\u3059\u3081\u3057",
      "\u3059\u3082\u3046",
      "\u3059\u3084\u304D",
      "\u3059\u3089\u3059\u3089",
      "\u3059\u308B\u3081",
      "\u3059\u308C\u3061\u304B\u3099\u3046",
      "\u3059\u308D\u3063\u3068",
      "\u3059\u308F\u308B",
      "\u3059\u3093\u305B\u3099\u3093",
      "\u3059\u3093\u307B\u309A\u3046",
      "\u305B\u3042\u3075\u3099\u3089",
      "\u305B\u3044\u304B\u3064",
      "\u305B\u3044\u3051\u3099\u3093",
      "\u305B\u3044\u3057\u3099",
      "\u305B\u3044\u3088\u3046",
      "\u305B\u304A\u3046",
      "\u305B\u304B\u3044\u304B\u3093",
      "\u305B\u304D\u306B\u3093",
      "\u305B\u304D\u3080",
      "\u305B\u304D\u3086",
      "\u305B\u304D\u3089\u3093\u3046\u3093",
      "\u305B\u3051\u3093",
      "\u305B\u3053\u3046",
      "\u305B\u3059\u3057\u3099",
      "\u305B\u305F\u3044",
      "\u305B\u305F\u3051",
      "\u305B\u3063\u304B\u304F",
      "\u305B\u3063\u304D\u3083\u304F",
      "\u305B\u3099\u3063\u304F",
      "\u305B\u3063\u3051\u3093",
      "\u305B\u3063\u3053\u3064",
      "\u305B\u3063\u3055\u305F\u304F\u307E",
      "\u305B\u3064\u305D\u3099\u304F",
      "\u305B\u3064\u305F\u3099\u3093",
      "\u305B\u3064\u3066\u3099\u3093",
      "\u305B\u3063\u306F\u309A\u3093",
      "\u305B\u3064\u3072\u3099",
      "\u305B\u3064\u3075\u3099\u3093",
      "\u305B\u3064\u3081\u3044",
      "\u305B\u3064\u308A\u3064",
      "\u305B\u306A\u304B",
      "\u305B\u306E\u3072\u3099",
      "\u305B\u306F\u306F\u3099",
      "\u305B\u3072\u3099\u308D",
      "\u305B\u307B\u3099\u306D",
      "\u305B\u307E\u3044",
      "\u305B\u307E\u308B",
      "\u305B\u3081\u308B",
      "\u305B\u3082\u305F\u308C",
      "\u305B\u308A\u3075",
      "\u305B\u3099\u3093\u3042\u304F",
      "\u305B\u3093\u3044",
      "\u305B\u3093\u3048\u3044",
      "\u305B\u3093\u304B",
      "\u305B\u3093\u304D\u3087",
      "\u305B\u3093\u304F",
      "\u305B\u3093\u3051\u3099\u3093",
      "\u305B\u3099\u3093\u3053\u3099",
      "\u305B\u3093\u3055\u3044",
      "\u305B\u3093\u3057\u3085",
      "\u305B\u3093\u3059\u3044",
      "\u305B\u3093\u305B\u3044",
      "\u305B\u3093\u305D\u3099",
      "\u305B\u3093\u305F\u304F",
      "\u305B\u3093\u3061\u3087\u3046",
      "\u305B\u3093\u3066\u3044",
      "\u305B\u3093\u3068\u3046",
      "\u305B\u3093\u306C\u304D",
      "\u305B\u3093\u306D\u3093",
      "\u305B\u3093\u306F\u309A\u3044",
      "\u305B\u3099\u3093\u3075\u3099",
      "\u305B\u3099\u3093\u307B\u309A\u3046",
      "\u305B\u3093\u3080",
      "\u305B\u3093\u3081\u3093\u3057\u3099\u3087",
      "\u305B\u3093\u3082\u3093",
      "\u305B\u3093\u3084\u304F",
      "\u305B\u3093\u3086\u3046",
      "\u305B\u3093\u3088\u3046",
      "\u305B\u3099\u3093\u3089",
      "\u305B\u3099\u3093\u308A\u3083\u304F",
      "\u305B\u3093\u308C\u3044",
      "\u305B\u3093\u308D",
      "\u305D\u3042\u304F",
      "\u305D\u3044\u3068\u3051\u3099\u308B",
      "\u305D\u3044\u306D",
      "\u305D\u3046\u304B\u3099\u3093\u304D\u3087\u3046",
      "\u305D\u3046\u304D",
      "\u305D\u3046\u3053\u3099",
      "\u305D\u3046\u3057\u3093",
      "\u305D\u3046\u305F\u3099\u3093",
      "\u305D\u3046\u306A\u3093",
      "\u305D\u3046\u3072\u3099",
      "\u305D\u3046\u3081\u3093",
      "\u305D\u3046\u308A",
      "\u305D\u3048\u3082\u306E",
      "\u305D\u3048\u3093",
      "\u305D\u304B\u3099\u3044",
      "\u305D\u3051\u3099\u304D",
      "\u305D\u3053\u3046",
      "\u305D\u3053\u305D\u3053",
      "\u305D\u3055\u3099\u3044",
      "\u305D\u3057\u306A",
      "\u305D\u305B\u3044",
      "\u305D\u305B\u3093",
      "\u305D\u305D\u304F\u3099",
      "\u305D\u305F\u3099\u3066\u308B",
      "\u305D\u3064\u3046",
      "\u305D\u3064\u3048\u3093",
      "\u305D\u3063\u304B\u3093",
      "\u305D\u3064\u304D\u3099\u3087\u3046",
      "\u305D\u3063\u3051\u3064",
      "\u305D\u3063\u3053\u3046",
      "\u305D\u3063\u305B\u3093",
      "\u305D\u3063\u3068",
      "\u305D\u3068\u304B\u3099\u308F",
      "\u305D\u3068\u3064\u3099\u3089",
      "\u305D\u306A\u3048\u308B",
      "\u305D\u306A\u305F",
      "\u305D\u3075\u307B\u3099",
      "\u305D\u307B\u3099\u304F",
      "\u305D\u307B\u3099\u308D",
      "\u305D\u307E\u3064",
      "\u305D\u307E\u308B",
      "\u305D\u3080\u304F",
      "\u305D\u3080\u308A\u3048",
      "\u305D\u3081\u308B",
      "\u305D\u3082\u305D\u3082",
      "\u305D\u3088\u304B\u305B\u3099",
      "\u305D\u3089\u307E\u3081",
      "\u305D\u308D\u3046",
      "\u305D\u3093\u304B\u3044",
      "\u305D\u3093\u3051\u3044",
      "\u305D\u3093\u3055\u3099\u3044",
      "\u305D\u3093\u3057\u3064",
      "\u305D\u3093\u305D\u3099\u304F",
      "\u305D\u3093\u3061\u3087\u3046",
      "\u305D\u3099\u3093\u3072\u3099",
      "\u305D\u3099\u3093\u3075\u3099\u3093",
      "\u305D\u3093\u307F\u3093",
      "\u305F\u3042\u3044",
      "\u305F\u3044\u3044\u3093",
      "\u305F\u3044\u3046\u3093",
      "\u305F\u3044\u3048\u304D",
      "\u305F\u3044\u304A\u3046",
      "\u305F\u3099\u3044\u304B\u3099\u304F",
      "\u305F\u3044\u304D",
      "\u305F\u3044\u304F\u3099\u3046",
      "\u305F\u3044\u3051\u3093",
      "\u305F\u3044\u3053",
      "\u305F\u3044\u3055\u3099\u3044",
      "\u305F\u3099\u3044\u3057\u3099\u3087\u3046\u3075\u3099",
      "\u305F\u3099\u3044\u3059\u304D",
      "\u305F\u3044\u305B\u3064",
      "\u305F\u3044\u305D\u3046",
      "\u305F\u3099\u3044\u305F\u3044",
      "\u305F\u3044\u3061\u3087\u3046",
      "\u305F\u3044\u3066\u3044",
      "\u305F\u3099\u3044\u3068\u3099\u3053\u308D",
      "\u305F\u3044\u306A\u3044",
      "\u305F\u3044\u306D\u3064",
      "\u305F\u3044\u306E\u3046",
      "\u305F\u3044\u306F\u3093",
      "\u305F\u3099\u3044\u3072\u3087\u3046",
      "\u305F\u3044\u3075\u3046",
      "\u305F\u3044\u3078\u3093",
      "\u305F\u3044\u307B",
      "\u305F\u3044\u307E\u3064\u306F\u3099\u306A",
      "\u305F\u3044\u307F\u3093\u304F\u3099",
      "\u305F\u3044\u3080",
      "\u305F\u3044\u3081\u3093",
      "\u305F\u3044\u3084\u304D",
      "\u305F\u3044\u3088\u3046",
      "\u305F\u3044\u3089",
      "\u305F\u3044\u308A\u3087\u304F",
      "\u305F\u3044\u308B",
      "\u305F\u3044\u308F\u3093",
      "\u305F\u3046\u3048",
      "\u305F\u3048\u308B",
      "\u305F\u304A\u3059",
      "\u305F\u304A\u308B",
      "\u305F\u304A\u308C\u308B",
      "\u305F\u304B\u3044",
      "\u305F\u304B\u306D",
      "\u305F\u304D\u3072\u3099",
      "\u305F\u304F\u3055\u3093",
      "\u305F\u3053\u304F",
      "\u305F\u3053\u3084\u304D",
      "\u305F\u3055\u3044",
      "\u305F\u3057\u3055\u3099\u3093",
      "\u305F\u3099\u3057\u3099\u3083\u308C",
      "\u305F\u3059\u3051\u308B",
      "\u305F\u3059\u3099\u3055\u308F\u308B",
      "\u305F\u305D\u304B\u3099\u308C",
      "\u305F\u305F\u304B\u3046",
      "\u305F\u305F\u304F",
      "\u305F\u305F\u3099\u3057\u3044",
      "\u305F\u305F\u307F",
      "\u305F\u3061\u306F\u3099\u306A",
      "\u305F\u3099\u3063\u304B\u3044",
      "\u305F\u3099\u3063\u304D\u3083\u304F",
      "\u305F\u3099\u3063\u3053",
      "\u305F\u3099\u3063\u3057\u3085\u3064",
      "\u305F\u3099\u3063\u305F\u3044",
      "\u305F\u3066\u308B",
      "\u305F\u3068\u3048\u308B",
      "\u305F\u306A\u306F\u3099\u305F",
      "\u305F\u306B\u3093",
      "\u305F\u306C\u304D",
      "\u305F\u306E\u3057\u307F",
      "\u305F\u306F\u3064",
      "\u305F\u3075\u3099\u3093",
      "\u305F\u3078\u3099\u308B",
      "\u305F\u307B\u3099\u3046",
      "\u305F\u307E\u3053\u3099",
      "\u305F\u307E\u308B",
      "\u305F\u3099\u3080\u308B",
      "\u305F\u3081\u3044\u304D",
      "\u305F\u3081\u3059",
      "\u305F\u3081\u308B",
      "\u305F\u3082\u3064",
      "\u305F\u3084\u3059\u3044",
      "\u305F\u3088\u308B",
      "\u305F\u3089\u3059",
      "\u305F\u308A\u304D\u307B\u3093\u304B\u3099\u3093",
      "\u305F\u308A\u3087\u3046",
      "\u305F\u308A\u308B",
      "\u305F\u308B\u3068",
      "\u305F\u308C\u308B",
      "\u305F\u308C\u3093\u3068",
      "\u305F\u308D\u3063\u3068",
      "\u305F\u308F\u3080\u308C\u308B",
      "\u305F\u3099\u3093\u3042\u3064",
      "\u305F\u3093\u3044",
      "\u305F\u3093\u304A\u3093",
      "\u305F\u3093\u304B",
      "\u305F\u3093\u304D",
      "\u305F\u3093\u3051\u3093",
      "\u305F\u3093\u3053\u3099",
      "\u305F\u3093\u3055\u3093",
      "\u305F\u3093\u3057\u3099\u3087\u3046\u3072\u3099",
      "\u305F\u3099\u3093\u305B\u3044",
      "\u305F\u3093\u305D\u304F",
      "\u305F\u3093\u305F\u3044",
      "\u305F\u3099\u3093\u3061",
      "\u305F\u3093\u3066\u3044",
      "\u305F\u3093\u3068\u3046",
      "\u305F\u3099\u3093\u306A",
      "\u305F\u3093\u306B\u3093",
      "\u305F\u3099\u3093\u306D\u3064",
      "\u305F\u3093\u306E\u3046",
      "\u305F\u3093\u3072\u309A\u3093",
      "\u305F\u3099\u3093\u307B\u3099\u3046",
      "\u305F\u3093\u307E\u3064",
      "\u305F\u3093\u3081\u3044",
      "\u305F\u3099\u3093\u308C\u3064",
      "\u305F\u3099\u3093\u308D",
      "\u305F\u3099\u3093\u308F",
      "\u3061\u3042\u3044",
      "\u3061\u3042\u3093",
      "\u3061\u3044\u304D",
      "\u3061\u3044\u3055\u3044",
      "\u3061\u3048\u3093",
      "\u3061\u304B\u3044",
      "\u3061\u304B\u3089",
      "\u3061\u304D\u3085\u3046",
      "\u3061\u304D\u3093",
      "\u3061\u3051\u3044\u3059\u3099",
      "\u3061\u3051\u3093",
      "\u3061\u3053\u304F",
      "\u3061\u3055\u3044",
      "\u3061\u3057\u304D",
      "\u3061\u3057\u308A\u3087\u3046",
      "\u3061\u305B\u3044",
      "\u3061\u305D\u3046",
      "\u3061\u305F\u3044",
      "\u3061\u305F\u3093",
      "\u3061\u3061\u304A\u3084",
      "\u3061\u3064\u3057\u3099\u3087",
      "\u3061\u3066\u304D",
      "\u3061\u3066\u3093",
      "\u3061\u306C\u304D",
      "\u3061\u306C\u308A",
      "\u3061\u306E\u3046",
      "\u3061\u3072\u3087\u3046",
      "\u3061\u3078\u3044\u305B\u3093",
      "\u3061\u307B\u3046",
      "\u3061\u307E\u305F",
      "\u3061\u307F\u3064",
      "\u3061\u307F\u3068\u3099\u308D",
      "\u3061\u3081\u3044\u3068\u3099",
      "\u3061\u3083\u3093\u3053\u306A\u3078\u3099",
      "\u3061\u3085\u3046\u3044",
      "\u3061\u3086\u308A\u3087\u304F",
      "\u3061\u3087\u3046\u3057",
      "\u3061\u3087\u3055\u304F\u3051\u3093",
      "\u3061\u3089\u3057",
      "\u3061\u3089\u307F",
      "\u3061\u308A\u304B\u3099\u307F",
      "\u3061\u308A\u3087\u3046",
      "\u3061\u308B\u3068\u3099",
      "\u3061\u308F\u308F",
      "\u3061\u3093\u305F\u3044",
      "\u3061\u3093\u3082\u304F",
      "\u3064\u3044\u304B",
      "\u3064\u3044\u305F\u3061",
      "\u3064\u3046\u304B",
      "\u3064\u3046\u3057\u3099\u3087\u3046",
      "\u3064\u3046\u306F\u3093",
      "\u3064\u3046\u308F",
      "\u3064\u304B\u3046",
      "\u3064\u304B\u308C\u308B",
      "\u3064\u304F\u306D",
      "\u3064\u304F\u308B",
      "\u3064\u3051\u306D",
      "\u3064\u3051\u308B",
      "\u3064\u3053\u3099\u3046",
      "\u3064\u305F\u3048\u308B",
      "\u3064\u3064\u3099\u304F",
      "\u3064\u3064\u3057\u3099",
      "\u3064\u3064\u3080",
      "\u3064\u3068\u3081\u308B",
      "\u3064\u306A\u304B\u3099\u308B",
      "\u3064\u306A\u307F",
      "\u3064\u306D\u3064\u3099\u306D",
      "\u3064\u306E\u308B",
      "\u3064\u3075\u3099\u3059",
      "\u3064\u307E\u3089\u306A\u3044",
      "\u3064\u307E\u308B",
      "\u3064\u307F\u304D",
      "\u3064\u3081\u305F\u3044",
      "\u3064\u3082\u308A",
      "\u3064\u3082\u308B",
      "\u3064\u3088\u3044",
      "\u3064\u308B\u307B\u3099",
      "\u3064\u308B\u307F\u304F",
      "\u3064\u308F\u3082\u306E",
      "\u3064\u308F\u308A",
      "\u3066\u3042\u3057",
      "\u3066\u3042\u3066",
      "\u3066\u3042\u307F",
      "\u3066\u3044\u304A\u3093",
      "\u3066\u3044\u304B",
      "\u3066\u3044\u304D",
      "\u3066\u3044\u3051\u3044",
      "\u3066\u3044\u3053\u304F",
      "\u3066\u3044\u3055\u3064",
      "\u3066\u3044\u3057",
      "\u3066\u3044\u305B\u3044",
      "\u3066\u3044\u305F\u3044",
      "\u3066\u3044\u3068\u3099",
      "\u3066\u3044\u306D\u3044",
      "\u3066\u3044\u3072\u3087\u3046",
      "\u3066\u3044\u3078\u3093",
      "\u3066\u3044\u307B\u3099\u3046",
      "\u3066\u3046\u3061",
      "\u3066\u304A\u304F\u308C",
      "\u3066\u304D\u3068\u3046",
      "\u3066\u304F\u3072\u3099",
      "\u3066\u3099\u3053\u307B\u3099\u3053",
      "\u3066\u3055\u304D\u3099\u3087\u3046",
      "\u3066\u3055\u3051\u3099",
      "\u3066\u3059\u308A",
      "\u3066\u305D\u3046",
      "\u3066\u3061\u304B\u3099\u3044",
      "\u3066\u3061\u3087\u3046",
      "\u3066\u3064\u304B\u3099\u304F",
      "\u3066\u3064\u3064\u3099\u304D",
      "\u3066\u3099\u3063\u306F\u309A",
      "\u3066\u3064\u307B\u3099\u3046",
      "\u3066\u3064\u3084",
      "\u3066\u3099\u306C\u304B\u3048",
      "\u3066\u306C\u304D",
      "\u3066\u306C\u304F\u3099\u3044",
      "\u3066\u306E\u3072\u3089",
      "\u3066\u306F\u3044",
      "\u3066\u3075\u3099\u304F\u308D",
      "\u3066\u3075\u305F\u3099",
      "\u3066\u307B\u3068\u3099\u304D",
      "\u3066\u307B\u3093",
      "\u3066\u307E\u3048",
      "\u3066\u307E\u304D\u3059\u3099\u3057",
      "\u3066\u307F\u3057\u3099\u304B",
      "\u3066\u307F\u3084\u3051\u3099",
      "\u3066\u3089\u3059",
      "\u3066\u308C\u3072\u3099",
      "\u3066\u308F\u3051",
      "\u3066\u308F\u305F\u3057",
      "\u3066\u3099\u3093\u3042\u3064",
      "\u3066\u3093\u3044\u3093",
      "\u3066\u3093\u304B\u3044",
      "\u3066\u3093\u304D",
      "\u3066\u3093\u304F\u3099",
      "\u3066\u3093\u3051\u3093",
      "\u3066\u3093\u3053\u3099\u304F",
      "\u3066\u3093\u3055\u3044",
      "\u3066\u3093\u3057",
      "\u3066\u3093\u3059\u3046",
      "\u3066\u3099\u3093\u3061",
      "\u3066\u3093\u3066\u304D",
      "\u3066\u3093\u3068\u3046",
      "\u3066\u3093\u306A\u3044",
      "\u3066\u3093\u3075\u309A\u3089",
      "\u3066\u3093\u307B\u3099\u3046\u305F\u3099\u3044",
      "\u3066\u3093\u3081\u3064",
      "\u3066\u3093\u3089\u3093\u304B\u3044",
      "\u3066\u3099\u3093\u308A\u3087\u304F",
      "\u3066\u3099\u3093\u308F",
      "\u3068\u3099\u3042\u3044",
      "\u3068\u3044\u308C",
      "\u3068\u3099\u3046\u304B\u3093",
      "\u3068\u3046\u304D\u3085\u3046",
      "\u3068\u3099\u3046\u304F\u3099",
      "\u3068\u3046\u3057",
      "\u3068\u3046\u3080\u304D\u3099",
      "\u3068\u304A\u3044",
      "\u3068\u304A\u304B",
      "\u3068\u304A\u304F",
      "\u3068\u304A\u3059",
      "\u3068\u304A\u308B",
      "\u3068\u304B\u3044",
      "\u3068\u304B\u3059",
      "\u3068\u304D\u304A\u308A",
      "\u3068\u304D\u3068\u3099\u304D",
      "\u3068\u304F\u3044",
      "\u3068\u304F\u3057\u3085\u3046",
      "\u3068\u304F\u3066\u3093",
      "\u3068\u304F\u306B",
      "\u3068\u304F\u3078\u3099\u3064",
      "\u3068\u3051\u3044",
      "\u3068\u3051\u308B",
      "\u3068\u3053\u3084",
      "\u3068\u3055\u304B",
      "\u3068\u3057\u3087\u304B\u3093",
      "\u3068\u305D\u3046",
      "\u3068\u305F\u3093",
      "\u3068\u3061\u3085\u3046",
      "\u3068\u3063\u304D\u3085\u3046",
      "\u3068\u3063\u304F\u3093",
      "\u3068\u3064\u305B\u3099\u3093",
      "\u3068\u3064\u306B\u3085\u3046",
      "\u3068\u3068\u3099\u3051\u308B",
      "\u3068\u3068\u306E\u3048\u308B",
      "\u3068\u306A\u3044",
      "\u3068\u306A\u3048\u308B",
      "\u3068\u306A\u308A",
      "\u3068\u306E\u3055\u307E",
      "\u3068\u306F\u3099\u3059",
      "\u3068\u3099\u3075\u3099\u304B\u3099\u308F",
      "\u3068\u307B\u3046",
      "\u3068\u307E\u308B",
      "\u3068\u3081\u308B",
      "\u3068\u3082\u305F\u3099\u3061",
      "\u3068\u3082\u308B",
      "\u3068\u3099\u3088\u3046\u3072\u3099",
      "\u3068\u3089\u3048\u308B",
      "\u3068\u3093\u304B\u3064",
      "\u3068\u3099\u3093\u3075\u3099\u308A",
      "\u306A\u3044\u304B\u304F",
      "\u306A\u3044\u3053\u3046",
      "\u306A\u3044\u3057\u3087",
      "\u306A\u3044\u3059",
      "\u306A\u3044\u305B\u3093",
      "\u306A\u3044\u305D\u3046",
      "\u306A\u304A\u3059",
      "\u306A\u304B\u3099\u3044",
      "\u306A\u304F\u3059",
      "\u306A\u3051\u3099\u308B",
      "\u306A\u3053\u3046\u3068\u3099",
      "\u306A\u3055\u3051",
      "\u306A\u305F\u3066\u3099\u3053\u3053",
      "\u306A\u3063\u3068\u3046",
      "\u306A\u3064\u3084\u3059\u307F",
      "\u306A\u306A\u304A\u3057",
      "\u306A\u306B\u3053\u3099\u3068",
      "\u306A\u306B\u3082\u306E",
      "\u306A\u306B\u308F",
      "\u306A\u306E\u304B",
      "\u306A\u3075\u305F\u3099",
      "\u306A\u307E\u3044\u304D",
      "\u306A\u307E\u3048",
      "\u306A\u307E\u307F",
      "\u306A\u307F\u305F\u3099",
      "\u306A\u3081\u3089\u304B",
      "\u306A\u3081\u308B",
      "\u306A\u3084\u3080",
      "\u306A\u3089\u3046",
      "\u306A\u3089\u3072\u3099",
      "\u306A\u3089\u3075\u3099",
      "\u306A\u308C\u308B",
      "\u306A\u308F\u3068\u3072\u3099",
      "\u306A\u308F\u306F\u3099\u308A",
      "\u306B\u3042\u3046",
      "\u306B\u3044\u304B\u3099\u305F",
      "\u306B\u3046\u3051",
      "\u306B\u304A\u3044",
      "\u306B\u304B\u3044",
      "\u306B\u304B\u3099\u3066",
      "\u306B\u304D\u3072\u3099",
      "\u306B\u304F\u3057\u307F",
      "\u306B\u304F\u307E\u3093",
      "\u306B\u3051\u3099\u308B",
      "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
      "\u306B\u3057\u304D",
      "\u306B\u305B\u3082\u306E",
      "\u306B\u3061\u3057\u3099\u3087\u3046",
      "\u306B\u3061\u3088\u3046\u3072\u3099",
      "\u306B\u3063\u304B",
      "\u306B\u3063\u304D",
      "\u306B\u3063\u3051\u3044",
      "\u306B\u3063\u3053\u3046",
      "\u306B\u3063\u3055\u3093",
      "\u306B\u3063\u3057\u3087\u304F",
      "\u306B\u3063\u3059\u3046",
      "\u306B\u3063\u305B\u304D",
      "\u306B\u3063\u3066\u3044",
      "\u306B\u306A\u3046",
      "\u306B\u307B\u3093",
      "\u306B\u307E\u3081",
      "\u306B\u3082\u3064",
      "\u306B\u3084\u308A",
      "\u306B\u3085\u3046\u3044\u3093",
      "\u306B\u308A\u3093\u3057\u3083",
      "\u306B\u308F\u3068\u308A",
      "\u306B\u3093\u3044",
      "\u306B\u3093\u304B",
      "\u306B\u3093\u304D",
      "\u306B\u3093\u3051\u3099\u3093",
      "\u306B\u3093\u3057\u304D",
      "\u306B\u3093\u3059\u3099\u3046",
      "\u306B\u3093\u305D\u3046",
      "\u306B\u3093\u305F\u3044",
      "\u306B\u3093\u3061",
      "\u306B\u3093\u3066\u3044",
      "\u306B\u3093\u306B\u304F",
      "\u306B\u3093\u3075\u309A",
      "\u306B\u3093\u307E\u308A",
      "\u306B\u3093\u3080",
      "\u306B\u3093\u3081\u3044",
      "\u306B\u3093\u3088\u3046",
      "\u306C\u3044\u304F\u304D\u3099",
      "\u306C\u304B\u3059",
      "\u306C\u304F\u3099\u3044\u3068\u308B",
      "\u306C\u304F\u3099\u3046",
      "\u306C\u304F\u3082\u308A",
      "\u306C\u3059\u3080",
      "\u306C\u307E\u3048\u3072\u3099",
      "\u306C\u3081\u308A",
      "\u306C\u3089\u3059",
      "\u306C\u3093\u3061\u3083\u304F",
      "\u306D\u3042\u3051\u3099",
      "\u306D\u3044\u304D",
      "\u306D\u3044\u308B",
      "\u306D\u3044\u308D",
      "\u306D\u304F\u3099\u305B",
      "\u306D\u304F\u305F\u3044",
      "\u306D\u304F\u3089",
      "\u306D\u3053\u305B\u3099",
      "\u306D\u3053\u3080",
      "\u306D\u3055\u3051\u3099",
      "\u306D\u3059\u3053\u3099\u3059",
      "\u306D\u305D\u3078\u3099\u308B",
      "\u306D\u305F\u3099\u3093",
      "\u306D\u3064\u3044",
      "\u306D\u3063\u3057\u3093",
      "\u306D\u3064\u305D\u3099\u3046",
      "\u306D\u3063\u305F\u3044\u304D\u3099\u3087",
      "\u306D\u3075\u3099\u305D\u304F",
      "\u306D\u3075\u305F\u3099",
      "\u306D\u307B\u3099\u3046",
      "\u306D\u307B\u308A\u306F\u307B\u308A",
      "\u306D\u307E\u304D",
      "\u306D\u307E\u308F\u3057",
      "\u306D\u307F\u307F",
      "\u306D\u3080\u3044",
      "\u306D\u3080\u305F\u3044",
      "\u306D\u3082\u3068",
      "\u306D\u3089\u3046",
      "\u306D\u308F\u3055\u3099",
      "\u306D\u3093\u3044\u308A",
      "\u306D\u3093\u304A\u3057",
      "\u306D\u3093\u304B\u3093",
      "\u306D\u3093\u304D\u3093",
      "\u306D\u3093\u304F\u3099",
      "\u306D\u3093\u3055\u3099",
      "\u306D\u3093\u3057",
      "\u306D\u3093\u3061\u3083\u304F",
      "\u306D\u3093\u3068\u3099",
      "\u306D\u3093\u3072\u309A",
      "\u306D\u3093\u3075\u3099\u3064",
      "\u306D\u3093\u307E\u3064",
      "\u306D\u3093\u308A\u3087\u3046",
      "\u306D\u3093\u308C\u3044",
      "\u306E\u3044\u3059\u3099",
      "\u306E\u304A\u3064\u3099\u307E",
      "\u306E\u304B\u3099\u3059",
      "\u306E\u304D\u306A\u307F",
      "\u306E\u3053\u304D\u3099\u308A",
      "\u306E\u3053\u3059",
      "\u306E\u3053\u308B",
      "\u306E\u305B\u308B",
      "\u306E\u305D\u3099\u304F",
      "\u306E\u305D\u3099\u3080",
      "\u306E\u305F\u307E\u3046",
      "\u306E\u3061\u307B\u3068\u3099",
      "\u306E\u3063\u304F",
      "\u306E\u306F\u3099\u3059",
      "\u306E\u306F\u3089",
      "\u306E\u3078\u3099\u308B",
      "\u306E\u307B\u3099\u308B",
      "\u306E\u307F\u3082\u306E",
      "\u306E\u3084\u307E",
      "\u306E\u3089\u3044\u306C",
      "\u306E\u3089\u306D\u3053",
      "\u306E\u308A\u3082\u306E",
      "\u306E\u308A\u3086\u304D",
      "\u306E\u308C\u3093",
      "\u306E\u3093\u304D",
      "\u306F\u3099\u3042\u3044",
      "\u306F\u3042\u304F",
      "\u306F\u3099\u3042\u3055\u3093",
      "\u306F\u3099\u3044\u304B",
      "\u306F\u3099\u3044\u304F",
      "\u306F\u3044\u3051\u3093",
      "\u306F\u3044\u3053\u3099",
      "\u306F\u3044\u3057\u3093",
      "\u306F\u3044\u3059\u3044",
      "\u306F\u3044\u305B\u3093",
      "\u306F\u3044\u305D\u3046",
      "\u306F\u3044\u3061",
      "\u306F\u3099\u3044\u306F\u3099\u3044",
      "\u306F\u3044\u308C\u3064",
      "\u306F\u3048\u308B",
      "\u306F\u304A\u308B",
      "\u306F\u304B\u3044",
      "\u306F\u3099\u304B\u308A",
      "\u306F\u304B\u308B",
      "\u306F\u304F\u3057\u3085",
      "\u306F\u3051\u3093",
      "\u306F\u3053\u3075\u3099",
      "\u306F\u3055\u307F",
      "\u306F\u3055\u3093",
      "\u306F\u3057\u3053\u3099",
      "\u306F\u3099\u3057\u3087",
      "\u306F\u3057\u308B",
      "\u306F\u305B\u308B",
      "\u306F\u309A\u305D\u3053\u3093",
      "\u306F\u305D\u3093",
      "\u306F\u305F\u3093",
      "\u306F\u3061\u307F\u3064",
      "\u306F\u3064\u304A\u3093",
      "\u306F\u3063\u304B\u304F",
      "\u306F\u3064\u3099\u304D",
      "\u306F\u3063\u304D\u308A",
      "\u306F\u3063\u304F\u3064",
      "\u306F\u3063\u3051\u3093",
      "\u306F\u3063\u3053\u3046",
      "\u306F\u3063\u3055\u3093",
      "\u306F\u3063\u3057\u3093",
      "\u306F\u3063\u305F\u3064",
      "\u306F\u3063\u3061\u3085\u3046",
      "\u306F\u3063\u3066\u3093",
      "\u306F\u3063\u3072\u309A\u3087\u3046",
      "\u306F\u3063\u307B\u309A\u3046",
      "\u306F\u306A\u3059",
      "\u306F\u306A\u3072\u3099",
      "\u306F\u306B\u304B\u3080",
      "\u306F\u3075\u3099\u3089\u3057",
      "\u306F\u307F\u304B\u3099\u304D",
      "\u306F\u3080\u304B\u3046",
      "\u306F\u3081\u3064",
      "\u306F\u3084\u3044",
      "\u306F\u3084\u3057",
      "\u306F\u3089\u3046",
      "\u306F\u308D\u3046\u3043\u3093",
      "\u306F\u308F\u3044",
      "\u306F\u3093\u3044",
      "\u306F\u3093\u3048\u3044",
      "\u306F\u3093\u304A\u3093",
      "\u306F\u3093\u304B\u304F",
      "\u306F\u3093\u304D\u3087\u3046",
      "\u306F\u3099\u3093\u304F\u3099\u307F",
      "\u306F\u3093\u3053",
      "\u306F\u3093\u3057\u3083",
      "\u306F\u3093\u3059\u3046",
      "\u306F\u3093\u305F\u3099\u3093",
      "\u306F\u309A\u3093\u3061",
      "\u306F\u309A\u3093\u3064",
      "\u306F\u3093\u3066\u3044",
      "\u306F\u3093\u3068\u3057",
      "\u306F\u3093\u306E\u3046",
      "\u306F\u3093\u306F\u309A",
      "\u306F\u3093\u3075\u3099\u3093",
      "\u306F\u3093\u3078\u309A\u3093",
      "\u306F\u3093\u307B\u3099\u3046\u304D",
      "\u306F\u3093\u3081\u3044",
      "\u306F\u3093\u3089\u3093",
      "\u306F\u3093\u308D\u3093",
      "\u3072\u3044\u304D",
      "\u3072\u3046\u3093",
      "\u3072\u3048\u308B",
      "\u3072\u304B\u304F",
      "\u3072\u304B\u308A",
      "\u3072\u304B\u308B",
      "\u3072\u304B\u3093",
      "\u3072\u304F\u3044",
      "\u3072\u3051\u3064",
      "\u3072\u3053\u3046\u304D",
      "\u3072\u3053\u304F",
      "\u3072\u3055\u3044",
      "\u3072\u3055\u3057\u3075\u3099\u308A",
      "\u3072\u3055\u3093",
      "\u3072\u3099\u3057\u3099\u3085\u3064\u304B\u3093",
      "\u3072\u3057\u3087",
      "\u3072\u305D\u304B",
      "\u3072\u305D\u3080",
      "\u3072\u305F\u3080\u304D",
      "\u3072\u305F\u3099\u308A",
      "\u3072\u305F\u308B",
      "\u3072\u3064\u304D\u3099",
      "\u3072\u3063\u3053\u3057",
      "\u3072\u3063\u3057",
      "\u3072\u3064\u3057\u3099\u3085\u3072\u3093",
      "\u3072\u3063\u3059",
      "\u3072\u3064\u305B\u3099\u3093",
      "\u3072\u309A\u3063\u305F\u308A",
      "\u3072\u309A\u3063\u3061\u308A",
      "\u3072\u3064\u3088\u3046",
      "\u3072\u3066\u3044",
      "\u3072\u3068\u3053\u3099\u307F",
      "\u3072\u306A\u307E\u3064\u308A",
      "\u3072\u306A\u3093",
      "\u3072\u306D\u308B",
      "\u3072\u306F\u3093",
      "\u3072\u3072\u3099\u304F",
      "\u3072\u3072\u3087\u3046",
      "\u3072\u307B\u3046",
      "\u3072\u307E\u308F\u308A",
      "\u3072\u307E\u3093",
      "\u3072\u307F\u3064",
      "\u3072\u3081\u3044",
      "\u3072\u3081\u3057\u3099\u3057",
      "\u3072\u3084\u3051",
      "\u3072\u3084\u3059",
      "\u3072\u3088\u3046",
      "\u3072\u3099\u3087\u3046\u304D",
      "\u3072\u3089\u304B\u3099\u306A",
      "\u3072\u3089\u304F",
      "\u3072\u308A\u3064",
      "\u3072\u308A\u3087\u3046",
      "\u3072\u308B\u307E",
      "\u3072\u308B\u3084\u3059\u307F",
      "\u3072\u308C\u3044",
      "\u3072\u308D\u3044",
      "\u3072\u308D\u3046",
      "\u3072\u308D\u304D",
      "\u3072\u308D\u3086\u304D",
      "\u3072\u3093\u304B\u304F",
      "\u3072\u3093\u3051\u3064",
      "\u3072\u3093\u3053\u3093",
      "\u3072\u3093\u3057\u3085",
      "\u3072\u3093\u305D\u3046",
      "\u3072\u309A\u3093\u3061",
      "\u3072\u3093\u306F\u309A\u3093",
      "\u3072\u3099\u3093\u307B\u3099\u3046",
      "\u3075\u3042\u3093",
      "\u3075\u3044\u3046\u3061",
      "\u3075\u3046\u3051\u3044",
      "\u3075\u3046\u305B\u3093",
      "\u3075\u309A\u3046\u305F\u308D\u3046",
      "\u3075\u3046\u3068\u3046",
      "\u3075\u3046\u3075",
      "\u3075\u3048\u308B",
      "\u3075\u304A\u3093",
      "\u3075\u304B\u3044",
      "\u3075\u304D\u3093",
      "\u3075\u304F\u3055\u3099\u3064",
      "\u3075\u304F\u3075\u3099\u304F\u308D",
      "\u3075\u3053\u3046",
      "\u3075\u3055\u3044",
      "\u3075\u3057\u304D\u3099",
      "\u3075\u3057\u3099\u307F",
      "\u3075\u3059\u307E",
      "\u3075\u305B\u3044",
      "\u3075\u305B\u304F\u3099",
      "\u3075\u305D\u304F",
      "\u3075\u3099\u305F\u306B\u304F",
      "\u3075\u305F\u3093",
      "\u3075\u3061\u3087\u3046",
      "\u3075\u3064\u3046",
      "\u3075\u3064\u304B",
      "\u3075\u3063\u304B\u3064",
      "\u3075\u3063\u304D",
      "\u3075\u3063\u3053\u304F",
      "\u3075\u3099\u3068\u3099\u3046",
      "\u3075\u3068\u308B",
      "\u3075\u3068\u3093",
      "\u3075\u306E\u3046",
      "\u3075\u306F\u3044",
      "\u3075\u3072\u3087\u3046",
      "\u3075\u3078\u3093",
      "\u3075\u307E\u3093",
      "\u3075\u307F\u3093",
      "\u3075\u3081\u3064",
      "\u3075\u3081\u3093",
      "\u3075\u3088\u3046",
      "\u3075\u308A\u3053",
      "\u3075\u308A\u308B",
      "\u3075\u308B\u3044",
      "\u3075\u3093\u3044\u304D",
      "\u3075\u3099\u3093\u304B\u3099\u304F",
      "\u3075\u3099\u3093\u304F\u3099",
      "\u3075\u3093\u3057\u3064",
      "\u3075\u3099\u3093\u305B\u304D",
      "\u3075\u3093\u305D\u3046",
      "\u3075\u3099\u3093\u307B\u309A\u3046",
      "\u3078\u3044\u3042\u3093",
      "\u3078\u3044\u304A\u3093",
      "\u3078\u3044\u304B\u3099\u3044",
      "\u3078\u3044\u304D",
      "\u3078\u3044\u3051\u3099\u3093",
      "\u3078\u3044\u3053\u3046",
      "\u3078\u3044\u3055",
      "\u3078\u3044\u3057\u3083",
      "\u3078\u3044\u305B\u3064",
      "\u3078\u3044\u305D",
      "\u3078\u3044\u305F\u304F",
      "\u3078\u3044\u3066\u3093",
      "\u3078\u3044\u306D\u3064",
      "\u3078\u3044\u308F",
      "\u3078\u304D\u304B\u3099",
      "\u3078\u3053\u3080",
      "\u3078\u3099\u306B\u3044\u308D",
      "\u3078\u3099\u306B\u3057\u3087\u3046\u304B\u3099",
      "\u3078\u3089\u3059",
      "\u3078\u3093\u304B\u3093",
      "\u3078\u3099\u3093\u304D\u3087\u3046",
      "\u3078\u3099\u3093\u3053\u3099\u3057",
      "\u3078\u3093\u3055\u3044",
      "\u3078\u3093\u305F\u3044",
      "\u3078\u3099\u3093\u308A",
      "\u307B\u3042\u3093",
      "\u307B\u3044\u304F",
      "\u307B\u3099\u3046\u304D\u3099\u3087",
      "\u307B\u3046\u3053\u304F",
      "\u307B\u3046\u305D\u3046",
      "\u307B\u3046\u307B\u3046",
      "\u307B\u3046\u3082\u3093",
      "\u307B\u3046\u308A\u3064",
      "\u307B\u3048\u308B",
      "\u307B\u304A\u3093",
      "\u307B\u304B\u3093",
      "\u307B\u304D\u3087\u3046",
      "\u307B\u3099\u304D\u3093",
      "\u307B\u304F\u308D",
      "\u307B\u3051\u3064",
      "\u307B\u3051\u3093",
      "\u307B\u3053\u3046",
      "\u307B\u3053\u308B",
      "\u307B\u3057\u3044",
      "\u307B\u3057\u3064",
      "\u307B\u3057\u3085",
      "\u307B\u3057\u3087\u3046",
      "\u307B\u305B\u3044",
      "\u307B\u305D\u3044",
      "\u307B\u305D\u304F",
      "\u307B\u305F\u3066",
      "\u307B\u305F\u308B",
      "\u307B\u309A\u3061\u3075\u3099\u304F\u308D",
      "\u307B\u3063\u304D\u3087\u304F",
      "\u307B\u3063\u3055",
      "\u307B\u3063\u305F\u3093",
      "\u307B\u3068\u3093\u3068\u3099",
      "\u307B\u3081\u308B",
      "\u307B\u3093\u3044",
      "\u307B\u3093\u304D",
      "\u307B\u3093\u3051",
      "\u307B\u3093\u3057\u3064",
      "\u307B\u3093\u3084\u304F",
      "\u307E\u3044\u306B\u3061",
      "\u307E\u304B\u3044",
      "\u307E\u304B\u305B\u308B",
      "\u307E\u304B\u3099\u308B",
      "\u307E\u3051\u308B",
      "\u307E\u3053\u3068",
      "\u307E\u3055\u3064",
      "\u307E\u3057\u3099\u3081",
      "\u307E\u3059\u304F",
      "\u307E\u305B\u3099\u308B",
      "\u307E\u3064\u308A",
      "\u307E\u3068\u3081",
      "\u307E\u306A\u3075\u3099",
      "\u307E\u306C\u3051",
      "\u307E\u306D\u304F",
      "\u307E\u307B\u3046",
      "\u307E\u3082\u308B",
      "\u307E\u3086\u3051\u3099",
      "\u307E\u3088\u3046",
      "\u307E\u308D\u3084\u304B",
      "\u307E\u308F\u3059",
      "\u307E\u308F\u308A",
      "\u307E\u308F\u308B",
      "\u307E\u3093\u304B\u3099",
      "\u307E\u3093\u304D\u3064",
      "\u307E\u3093\u305D\u3099\u304F",
      "\u307E\u3093\u306A\u304B",
      "\u307F\u3044\u3089",
      "\u307F\u3046\u3061",
      "\u307F\u3048\u308B",
      "\u307F\u304B\u3099\u304F",
      "\u307F\u304B\u305F",
      "\u307F\u304B\u3093",
      "\u307F\u3051\u3093",
      "\u307F\u3053\u3093",
      "\u307F\u3057\u3099\u304B\u3044",
      "\u307F\u3059\u3044",
      "\u307F\u3059\u3048\u308B",
      "\u307F\u305B\u308B",
      "\u307F\u3063\u304B",
      "\u307F\u3064\u304B\u308B",
      "\u307F\u3064\u3051\u308B",
      "\u307F\u3066\u3044",
      "\u307F\u3068\u3081\u308B",
      "\u307F\u306A\u3068",
      "\u307F\u306A\u307F\u304B\u3055\u3044",
      "\u307F\u306D\u3089\u308B",
      "\u307F\u306E\u3046",
      "\u307F\u306E\u304B\u3099\u3059",
      "\u307F\u307B\u3093",
      "\u307F\u3082\u3068",
      "\u307F\u3084\u3051\u3099",
      "\u307F\u3089\u3044",
      "\u307F\u308A\u3087\u304F",
      "\u307F\u308F\u304F",
      "\u307F\u3093\u304B",
      "\u307F\u3093\u305D\u3099\u304F",
      "\u3080\u3044\u304B",
      "\u3080\u3048\u304D",
      "\u3080\u3048\u3093",
      "\u3080\u304B\u3044",
      "\u3080\u304B\u3046",
      "\u3080\u304B\u3048",
      "\u3080\u304B\u3057",
      "\u3080\u304D\u3099\u3061\u3083",
      "\u3080\u3051\u308B",
      "\u3080\u3051\u3099\u3093",
      "\u3080\u3055\u307B\u3099\u308B",
      "\u3080\u3057\u3042\u3064\u3044",
      "\u3080\u3057\u306F\u3099",
      "\u3080\u3057\u3099\u3085\u3093",
      "\u3080\u3057\u308D",
      "\u3080\u3059\u3046",
      "\u3080\u3059\u3053",
      "\u3080\u3059\u3075\u3099",
      "\u3080\u3059\u3081",
      "\u3080\u305B\u308B",
      "\u3080\u305B\u3093",
      "\u3080\u3061\u3085\u3046",
      "\u3080\u306A\u3057\u3044",
      "\u3080\u306E\u3046",
      "\u3080\u3084\u307F",
      "\u3080\u3088\u3046",
      "\u3080\u3089\u3055\u304D",
      "\u3080\u308A\u3087\u3046",
      "\u3080\u308D\u3093",
      "\u3081\u3044\u3042\u3093",
      "\u3081\u3044\u3046\u3093",
      "\u3081\u3044\u3048\u3093",
      "\u3081\u3044\u304B\u304F",
      "\u3081\u3044\u304D\u3087\u304F",
      "\u3081\u3044\u3055\u3044",
      "\u3081\u3044\u3057",
      "\u3081\u3044\u305D\u3046",
      "\u3081\u3044\u3075\u3099\u3064",
      "\u3081\u3044\u308C\u3044",
      "\u3081\u3044\u308F\u304F",
      "\u3081\u304F\u3099\u307E\u308C\u308B",
      "\u3081\u3055\u3099\u3059",
      "\u3081\u3057\u305F",
      "\u3081\u3059\u3099\u3089\u3057\u3044",
      "\u3081\u305F\u3099\u3064",
      "\u3081\u307E\u3044",
      "\u3081\u3084\u3059",
      "\u3081\u3093\u304D\u3087",
      "\u3081\u3093\u305B\u304D",
      "\u3081\u3093\u3068\u3099\u3046",
      "\u3082\u3046\u3057\u3042\u3051\u3099\u308B",
      "\u3082\u3046\u3068\u3099\u3046\u3051\u3093",
      "\u3082\u3048\u308B",
      "\u3082\u304F\u3057",
      "\u3082\u304F\u3066\u304D",
      "\u3082\u304F\u3088\u3046\u3072\u3099",
      "\u3082\u3061\u308D\u3093",
      "\u3082\u3068\u3099\u308B",
      "\u3082\u3089\u3046",
      "\u3082\u3093\u304F",
      "\u3082\u3093\u305F\u3099\u3044",
      "\u3084\u304A\u3084",
      "\u3084\u3051\u308B",
      "\u3084\u3055\u3044",
      "\u3084\u3055\u3057\u3044",
      "\u3084\u3059\u3044",
      "\u3084\u3059\u305F\u308D\u3046",
      "\u3084\u3059\u307F",
      "\u3084\u305B\u308B",
      "\u3084\u305D\u3046",
      "\u3084\u305F\u3044",
      "\u3084\u3061\u3093",
      "\u3084\u3063\u3068",
      "\u3084\u3063\u306F\u309A\u308A",
      "\u3084\u3075\u3099\u308B",
      "\u3084\u3081\u308B",
      "\u3084\u3084\u3053\u3057\u3044",
      "\u3084\u3088\u3044",
      "\u3084\u308F\u3089\u304B\u3044",
      "\u3086\u3046\u304D",
      "\u3086\u3046\u3072\u3099\u3093\u304D\u3087\u304F",
      "\u3086\u3046\u3078\u3099",
      "\u3086\u3046\u3081\u3044",
      "\u3086\u3051\u3064",
      "\u3086\u3057\u3085\u3064",
      "\u3086\u305B\u3093",
      "\u3086\u305D\u3046",
      "\u3086\u305F\u304B",
      "\u3086\u3061\u3083\u304F",
      "\u3086\u3066\u3099\u308B",
      "\u3086\u306B\u3085\u3046",
      "\u3086\u3072\u3099\u308F",
      "\u3086\u3089\u3044",
      "\u3086\u308C\u308B",
      "\u3088\u3046\u3044",
      "\u3088\u3046\u304B",
      "\u3088\u3046\u304D\u3085\u3046",
      "\u3088\u3046\u3057\u3099",
      "\u3088\u3046\u3059",
      "\u3088\u3046\u3061\u3048\u3093",
      "\u3088\u304B\u305B\u3099",
      "\u3088\u304B\u3093",
      "\u3088\u304D\u3093",
      "\u3088\u304F\u305B\u3044",
      "\u3088\u304F\u307B\u3099\u3046",
      "\u3088\u3051\u3044",
      "\u3088\u3053\u3099\u308C\u308B",
      "\u3088\u3055\u3093",
      "\u3088\u3057\u3085\u3046",
      "\u3088\u305D\u3046",
      "\u3088\u305D\u304F",
      "\u3088\u3063\u304B",
      "\u3088\u3066\u3044",
      "\u3088\u3068\u3099\u304B\u3099\u308F\u304F",
      "\u3088\u306D\u3064",
      "\u3088\u3084\u304F",
      "\u3088\u3086\u3046",
      "\u3088\u308D\u3053\u3075\u3099",
      "\u3088\u308D\u3057\u3044",
      "\u3089\u3044\u3046",
      "\u3089\u304F\u304B\u3099\u304D",
      "\u3089\u304F\u3053\u3099",
      "\u3089\u304F\u3055\u3064",
      "\u3089\u304F\u305F\u3099",
      "\u3089\u3057\u3093\u306F\u3099\u3093",
      "\u3089\u305B\u3093",
      "\u3089\u305D\u3099\u304F",
      "\u3089\u305F\u3044",
      "\u3089\u3063\u304B",
      "\u3089\u308C\u3064",
      "\u308A\u3048\u304D",
      "\u308A\u304B\u3044",
      "\u308A\u304D\u3055\u304F",
      "\u308A\u304D\u305B\u3064",
      "\u308A\u304F\u304F\u3099\u3093",
      "\u308A\u304F\u3064",
      "\u308A\u3051\u3093",
      "\u308A\u3053\u3046",
      "\u308A\u305B\u3044",
      "\u308A\u305D\u3046",
      "\u308A\u305D\u304F",
      "\u308A\u3066\u3093",
      "\u308A\u306D\u3093",
      "\u308A\u3086\u3046",
      "\u308A\u3085\u3046\u304B\u3099\u304F",
      "\u308A\u3088\u3046",
      "\u308A\u3087\u3046\u308A",
      "\u308A\u3087\u304B\u3093",
      "\u308A\u3087\u304F\u3061\u3083",
      "\u308A\u3087\u3053\u3046",
      "\u308A\u308A\u304F",
      "\u308A\u308C\u304D",
      "\u308A\u308D\u3093",
      "\u308A\u3093\u3053\u3099",
      "\u308B\u3044\u3051\u3044",
      "\u308B\u3044\u3055\u3044",
      "\u308B\u3044\u3057\u3099",
      "\u308B\u3044\u305B\u304D",
      "\u308B\u3059\u306F\u3099\u3093",
      "\u308B\u308A\u304B\u3099\u308F\u3089",
      "\u308C\u3044\u304B\u3093",
      "\u308C\u3044\u304D\u3099",
      "\u308C\u3044\u305B\u3044",
      "\u308C\u3044\u305D\u3099\u3046\u3053",
      "\u308C\u3044\u3068\u3046",
      "\u308C\u3044\u307B\u3099\u3046",
      "\u308C\u304D\u3057",
      "\u308C\u304D\u305F\u3099\u3044",
      "\u308C\u3093\u3042\u3044",
      "\u308C\u3093\u3051\u3044",
      "\u308C\u3093\u3053\u3093",
      "\u308C\u3093\u3055\u3044",
      "\u308C\u3093\u3057\u3085\u3046",
      "\u308C\u3093\u305D\u3099\u304F",
      "\u308C\u3093\u3089\u304F",
      "\u308D\u3046\u304B",
      "\u308D\u3046\u3053\u3099",
      "\u308D\u3046\u3057\u3099\u3093",
      "\u308D\u3046\u305D\u304F",
      "\u308D\u304F\u304B\u3099",
      "\u308D\u3053\u3064",
      "\u308D\u3057\u3099\u3046\u3089",
      "\u308D\u3057\u3085\u3064",
      "\u308D\u305B\u3093",
      "\u308D\u3066\u3093",
      "\u308D\u3081\u3093",
      "\u308D\u308C\u3064",
      "\u308D\u3093\u304D\u3099",
      "\u308D\u3093\u306F\u309A",
      "\u308D\u3093\u3075\u3099\u3093",
      "\u308D\u3093\u308A",
      "\u308F\u304B\u3059",
      "\u308F\u304B\u3081",
      "\u308F\u304B\u3084\u307E",
      "\u308F\u304B\u308C\u308B",
      "\u308F\u3057\u3064",
      "\u308F\u3057\u3099\u307E\u3057",
      "\u308F\u3059\u308C\u3082\u306E",
      "\u308F\u3089\u3046",
      "\u308F\u308C\u308B"
    ];
  }
});

// node_modules/bip39/src/wordlists/portuguese.json
var require_portuguese = __commonJS({
  "node_modules/bip39/src/wordlists/portuguese.json"(exports2, module2) {
    module2.exports = [
      "abacate",
      "abaixo",
      "abalar",
      "abater",
      "abduzir",
      "abelha",
      "aberto",
      "abismo",
      "abotoar",
      "abranger",
      "abreviar",
      "abrigar",
      "abrupto",
      "absinto",
      "absoluto",
      "absurdo",
      "abutre",
      "acabado",
      "acalmar",
      "acampar",
      "acanhar",
      "acaso",
      "aceitar",
      "acelerar",
      "acenar",
      "acervo",
      "acessar",
      "acetona",
      "achatar",
      "acidez",
      "acima",
      "acionado",
      "acirrar",
      "aclamar",
      "aclive",
      "acolhida",
      "acomodar",
      "acoplar",
      "acordar",
      "acumular",
      "acusador",
      "adaptar",
      "adega",
      "adentro",
      "adepto",
      "adequar",
      "aderente",
      "adesivo",
      "adeus",
      "adiante",
      "aditivo",
      "adjetivo",
      "adjunto",
      "admirar",
      "adorar",
      "adquirir",
      "adubo",
      "adverso",
      "advogado",
      "aeronave",
      "afastar",
      "aferir",
      "afetivo",
      "afinador",
      "afivelar",
      "aflito",
      "afluente",
      "afrontar",
      "agachar",
      "agarrar",
      "agasalho",
      "agenciar",
      "agilizar",
      "agiota",
      "agitado",
      "agora",
      "agradar",
      "agreste",
      "agrupar",
      "aguardar",
      "agulha",
      "ajoelhar",
      "ajudar",
      "ajustar",
      "alameda",
      "alarme",
      "alastrar",
      "alavanca",
      "albergue",
      "albino",
      "alcatra",
      "aldeia",
      "alecrim",
      "alegria",
      "alertar",
      "alface",
      "alfinete",
      "algum",
      "alheio",
      "aliar",
      "alicate",
      "alienar",
      "alinhar",
      "aliviar",
      "almofada",
      "alocar",
      "alpiste",
      "alterar",
      "altitude",
      "alucinar",
      "alugar",
      "aluno",
      "alusivo",
      "alvo",
      "amaciar",
      "amador",
      "amarelo",
      "amassar",
      "ambas",
      "ambiente",
      "ameixa",
      "amenizar",
      "amido",
      "amistoso",
      "amizade",
      "amolador",
      "amontoar",
      "amoroso",
      "amostra",
      "amparar",
      "ampliar",
      "ampola",
      "anagrama",
      "analisar",
      "anarquia",
      "anatomia",
      "andaime",
      "anel",
      "anexo",
      "angular",
      "animar",
      "anjo",
      "anomalia",
      "anotado",
      "ansioso",
      "anterior",
      "anuidade",
      "anunciar",
      "anzol",
      "apagador",
      "apalpar",
      "apanhado",
      "apego",
      "apelido",
      "apertada",
      "apesar",
      "apetite",
      "apito",
      "aplauso",
      "aplicada",
      "apoio",
      "apontar",
      "aposta",
      "aprendiz",
      "aprovar",
      "aquecer",
      "arame",
      "aranha",
      "arara",
      "arcada",
      "ardente",
      "areia",
      "arejar",
      "arenito",
      "aresta",
      "argiloso",
      "argola",
      "arma",
      "arquivo",
      "arraial",
      "arrebate",
      "arriscar",
      "arroba",
      "arrumar",
      "arsenal",
      "arterial",
      "artigo",
      "arvoredo",
      "asfaltar",
      "asilado",
      "aspirar",
      "assador",
      "assinar",
      "assoalho",
      "assunto",
      "astral",
      "atacado",
      "atadura",
      "atalho",
      "atarefar",
      "atear",
      "atender",
      "aterro",
      "ateu",
      "atingir",
      "atirador",
      "ativo",
      "atoleiro",
      "atracar",
      "atrevido",
      "atriz",
      "atual",
      "atum",
      "auditor",
      "aumentar",
      "aura",
      "aurora",
      "autismo",
      "autoria",
      "autuar",
      "avaliar",
      "avante",
      "avaria",
      "avental",
      "avesso",
      "aviador",
      "avisar",
      "avulso",
      "axila",
      "azarar",
      "azedo",
      "azeite",
      "azulejo",
      "babar",
      "babosa",
      "bacalhau",
      "bacharel",
      "bacia",
      "bagagem",
      "baiano",
      "bailar",
      "baioneta",
      "bairro",
      "baixista",
      "bajular",
      "baleia",
      "baliza",
      "balsa",
      "banal",
      "bandeira",
      "banho",
      "banir",
      "banquete",
      "barato",
      "barbado",
      "baronesa",
      "barraca",
      "barulho",
      "baseado",
      "bastante",
      "batata",
      "batedor",
      "batida",
      "batom",
      "batucar",
      "baunilha",
      "beber",
      "beijo",
      "beirada",
      "beisebol",
      "beldade",
      "beleza",
      "belga",
      "beliscar",
      "bendito",
      "bengala",
      "benzer",
      "berimbau",
      "berlinda",
      "berro",
      "besouro",
      "bexiga",
      "bezerro",
      "bico",
      "bicudo",
      "bienal",
      "bifocal",
      "bifurcar",
      "bigorna",
      "bilhete",
      "bimestre",
      "bimotor",
      "biologia",
      "biombo",
      "biosfera",
      "bipolar",
      "birrento",
      "biscoito",
      "bisneto",
      "bispo",
      "bissexto",
      "bitola",
      "bizarro",
      "blindado",
      "bloco",
      "bloquear",
      "boato",
      "bobagem",
      "bocado",
      "bocejo",
      "bochecha",
      "boicotar",
      "bolada",
      "boletim",
      "bolha",
      "bolo",
      "bombeiro",
      "bonde",
      "boneco",
      "bonita",
      "borbulha",
      "borda",
      "boreal",
      "borracha",
      "bovino",
      "boxeador",
      "branco",
      "brasa",
      "braveza",
      "breu",
      "briga",
      "brilho",
      "brincar",
      "broa",
      "brochura",
      "bronzear",
      "broto",
      "bruxo",
      "bucha",
      "budismo",
      "bufar",
      "bule",
      "buraco",
      "busca",
      "busto",
      "buzina",
      "cabana",
      "cabelo",
      "cabide",
      "cabo",
      "cabrito",
      "cacau",
      "cacetada",
      "cachorro",
      "cacique",
      "cadastro",
      "cadeado",
      "cafezal",
      "caiaque",
      "caipira",
      "caixote",
      "cajado",
      "caju",
      "calafrio",
      "calcular",
      "caldeira",
      "calibrar",
      "calmante",
      "calota",
      "camada",
      "cambista",
      "camisa",
      "camomila",
      "campanha",
      "camuflar",
      "canavial",
      "cancelar",
      "caneta",
      "canguru",
      "canhoto",
      "canivete",
      "canoa",
      "cansado",
      "cantar",
      "canudo",
      "capacho",
      "capela",
      "capinar",
      "capotar",
      "capricho",
      "captador",
      "capuz",
      "caracol",
      "carbono",
      "cardeal",
      "careca",
      "carimbar",
      "carneiro",
      "carpete",
      "carreira",
      "cartaz",
      "carvalho",
      "casaco",
      "casca",
      "casebre",
      "castelo",
      "casulo",
      "catarata",
      "cativar",
      "caule",
      "causador",
      "cautelar",
      "cavalo",
      "caverna",
      "cebola",
      "cedilha",
      "cegonha",
      "celebrar",
      "celular",
      "cenoura",
      "censo",
      "centeio",
      "cercar",
      "cerrado",
      "certeiro",
      "cerveja",
      "cetim",
      "cevada",
      "chacota",
      "chaleira",
      "chamado",
      "chapada",
      "charme",
      "chatice",
      "chave",
      "chefe",
      "chegada",
      "cheiro",
      "cheque",
      "chicote",
      "chifre",
      "chinelo",
      "chocalho",
      "chover",
      "chumbo",
      "chutar",
      "chuva",
      "cicatriz",
      "ciclone",
      "cidade",
      "cidreira",
      "ciente",
      "cigana",
      "cimento",
      "cinto",
      "cinza",
      "ciranda",
      "circuito",
      "cirurgia",
      "citar",
      "clareza",
      "clero",
      "clicar",
      "clone",
      "clube",
      "coado",
      "coagir",
      "cobaia",
      "cobertor",
      "cobrar",
      "cocada",
      "coelho",
      "coentro",
      "coeso",
      "cogumelo",
      "coibir",
      "coifa",
      "coiote",
      "colar",
      "coleira",
      "colher",
      "colidir",
      "colmeia",
      "colono",
      "coluna",
      "comando",
      "combinar",
      "comentar",
      "comitiva",
      "comover",
      "complexo",
      "comum",
      "concha",
      "condor",
      "conectar",
      "confuso",
      "congelar",
      "conhecer",
      "conjugar",
      "consumir",
      "contrato",
      "convite",
      "cooperar",
      "copeiro",
      "copiador",
      "copo",
      "coquetel",
      "coragem",
      "cordial",
      "corneta",
      "coronha",
      "corporal",
      "correio",
      "cortejo",
      "coruja",
      "corvo",
      "cosseno",
      "costela",
      "cotonete",
      "couro",
      "couve",
      "covil",
      "cozinha",
      "cratera",
      "cravo",
      "creche",
      "credor",
      "creme",
      "crer",
      "crespo",
      "criada",
      "criminal",
      "crioulo",
      "crise",
      "criticar",
      "crosta",
      "crua",
      "cruzeiro",
      "cubano",
      "cueca",
      "cuidado",
      "cujo",
      "culatra",
      "culminar",
      "culpar",
      "cultura",
      "cumprir",
      "cunhado",
      "cupido",
      "curativo",
      "curral",
      "cursar",
      "curto",
      "cuspir",
      "custear",
      "cutelo",
      "damasco",
      "datar",
      "debater",
      "debitar",
      "deboche",
      "debulhar",
      "decalque",
      "decimal",
      "declive",
      "decote",
      "decretar",
      "dedal",
      "dedicado",
      "deduzir",
      "defesa",
      "defumar",
      "degelo",
      "degrau",
      "degustar",
      "deitado",
      "deixar",
      "delator",
      "delegado",
      "delinear",
      "delonga",
      "demanda",
      "demitir",
      "demolido",
      "dentista",
      "depenado",
      "depilar",
      "depois",
      "depressa",
      "depurar",
      "deriva",
      "derramar",
      "desafio",
      "desbotar",
      "descanso",
      "desenho",
      "desfiado",
      "desgaste",
      "desigual",
      "deslize",
      "desmamar",
      "desova",
      "despesa",
      "destaque",
      "desviar",
      "detalhar",
      "detentor",
      "detonar",
      "detrito",
      "deusa",
      "dever",
      "devido",
      "devotado",
      "dezena",
      "diagrama",
      "dialeto",
      "didata",
      "difuso",
      "digitar",
      "dilatado",
      "diluente",
      "diminuir",
      "dinastia",
      "dinheiro",
      "diocese",
      "direto",
      "discreta",
      "disfarce",
      "disparo",
      "disquete",
      "dissipar",
      "distante",
      "ditador",
      "diurno",
      "diverso",
      "divisor",
      "divulgar",
      "dizer",
      "dobrador",
      "dolorido",
      "domador",
      "dominado",
      "donativo",
      "donzela",
      "dormente",
      "dorsal",
      "dosagem",
      "dourado",
      "doutor",
      "drenagem",
      "drible",
      "drogaria",
      "duelar",
      "duende",
      "dueto",
      "duplo",
      "duquesa",
      "durante",
      "duvidoso",
      "eclodir",
      "ecoar",
      "ecologia",
      "edificar",
      "edital",
      "educado",
      "efeito",
      "efetivar",
      "ejetar",
      "elaborar",
      "eleger",
      "eleitor",
      "elenco",
      "elevador",
      "eliminar",
      "elogiar",
      "embargo",
      "embolado",
      "embrulho",
      "embutido",
      "emenda",
      "emergir",
      "emissor",
      "empatia",
      "empenho",
      "empinado",
      "empolgar",
      "emprego",
      "empurrar",
      "emulador",
      "encaixe",
      "encenado",
      "enchente",
      "encontro",
      "endeusar",
      "endossar",
      "enfaixar",
      "enfeite",
      "enfim",
      "engajado",
      "engenho",
      "englobar",
      "engomado",
      "engraxar",
      "enguia",
      "enjoar",
      "enlatar",
      "enquanto",
      "enraizar",
      "enrolado",
      "enrugar",
      "ensaio",
      "enseada",
      "ensino",
      "ensopado",
      "entanto",
      "enteado",
      "entidade",
      "entortar",
      "entrada",
      "entulho",
      "envergar",
      "enviado",
      "envolver",
      "enxame",
      "enxerto",
      "enxofre",
      "enxuto",
      "epiderme",
      "equipar",
      "ereto",
      "erguido",
      "errata",
      "erva",
      "ervilha",
      "esbanjar",
      "esbelto",
      "escama",
      "escola",
      "escrita",
      "escuta",
      "esfinge",
      "esfolar",
      "esfregar",
      "esfumado",
      "esgrima",
      "esmalte",
      "espanto",
      "espelho",
      "espiga",
      "esponja",
      "espreita",
      "espumar",
      "esquerda",
      "estaca",
      "esteira",
      "esticar",
      "estofado",
      "estrela",
      "estudo",
      "esvaziar",
      "etanol",
      "etiqueta",
      "euforia",
      "europeu",
      "evacuar",
      "evaporar",
      "evasivo",
      "eventual",
      "evidente",
      "evoluir",
      "exagero",
      "exalar",
      "examinar",
      "exato",
      "exausto",
      "excesso",
      "excitar",
      "exclamar",
      "executar",
      "exemplo",
      "exibir",
      "exigente",
      "exonerar",
      "expandir",
      "expelir",
      "expirar",
      "explanar",
      "exposto",
      "expresso",
      "expulsar",
      "externo",
      "extinto",
      "extrato",
      "fabricar",
      "fabuloso",
      "faceta",
      "facial",
      "fada",
      "fadiga",
      "faixa",
      "falar",
      "falta",
      "familiar",
      "fandango",
      "fanfarra",
      "fantoche",
      "fardado",
      "farelo",
      "farinha",
      "farofa",
      "farpa",
      "fartura",
      "fatia",
      "fator",
      "favorita",
      "faxina",
      "fazenda",
      "fechado",
      "feijoada",
      "feirante",
      "felino",
      "feminino",
      "fenda",
      "feno",
      "fera",
      "feriado",
      "ferrugem",
      "ferver",
      "festejar",
      "fetal",
      "feudal",
      "fiapo",
      "fibrose",
      "ficar",
      "ficheiro",
      "figurado",
      "fileira",
      "filho",
      "filme",
      "filtrar",
      "firmeza",
      "fisgada",
      "fissura",
      "fita",
      "fivela",
      "fixador",
      "fixo",
      "flacidez",
      "flamingo",
      "flanela",
      "flechada",
      "flora",
      "flutuar",
      "fluxo",
      "focal",
      "focinho",
      "fofocar",
      "fogo",
      "foguete",
      "foice",
      "folgado",
      "folheto",
      "forjar",
      "formiga",
      "forno",
      "forte",
      "fosco",
      "fossa",
      "fragata",
      "fralda",
      "frango",
      "frasco",
      "fraterno",
      "freira",
      "frente",
      "fretar",
      "frieza",
      "friso",
      "fritura",
      "fronha",
      "frustrar",
      "fruteira",
      "fugir",
      "fulano",
      "fuligem",
      "fundar",
      "fungo",
      "funil",
      "furador",
      "furioso",
      "futebol",
      "gabarito",
      "gabinete",
      "gado",
      "gaiato",
      "gaiola",
      "gaivota",
      "galega",
      "galho",
      "galinha",
      "galocha",
      "ganhar",
      "garagem",
      "garfo",
      "gargalo",
      "garimpo",
      "garoupa",
      "garrafa",
      "gasoduto",
      "gasto",
      "gata",
      "gatilho",
      "gaveta",
      "gazela",
      "gelado",
      "geleia",
      "gelo",
      "gemada",
      "gemer",
      "gemido",
      "generoso",
      "gengiva",
      "genial",
      "genoma",
      "genro",
      "geologia",
      "gerador",
      "germinar",
      "gesso",
      "gestor",
      "ginasta",
      "gincana",
      "gingado",
      "girafa",
      "girino",
      "glacial",
      "glicose",
      "global",
      "glorioso",
      "goela",
      "goiaba",
      "golfe",
      "golpear",
      "gordura",
      "gorjeta",
      "gorro",
      "gostoso",
      "goteira",
      "governar",
      "gracejo",
      "gradual",
      "grafite",
      "gralha",
      "grampo",
      "granada",
      "gratuito",
      "graveto",
      "graxa",
      "grego",
      "grelhar",
      "greve",
      "grilo",
      "grisalho",
      "gritaria",
      "grosso",
      "grotesco",
      "grudado",
      "grunhido",
      "gruta",
      "guache",
      "guarani",
      "guaxinim",
      "guerrear",
      "guiar",
      "guincho",
      "guisado",
      "gula",
      "guloso",
      "guru",
      "habitar",
      "harmonia",
      "haste",
      "haver",
      "hectare",
      "herdar",
      "heresia",
      "hesitar",
      "hiato",
      "hibernar",
      "hidratar",
      "hiena",
      "hino",
      "hipismo",
      "hipnose",
      "hipoteca",
      "hoje",
      "holofote",
      "homem",
      "honesto",
      "honrado",
      "hormonal",
      "hospedar",
      "humorado",
      "iate",
      "ideia",
      "idoso",
      "ignorado",
      "igreja",
      "iguana",
      "ileso",
      "ilha",
      "iludido",
      "iluminar",
      "ilustrar",
      "imagem",
      "imediato",
      "imenso",
      "imersivo",
      "iminente",
      "imitador",
      "imortal",
      "impacto",
      "impedir",
      "implante",
      "impor",
      "imprensa",
      "impune",
      "imunizar",
      "inalador",
      "inapto",
      "inativo",
      "incenso",
      "inchar",
      "incidir",
      "incluir",
      "incolor",
      "indeciso",
      "indireto",
      "indutor",
      "ineficaz",
      "inerente",
      "infantil",
      "infestar",
      "infinito",
      "inflamar",
      "informal",
      "infrator",
      "ingerir",
      "inibido",
      "inicial",
      "inimigo",
      "injetar",
      "inocente",
      "inodoro",
      "inovador",
      "inox",
      "inquieto",
      "inscrito",
      "inseto",
      "insistir",
      "inspetor",
      "instalar",
      "insulto",
      "intacto",
      "integral",
      "intimar",
      "intocado",
      "intriga",
      "invasor",
      "inverno",
      "invicto",
      "invocar",
      "iogurte",
      "iraniano",
      "ironizar",
      "irreal",
      "irritado",
      "isca",
      "isento",
      "isolado",
      "isqueiro",
      "italiano",
      "janeiro",
      "jangada",
      "janta",
      "jararaca",
      "jardim",
      "jarro",
      "jasmim",
      "jato",
      "javali",
      "jazida",
      "jejum",
      "joaninha",
      "joelhada",
      "jogador",
      "joia",
      "jornal",
      "jorrar",
      "jovem",
      "juba",
      "judeu",
      "judoca",
      "juiz",
      "julgador",
      "julho",
      "jurado",
      "jurista",
      "juro",
      "justa",
      "labareda",
      "laboral",
      "lacre",
      "lactante",
      "ladrilho",
      "lagarta",
      "lagoa",
      "laje",
      "lamber",
      "lamentar",
      "laminar",
      "lampejo",
      "lanche",
      "lapidar",
      "lapso",
      "laranja",
      "lareira",
      "largura",
      "lasanha",
      "lastro",
      "lateral",
      "latido",
      "lavanda",
      "lavoura",
      "lavrador",
      "laxante",
      "lazer",
      "lealdade",
      "lebre",
      "legado",
      "legendar",
      "legista",
      "leigo",
      "leiloar",
      "leitura",
      "lembrete",
      "leme",
      "lenhador",
      "lentilha",
      "leoa",
      "lesma",
      "leste",
      "letivo",
      "letreiro",
      "levar",
      "leveza",
      "levitar",
      "liberal",
      "libido",
      "liderar",
      "ligar",
      "ligeiro",
      "limitar",
      "limoeiro",
      "limpador",
      "linda",
      "linear",
      "linhagem",
      "liquidez",
      "listagem",
      "lisura",
      "litoral",
      "livro",
      "lixa",
      "lixeira",
      "locador",
      "locutor",
      "lojista",
      "lombo",
      "lona",
      "longe",
      "lontra",
      "lorde",
      "lotado",
      "loteria",
      "loucura",
      "lousa",
      "louvar",
      "luar",
      "lucidez",
      "lucro",
      "luneta",
      "lustre",
      "lutador",
      "luva",
      "macaco",
      "macete",
      "machado",
      "macio",
      "madeira",
      "madrinha",
      "magnata",
      "magreza",
      "maior",
      "mais",
      "malandro",
      "malha",
      "malote",
      "maluco",
      "mamilo",
      "mamoeiro",
      "mamute",
      "manada",
      "mancha",
      "mandato",
      "manequim",
      "manhoso",
      "manivela",
      "manobrar",
      "mansa",
      "manter",
      "manusear",
      "mapeado",
      "maquinar",
      "marcador",
      "maresia",
      "marfim",
      "margem",
      "marinho",
      "marmita",
      "maroto",
      "marquise",
      "marreco",
      "martelo",
      "marujo",
      "mascote",
      "masmorra",
      "massagem",
      "mastigar",
      "matagal",
      "materno",
      "matinal",
      "matutar",
      "maxilar",
      "medalha",
      "medida",
      "medusa",
      "megafone",
      "meiga",
      "melancia",
      "melhor",
      "membro",
      "memorial",
      "menino",
      "menos",
      "mensagem",
      "mental",
      "merecer",
      "mergulho",
      "mesada",
      "mesclar",
      "mesmo",
      "mesquita",
      "mestre",
      "metade",
      "meteoro",
      "metragem",
      "mexer",
      "mexicano",
      "micro",
      "migalha",
      "migrar",
      "milagre",
      "milenar",
      "milhar",
      "mimado",
      "minerar",
      "minhoca",
      "ministro",
      "minoria",
      "miolo",
      "mirante",
      "mirtilo",
      "misturar",
      "mocidade",
      "moderno",
      "modular",
      "moeda",
      "moer",
      "moinho",
      "moita",
      "moldura",
      "moleza",
      "molho",
      "molinete",
      "molusco",
      "montanha",
      "moqueca",
      "morango",
      "morcego",
      "mordomo",
      "morena",
      "mosaico",
      "mosquete",
      "mostarda",
      "motel",
      "motim",
      "moto",
      "motriz",
      "muda",
      "muito",
      "mulata",
      "mulher",
      "multar",
      "mundial",
      "munido",
      "muralha",
      "murcho",
      "muscular",
      "museu",
      "musical",
      "nacional",
      "nadador",
      "naja",
      "namoro",
      "narina",
      "narrado",
      "nascer",
      "nativa",
      "natureza",
      "navalha",
      "navegar",
      "navio",
      "neblina",
      "nebuloso",
      "negativa",
      "negociar",
      "negrito",
      "nervoso",
      "neta",
      "neural",
      "nevasca",
      "nevoeiro",
      "ninar",
      "ninho",
      "nitidez",
      "nivelar",
      "nobreza",
      "noite",
      "noiva",
      "nomear",
      "nominal",
      "nordeste",
      "nortear",
      "notar",
      "noticiar",
      "noturno",
      "novelo",
      "novilho",
      "novo",
      "nublado",
      "nudez",
      "numeral",
      "nupcial",
      "nutrir",
      "nuvem",
      "obcecado",
      "obedecer",
      "objetivo",
      "obrigado",
      "obscuro",
      "obstetra",
      "obter",
      "obturar",
      "ocidente",
      "ocioso",
      "ocorrer",
      "oculista",
      "ocupado",
      "ofegante",
      "ofensiva",
      "oferenda",
      "oficina",
      "ofuscado",
      "ogiva",
      "olaria",
      "oleoso",
      "olhar",
      "oliveira",
      "ombro",
      "omelete",
      "omisso",
      "omitir",
      "ondulado",
      "oneroso",
      "ontem",
      "opcional",
      "operador",
      "oponente",
      "oportuno",
      "oposto",
      "orar",
      "orbitar",
      "ordem",
      "ordinal",
      "orfanato",
      "orgasmo",
      "orgulho",
      "oriental",
      "origem",
      "oriundo",
      "orla",
      "ortodoxo",
      "orvalho",
      "oscilar",
      "ossada",
      "osso",
      "ostentar",
      "otimismo",
      "ousadia",
      "outono",
      "outubro",
      "ouvido",
      "ovelha",
      "ovular",
      "oxidar",
      "oxigenar",
      "pacato",
      "paciente",
      "pacote",
      "pactuar",
      "padaria",
      "padrinho",
      "pagar",
      "pagode",
      "painel",
      "pairar",
      "paisagem",
      "palavra",
      "palestra",
      "palheta",
      "palito",
      "palmada",
      "palpitar",
      "pancada",
      "panela",
      "panfleto",
      "panqueca",
      "pantanal",
      "papagaio",
      "papelada",
      "papiro",
      "parafina",
      "parcial",
      "pardal",
      "parede",
      "partida",
      "pasmo",
      "passado",
      "pastel",
      "patamar",
      "patente",
      "patinar",
      "patrono",
      "paulada",
      "pausar",
      "peculiar",
      "pedalar",
      "pedestre",
      "pediatra",
      "pedra",
      "pegada",
      "peitoral",
      "peixe",
      "pele",
      "pelicano",
      "penca",
      "pendurar",
      "peneira",
      "penhasco",
      "pensador",
      "pente",
      "perceber",
      "perfeito",
      "pergunta",
      "perito",
      "permitir",
      "perna",
      "perplexo",
      "persiana",
      "pertence",
      "peruca",
      "pescado",
      "pesquisa",
      "pessoa",
      "petiscar",
      "piada",
      "picado",
      "piedade",
      "pigmento",
      "pilastra",
      "pilhado",
      "pilotar",
      "pimenta",
      "pincel",
      "pinguim",
      "pinha",
      "pinote",
      "pintar",
      "pioneiro",
      "pipoca",
      "piquete",
      "piranha",
      "pires",
      "pirueta",
      "piscar",
      "pistola",
      "pitanga",
      "pivete",
      "planta",
      "plaqueta",
      "platina",
      "plebeu",
      "plumagem",
      "pluvial",
      "pneu",
      "poda",
      "poeira",
      "poetisa",
      "polegada",
      "policiar",
      "poluente",
      "polvilho",
      "pomar",
      "pomba",
      "ponderar",
      "pontaria",
      "populoso",
      "porta",
      "possuir",
      "postal",
      "pote",
      "poupar",
      "pouso",
      "povoar",
      "praia",
      "prancha",
      "prato",
      "praxe",
      "prece",
      "predador",
      "prefeito",
      "premiar",
      "prensar",
      "preparar",
      "presilha",
      "pretexto",
      "prevenir",
      "prezar",
      "primata",
      "princesa",
      "prisma",
      "privado",
      "processo",
      "produto",
      "profeta",
      "proibido",
      "projeto",
      "prometer",
      "propagar",
      "prosa",
      "protetor",
      "provador",
      "publicar",
      "pudim",
      "pular",
      "pulmonar",
      "pulseira",
      "punhal",
      "punir",
      "pupilo",
      "pureza",
      "puxador",
      "quadra",
      "quantia",
      "quarto",
      "quase",
      "quebrar",
      "queda",
      "queijo",
      "quente",
      "querido",
      "quimono",
      "quina",
      "quiosque",
      "rabanada",
      "rabisco",
      "rachar",
      "racionar",
      "radial",
      "raiar",
      "rainha",
      "raio",
      "raiva",
      "rajada",
      "ralado",
      "ramal",
      "ranger",
      "ranhura",
      "rapadura",
      "rapel",
      "rapidez",
      "raposa",
      "raquete",
      "raridade",
      "rasante",
      "rascunho",
      "rasgar",
      "raspador",
      "rasteira",
      "rasurar",
      "ratazana",
      "ratoeira",
      "realeza",
      "reanimar",
      "reaver",
      "rebaixar",
      "rebelde",
      "rebolar",
      "recado",
      "recente",
      "recheio",
      "recibo",
      "recordar",
      "recrutar",
      "recuar",
      "rede",
      "redimir",
      "redonda",
      "reduzida",
      "reenvio",
      "refinar",
      "refletir",
      "refogar",
      "refresco",
      "refugiar",
      "regalia",
      "regime",
      "regra",
      "reinado",
      "reitor",
      "rejeitar",
      "relativo",
      "remador",
      "remendo",
      "remorso",
      "renovado",
      "reparo",
      "repelir",
      "repleto",
      "repolho",
      "represa",
      "repudiar",
      "requerer",
      "resenha",
      "resfriar",
      "resgatar",
      "residir",
      "resolver",
      "respeito",
      "ressaca",
      "restante",
      "resumir",
      "retalho",
      "reter",
      "retirar",
      "retomada",
      "retratar",
      "revelar",
      "revisor",
      "revolta",
      "riacho",
      "rica",
      "rigidez",
      "rigoroso",
      "rimar",
      "ringue",
      "risada",
      "risco",
      "risonho",
      "robalo",
      "rochedo",
      "rodada",
      "rodeio",
      "rodovia",
      "roedor",
      "roleta",
      "romano",
      "roncar",
      "rosado",
      "roseira",
      "rosto",
      "rota",
      "roteiro",
      "rotina",
      "rotular",
      "rouco",
      "roupa",
      "roxo",
      "rubro",
      "rugido",
      "rugoso",
      "ruivo",
      "rumo",
      "rupestre",
      "russo",
      "sabor",
      "saciar",
      "sacola",
      "sacudir",
      "sadio",
      "safira",
      "saga",
      "sagrada",
      "saibro",
      "salada",
      "saleiro",
      "salgado",
      "saliva",
      "salpicar",
      "salsicha",
      "saltar",
      "salvador",
      "sambar",
      "samurai",
      "sanar",
      "sanfona",
      "sangue",
      "sanidade",
      "sapato",
      "sarda",
      "sargento",
      "sarjeta",
      "saturar",
      "saudade",
      "saxofone",
      "sazonal",
      "secar",
      "secular",
      "seda",
      "sedento",
      "sediado",
      "sedoso",
      "sedutor",
      "segmento",
      "segredo",
      "segundo",
      "seiva",
      "seleto",
      "selvagem",
      "semanal",
      "semente",
      "senador",
      "senhor",
      "sensual",
      "sentado",
      "separado",
      "sereia",
      "seringa",
      "serra",
      "servo",
      "setembro",
      "setor",
      "sigilo",
      "silhueta",
      "silicone",
      "simetria",
      "simpatia",
      "simular",
      "sinal",
      "sincero",
      "singular",
      "sinopse",
      "sintonia",
      "sirene",
      "siri",
      "situado",
      "soberano",
      "sobra",
      "socorro",
      "sogro",
      "soja",
      "solda",
      "soletrar",
      "solteiro",
      "sombrio",
      "sonata",
      "sondar",
      "sonegar",
      "sonhador",
      "sono",
      "soprano",
      "soquete",
      "sorrir",
      "sorteio",
      "sossego",
      "sotaque",
      "soterrar",
      "sovado",
      "sozinho",
      "suavizar",
      "subida",
      "submerso",
      "subsolo",
      "subtrair",
      "sucata",
      "sucesso",
      "suco",
      "sudeste",
      "sufixo",
      "sugador",
      "sugerir",
      "sujeito",
      "sulfato",
      "sumir",
      "suor",
      "superior",
      "suplicar",
      "suposto",
      "suprimir",
      "surdina",
      "surfista",
      "surpresa",
      "surreal",
      "surtir",
      "suspiro",
      "sustento",
      "tabela",
      "tablete",
      "tabuada",
      "tacho",
      "tagarela",
      "talher",
      "talo",
      "talvez",
      "tamanho",
      "tamborim",
      "tampa",
      "tangente",
      "tanto",
      "tapar",
      "tapioca",
      "tardio",
      "tarefa",
      "tarja",
      "tarraxa",
      "tatuagem",
      "taurino",
      "taxativo",
      "taxista",
      "teatral",
      "tecer",
      "tecido",
      "teclado",
      "tedioso",
      "teia",
      "teimar",
      "telefone",
      "telhado",
      "tempero",
      "tenente",
      "tensor",
      "tentar",
      "termal",
      "terno",
      "terreno",
      "tese",
      "tesoura",
      "testado",
      "teto",
      "textura",
      "texugo",
      "tiara",
      "tigela",
      "tijolo",
      "timbrar",
      "timidez",
      "tingido",
      "tinteiro",
      "tiragem",
      "titular",
      "toalha",
      "tocha",
      "tolerar",
      "tolice",
      "tomada",
      "tomilho",
      "tonel",
      "tontura",
      "topete",
      "tora",
      "torcido",
      "torneio",
      "torque",
      "torrada",
      "torto",
      "tostar",
      "touca",
      "toupeira",
      "toxina",
      "trabalho",
      "tracejar",
      "tradutor",
      "trafegar",
      "trajeto",
      "trama",
      "trancar",
      "trapo",
      "traseiro",
      "tratador",
      "travar",
      "treino",
      "tremer",
      "trepidar",
      "trevo",
      "triagem",
      "tribo",
      "triciclo",
      "tridente",
      "trilogia",
      "trindade",
      "triplo",
      "triturar",
      "triunfal",
      "trocar",
      "trombeta",
      "trova",
      "trunfo",
      "truque",
      "tubular",
      "tucano",
      "tudo",
      "tulipa",
      "tupi",
      "turbo",
      "turma",
      "turquesa",
      "tutelar",
      "tutorial",
      "uivar",
      "umbigo",
      "unha",
      "unidade",
      "uniforme",
      "urologia",
      "urso",
      "urtiga",
      "urubu",
      "usado",
      "usina",
      "usufruir",
      "vacina",
      "vadiar",
      "vagaroso",
      "vaidoso",
      "vala",
      "valente",
      "validade",
      "valores",
      "vantagem",
      "vaqueiro",
      "varanda",
      "vareta",
      "varrer",
      "vascular",
      "vasilha",
      "vassoura",
      "vazar",
      "vazio",
      "veado",
      "vedar",
      "vegetar",
      "veicular",
      "veleiro",
      "velhice",
      "veludo",
      "vencedor",
      "vendaval",
      "venerar",
      "ventre",
      "verbal",
      "verdade",
      "vereador",
      "vergonha",
      "vermelho",
      "verniz",
      "versar",
      "vertente",
      "vespa",
      "vestido",
      "vetorial",
      "viaduto",
      "viagem",
      "viajar",
      "viatura",
      "vibrador",
      "videira",
      "vidraria",
      "viela",
      "viga",
      "vigente",
      "vigiar",
      "vigorar",
      "vilarejo",
      "vinco",
      "vinheta",
      "vinil",
      "violeta",
      "virada",
      "virtude",
      "visitar",
      "visto",
      "vitral",
      "viveiro",
      "vizinho",
      "voador",
      "voar",
      "vogal",
      "volante",
      "voleibol",
      "voltagem",
      "volumoso",
      "vontade",
      "vulto",
      "vuvuzela",
      "xadrez",
      "xarope",
      "xeque",
      "xeretar",
      "xerife",
      "xingar",
      "zangado",
      "zarpar",
      "zebu",
      "zelador",
      "zombar",
      "zoologia",
      "zumbido"
    ];
  }
});

// node_modules/bip39/src/wordlists/english.json
var require_english = __commonJS({
  "node_modules/bip39/src/wordlists/english.json"(exports2, module2) {
    module2.exports = [
      "abandon",
      "ability",
      "able",
      "about",
      "above",
      "absent",
      "absorb",
      "abstract",
      "absurd",
      "abuse",
      "access",
      "accident",
      "account",
      "accuse",
      "achieve",
      "acid",
      "acoustic",
      "acquire",
      "across",
      "act",
      "action",
      "actor",
      "actress",
      "actual",
      "adapt",
      "add",
      "addict",
      "address",
      "adjust",
      "admit",
      "adult",
      "advance",
      "advice",
      "aerobic",
      "affair",
      "afford",
      "afraid",
      "again",
      "age",
      "agent",
      "agree",
      "ahead",
      "aim",
      "air",
      "airport",
      "aisle",
      "alarm",
      "album",
      "alcohol",
      "alert",
      "alien",
      "all",
      "alley",
      "allow",
      "almost",
      "alone",
      "alpha",
      "already",
      "also",
      "alter",
      "always",
      "amateur",
      "amazing",
      "among",
      "amount",
      "amused",
      "analyst",
      "anchor",
      "ancient",
      "anger",
      "angle",
      "angry",
      "animal",
      "ankle",
      "announce",
      "annual",
      "another",
      "answer",
      "antenna",
      "antique",
      "anxiety",
      "any",
      "apart",
      "apology",
      "appear",
      "apple",
      "approve",
      "april",
      "arch",
      "arctic",
      "area",
      "arena",
      "argue",
      "arm",
      "armed",
      "armor",
      "army",
      "around",
      "arrange",
      "arrest",
      "arrive",
      "arrow",
      "art",
      "artefact",
      "artist",
      "artwork",
      "ask",
      "aspect",
      "assault",
      "asset",
      "assist",
      "assume",
      "asthma",
      "athlete",
      "atom",
      "attack",
      "attend",
      "attitude",
      "attract",
      "auction",
      "audit",
      "august",
      "aunt",
      "author",
      "auto",
      "autumn",
      "average",
      "avocado",
      "avoid",
      "awake",
      "aware",
      "away",
      "awesome",
      "awful",
      "awkward",
      "axis",
      "baby",
      "bachelor",
      "bacon",
      "badge",
      "bag",
      "balance",
      "balcony",
      "ball",
      "bamboo",
      "banana",
      "banner",
      "bar",
      "barely",
      "bargain",
      "barrel",
      "base",
      "basic",
      "basket",
      "battle",
      "beach",
      "bean",
      "beauty",
      "because",
      "become",
      "beef",
      "before",
      "begin",
      "behave",
      "behind",
      "believe",
      "below",
      "belt",
      "bench",
      "benefit",
      "best",
      "betray",
      "better",
      "between",
      "beyond",
      "bicycle",
      "bid",
      "bike",
      "bind",
      "biology",
      "bird",
      "birth",
      "bitter",
      "black",
      "blade",
      "blame",
      "blanket",
      "blast",
      "bleak",
      "bless",
      "blind",
      "blood",
      "blossom",
      "blouse",
      "blue",
      "blur",
      "blush",
      "board",
      "boat",
      "body",
      "boil",
      "bomb",
      "bone",
      "bonus",
      "book",
      "boost",
      "border",
      "boring",
      "borrow",
      "boss",
      "bottom",
      "bounce",
      "box",
      "boy",
      "bracket",
      "brain",
      "brand",
      "brass",
      "brave",
      "bread",
      "breeze",
      "brick",
      "bridge",
      "brief",
      "bright",
      "bring",
      "brisk",
      "broccoli",
      "broken",
      "bronze",
      "broom",
      "brother",
      "brown",
      "brush",
      "bubble",
      "buddy",
      "budget",
      "buffalo",
      "build",
      "bulb",
      "bulk",
      "bullet",
      "bundle",
      "bunker",
      "burden",
      "burger",
      "burst",
      "bus",
      "business",
      "busy",
      "butter",
      "buyer",
      "buzz",
      "cabbage",
      "cabin",
      "cable",
      "cactus",
      "cage",
      "cake",
      "call",
      "calm",
      "camera",
      "camp",
      "can",
      "canal",
      "cancel",
      "candy",
      "cannon",
      "canoe",
      "canvas",
      "canyon",
      "capable",
      "capital",
      "captain",
      "car",
      "carbon",
      "card",
      "cargo",
      "carpet",
      "carry",
      "cart",
      "case",
      "cash",
      "casino",
      "castle",
      "casual",
      "cat",
      "catalog",
      "catch",
      "category",
      "cattle",
      "caught",
      "cause",
      "caution",
      "cave",
      "ceiling",
      "celery",
      "cement",
      "census",
      "century",
      "cereal",
      "certain",
      "chair",
      "chalk",
      "champion",
      "change",
      "chaos",
      "chapter",
      "charge",
      "chase",
      "chat",
      "cheap",
      "check",
      "cheese",
      "chef",
      "cherry",
      "chest",
      "chicken",
      "chief",
      "child",
      "chimney",
      "choice",
      "choose",
      "chronic",
      "chuckle",
      "chunk",
      "churn",
      "cigar",
      "cinnamon",
      "circle",
      "citizen",
      "city",
      "civil",
      "claim",
      "clap",
      "clarify",
      "claw",
      "clay",
      "clean",
      "clerk",
      "clever",
      "click",
      "client",
      "cliff",
      "climb",
      "clinic",
      "clip",
      "clock",
      "clog",
      "close",
      "cloth",
      "cloud",
      "clown",
      "club",
      "clump",
      "cluster",
      "clutch",
      "coach",
      "coast",
      "coconut",
      "code",
      "coffee",
      "coil",
      "coin",
      "collect",
      "color",
      "column",
      "combine",
      "come",
      "comfort",
      "comic",
      "common",
      "company",
      "concert",
      "conduct",
      "confirm",
      "congress",
      "connect",
      "consider",
      "control",
      "convince",
      "cook",
      "cool",
      "copper",
      "copy",
      "coral",
      "core",
      "corn",
      "correct",
      "cost",
      "cotton",
      "couch",
      "country",
      "couple",
      "course",
      "cousin",
      "cover",
      "coyote",
      "crack",
      "cradle",
      "craft",
      "cram",
      "crane",
      "crash",
      "crater",
      "crawl",
      "crazy",
      "cream",
      "credit",
      "creek",
      "crew",
      "cricket",
      "crime",
      "crisp",
      "critic",
      "crop",
      "cross",
      "crouch",
      "crowd",
      "crucial",
      "cruel",
      "cruise",
      "crumble",
      "crunch",
      "crush",
      "cry",
      "crystal",
      "cube",
      "culture",
      "cup",
      "cupboard",
      "curious",
      "current",
      "curtain",
      "curve",
      "cushion",
      "custom",
      "cute",
      "cycle",
      "dad",
      "damage",
      "damp",
      "dance",
      "danger",
      "daring",
      "dash",
      "daughter",
      "dawn",
      "day",
      "deal",
      "debate",
      "debris",
      "decade",
      "december",
      "decide",
      "decline",
      "decorate",
      "decrease",
      "deer",
      "defense",
      "define",
      "defy",
      "degree",
      "delay",
      "deliver",
      "demand",
      "demise",
      "denial",
      "dentist",
      "deny",
      "depart",
      "depend",
      "deposit",
      "depth",
      "deputy",
      "derive",
      "describe",
      "desert",
      "design",
      "desk",
      "despair",
      "destroy",
      "detail",
      "detect",
      "develop",
      "device",
      "devote",
      "diagram",
      "dial",
      "diamond",
      "diary",
      "dice",
      "diesel",
      "diet",
      "differ",
      "digital",
      "dignity",
      "dilemma",
      "dinner",
      "dinosaur",
      "direct",
      "dirt",
      "disagree",
      "discover",
      "disease",
      "dish",
      "dismiss",
      "disorder",
      "display",
      "distance",
      "divert",
      "divide",
      "divorce",
      "dizzy",
      "doctor",
      "document",
      "dog",
      "doll",
      "dolphin",
      "domain",
      "donate",
      "donkey",
      "donor",
      "door",
      "dose",
      "double",
      "dove",
      "draft",
      "dragon",
      "drama",
      "drastic",
      "draw",
      "dream",
      "dress",
      "drift",
      "drill",
      "drink",
      "drip",
      "drive",
      "drop",
      "drum",
      "dry",
      "duck",
      "dumb",
      "dune",
      "during",
      "dust",
      "dutch",
      "duty",
      "dwarf",
      "dynamic",
      "eager",
      "eagle",
      "early",
      "earn",
      "earth",
      "easily",
      "east",
      "easy",
      "echo",
      "ecology",
      "economy",
      "edge",
      "edit",
      "educate",
      "effort",
      "egg",
      "eight",
      "either",
      "elbow",
      "elder",
      "electric",
      "elegant",
      "element",
      "elephant",
      "elevator",
      "elite",
      "else",
      "embark",
      "embody",
      "embrace",
      "emerge",
      "emotion",
      "employ",
      "empower",
      "empty",
      "enable",
      "enact",
      "end",
      "endless",
      "endorse",
      "enemy",
      "energy",
      "enforce",
      "engage",
      "engine",
      "enhance",
      "enjoy",
      "enlist",
      "enough",
      "enrich",
      "enroll",
      "ensure",
      "enter",
      "entire",
      "entry",
      "envelope",
      "episode",
      "equal",
      "equip",
      "era",
      "erase",
      "erode",
      "erosion",
      "error",
      "erupt",
      "escape",
      "essay",
      "essence",
      "estate",
      "eternal",
      "ethics",
      "evidence",
      "evil",
      "evoke",
      "evolve",
      "exact",
      "example",
      "excess",
      "exchange",
      "excite",
      "exclude",
      "excuse",
      "execute",
      "exercise",
      "exhaust",
      "exhibit",
      "exile",
      "exist",
      "exit",
      "exotic",
      "expand",
      "expect",
      "expire",
      "explain",
      "expose",
      "express",
      "extend",
      "extra",
      "eye",
      "eyebrow",
      "fabric",
      "face",
      "faculty",
      "fade",
      "faint",
      "faith",
      "fall",
      "false",
      "fame",
      "family",
      "famous",
      "fan",
      "fancy",
      "fantasy",
      "farm",
      "fashion",
      "fat",
      "fatal",
      "father",
      "fatigue",
      "fault",
      "favorite",
      "feature",
      "february",
      "federal",
      "fee",
      "feed",
      "feel",
      "female",
      "fence",
      "festival",
      "fetch",
      "fever",
      "few",
      "fiber",
      "fiction",
      "field",
      "figure",
      "file",
      "film",
      "filter",
      "final",
      "find",
      "fine",
      "finger",
      "finish",
      "fire",
      "firm",
      "first",
      "fiscal",
      "fish",
      "fit",
      "fitness",
      "fix",
      "flag",
      "flame",
      "flash",
      "flat",
      "flavor",
      "flee",
      "flight",
      "flip",
      "float",
      "flock",
      "floor",
      "flower",
      "fluid",
      "flush",
      "fly",
      "foam",
      "focus",
      "fog",
      "foil",
      "fold",
      "follow",
      "food",
      "foot",
      "force",
      "forest",
      "forget",
      "fork",
      "fortune",
      "forum",
      "forward",
      "fossil",
      "foster",
      "found",
      "fox",
      "fragile",
      "frame",
      "frequent",
      "fresh",
      "friend",
      "fringe",
      "frog",
      "front",
      "frost",
      "frown",
      "frozen",
      "fruit",
      "fuel",
      "fun",
      "funny",
      "furnace",
      "fury",
      "future",
      "gadget",
      "gain",
      "galaxy",
      "gallery",
      "game",
      "gap",
      "garage",
      "garbage",
      "garden",
      "garlic",
      "garment",
      "gas",
      "gasp",
      "gate",
      "gather",
      "gauge",
      "gaze",
      "general",
      "genius",
      "genre",
      "gentle",
      "genuine",
      "gesture",
      "ghost",
      "giant",
      "gift",
      "giggle",
      "ginger",
      "giraffe",
      "girl",
      "give",
      "glad",
      "glance",
      "glare",
      "glass",
      "glide",
      "glimpse",
      "globe",
      "gloom",
      "glory",
      "glove",
      "glow",
      "glue",
      "goat",
      "goddess",
      "gold",
      "good",
      "goose",
      "gorilla",
      "gospel",
      "gossip",
      "govern",
      "gown",
      "grab",
      "grace",
      "grain",
      "grant",
      "grape",
      "grass",
      "gravity",
      "great",
      "green",
      "grid",
      "grief",
      "grit",
      "grocery",
      "group",
      "grow",
      "grunt",
      "guard",
      "guess",
      "guide",
      "guilt",
      "guitar",
      "gun",
      "gym",
      "habit",
      "hair",
      "half",
      "hammer",
      "hamster",
      "hand",
      "happy",
      "harbor",
      "hard",
      "harsh",
      "harvest",
      "hat",
      "have",
      "hawk",
      "hazard",
      "head",
      "health",
      "heart",
      "heavy",
      "hedgehog",
      "height",
      "hello",
      "helmet",
      "help",
      "hen",
      "hero",
      "hidden",
      "high",
      "hill",
      "hint",
      "hip",
      "hire",
      "history",
      "hobby",
      "hockey",
      "hold",
      "hole",
      "holiday",
      "hollow",
      "home",
      "honey",
      "hood",
      "hope",
      "horn",
      "horror",
      "horse",
      "hospital",
      "host",
      "hotel",
      "hour",
      "hover",
      "hub",
      "huge",
      "human",
      "humble",
      "humor",
      "hundred",
      "hungry",
      "hunt",
      "hurdle",
      "hurry",
      "hurt",
      "husband",
      "hybrid",
      "ice",
      "icon",
      "idea",
      "identify",
      "idle",
      "ignore",
      "ill",
      "illegal",
      "illness",
      "image",
      "imitate",
      "immense",
      "immune",
      "impact",
      "impose",
      "improve",
      "impulse",
      "inch",
      "include",
      "income",
      "increase",
      "index",
      "indicate",
      "indoor",
      "industry",
      "infant",
      "inflict",
      "inform",
      "inhale",
      "inherit",
      "initial",
      "inject",
      "injury",
      "inmate",
      "inner",
      "innocent",
      "input",
      "inquiry",
      "insane",
      "insect",
      "inside",
      "inspire",
      "install",
      "intact",
      "interest",
      "into",
      "invest",
      "invite",
      "involve",
      "iron",
      "island",
      "isolate",
      "issue",
      "item",
      "ivory",
      "jacket",
      "jaguar",
      "jar",
      "jazz",
      "jealous",
      "jeans",
      "jelly",
      "jewel",
      "job",
      "join",
      "joke",
      "journey",
      "joy",
      "judge",
      "juice",
      "jump",
      "jungle",
      "junior",
      "junk",
      "just",
      "kangaroo",
      "keen",
      "keep",
      "ketchup",
      "key",
      "kick",
      "kid",
      "kidney",
      "kind",
      "kingdom",
      "kiss",
      "kit",
      "kitchen",
      "kite",
      "kitten",
      "kiwi",
      "knee",
      "knife",
      "knock",
      "know",
      "lab",
      "label",
      "labor",
      "ladder",
      "lady",
      "lake",
      "lamp",
      "language",
      "laptop",
      "large",
      "later",
      "latin",
      "laugh",
      "laundry",
      "lava",
      "law",
      "lawn",
      "lawsuit",
      "layer",
      "lazy",
      "leader",
      "leaf",
      "learn",
      "leave",
      "lecture",
      "left",
      "leg",
      "legal",
      "legend",
      "leisure",
      "lemon",
      "lend",
      "length",
      "lens",
      "leopard",
      "lesson",
      "letter",
      "level",
      "liar",
      "liberty",
      "library",
      "license",
      "life",
      "lift",
      "light",
      "like",
      "limb",
      "limit",
      "link",
      "lion",
      "liquid",
      "list",
      "little",
      "live",
      "lizard",
      "load",
      "loan",
      "lobster",
      "local",
      "lock",
      "logic",
      "lonely",
      "long",
      "loop",
      "lottery",
      "loud",
      "lounge",
      "love",
      "loyal",
      "lucky",
      "luggage",
      "lumber",
      "lunar",
      "lunch",
      "luxury",
      "lyrics",
      "machine",
      "mad",
      "magic",
      "magnet",
      "maid",
      "mail",
      "main",
      "major",
      "make",
      "mammal",
      "man",
      "manage",
      "mandate",
      "mango",
      "mansion",
      "manual",
      "maple",
      "marble",
      "march",
      "margin",
      "marine",
      "market",
      "marriage",
      "mask",
      "mass",
      "master",
      "match",
      "material",
      "math",
      "matrix",
      "matter",
      "maximum",
      "maze",
      "meadow",
      "mean",
      "measure",
      "meat",
      "mechanic",
      "medal",
      "media",
      "melody",
      "melt",
      "member",
      "memory",
      "mention",
      "menu",
      "mercy",
      "merge",
      "merit",
      "merry",
      "mesh",
      "message",
      "metal",
      "method",
      "middle",
      "midnight",
      "milk",
      "million",
      "mimic",
      "mind",
      "minimum",
      "minor",
      "minute",
      "miracle",
      "mirror",
      "misery",
      "miss",
      "mistake",
      "mix",
      "mixed",
      "mixture",
      "mobile",
      "model",
      "modify",
      "mom",
      "moment",
      "monitor",
      "monkey",
      "monster",
      "month",
      "moon",
      "moral",
      "more",
      "morning",
      "mosquito",
      "mother",
      "motion",
      "motor",
      "mountain",
      "mouse",
      "move",
      "movie",
      "much",
      "muffin",
      "mule",
      "multiply",
      "muscle",
      "museum",
      "mushroom",
      "music",
      "must",
      "mutual",
      "myself",
      "mystery",
      "myth",
      "naive",
      "name",
      "napkin",
      "narrow",
      "nasty",
      "nation",
      "nature",
      "near",
      "neck",
      "need",
      "negative",
      "neglect",
      "neither",
      "nephew",
      "nerve",
      "nest",
      "net",
      "network",
      "neutral",
      "never",
      "news",
      "next",
      "nice",
      "night",
      "noble",
      "noise",
      "nominee",
      "noodle",
      "normal",
      "north",
      "nose",
      "notable",
      "note",
      "nothing",
      "notice",
      "novel",
      "now",
      "nuclear",
      "number",
      "nurse",
      "nut",
      "oak",
      "obey",
      "object",
      "oblige",
      "obscure",
      "observe",
      "obtain",
      "obvious",
      "occur",
      "ocean",
      "october",
      "odor",
      "off",
      "offer",
      "office",
      "often",
      "oil",
      "okay",
      "old",
      "olive",
      "olympic",
      "omit",
      "once",
      "one",
      "onion",
      "online",
      "only",
      "open",
      "opera",
      "opinion",
      "oppose",
      "option",
      "orange",
      "orbit",
      "orchard",
      "order",
      "ordinary",
      "organ",
      "orient",
      "original",
      "orphan",
      "ostrich",
      "other",
      "outdoor",
      "outer",
      "output",
      "outside",
      "oval",
      "oven",
      "over",
      "own",
      "owner",
      "oxygen",
      "oyster",
      "ozone",
      "pact",
      "paddle",
      "page",
      "pair",
      "palace",
      "palm",
      "panda",
      "panel",
      "panic",
      "panther",
      "paper",
      "parade",
      "parent",
      "park",
      "parrot",
      "party",
      "pass",
      "patch",
      "path",
      "patient",
      "patrol",
      "pattern",
      "pause",
      "pave",
      "payment",
      "peace",
      "peanut",
      "pear",
      "peasant",
      "pelican",
      "pen",
      "penalty",
      "pencil",
      "people",
      "pepper",
      "perfect",
      "permit",
      "person",
      "pet",
      "phone",
      "photo",
      "phrase",
      "physical",
      "piano",
      "picnic",
      "picture",
      "piece",
      "pig",
      "pigeon",
      "pill",
      "pilot",
      "pink",
      "pioneer",
      "pipe",
      "pistol",
      "pitch",
      "pizza",
      "place",
      "planet",
      "plastic",
      "plate",
      "play",
      "please",
      "pledge",
      "pluck",
      "plug",
      "plunge",
      "poem",
      "poet",
      "point",
      "polar",
      "pole",
      "police",
      "pond",
      "pony",
      "pool",
      "popular",
      "portion",
      "position",
      "possible",
      "post",
      "potato",
      "pottery",
      "poverty",
      "powder",
      "power",
      "practice",
      "praise",
      "predict",
      "prefer",
      "prepare",
      "present",
      "pretty",
      "prevent",
      "price",
      "pride",
      "primary",
      "print",
      "priority",
      "prison",
      "private",
      "prize",
      "problem",
      "process",
      "produce",
      "profit",
      "program",
      "project",
      "promote",
      "proof",
      "property",
      "prosper",
      "protect",
      "proud",
      "provide",
      "public",
      "pudding",
      "pull",
      "pulp",
      "pulse",
      "pumpkin",
      "punch",
      "pupil",
      "puppy",
      "purchase",
      "purity",
      "purpose",
      "purse",
      "push",
      "put",
      "puzzle",
      "pyramid",
      "quality",
      "quantum",
      "quarter",
      "question",
      "quick",
      "quit",
      "quiz",
      "quote",
      "rabbit",
      "raccoon",
      "race",
      "rack",
      "radar",
      "radio",
      "rail",
      "rain",
      "raise",
      "rally",
      "ramp",
      "ranch",
      "random",
      "range",
      "rapid",
      "rare",
      "rate",
      "rather",
      "raven",
      "raw",
      "razor",
      "ready",
      "real",
      "reason",
      "rebel",
      "rebuild",
      "recall",
      "receive",
      "recipe",
      "record",
      "recycle",
      "reduce",
      "reflect",
      "reform",
      "refuse",
      "region",
      "regret",
      "regular",
      "reject",
      "relax",
      "release",
      "relief",
      "rely",
      "remain",
      "remember",
      "remind",
      "remove",
      "render",
      "renew",
      "rent",
      "reopen",
      "repair",
      "repeat",
      "replace",
      "report",
      "require",
      "rescue",
      "resemble",
      "resist",
      "resource",
      "response",
      "result",
      "retire",
      "retreat",
      "return",
      "reunion",
      "reveal",
      "review",
      "reward",
      "rhythm",
      "rib",
      "ribbon",
      "rice",
      "rich",
      "ride",
      "ridge",
      "rifle",
      "right",
      "rigid",
      "ring",
      "riot",
      "ripple",
      "risk",
      "ritual",
      "rival",
      "river",
      "road",
      "roast",
      "robot",
      "robust",
      "rocket",
      "romance",
      "roof",
      "rookie",
      "room",
      "rose",
      "rotate",
      "rough",
      "round",
      "route",
      "royal",
      "rubber",
      "rude",
      "rug",
      "rule",
      "run",
      "runway",
      "rural",
      "sad",
      "saddle",
      "sadness",
      "safe",
      "sail",
      "salad",
      "salmon",
      "salon",
      "salt",
      "salute",
      "same",
      "sample",
      "sand",
      "satisfy",
      "satoshi",
      "sauce",
      "sausage",
      "save",
      "say",
      "scale",
      "scan",
      "scare",
      "scatter",
      "scene",
      "scheme",
      "school",
      "science",
      "scissors",
      "scorpion",
      "scout",
      "scrap",
      "screen",
      "script",
      "scrub",
      "sea",
      "search",
      "season",
      "seat",
      "second",
      "secret",
      "section",
      "security",
      "seed",
      "seek",
      "segment",
      "select",
      "sell",
      "seminar",
      "senior",
      "sense",
      "sentence",
      "series",
      "service",
      "session",
      "settle",
      "setup",
      "seven",
      "shadow",
      "shaft",
      "shallow",
      "share",
      "shed",
      "shell",
      "sheriff",
      "shield",
      "shift",
      "shine",
      "ship",
      "shiver",
      "shock",
      "shoe",
      "shoot",
      "shop",
      "short",
      "shoulder",
      "shove",
      "shrimp",
      "shrug",
      "shuffle",
      "shy",
      "sibling",
      "sick",
      "side",
      "siege",
      "sight",
      "sign",
      "silent",
      "silk",
      "silly",
      "silver",
      "similar",
      "simple",
      "since",
      "sing",
      "siren",
      "sister",
      "situate",
      "six",
      "size",
      "skate",
      "sketch",
      "ski",
      "skill",
      "skin",
      "skirt",
      "skull",
      "slab",
      "slam",
      "sleep",
      "slender",
      "slice",
      "slide",
      "slight",
      "slim",
      "slogan",
      "slot",
      "slow",
      "slush",
      "small",
      "smart",
      "smile",
      "smoke",
      "smooth",
      "snack",
      "snake",
      "snap",
      "sniff",
      "snow",
      "soap",
      "soccer",
      "social",
      "sock",
      "soda",
      "soft",
      "solar",
      "soldier",
      "solid",
      "solution",
      "solve",
      "someone",
      "song",
      "soon",
      "sorry",
      "sort",
      "soul",
      "sound",
      "soup",
      "source",
      "south",
      "space",
      "spare",
      "spatial",
      "spawn",
      "speak",
      "special",
      "speed",
      "spell",
      "spend",
      "sphere",
      "spice",
      "spider",
      "spike",
      "spin",
      "spirit",
      "split",
      "spoil",
      "sponsor",
      "spoon",
      "sport",
      "spot",
      "spray",
      "spread",
      "spring",
      "spy",
      "square",
      "squeeze",
      "squirrel",
      "stable",
      "stadium",
      "staff",
      "stage",
      "stairs",
      "stamp",
      "stand",
      "start",
      "state",
      "stay",
      "steak",
      "steel",
      "stem",
      "step",
      "stereo",
      "stick",
      "still",
      "sting",
      "stock",
      "stomach",
      "stone",
      "stool",
      "story",
      "stove",
      "strategy",
      "street",
      "strike",
      "strong",
      "struggle",
      "student",
      "stuff",
      "stumble",
      "style",
      "subject",
      "submit",
      "subway",
      "success",
      "such",
      "sudden",
      "suffer",
      "sugar",
      "suggest",
      "suit",
      "summer",
      "sun",
      "sunny",
      "sunset",
      "super",
      "supply",
      "supreme",
      "sure",
      "surface",
      "surge",
      "surprise",
      "surround",
      "survey",
      "suspect",
      "sustain",
      "swallow",
      "swamp",
      "swap",
      "swarm",
      "swear",
      "sweet",
      "swift",
      "swim",
      "swing",
      "switch",
      "sword",
      "symbol",
      "symptom",
      "syrup",
      "system",
      "table",
      "tackle",
      "tag",
      "tail",
      "talent",
      "talk",
      "tank",
      "tape",
      "target",
      "task",
      "taste",
      "tattoo",
      "taxi",
      "teach",
      "team",
      "tell",
      "ten",
      "tenant",
      "tennis",
      "tent",
      "term",
      "test",
      "text",
      "thank",
      "that",
      "theme",
      "then",
      "theory",
      "there",
      "they",
      "thing",
      "this",
      "thought",
      "three",
      "thrive",
      "throw",
      "thumb",
      "thunder",
      "ticket",
      "tide",
      "tiger",
      "tilt",
      "timber",
      "time",
      "tiny",
      "tip",
      "tired",
      "tissue",
      "title",
      "toast",
      "tobacco",
      "today",
      "toddler",
      "toe",
      "together",
      "toilet",
      "token",
      "tomato",
      "tomorrow",
      "tone",
      "tongue",
      "tonight",
      "tool",
      "tooth",
      "top",
      "topic",
      "topple",
      "torch",
      "tornado",
      "tortoise",
      "toss",
      "total",
      "tourist",
      "toward",
      "tower",
      "town",
      "toy",
      "track",
      "trade",
      "traffic",
      "tragic",
      "train",
      "transfer",
      "trap",
      "trash",
      "travel",
      "tray",
      "treat",
      "tree",
      "trend",
      "trial",
      "tribe",
      "trick",
      "trigger",
      "trim",
      "trip",
      "trophy",
      "trouble",
      "truck",
      "true",
      "truly",
      "trumpet",
      "trust",
      "truth",
      "try",
      "tube",
      "tuition",
      "tumble",
      "tuna",
      "tunnel",
      "turkey",
      "turn",
      "turtle",
      "twelve",
      "twenty",
      "twice",
      "twin",
      "twist",
      "two",
      "type",
      "typical",
      "ugly",
      "umbrella",
      "unable",
      "unaware",
      "uncle",
      "uncover",
      "under",
      "undo",
      "unfair",
      "unfold",
      "unhappy",
      "uniform",
      "unique",
      "unit",
      "universe",
      "unknown",
      "unlock",
      "until",
      "unusual",
      "unveil",
      "update",
      "upgrade",
      "uphold",
      "upon",
      "upper",
      "upset",
      "urban",
      "urge",
      "usage",
      "use",
      "used",
      "useful",
      "useless",
      "usual",
      "utility",
      "vacant",
      "vacuum",
      "vague",
      "valid",
      "valley",
      "valve",
      "van",
      "vanish",
      "vapor",
      "various",
      "vast",
      "vault",
      "vehicle",
      "velvet",
      "vendor",
      "venture",
      "venue",
      "verb",
      "verify",
      "version",
      "very",
      "vessel",
      "veteran",
      "viable",
      "vibrant",
      "vicious",
      "victory",
      "video",
      "view",
      "village",
      "vintage",
      "violin",
      "virtual",
      "virus",
      "visa",
      "visit",
      "visual",
      "vital",
      "vivid",
      "vocal",
      "voice",
      "void",
      "volcano",
      "volume",
      "vote",
      "voyage",
      "wage",
      "wagon",
      "wait",
      "walk",
      "wall",
      "walnut",
      "want",
      "warfare",
      "warm",
      "warrior",
      "wash",
      "wasp",
      "waste",
      "water",
      "wave",
      "way",
      "wealth",
      "weapon",
      "wear",
      "weasel",
      "weather",
      "web",
      "wedding",
      "weekend",
      "weird",
      "welcome",
      "west",
      "wet",
      "whale",
      "what",
      "wheat",
      "wheel",
      "when",
      "where",
      "whip",
      "whisper",
      "wide",
      "width",
      "wife",
      "wild",
      "will",
      "win",
      "window",
      "wine",
      "wing",
      "wink",
      "winner",
      "winter",
      "wire",
      "wisdom",
      "wise",
      "wish",
      "witness",
      "wolf",
      "woman",
      "wonder",
      "wood",
      "wool",
      "word",
      "work",
      "world",
      "worry",
      "worth",
      "wrap",
      "wreck",
      "wrestle",
      "wrist",
      "write",
      "wrong",
      "yard",
      "year",
      "yellow",
      "you",
      "young",
      "youth",
      "zebra",
      "zero",
      "zone",
      "zoo"
    ];
  }
});

// node_modules/bip39/src/_wordlists.js
var require_wordlists = __commonJS({
  "node_modules/bip39/src/_wordlists.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var wordlists = {};
    exports2.wordlists = wordlists;
    var _default;
    exports2._default = _default;
    try {
      exports2._default = _default = require_czech();
      wordlists.czech = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_chinese_simplified();
      wordlists.chinese_simplified = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_chinese_traditional();
      wordlists.chinese_traditional = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_korean();
      wordlists.korean = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_french();
      wordlists.french = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_italian();
      wordlists.italian = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_spanish();
      wordlists.spanish = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_japanese();
      wordlists.japanese = _default;
      wordlists.JA = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_portuguese();
      wordlists.portuguese = _default;
    } catch (err) {
    }
    try {
      exports2._default = _default = require_english();
      wordlists.english = _default;
      wordlists.EN = _default;
    } catch (err) {
    }
  }
});

// node_modules/bip39/src/index.js
var require_src2 = __commonJS({
  "node_modules/bip39/src/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var createHash = require_browser3();
    var pbkdf2_1 = require_browser5();
    var randomBytes = require_browser();
    var _wordlists_1 = require_wordlists();
    var DEFAULT_WORDLIST = _wordlists_1._default;
    var INVALID_MNEMONIC = "Invalid mnemonic";
    var INVALID_ENTROPY = "Invalid entropy";
    var INVALID_CHECKSUM = "Invalid mnemonic checksum";
    var WORDLIST_REQUIRED = "A wordlist is required but a default could not be found.\nPlease pass a 2048 word array explicitly.";
    function pbkdf2Promise(password, saltMixin, iterations, keylen, digest) {
      return Promise.resolve().then(() => new Promise((resolve, reject) => {
        const callback = (err, derivedKey) => {
          if (err) {
            return reject(err);
          } else {
            return resolve(derivedKey);
          }
        };
        pbkdf2_1.pbkdf2(password, saltMixin, iterations, keylen, digest, callback);
      }));
    }
    function normalize(str) {
      return (str || "").normalize("NFKD");
    }
    function lpad(str, padString, length) {
      while (str.length < length) {
        str = padString + str;
      }
      return str;
    }
    function binaryToByte(bin) {
      return parseInt(bin, 2);
    }
    function bytesToBinary(bytes) {
      return bytes.map((x) => lpad(x.toString(2), "0", 8)).join("");
    }
    function deriveChecksumBits(entropyBuffer) {
      const ENT = entropyBuffer.length * 8;
      const CS = ENT / 32;
      const hash = createHash("sha256").update(entropyBuffer).digest();
      return bytesToBinary(Array.from(hash)).slice(0, CS);
    }
    function salt(password) {
      return "mnemonic" + (password || "");
    }
    function mnemonicToSeedSync(mnemonic, password) {
      const mnemonicBuffer = Buffer.from(normalize(mnemonic), "utf8");
      const saltBuffer = Buffer.from(salt(normalize(password)), "utf8");
      return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, "sha512");
    }
    exports2.mnemonicToSeedSync = mnemonicToSeedSync;
    function mnemonicToSeed(mnemonic, password) {
      return Promise.resolve().then(() => {
        const mnemonicBuffer = Buffer.from(normalize(mnemonic), "utf8");
        const saltBuffer = Buffer.from(salt(normalize(password)), "utf8");
        return pbkdf2Promise(mnemonicBuffer, saltBuffer, 2048, 64, "sha512");
      });
    }
    exports2.mnemonicToSeed = mnemonicToSeed;
    function mnemonicToEntropy(mnemonic, wordlist) {
      wordlist = wordlist || DEFAULT_WORDLIST;
      if (!wordlist) {
        throw new Error(WORDLIST_REQUIRED);
      }
      const words = normalize(mnemonic).split(" ");
      if (words.length % 3 !== 0) {
        throw new Error(INVALID_MNEMONIC);
      }
      const bits = words.map((word) => {
        const index = wordlist.indexOf(word);
        if (index === -1) {
          throw new Error(INVALID_MNEMONIC);
        }
        return lpad(index.toString(2), "0", 11);
      }).join("");
      const dividerIndex = Math.floor(bits.length / 33) * 32;
      const entropyBits = bits.slice(0, dividerIndex);
      const checksumBits = bits.slice(dividerIndex);
      const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
      if (entropyBytes.length < 16) {
        throw new Error(INVALID_ENTROPY);
      }
      if (entropyBytes.length > 32) {
        throw new Error(INVALID_ENTROPY);
      }
      if (entropyBytes.length % 4 !== 0) {
        throw new Error(INVALID_ENTROPY);
      }
      const entropy = Buffer.from(entropyBytes);
      const newChecksum = deriveChecksumBits(entropy);
      if (newChecksum !== checksumBits) {
        throw new Error(INVALID_CHECKSUM);
      }
      return entropy.toString("hex");
    }
    exports2.mnemonicToEntropy = mnemonicToEntropy;
    function entropyToMnemonic(entropy, wordlist) {
      if (!Buffer.isBuffer(entropy)) {
        entropy = Buffer.from(entropy, "hex");
      }
      wordlist = wordlist || DEFAULT_WORDLIST;
      if (!wordlist) {
        throw new Error(WORDLIST_REQUIRED);
      }
      if (entropy.length < 16) {
        throw new TypeError(INVALID_ENTROPY);
      }
      if (entropy.length > 32) {
        throw new TypeError(INVALID_ENTROPY);
      }
      if (entropy.length % 4 !== 0) {
        throw new TypeError(INVALID_ENTROPY);
      }
      const entropyBits = bytesToBinary(Array.from(entropy));
      const checksumBits = deriveChecksumBits(entropy);
      const bits = entropyBits + checksumBits;
      const chunks = bits.match(/(.{1,11})/g);
      const words = chunks.map((binary) => {
        const index = binaryToByte(binary);
        return wordlist[index];
      });
      return wordlist[0] === "\u3042\u3044\u3053\u304F\u3057\u3093" ? words.join("\u3000") : words.join(" ");
    }
    exports2.entropyToMnemonic = entropyToMnemonic;
    function generateMnemonic(strength, rng, wordlist) {
      strength = strength || 128;
      if (strength % 32 !== 0) {
        throw new TypeError(INVALID_ENTROPY);
      }
      rng = rng || randomBytes;
      return entropyToMnemonic(rng(strength / 8), wordlist);
    }
    exports2.generateMnemonic = generateMnemonic;
    function validateMnemonic(mnemonic, wordlist) {
      try {
        mnemonicToEntropy(mnemonic, wordlist);
      } catch (e2) {
        return false;
      }
      return true;
    }
    exports2.validateMnemonic = validateMnemonic;
    function setDefaultWordlist(language) {
      const result = _wordlists_1.wordlists[language];
      if (result) {
        DEFAULT_WORDLIST = result;
      } else {
        throw new Error('Could not find wordlist for language "' + language + '"');
      }
    }
    exports2.setDefaultWordlist = setDefaultWordlist;
    function getDefaultWordlist() {
      if (!DEFAULT_WORDLIST) {
        throw new Error("No Default Wordlist set");
      }
      return Object.keys(_wordlists_1.wordlists).filter((lang) => {
        if (lang === "JA" || lang === "EN") {
          return false;
        }
        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
      })[0];
    }
    exports2.getDefaultWordlist = getDefaultWordlist;
    var _wordlists_2 = require_wordlists();
    exports2.wordlists = _wordlists_2.wordlists;
  }
});

// node_modules/secure-random/lib/secure-random.js
var require_secure_random = __commonJS({
  "node_modules/secure-random/lib/secure-random.js"(exports2, module2) {
    init_define_process_env();
    !function(globals) {
      "use strict";
      if (typeof define !== "undefined" && define.amd) {
        define([], function() {
          return secureRandom;
        });
      } else if (typeof module2 !== "undefined" && module2.exports) {
        module2.exports = secureRandom;
      } else {
        globals.secureRandom = secureRandom;
      }
      function secureRandom(count, options) {
        options = options || { type: "Array" };
        if (typeof process != "undefined" && typeof process.pid == "number" && process.versions && process.versions.node) {
          return nodeRandom(count, options);
        } else {
          var crypto2 = window.crypto || window.msCrypto;
          if (!crypto2)
            throw new Error("Your browser does not support window.crypto.");
          return browserRandom(count, options);
        }
      }
      function nodeRandom(count, options) {
        var crypto2 = (init_crypto(), __toCommonJS(crypto_exports));
        var buf = crypto2.randomBytes(count);
        switch (options.type) {
          case "Array":
            return [].slice.call(buf);
          case "Buffer":
            return buf;
          case "Uint8Array":
            var arr = new Uint8Array(count);
            for (var i = 0; i < count; ++i) {
              arr[i] = buf.readUInt8(i);
            }
            return arr;
          default:
            throw new Error(options.type + " is unsupported.");
        }
      }
      function browserRandom(count, options) {
        var nativeArr = new Uint8Array(count);
        var crypto2 = window.crypto || window.msCrypto;
        crypto2.getRandomValues(nativeArr);
        switch (options.type) {
          case "Array":
            return [].slice.call(nativeArr);
          case "Buffer":
            try {
              var b2 = new Buffer(1);
            } catch (e2) {
              throw new Error("Buffer not supported in this environment. Use Node.js or Browserify for browser support.");
            }
            return new Buffer(nativeArr);
          case "Uint8Array":
            return nativeArr;
          default:
            throw new Error(options.type + " is unsupported.");
        }
      }
      secureRandom.randomArray = function(byteCount) {
        return secureRandom(byteCount, { type: "Array" });
      };
      secureRandom.randomUint8Array = function(byteCount) {
        return secureRandom(byteCount, { type: "Uint8Array" });
      };
      secureRandom.randomBuffer = function(byteCount) {
        return secureRandom(byteCount, { type: "Buffer" });
      };
    }(exports2);
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/lib/rng-browser.js"(exports2, module2) {
    init_define_process_env();
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module2.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module2.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/lib/bytesToUuid.js"(exports2, module2) {
    init_define_process_env();
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module2.exports = bytesToUuid;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/v1.js"(exports2, module2) {
    init_define_process_env();
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b2 = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b2[i++] = tl >>> 24 & 255;
      b2[i++] = tl >>> 16 & 255;
      b2[i++] = tl >>> 8 & 255;
      b2[i++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b2[i++] = tmh >>> 8 & 255;
      b2[i++] = tmh & 255;
      b2[i++] = tmh >>> 24 & 15 | 16;
      b2[i++] = tmh >>> 16 & 255;
      b2[i++] = clockseq >>> 8 | 128;
      b2[i++] = clockseq & 255;
      for (var n = 0; n < 6; ++n) {
        b2[i + n] = node[n];
      }
      return buf ? buf : bytesToUuid(b2);
    }
    module2.exports = v1;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/v4.js"(exports2, module2) {
    init_define_process_env();
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module2.exports = v4;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/uuid/index.js"(exports2, module2) {
    init_define_process_env();
    var v1 = require_v1();
    var v4 = require_v4();
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    module2.exports = uuid;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/core.js
var require_core2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/core.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var create = Object.create || function() {
          function F() {
          }
          ;
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var i = 0; i < thatSigBytes; i += 4) {
                thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words = [];
            var r = function(m_w) {
              var m_w = m_w;
              var m_z = 987654321;
              var mask = 4294967295;
              return function() {
                m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                var result = (m_z << 16) + m_w & mask;
                result /= 4294967296;
                result += 0.5;
                return result * (Math2.random() > 0.5 ? 1 : -1);
              };
            };
            for (var i = 0, rcache; i < nBytes; i += 4) {
              var _r = r((rcache || Math2.random()) * 4294967296);
              rcache = _r() * 987654071;
              words.push(_r() * 4294967296 | 0);
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              var processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/enc-hex.js
var require_enc_hex = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/enc-hex.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS.enc.Hex;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/ripemd160.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/sha256.js
var require_sha2562 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/sha256.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a2 = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            var e2 = H2[4];
            var f2 = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e2 & f2 ^ ~e2 & g;
              var maj = a2 & b2 ^ a2 & c2 ^ b2 & c2;
              var sigma0 = (a2 << 30 | a2 >>> 2) ^ (a2 << 19 | a2 >>> 13) ^ (a2 << 10 | a2 >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f2;
              f2 = e2;
              e2 = d2 + t1 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a2;
              a2 = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a2 | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
            H2[4] = H2[4] + e2 | 0;
            H2[5] = H2[5] + f2 | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/x64-core.js
var require_x64_core2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/x64-core.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/sha3.js
var require_sha32 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/crypto-js/sha3.js"(exports2, module2) {
    init_define_process_env();
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core2(), require_x64_core2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round2 = 0; round2 < 24; round2++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round2];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
              ;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/cryptoHelper.js
var require_cryptoHelper = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/cryptoHelper.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.calculateSwapID = exports2.calculateRandomNumberHash = exports2.sha3 = exports2.sha256 = exports2.sha256ripemd160 = exports2.ensureHex = exports2.isHex = exports2.reverseHex = exports2.reverseArray = exports2.hexXor = exports2.num2VarInt = exports2.num2hexstring = exports2.int2hex = exports2.hexstring2str = exports2.str2hexstring = exports2.ab2hexstring = exports2.hexstring2ab = exports2.str2ab = exports2.ab2str = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _encHex = _interopRequireDefault(require_enc_hex());
    var _ripemd = _interopRequireDefault(require_ripemd1602());
    var _sha = _interopRequireDefault(require_sha2562());
    var _sha2 = _interopRequireDefault(require_sha32());
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var ab2str = function ab2str2(buf) {
      var numArr = [];
      for (var i = 0, len = buf.length; i < len; i++) {
        numArr.push(buf[i]);
      }
      String.fromCharCode.apply(null, numArr);
    };
    exports2.ab2str = ab2str;
    var str2ab = function str2ab2(str) {
      if (typeof str !== "string") {
        throw new Error("str2ab expects a string");
      }
      var result = new Uint8Array(str.length);
      for (var i = 0, strLen = str.length; i < strLen; i++) {
        result[i] = str.charCodeAt(i);
      }
      return result;
    };
    exports2.str2ab = str2ab;
    var hexstring2ab = function hexstring2ab2(str) {
      ensureHex(str);
      if (!str.length)
        return new Uint8Array();
      var iters = str.length / 2;
      var result = new Uint8Array(iters);
      for (var i = 0; i < iters; i++) {
        result[i] = parseInt(str.substring(0, 2), 16);
        str = str.substring(2);
      }
      return result;
    };
    exports2.hexstring2ab = hexstring2ab;
    var ab2hexstring = function ab2hexstring2(arr) {
      if ((0, _typeof2["default"])(arr) !== "object") {
        throw new Error("ab2hexstring expects an array");
      }
      var result = "";
      for (var i = 0; i < arr.length; i++) {
        var str = arr[i].toString(16);
        str = str.length === 0 ? "00" : str.length === 1 ? "0" + str : str;
        result += str;
      }
      return result;
    };
    exports2.ab2hexstring = ab2hexstring;
    var str2hexstring = function str2hexstring2(str) {
      return ab2hexstring(str2ab(str));
    };
    exports2.str2hexstring = str2hexstring;
    var hexstring2str = function hexstring2str2(hexstring) {
      return ab2str(hexstring2ab(hexstring));
    };
    exports2.hexstring2str = hexstring2str;
    var int2hex = function int2hex2(num) {
      if (typeof num !== "number") {
        throw new Error("int2hex expects a number");
      }
      var h = num.toString(16);
      return h.length % 2 ? "0" + h : h;
    };
    exports2.int2hex = int2hex;
    var num2hexstring = function num2hexstring2(num) {
      var size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var littleEndian = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (typeof num !== "number")
        throw new Error("num must be numeric");
      if (num < 0)
        throw new RangeError("num is unsigned (>= 0)");
      if (size % 1 !== 0)
        throw new Error("size must be a whole integer");
      if (!Number.isSafeInteger(num))
        throw new RangeError("num (".concat(num, ") must be a safe integer"));
      size = size * 2;
      var hexstring = num.toString(16);
      hexstring = hexstring.length % size === 0 ? hexstring : ("0".repeat(size) + hexstring).substring(hexstring.length);
      if (littleEndian)
        hexstring = reverseHex(hexstring);
      return hexstring;
    };
    exports2.num2hexstring = num2hexstring;
    var num2VarInt = function num2VarInt2(num) {
      if (num < 253) {
        return num2hexstring(num);
      } else if (num <= 65535) {
        return "fd" + num2hexstring(num, 2, true);
      } else if (num <= 4294967295) {
        return "fe" + num2hexstring(num, 4, true);
      } else {
        return "ff" + num2hexstring(num, 8, true);
      }
    };
    exports2.num2VarInt = num2VarInt;
    var hexXor = function hexXor2(str1, str2) {
      ensureHex(str1);
      ensureHex(str2);
      if (str1.length !== str2.length)
        throw new Error("strings are disparate lengths");
      var result = [];
      for (var i = 0; i < str1.length; i += 2) {
        result.push(parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));
      }
      return ab2hexstring(result);
    };
    exports2.hexXor = hexXor;
    var reverseArray = function reverseArray2(arr) {
      if ((0, _typeof2["default"])(arr) !== "object" || !arr.length)
        throw new Error("reverseArray expects an array");
      var result = new Uint8Array(arr.length);
      for (var i = 0; i < arr.length; i++) {
        result[i] = arr[arr.length - 1 - i];
      }
      return result;
    };
    exports2.reverseArray = reverseArray;
    var reverseHex = function reverseHex2(hex) {
      ensureHex(hex);
      var out = "";
      for (var i = hex.length - 2; i >= 0; i -= 2) {
        out += hex.substr(i, 2);
      }
      return out;
    };
    exports2.reverseHex = reverseHex;
    var hexRegex = /^([0-9A-Fa-f]{2})*$/;
    var isHex = function isHex2(str) {
      try {
        return hexRegex.test(str);
      } catch (err) {
        return false;
      }
    };
    exports2.isHex = isHex;
    var ensureHex = function ensureHex2(str) {
      if (!isHex(str))
        throw new Error("Expected a hexstring but got ".concat(str));
    };
    exports2.ensureHex = ensureHex;
    var sha256ripemd160 = function sha256ripemd1602(hex) {
      if (typeof hex !== "string")
        throw new Error("sha256ripemd160 expects a string");
      if (hex.length % 2 !== 0)
        throw new Error("invalid hex string length: ".concat(hex));
      var hexEncoded = _encHex["default"].parse(hex);
      var ProgramSha256 = (0, _sha["default"])(hexEncoded);
      return (0, _ripemd["default"])(ProgramSha256).toString();
    };
    exports2.sha256ripemd160 = sha256ripemd160;
    var sha256 = function sha2562(hex) {
      if (typeof hex !== "string")
        throw new Error("sha256 expects a hex string");
      if (hex.length % 2 !== 0)
        throw new Error("invalid hex string length: ".concat(hex));
      var hexEncoded = _encHex["default"].parse(hex);
      return (0, _sha["default"])(hexEncoded).toString();
    };
    exports2.sha256 = sha256;
    var sha3 = function sha32(hex) {
      if (typeof hex !== "string")
        throw new Error("sha3 expects a hex string");
      if (hex.length % 2 !== 0)
        throw new Error("invalid hex string length: ".concat(hex));
      var hexEncoded = _encHex["default"].parse(hex);
      return (0, _sha2["default"])(hexEncoded).toString();
    };
    exports2.sha3 = sha3;
    var calculateRandomNumberHash = function calculateRandomNumberHash2(randomNumber, timestamp) {
      var timestampHexStr = timestamp.toString(16);
      var timestampHexStrFormat = timestampHexStr;
      for (var i = 0; i < 16 - timestampHexStr.length; i++) {
        timestampHexStrFormat = "0" + timestampHexStrFormat;
      }
      var timestampBytes = Buffer.from(timestampHexStrFormat, "hex");
      var newBuffer = Buffer.concat([Buffer.from(randomNumber, "hex"), timestampBytes]);
      return sha256(newBuffer.toString("hex"));
    };
    exports2.calculateRandomNumberHash = calculateRandomNumberHash;
    var calculateSwapID = function calculateSwapID2(randomNumberHash, sender, senderOtherChain) {
      var randomNumberHashBytes = Buffer.from(randomNumberHash, "hex");
      var senderBytes = crypto2.decodeAddress(sender);
      var sendOtherChainBytes = Buffer.from(senderOtherChain.toLowerCase(), "utf8");
      var newBuffer = Buffer.concat([randomNumberHashBytes, senderBytes, sendOtherChainBytes]);
      return sha256(newBuffer.toString("hex"));
    };
    exports2.calculateSwapID = calculateSwapID;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/validateHelper.js
var require_validateHelper = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/validateHelper.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.validateOffsetLimit = exports2.validateTradingPair = exports2.validateSymbol = exports2.checkCoins = exports2.checkNumber = void 0;
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var MAX_INT64 = Math.pow(2, 63);
    var checkNumber = function checkNumber2(value) {
      var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "input number";
      if (new _big["default"](value).lte(0)) {
        throw new Error("".concat(name, " should be a positive number"));
      }
      if (new _big["default"](value).gte(MAX_INT64)) {
        throw new Error("".concat(name, " should be less than 2^63"));
      }
    };
    exports2.checkNumber = checkNumber;
    var checkCoins = function checkCoins2(coins) {
      coins = coins || [];
      coins.forEach(function(coin) {
        checkNumber(coin.amount);
        if (!coin.denom) {
          throw new Error("invalid denmon");
        }
      });
    };
    exports2.checkCoins = checkCoins;
    var validateSymbol = function validateSymbol2(symbol) {
      if (!symbol) {
        throw new Error("suffixed token symbol cannot be empty");
      }
      var splitSymbols = symbol.split("-");
      if (!/^[a-zA-z\d/.]{3,10}$/.test(splitSymbols[0])) {
        throw new Error("symbol length is limited to 3~10");
      }
    };
    exports2.validateSymbol = validateSymbol;
    var validateTradingPair = function validateTradingPair2(pair) {
      var symbols = pair.split("_");
      if (symbols.length !== 2) {
        throw new Error('the pair should in format "symbol1_symbol2"');
      }
      validateSymbol(symbols[0]);
      validateSymbol(symbols[1]);
    };
    exports2.validateTradingPair = validateTradingPair;
    var validateOffsetLimit = function validateOffsetLimit2(offset, limit) {
      if (offset < 0) {
        throw new Error("offset can't be less than 0");
      }
      if (limit < 0) {
        throw new Error("limit can't be less than 0");
      }
    };
    exports2.validateOffsetLimit = validateOffsetLimit;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/base/index.js
var require_base = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/base/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BaseMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var BaseMsg = function() {
      function BaseMsg2() {
        (0, _classCallCheck2["default"])(this, BaseMsg2);
      }
      (0, _createClass2["default"])(BaseMsg2, null, [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {};
        }
      }]);
      return BaseMsg2;
    }();
    exports2.BaseMsg = BaseMsg;
  }
});

// node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime/helpers/inherits.js"(exports2, module2) {
    init_define_process_env();
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf(subClass, superClass);
    }
    module2.exports = _inherits, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports2, module2) {
    init_define_process_env();
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized(self2);
    }
    module2.exports = _possibleConstructorReturn, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/abciResponse.js
var require_abciResponse = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/abciResponse.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/stdTx.js
var require_stdTx = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/stdTx.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.AminoPrefix = void 0;
    var AminoPrefix;
    exports2.AminoPrefix = AminoPrefix;
    (function(AminoPrefix2) {
      AminoPrefix2["MsgSend"] = "2A2C87FA";
      AminoPrefix2["NewOrderMsg"] = "CE6DC043";
      AminoPrefix2["CancelOrderMsg"] = "166E681B";
      AminoPrefix2["IssueMsg"] = "17EFAB80";
      AminoPrefix2["BurnMsg"] = "7ED2D2A0";
      AminoPrefix2["FreezeMsg"] = "E774B32D";
      AminoPrefix2["UnfreezeMsg"] = "6515FF0D";
      AminoPrefix2["MintMsg"] = "467E0829";
      AminoPrefix2["ListMsg"] = "B41DE13F";
      AminoPrefix2["StdTx"] = "F0625DEE";
      AminoPrefix2["PubKeySecp256k1"] = "EB5AE987";
      AminoPrefix2["SignatureSecp256k1"] = "7FC4A495";
      AminoPrefix2["MsgSubmitProposal"] = "B42D614E";
      AminoPrefix2["MsgDeposit"] = "A18A56E5";
      AminoPrefix2["MsgVote"] = "A1CADD36";
      AminoPrefix2["TimeLockMsg"] = "07921531";
      AminoPrefix2["TimeUnlockMsg"] = "C4050C6C";
      AminoPrefix2["TimeRelockMsg"] = "504711DA";
      AminoPrefix2["HTLTMsg"] = "B33F9A24";
      AminoPrefix2["DepositHTLTMsg"] = "63986496";
      AminoPrefix2["ClaimHTLTMsg"] = "C1665300";
      AminoPrefix2["RefundHTLTMsg"] = "3454A27C";
      AminoPrefix2["SetAccountFlagsMsg"] = "BEA6E301";
      AminoPrefix2["BnbchainAccount"] = "4BDC4C27";
      AminoPrefix2["BnbchainToken"] = "140364E6";
      AminoPrefix2["MsgCreateValidator"] = "EB361D01";
      AminoPrefix2["MsgRemoveValidator"] = "C1AFE85F";
      AminoPrefix2["MsgCreateValidatorProposal"] = "DB6A19FD";
      AminoPrefix2["MsgEditValidator"] = "C2E8BCCD";
      AminoPrefix2["MsgDelegate"] = "921D2E4E";
      AminoPrefix2["MsgBeginUnbonding"] = "A3823C9A";
      AminoPrefix2["MsgBeginRedelegate"] = "267996D2";
      AminoPrefix2["MsgCreateSideChainValidator"] = "D17201E5";
      AminoPrefix2["MsgEditSideChainValidator"] = "264CC57B";
      AminoPrefix2["MsgSideChainDelegate"] = "E3A07FD2";
      AminoPrefix2["MsgSideChainRedelegate"] = "E3CED364";
      AminoPrefix2["MsgSideChainUndelegate"] = "514F7E0E";
      AminoPrefix2["Claim"] = "4E781C11";
      AminoPrefix2["ClaimMsg"] = "175A0521";
      AminoPrefix2["BindMsg"] = "B9AE640C";
      AminoPrefix2["TransferOutMsg"] = "800819C0";
      AminoPrefix2["IssueMiniMsg"] = "A3F16C41";
      AminoPrefix2["IssueTinyMsg"] = "ED2832D4";
      AminoPrefix2["SetURIMsg"] = "7B1D34E7";
      AminoPrefix2["ListMiniMsg"] = "4C264019";
      AminoPrefix2["MiniToken"] = "E0051C20";
    })(AminoPrefix || (exports2.AminoPrefix = AminoPrefix = {}));
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/txResult.js
var require_txResult = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/txResult.js"() {
    "use strict";
    init_define_process_env();
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/index.js
var require_tx = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/tx/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _abciResponse = require_abciResponse();
    Object.keys(_abciResponse).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _abciResponse[key];
        }
      });
    });
    var _stdTx = require_stdTx();
    Object.keys(_stdTx).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _stdTx[key];
        }
      });
    });
    var _txResult = require_txResult();
    Object.keys(_txResult).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _txResult[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/cancelOrder.js
var require_cancelOrder = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/cancelOrder.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.CancelOrderMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    var _base = require_base();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var CancelOrderMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(CancelOrderMsg2, _BaseMsg);
      var _super = _createSuper(CancelOrderMsg2);
      function CancelOrderMsg2(address, sybmol, orderId) {
        var _this;
        (0, _classCallCheck2["default"])(this, CancelOrderMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "address", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "orderId", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "aminoPrefix", _tx.AminoPrefix.CancelOrderMsg);
        _this.address = address;
        _this.symbol = sybmol;
        _this.orderId = orderId;
        return _this;
      }
      (0, _createClass2["default"])(CancelOrderMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            sender: this.address,
            symbol: this.symbol,
            refid: this.orderId
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            sender: crypto2.decodeAddress(this.address),
            symbol: this.symbol,
            refid: this.orderId,
            aminoPrefix: _tx.AminoPrefix.CancelOrderMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            sender: Buffer.from(""),
            symbol: "",
            refid: "",
            aminoPrefix: _tx.AminoPrefix.CancelOrderMsg
          };
        }
      }]);
      return CancelOrderMsg2;
    }(_base.BaseMsg);
    exports2.CancelOrderMsg = CancelOrderMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/newOrder.js
var require_newOrder = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/newOrder.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NewOrderMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BASENUMBER = Math.pow(10, 8);
    var NewOrderMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(NewOrderMsg2, _BaseMsg);
      var _super = _createSuper(NewOrderMsg2);
      function NewOrderMsg2(data, address) {
        var _this;
        (0, _classCallCheck2["default"])(this, NewOrderMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "newOrder", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "address", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "aminoPrefix", _tx.AminoPrefix.NewOrderMsg);
        var bigPrice = new _big["default"](data.price);
        var bigQuantity = new _big["default"](data.quantity);
        _this.newOrder = data;
        _this.newOrder.price = Number(bigPrice.mul(BASENUMBER).toString());
        _this.newOrder.quantity = Number(bigQuantity.mul(BASENUMBER).toString());
        _this.address = address;
        return _this;
      }
      (0, _createClass2["default"])(NewOrderMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = _objectSpread({
            sender: this.address
          }, this.newOrder);
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            sender: crypto2.decodeAddress(this.address),
            id: this.newOrder.id,
            symbol: this.newOrder.symbol,
            ordertype: this.newOrder.ordertype,
            side: this.newOrder.side,
            price: this.newOrder.price,
            quantity: this.newOrder.quantity,
            timeinforce: this.newOrder.timeinforce,
            aminoPrefix: this.aminoPrefix
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            sender: Buffer.from(""),
            id: "",
            symbol: "",
            orderType: 0,
            side: 0,
            price: 0,
            quantity: 0,
            timeinforce: 0,
            aminoPrefix: _tx.AminoPrefix.NewOrderMsg
          };
        }
      }]);
      return NewOrderMsg2;
    }(_base.BaseMsg);
    exports2.NewOrderMsg = NewOrderMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/listMiniMsg.js
var require_listMiniMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/listMiniMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ListMiniMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    var _base = require_base();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var ListMiniMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(ListMiniMsg2, _BaseMsg);
      var _super = _createSuper(ListMiniMsg2);
      function ListMiniMsg2(_ref) {
        var _this;
        var from = _ref.from, base_asset_symbol = _ref.base_asset_symbol, quote_asset_symbol = _ref.quote_asset_symbol, init_price = _ref.init_price;
        (0, _classCallCheck2["default"])(this, ListMiniMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "base_asset_symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "quote_asset_symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "init_price", void 0);
        _this.from = from;
        _this.base_asset_symbol = base_asset_symbol;
        _this.quote_asset_symbol = quote_asset_symbol;
        _this.init_price = init_price;
        return _this;
      }
      (0, _createClass2["default"])(ListMiniMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            base_asset_symbol: this.base_asset_symbol,
            quote_asset_symbol: this.quote_asset_symbol,
            init_price: this.init_price
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            base_asset_symbol: this.base_asset_symbol,
            quote_asset_symbol: this.quote_asset_symbol,
            init_price: this.init_price,
            aminoPrefix: _tx.AminoPrefix.ListMiniMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            base_asset_symbol: "",
            quote_asset_symbol: "",
            init_price: 0,
            aminoPrefix: _tx.AminoPrefix.ListMiniMsg
          };
        }
      }]);
      return ListMiniMsg2;
    }(_base.BaseMsg);
    exports2.ListMiniMsg = ListMiniMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/index.js
var require_dex = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/dex/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _cancelOrder = require_cancelOrder();
    Object.keys(_cancelOrder).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _cancelOrder[key];
        }
      });
    });
    var _newOrder = require_newOrder();
    Object.keys(_newOrder).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _newOrder[key];
        }
      });
    });
    var _listMiniMsg = require_listMiniMsg();
    Object.keys(_listMiniMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _listMiniMsg[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/burnToken.js
var require_burnToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/burnToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BurnTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BurnTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(BurnTokenMsg2, _BaseMsg);
      var _super = _createSuper(BurnTokenMsg2);
      function BurnTokenMsg2(_ref) {
        var _this;
        var address = _ref.address, sybmol = _ref.sybmol, amount = _ref.amount;
        (0, _classCallCheck2["default"])(this, BurnTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.symbol = sybmol;
        _this.amount = amount;
        return _this;
      }
      (0, _createClass2["default"])(BurnTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            symbol: this.symbol,
            amount: this.amount
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            amount: this.amount,
            aminoPrefix: _tx.AminoPrefix.BurnMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            amount: 0,
            aminoPrefix: _tx.AminoPrefix.BurnMsg
          };
        }
      }]);
      return BurnTokenMsg2;
    }(_base.BaseMsg);
    exports2.BurnTokenMsg = BurnTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/freezeToken.js
var require_freezeToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/freezeToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.FreezeTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var FreezeTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(FreezeTokenMsg2, _BaseMsg);
      var _super = _createSuper(FreezeTokenMsg2);
      function FreezeTokenMsg2(_ref) {
        var _this;
        var address = _ref.address, sybmol = _ref.sybmol, amount = _ref.amount;
        (0, _classCallCheck2["default"])(this, FreezeTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.symbol = sybmol;
        _this.amount = amount;
        return _this;
      }
      (0, _createClass2["default"])(FreezeTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            symbol: this.symbol,
            amount: this.amount
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            amount: this.amount,
            aminoPrefix: _tx.AminoPrefix.FreezeMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            amount: 0,
            aminoPrefix: _tx.AminoPrefix.FreezeMsg
          };
        }
      }]);
      return FreezeTokenMsg2;
    }(_base.BaseMsg);
    exports2.FreezeTokenMsg = FreezeTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/unFreezeToken.js
var require_unFreezeToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/unFreezeToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UnFreezeTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var UnFreezeTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(UnFreezeTokenMsg2, _BaseMsg);
      var _super = _createSuper(UnFreezeTokenMsg2);
      function UnFreezeTokenMsg2(_ref) {
        var _this;
        var address = _ref.address, sybmol = _ref.sybmol, amount = _ref.amount;
        (0, _classCallCheck2["default"])(this, UnFreezeTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.symbol = sybmol;
        _this.amount = amount;
        return _this;
      }
      (0, _createClass2["default"])(UnFreezeTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            symbol: this.symbol,
            amount: this.amount
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            amount: this.amount,
            aminoPrefix: _tx.AminoPrefix.UnfreezeMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            amount: 0,
            aminoPrefix: _tx.AminoPrefix.UnfreezeMsg
          };
        }
      }]);
      return UnFreezeTokenMsg2;
    }(_base.BaseMsg);
    exports2.UnFreezeTokenMsg = UnFreezeTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueToken.js
var require_issueToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.IssueTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var IssueTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(IssueTokenMsg2, _BaseMsg);
      var _super = _createSuper(IssueTokenMsg2);
      function IssueTokenMsg2(params, address) {
        var _this;
        (0, _classCallCheck2["default"])(this, IssueTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "params", void 0);
        _this.from = address;
        _this.params = params;
        return _this;
      }
      (0, _createClass2["default"])(IssueTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = _objectSpread({
            from: this.from
          }, this.params);
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            name: this.params.name,
            symbol: this.params.symbol,
            total_supply: this.params.total_supply,
            mintable: this.params.mintable,
            aminoPrefix: _tx.AminoPrefix.IssueMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from,
            name: "",
            symbol: "",
            total_supply: 0,
            mintable: false,
            aminoPrefix: _tx.AminoPrefix.IssueMsg
          };
        }
      }]);
      return IssueTokenMsg2;
    }(_base.BaseMsg);
    exports2.IssueTokenMsg = IssueTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/mintToken.js
var require_mintToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/mintToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.MintTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var MintTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(MintTokenMsg2, _BaseMsg);
      var _super = _createSuper(MintTokenMsg2);
      function MintTokenMsg2(_ref) {
        var _this;
        var address = _ref.address, sybmol = _ref.sybmol, amount = _ref.amount;
        (0, _classCallCheck2["default"])(this, MintTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.symbol = sybmol;
        _this.amount = amount;
        return _this;
      }
      (0, _createClass2["default"])(MintTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            amount: Number(new _big["default"](this.amount).mul(Math.pow(10, 8)).toString()),
            symbol: this.symbol
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            amount: Number(new _big["default"](this.amount).mul(Math.pow(10, 8)).toString()),
            aminoPrefix: _tx.AminoPrefix.MintMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            amount: 0,
            aminoPrefix: _tx.AminoPrefix.MintMsg
          };
        }
      }]);
      return MintTokenMsg2;
    }(_base.BaseMsg);
    exports2.MintTokenMsg = MintTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timelock.js
var require_timelock = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timelock.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimeLockMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var TimeLockMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(TimeLockMsg2, _BaseMsg);
      var _super = _createSuper(TimeLockMsg2);
      function TimeLockMsg2(_ref) {
        var _this;
        var address = _ref.address, description = _ref.description, amount = _ref.amount, lock_time = _ref.lock_time;
        (0, _classCallCheck2["default"])(this, TimeLockMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "description", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "lock_time", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.description = description;
        _this.amount = amount;
        _this.lock_time = lock_time;
        return _this;
      }
      (0, _createClass2["default"])(TimeLockMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            amount: this.amount,
            description: this.description,
            lock_time: this.lock_time
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            description: this.description,
            amount: this.amount,
            lock_time: this.lock_time,
            aminoPrefix: _tx.AminoPrefix.TimeLockMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            description: "",
            amount: [{
              denom: "",
              amount: 0
            }],
            lock_time: 0,
            aminoPrefix: _tx.AminoPrefix.TimeLockMsg
          };
        }
      }]);
      return TimeLockMsg2;
    }(_base.BaseMsg);
    exports2.TimeLockMsg = TimeLockMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timeRelock.js
var require_timeRelock = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timeRelock.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimeReLockMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var TimeReLockMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(TimeReLockMsg2, _BaseMsg);
      var _super = _createSuper(TimeReLockMsg2);
      function TimeReLockMsg2(_ref) {
        var _this;
        var address = _ref.address, time_lock_id = _ref.time_lock_id, description = _ref.description, amount = _ref.amount, lock_time = _ref.lock_time;
        (0, _classCallCheck2["default"])(this, TimeReLockMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "time_lock_id", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "description", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "lock_time", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        _this.from = address;
        _this.description = description;
        _this.amount = amount;
        _this.lock_time = lock_time;
        _this.time_lock_id = time_lock_id;
        return _this;
      }
      (0, _createClass2["default"])(TimeReLockMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            time_lock_id: this.time_lock_id,
            amount: this.amount,
            description: this.description,
            lock_time: this.lock_time
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            time_lock_id: this.time_lock_id,
            description: this.description,
            amount: this.amount,
            lock_time: this.lock_time,
            aminoPrefix: _tx.AminoPrefix.TimeRelockMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            description: "",
            amount: 0,
            lock_time: 0,
            aminoPrefix: _tx.AminoPrefix.TimeRelockMsg
          };
        }
      }]);
      return TimeReLockMsg2;
    }(_base.BaseMsg);
    exports2.TimeReLockMsg = TimeReLockMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timeUnlock.js
var require_timeUnlock = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/timeUnlock.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimeUnlockMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var TimeUnlockMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(TimeUnlockMsg2, _BaseMsg);
      var _super = _createSuper(TimeUnlockMsg2);
      function TimeUnlockMsg2(_ref) {
        var _this;
        var address = _ref.address, time_lock_id = _ref.time_lock_id;
        (0, _classCallCheck2["default"])(this, TimeUnlockMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "time_lock_id", void 0);
        _this.from = address;
        _this.time_lock_id = time_lock_id;
        return _this;
      }
      (0, _createClass2["default"])(TimeUnlockMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            time_lock_id: this.time_lock_id
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            time_lock_id: this.time_lock_id,
            aminoPrefix: _tx.AminoPrefix.TimeUnlockMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            time_lock_id: 0,
            aminoPrefix: _tx.AminoPrefix.TimeUnlockMsg
          };
        }
      }]);
      return TimeUnlockMsg2;
    }(_base.BaseMsg);
    exports2.TimeUnlockMsg = TimeUnlockMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueMiniToken.js
var require_issueMiniToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueMiniToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.IssueMiniTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var IssueMiniTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(IssueMiniTokenMsg2, _BaseMsg);
      var _super = _createSuper(IssueMiniTokenMsg2);
      function IssueMiniTokenMsg2(params) {
        var _this;
        (0, _classCallCheck2["default"])(this, IssueMiniTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "params", void 0);
        _this.params = params;
        return _this;
      }
      (0, _createClass2["default"])(IssueMiniTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = _objectSpread({}, this.params);
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.params.from),
            name: this.params.name,
            symbol: this.params.symbol,
            total_supply: this.params.total_supply,
            mintable: this.params.mintable,
            token_uri: this.params.token_uri,
            aminoPrefix: _tx.AminoPrefix.IssueMiniMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from,
            name: "",
            symbol: "",
            total_supply: 0,
            mintable: false,
            token_uri: "",
            aminoPrefix: _tx.AminoPrefix.IssueMiniMsg
          };
        }
      }]);
      return IssueMiniTokenMsg2;
    }(_base.BaseMsg);
    exports2.IssueMiniTokenMsg = IssueMiniTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueTinyToken.js
var require_issueTinyToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/issueTinyToken.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.IssueTinyTokenMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var IssueTinyTokenMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(IssueTinyTokenMsg2, _BaseMsg);
      var _super = _createSuper(IssueTinyTokenMsg2);
      function IssueTinyTokenMsg2(params) {
        var _this;
        (0, _classCallCheck2["default"])(this, IssueTinyTokenMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "params", void 0);
        _this.params = params;
        return _this;
      }
      (0, _createClass2["default"])(IssueTinyTokenMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = _objectSpread({}, this.params);
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.params.from),
            name: this.params.name,
            symbol: this.params.symbol,
            total_supply: this.params.total_supply,
            mintable: this.params.mintable,
            token_uri: this.params.token_uri,
            aminoPrefix: _tx.AminoPrefix.IssueTinyMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from,
            name: "",
            symbol: "",
            total_supply: 0,
            mintable: false,
            token_uri: "",
            aminoPrefix: _tx.AminoPrefix.IssueTinyMsg
          };
        }
      }]);
      return IssueTinyTokenMsg2;
    }(_base.BaseMsg);
    exports2.IssueTinyTokenMsg = IssueTinyTokenMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/setTokenUri.js
var require_setTokenUri = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/setTokenUri.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SetTokenUriMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var SetTokenUriMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(SetTokenUriMsg2, _BaseMsg);
      var _super = _createSuper(SetTokenUriMsg2);
      function SetTokenUriMsg2(_ref) {
        var _this;
        var from = _ref.from, symbol = _ref.symbol, token_uri = _ref.token_uri;
        (0, _classCallCheck2["default"])(this, SetTokenUriMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "token_uri", void 0);
        _this.from = from;
        _this.symbol = symbol;
        _this.token_uri = token_uri;
        return _this;
      }
      (0, _createClass2["default"])(SetTokenUriMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var signMsg = {
            from: this.from,
            symbol: this.symbol,
            token_uri: this.token_uri
          };
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            token_uri: this.token_uri,
            aminoPrefix: _tx.AminoPrefix.SetURIMsg
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            token_uri: "",
            aminoPrefix: _tx.AminoPrefix.SetURIMsg
          };
        }
      }]);
      return SetTokenUriMsg2;
    }(_base.BaseMsg);
    exports2.SetTokenUriMsg = SetTokenUriMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/index.js
var require_token = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/token/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _burnToken = require_burnToken();
    Object.keys(_burnToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _burnToken[key];
        }
      });
    });
    var _freezeToken = require_freezeToken();
    Object.keys(_freezeToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _freezeToken[key];
        }
      });
    });
    var _unFreezeToken = require_unFreezeToken();
    Object.keys(_unFreezeToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _unFreezeToken[key];
        }
      });
    });
    var _issueToken = require_issueToken();
    Object.keys(_issueToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _issueToken[key];
        }
      });
    });
    var _mintToken = require_mintToken();
    Object.keys(_mintToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _mintToken[key];
        }
      });
    });
    var _timelock = require_timelock();
    Object.keys(_timelock).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _timelock[key];
        }
      });
    });
    var _timeRelock = require_timeRelock();
    Object.keys(_timeRelock).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _timeRelock[key];
        }
      });
    });
    var _timeUnlock = require_timeUnlock();
    Object.keys(_timeUnlock).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _timeUnlock[key];
        }
      });
    });
    var _issueMiniToken = require_issueMiniToken();
    Object.keys(_issueMiniToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _issueMiniToken[key];
        }
      });
    });
    var _issueTinyToken = require_issueTinyToken();
    Object.keys(_issueTinyToken).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _issueTinyToken[key];
        }
      });
    });
    var _setTokenUri = require_setTokenUri();
    Object.keys(_setTokenUri).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _setTokenUri[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/send.js
var require_send = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/send.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SendMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    var _base = require_base();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var SendMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(SendMsg2, _BaseMsg);
      var _super = _createSuper(SendMsg2);
      function SendMsg2(sender, outputs) {
        var _this;
        (0, _classCallCheck2["default"])(this, SendMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "sender", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "outputs", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "aminoPrefix", _tx.AminoPrefix.MsgSend);
        _this.sender = sender;
        _this.outputs = outputs;
        return _this;
      }
      (0, _createClass2["default"])(SendMsg2, [{
        key: "calInputCoins",
        value: function calInputCoins(inputsCoins, coins) {
          coins.forEach(function(coin) {
            var existCoin = inputsCoins.find(function(c2) {
              return c2.denom === coin.denom;
            });
            if (existCoin) {
              var existAmount = new _big["default"](existCoin.amount);
              existCoin.amount = Number(existAmount.plus(coin.amount).toString());
            } else {
              inputsCoins.push(_objectSpread({}, coin));
            }
          });
        }
      }, {
        key: "getSignMsg",
        value: function getSignMsg() {
          var _this2 = this;
          var signMsg = {
            inputs: [{
              address: this.sender,
              coins: []
            }],
            outputs: this.outputs
          };
          this.outputs.forEach(function(item) {
            _this2.calInputCoins(signMsg.inputs[0].coins, item.coins);
          });
          return signMsg;
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var _this3 = this;
          var msg = {
            inputs: [{
              address: crypto2.decodeAddress(this.sender),
              coins: []
            }],
            outputs: [],
            aminoPrefix: this.aminoPrefix
          };
          this.outputs.forEach(function(item) {
            _this3.calInputCoins(msg.inputs[0].coins, item.coins);
            var output = {
              address: crypto2.decodeAddress(item.address),
              coins: item.coins
            };
            msg.outputs.push(output);
          });
          return msg;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            inputs: [{
              address: Buffer.from(""),
              coins: [{
                denom: "",
                amount: 0
              }]
            }],
            outputs: [{
              address: Buffer.from(""),
              coins: [{
                denom: "",
                amount: 0
              }]
            }],
            aminoPrefix: _tx.AminoPrefix.MsgSend
          };
        }
      }]);
      return SendMsg2;
    }(_base.BaseMsg);
    exports2.SendMsg = SendMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/bindMsg.js
var require_bindMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/bindMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BindMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BindMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(BindMsg2, _BaseMsg);
      var _super = _createSuper(BindMsg2);
      function BindMsg2(_ref) {
        var _this;
        var from = _ref.from, symbol = _ref.symbol, amount = _ref.amount, contract_address = _ref.contract_address, contract_decimals = _ref.contract_decimals, expire_time = _ref.expire_time;
        (0, _classCallCheck2["default"])(this, BindMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "symbol", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "contract_address", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "contract_decimals", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "expire_time", void 0);
        _this.from = from;
        _this.symbol = symbol;
        _this.amount = amount;
        _this.contract_address = contract_address;
        _this.contract_decimals = contract_decimals;
        _this.expire_time = expire_time;
        return _this;
      }
      (0, _createClass2["default"])(BindMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          return {
            from: this.from,
            symbol: this.symbol,
            amount: this.amount,
            contract_address: this.contract_address,
            contract_decimals: this.contract_decimals,
            expire_time: this.expire_time
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          return {
            from: crypto2.decodeAddress(this.from),
            symbol: this.symbol,
            amount: this.amount,
            contract_address: Buffer.from(this.contract_address.slice(2), "hex"),
            contract_decimals: this.contract_decimals,
            expire_time: this.expire_time,
            aminoPrefix: _tx.AminoPrefix.BindMsg
          };
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            symbol: "",
            amount: 0,
            contract_address: Buffer.from(""),
            contract_decimals: 0,
            expire_time: 0,
            aminoPrefix: _tx.AminoPrefix.BindMsg
          };
        }
      }]);
      return BindMsg2;
    }(_base.BaseMsg);
    exports2.BindMsg = BindMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/claimTypes.js
var require_claimTypes = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/claimTypes.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BindStatus = exports2.RefundReason = exports2.ClaimTypes = void 0;
    var ClaimTypes;
    exports2.ClaimTypes = ClaimTypes;
    (function(ClaimTypes2) {
      ClaimTypes2[ClaimTypes2["ClaimTypeSkipSequence"] = 1] = "ClaimTypeSkipSequence";
      ClaimTypes2[ClaimTypes2["ClaimTypeUpdateBind"] = 2] = "ClaimTypeUpdateBind";
      ClaimTypes2[ClaimTypes2["ClaimTypeTransferOutRefund"] = 3] = "ClaimTypeTransferOutRefund";
      ClaimTypes2[ClaimTypes2["ClaimTypeTransferIn"] = 4] = "ClaimTypeTransferIn";
    })(ClaimTypes || (exports2.ClaimTypes = ClaimTypes = {}));
    var RefundReason;
    exports2.RefundReason = RefundReason;
    (function(RefundReason2) {
      RefundReason2[RefundReason2["UnboundToken"] = 1] = "UnboundToken";
      RefundReason2[RefundReason2["Timeout"] = 2] = "Timeout";
      RefundReason2[RefundReason2["InsufficientBalance"] = 3] = "InsufficientBalance";
      RefundReason2[RefundReason2["Unkown"] = 4] = "Unkown";
    })(RefundReason || (exports2.RefundReason = RefundReason = {}));
    var BindStatus;
    exports2.BindStatus = BindStatus;
    (function(BindStatus2) {
      BindStatus2[BindStatus2["BindStatusSuccess"] = 0] = "BindStatusSuccess";
      BindStatus2[BindStatus2["BindStatusRejected"] = 1] = "BindStatusRejected";
      BindStatus2[BindStatus2["BindStatusTimeout"] = 2] = "BindStatusTimeout";
      BindStatus2[BindStatus2["BindStatusInvalidParameter"] = 3] = "BindStatusInvalidParameter";
    })(BindStatus || (exports2.BindStatus = BindStatus = {}));
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/claimMsg.js
var require_claimMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/claimMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ClaimMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    var _claimTypes = require_claimTypes();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var ClaimMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(ClaimMsg2, _BaseMsg);
      var _super = _createSuper(ClaimMsg2);
      function ClaimMsg2(_ref) {
        var _this;
        var claim_type = _ref.claim_type, sequence = _ref.sequence, claim = _ref.claim, validator_address = _ref.validator_address;
        (0, _classCallCheck2["default"])(this, ClaimMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "claim_type", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "sequence", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "claim", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validator_address", void 0);
        _this.claim_type = claim_type;
        _this.sequence = sequence;
        _this.claim = claim;
        _this.validator_address = validator_address;
        return _this;
      }
      (0, _createClass2["default"])(ClaimMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          return {
            claim_type: this.claim_type,
            sequence: this.sequence,
            claim: this.claim,
            validator_address: this.validator_address
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          return {
            claim_type: this.claim_type,
            sequence: this.sequence,
            claim: this.claim,
            validator_address: crypto2.decodeAddress(this.validator_address),
            aminoPrefix: _tx.AminoPrefix.ClaimMsg
          };
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            claim_type: _claimTypes.ClaimTypes.ClaimTypeSkipSequence,
            sequence: 0,
            claim: "",
            validator_address: Buffer.from(""),
            aminoPrefix: _tx.AminoPrefix.ClaimMsg
          };
        }
      }]);
      return ClaimMsg2;
    }(_base.BaseMsg);
    exports2.ClaimMsg = ClaimMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/transferOutMsg.js
var require_transferOutMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/transferOutMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TransferOutMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var TransferOutMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(TransferOutMsg2, _BaseMsg);
      var _super = _createSuper(TransferOutMsg2);
      function TransferOutMsg2(_ref) {
        var _this;
        var from = _ref.from, to = _ref.to, amount = _ref.amount, expire_time = _ref.expire_time;
        (0, _classCallCheck2["default"])(this, TransferOutMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "from", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "to", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "expire_time", void 0);
        _this.from = from;
        _this.to = to;
        _this.amount = _objectSpread(_objectSpread({}, amount), {}, {
          amount: Number(new _big["default"](amount.amount).mul(Math.pow(10, 8)).toString())
        });
        _this.expire_time = expire_time;
        return _this;
      }
      (0, _createClass2["default"])(TransferOutMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          return {
            from: this.from,
            to: this.to,
            amount: this.amount,
            expire_time: this.expire_time
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          return {
            from: crypto2.decodeAddress(this.from),
            to: Buffer.from(this.to.slice(2), "hex"),
            amount: this.amount,
            expire_time: this.expire_time,
            aminoPrefix: _tx.AminoPrefix.TransferOutMsg
          };
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            from: Buffer.from(""),
            to: Buffer.from(""),
            amount: {
              denom: "",
              amount: 0
            },
            expire_time: 0,
            aminoPrefix: _tx.AminoPrefix.TransferOutMsg
          };
        }
      }]);
      return TransferOutMsg2;
    }(_base.BaseMsg);
    exports2.TransferOutMsg = TransferOutMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/index.js
var require_claim = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/claim/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _bindMsg = require_bindMsg();
    Object.keys(_bindMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _bindMsg[key];
        }
      });
    });
    var _claimMsg = require_claimMsg();
    Object.keys(_claimMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _claimMsg[key];
        }
      });
    });
    var _claimTypes = require_claimTypes();
    Object.keys(_claimTypes).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _claimTypes[key];
        }
      });
    });
    var _transferOutMsg = require_transferOutMsg();
    Object.keys(_transferOutMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _transferOutMsg[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscDelegateMsg.js
var require_bscDelegateMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscDelegateMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BscDelegateMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BscDelegateMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(BscDelegateMsg2, _BaseMsg);
      var _super = _createSuper(BscDelegateMsg2);
      function BscDelegateMsg2(_ref) {
        var _this;
        var delegator_addr = _ref.delegator_addr, validator_addr = _ref.validator_addr, delegation = _ref.delegation, side_chain_id = _ref.side_chain_id;
        (0, _classCallCheck2["default"])(this, BscDelegateMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "delegator_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validator_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "delegation", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "side_chain_id", void 0);
        _this.delegator_addr = delegator_addr;
        _this.validator_addr = validator_addr;
        _this.delegation = delegation;
        _this.side_chain_id = side_chain_id;
        return _this;
      }
      (0, _createClass2["default"])(BscDelegateMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var _this$delegation = this.delegation, denom = _this$delegation.denom, amount = _this$delegation.amount;
          var signMsg = {
            delegator_addr: this.delegator_addr,
            validator_addr: this.validator_addr,
            delegation: {
              denom,
              amount: String(amount)
            },
            side_chain_id: this.side_chain_id
          };
          return {
            type: "cosmos-sdk/MsgSideChainDelegate",
            value: signMsg
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            delegator_addr: crypto2.decodeAddress(this.delegator_addr),
            validator_addr: crypto2.decodeAddress(this.validator_addr),
            delegation: this.delegation,
            side_chain_id: this.side_chain_id,
            aminoPrefix: _tx.AminoPrefix.MsgSideChainDelegate
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            delegator_addr: Buffer.from(""),
            validator_addr: Buffer.from(""),
            delegation: [{
              denom: "",
              amount: 0
            }],
            side_chain_id: "",
            aminoPrefix: _tx.AminoPrefix.MsgSideChainDelegate
          };
        }
      }]);
      return BscDelegateMsg2;
    }(_base.BaseMsg);
    exports2.BscDelegateMsg = BscDelegateMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscUndelegateMsg.js
var require_bscUndelegateMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscUndelegateMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BscUndelegateMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BscUndelegateMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(BscUndelegateMsg2, _BaseMsg);
      var _super = _createSuper(BscUndelegateMsg2);
      function BscUndelegateMsg2(_ref) {
        var _this;
        var delegator_addr = _ref.delegator_addr, validator_addr = _ref.validator_addr, amount = _ref.amount, side_chain_id = _ref.side_chain_id;
        (0, _classCallCheck2["default"])(this, BscUndelegateMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "delegator_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validator_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "side_chain_id", void 0);
        _this.delegator_addr = delegator_addr;
        _this.validator_addr = validator_addr;
        _this.amount = amount;
        _this.side_chain_id = side_chain_id;
        return _this;
      }
      (0, _createClass2["default"])(BscUndelegateMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var _this$amount = this.amount, denom = _this$amount.denom, amount = _this$amount.amount;
          var signMsg = {
            delegator_addr: this.delegator_addr,
            validator_addr: this.validator_addr,
            amount: {
              denom,
              amount: String(amount)
            },
            side_chain_id: this.side_chain_id
          };
          return {
            type: "cosmos-sdk/MsgSideChainUndelegate",
            value: signMsg
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            delegator_addr: crypto2.decodeAddress(this.delegator_addr),
            validator_addr: crypto2.decodeAddress(this.validator_addr),
            amount: this.amount,
            side_chain_id: this.side_chain_id,
            aminoPrefix: _tx.AminoPrefix.MsgSideChainUndelegate
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            delegator_addr: Buffer.from(""),
            validator_addr: Buffer.from(""),
            amount: [{
              denom: "",
              amount: 0
            }],
            side_chain_id: "",
            aminoPrefix: _tx.AminoPrefix.MsgSideChainUndelegate
          };
        }
      }]);
      return BscUndelegateMsg2;
    }(_base.BaseMsg);
    exports2.BscUndelegateMsg = BscUndelegateMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscRedelegateMsg.js
var require_bscRedelegateMsg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/bscRedelegateMsg.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BscReDelegateMsg = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _base = require_base();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = require_tx();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var BscReDelegateMsg = function(_BaseMsg) {
      (0, _inherits2["default"])(BscReDelegateMsg2, _BaseMsg);
      var _super = _createSuper(BscReDelegateMsg2);
      function BscReDelegateMsg2(_ref) {
        var _this;
        var delegator_addr = _ref.delegator_addr, validator_src_addr = _ref.validator_src_addr, validator_dst_addr = _ref.validator_dst_addr, amount = _ref.amount, side_chain_id = _ref.side_chain_id;
        (0, _classCallCheck2["default"])(this, BscReDelegateMsg2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "delegator_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validator_src_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validator_dst_addr", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "amount", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "side_chain_id", void 0);
        _this.delegator_addr = delegator_addr;
        _this.validator_src_addr = validator_src_addr;
        _this.validator_dst_addr = validator_dst_addr;
        _this.amount = amount;
        _this.side_chain_id = side_chain_id;
        return _this;
      }
      (0, _createClass2["default"])(BscReDelegateMsg2, [{
        key: "getSignMsg",
        value: function getSignMsg() {
          var _this$amount = this.amount, denom = _this$amount.denom, amount = _this$amount.amount;
          var signMsg = {
            delegator_addr: this.delegator_addr,
            validator_src_addr: this.validator_src_addr,
            validator_dst_addr: this.validator_dst_addr,
            amount: {
              denom,
              amount: String(amount)
            },
            side_chain_id: this.side_chain_id
          };
          return {
            type: "cosmos-sdk/MsgSideChainRedelegate",
            value: signMsg
          };
        }
      }, {
        key: "getMsg",
        value: function getMsg() {
          var data = {
            delegator_addr: crypto2.decodeAddress(this.delegator_addr),
            validator_src_addr: crypto2.decodeAddress(this.validator_src_addr),
            validator_dst_addr: crypto2.decodeAddress(this.validator_dst_addr),
            amount: this.amount,
            side_chain_id: this.side_chain_id,
            aminoPrefix: _tx.AminoPrefix.MsgSideChainRedelegate
          };
          return data;
        }
      }], [{
        key: "defaultMsg",
        value: function defaultMsg() {
          return {
            delegator_addr: Buffer.from(""),
            validator_src_addr: Buffer.from(""),
            validator_dst_addr: Buffer.from(""),
            amount: [{
              denom: "",
              amount: 0
            }],
            side_chain_id: "",
            aminoPrefix: _tx.AminoPrefix.MsgSideChainRedelegate
          };
        }
      }]);
      return BscReDelegateMsg2;
    }(_base.BaseMsg);
    exports2.BscReDelegateMsg = BscReDelegateMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/index.js
var require_stake = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/stake/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _bscDelegateMsg = require_bscDelegateMsg();
    Object.keys(_bscDelegateMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _bscDelegateMsg[key];
        }
      });
    });
    var _bscUndelegateMsg = require_bscUndelegateMsg();
    Object.keys(_bscUndelegateMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _bscUndelegateMsg[key];
        }
      });
    });
    var _bscRedelegateMsg = require_bscRedelegateMsg();
    Object.keys(_bscRedelegateMsg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _bscRedelegateMsg[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/index.js
var require_msg = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/msg/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _base = require_base();
    Object.keys(_base).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _base[key];
        }
      });
    });
    var _dex = require_dex();
    Object.keys(_dex).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _dex[key];
        }
      });
    });
    var _token = require_token();
    Object.keys(_token).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _token[key];
        }
      });
    });
    var _send = require_send();
    Object.keys(_send).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _send[key];
        }
      });
    });
    var _claim = require_claim();
    Object.keys(_claim).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _claim[key];
        }
      });
    });
    var _stake = require_stake();
    Object.keys(_stake).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _stake[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/rpc/index.js
var require_rpc = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/rpc/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SubmitProposalMsg = exports2.OrderBook = exports2.OrderBookLevel = exports2.TradingPair = exports2.OpenOrder = exports2.TokenBalance = exports2.AppAccount = exports2.BaseAccount = exports2.TokenOfList = exports2.Token = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _tx = require_tx();
    var Token = function Token2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, Token2);
      (0, _defineProperty2["default"])(this, "aminoPrefix", _tx.AminoPrefix.BnbchainToken);
      (0, _defineProperty2["default"])(this, "name", void 0);
      (0, _defineProperty2["default"])(this, "symbol", void 0);
      (0, _defineProperty2["default"])(this, "original_symbol", void 0);
      (0, _defineProperty2["default"])(this, "total_supply", void 0);
      (0, _defineProperty2["default"])(this, "owner", void 0);
      (0, _defineProperty2["default"])(this, "mintable", void 0);
      this.name = opts.name || "";
      this.symbol = opts.symbol || "";
      this.original_symbol = opts.original_symbol || "";
      this.total_supply = opts.total_supply || 0;
      this.owner = opts.owner || Buffer.alloc(0);
      this.mintable = opts.mintable || false;
    };
    exports2.Token = Token;
    var TokenOfList = function TokenOfList2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, TokenOfList2);
      (0, _defineProperty2["default"])(this, "name", void 0);
      (0, _defineProperty2["default"])(this, "symbol", void 0);
      (0, _defineProperty2["default"])(this, "original_symbol", void 0);
      (0, _defineProperty2["default"])(this, "total_supply", void 0);
      (0, _defineProperty2["default"])(this, "owner", void 0);
      (0, _defineProperty2["default"])(this, "mintable", void 0);
      this.name = opts.name || "";
      this.symbol = opts.symbol || "";
      this.original_symbol = opts.original_symbol || "";
      this.total_supply = opts.total_supply || 0;
      this.owner = opts.owner || Buffer.alloc(0);
      this.mintable = opts.mintable || false;
    };
    exports2.TokenOfList = TokenOfList;
    var BaseAccount = function BaseAccount2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, BaseAccount2);
      (0, _defineProperty2["default"])(this, "address", void 0);
      (0, _defineProperty2["default"])(this, "coins", void 0);
      (0, _defineProperty2["default"])(this, "public_key", void 0);
      (0, _defineProperty2["default"])(this, "account_number", void 0);
      (0, _defineProperty2["default"])(this, "sequence", void 0);
      this.address = opts.address || Buffer.alloc(0);
      this.coins = opts.coins || [{
        denom: "",
        amount: 0
      }];
      this.public_key = opts.public_key || Buffer.alloc(0);
      this.account_number = opts.account_number || 0;
      this.sequence = opts.sequence || 0;
    };
    exports2.BaseAccount = BaseAccount;
    var AppAccount = function AppAccount2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, AppAccount2);
      (0, _defineProperty2["default"])(this, "aminoPrefix", _tx.AminoPrefix.BnbchainAccount);
      (0, _defineProperty2["default"])(this, "base", void 0);
      (0, _defineProperty2["default"])(this, "name", void 0);
      (0, _defineProperty2["default"])(this, "locked", void 0);
      (0, _defineProperty2["default"])(this, "frozen", void 0);
      this.base = opts.base || new BaseAccount();
      this.name = opts.name || "";
      this.locked = opts.locked || [{
        denom: "",
        amount: 0
      }];
      this.frozen = opts.frozen || [{
        denom: "",
        amount: 0
      }];
    };
    exports2.AppAccount = AppAccount;
    var TokenBalance = function TokenBalance2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, TokenBalance2);
      (0, _defineProperty2["default"])(this, "symbol", void 0);
      (0, _defineProperty2["default"])(this, "free", void 0);
      (0, _defineProperty2["default"])(this, "locked", void 0);
      (0, _defineProperty2["default"])(this, "frozen", void 0);
      this.symbol = opts.symbol || "";
      this.free = opts.free || 0;
      this.locked = opts.locked || 0;
      this.frozen = opts.frozen || 0;
    };
    exports2.TokenBalance = TokenBalance;
    var OpenOrder = function OpenOrder2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, OpenOrder2);
      (0, _defineProperty2["default"])(this, "id", void 0);
      (0, _defineProperty2["default"])(this, "symbol", void 0);
      (0, _defineProperty2["default"])(this, "price", void 0);
      (0, _defineProperty2["default"])(this, "quantity", void 0);
      (0, _defineProperty2["default"])(this, "cumQty", void 0);
      (0, _defineProperty2["default"])(this, "createdHeight", void 0);
      (0, _defineProperty2["default"])(this, "createdTimestamp", void 0);
      (0, _defineProperty2["default"])(this, "lastUpdatedHeight", void 0);
      (0, _defineProperty2["default"])(this, "lastUpdatedTimestamp", void 0);
      this.id = opts.id || "";
      this.symbol = opts.symbol || "";
      this.price = opts.price || 0;
      this.quantity = opts.quantity || 0;
      this.cumQty = opts.cumQty || 0;
      this.createdHeight = opts.createdHeight || 0;
      this.createdTimestamp = opts.createdTimestamp || 0;
      this.lastUpdatedHeight = opts.lastUpdatedHeight || 0;
      this.lastUpdatedTimestamp = opts.lastUpdatedTimestamp || 0;
    };
    exports2.OpenOrder = OpenOrder;
    var TradingPair = function TradingPair2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, TradingPair2);
      (0, _defineProperty2["default"])(this, "base_asset_symbol", void 0);
      (0, _defineProperty2["default"])(this, "quote_asset_symbol", void 0);
      (0, _defineProperty2["default"])(this, "list_price", void 0);
      (0, _defineProperty2["default"])(this, "tick_size", void 0);
      (0, _defineProperty2["default"])(this, "lot_size", void 0);
      this.base_asset_symbol = opts.base_asset_symbol || "";
      this.quote_asset_symbol = opts.quote_asset_symbol || "";
      this.list_price = opts.list_price || 0;
      this.tick_size = opts.tick_size || 0;
      this.lot_size = opts.lot_size || 0;
    };
    exports2.TradingPair = TradingPair;
    var OrderBookLevel = function OrderBookLevel2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, OrderBookLevel2);
      (0, _defineProperty2["default"])(this, "buyQty", void 0);
      (0, _defineProperty2["default"])(this, "buyPrice", void 0);
      (0, _defineProperty2["default"])(this, "sellQty", void 0);
      (0, _defineProperty2["default"])(this, "sellPrice", void 0);
      this.buyQty = opts.buyQty || 0;
      this.buyPrice = opts.buyPrice || 0;
      this.sellQty = opts.sellQty || 0;
      this.sellPrice = opts.sellPrice || 0;
    };
    exports2.OrderBookLevel = OrderBookLevel;
    var OrderBook = function OrderBook2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, OrderBook2);
      (0, _defineProperty2["default"])(this, "height", void 0);
      (0, _defineProperty2["default"])(this, "levels", void 0);
      this.height = opts.height || 0;
      this.levels = opts.levels || [new OrderBookLevel()];
    };
    exports2.OrderBook = OrderBook;
    var SubmitProposalMsg = function SubmitProposalMsg2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      (0, _classCallCheck2["default"])(this, SubmitProposalMsg2);
      (0, _defineProperty2["default"])(this, "aminoPrefix", _tx.AminoPrefix.MsgSubmitProposal);
      (0, _defineProperty2["default"])(this, "title", void 0);
      (0, _defineProperty2["default"])(this, "description", void 0);
      (0, _defineProperty2["default"])(this, "proposal_type", void 0);
      (0, _defineProperty2["default"])(this, "proposer", void 0);
      (0, _defineProperty2["default"])(this, "initial_deposit", void 0);
      (0, _defineProperty2["default"])(this, "voting_period", void 0);
      opts = opts || {};
      this.title = opts.title || "";
      this.description = opts.description || "";
      this.proposal_type = opts.proposal_type || 0;
      this.proposer = opts.proposer || Buffer.alloc(0);
      this.initial_deposit = opts.initial_deposit || [];
      this.voting_period = opts.voting_period || 0;
    };
    exports2.SubmitProposalMsg = SubmitProposalMsg;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/types/index.js
var require_types = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/types/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _msg = require_msg();
    Object.keys(_msg).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _msg[key];
        }
      });
    });
    var _tx = require_tx();
    Object.keys(_tx).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _tx[key];
        }
      });
    });
    var _rpc = require_rpc();
    Object.keys(_rpc).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _rpc[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/rpcHelper.js
var require_rpcHelper = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/rpcHelper.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getMsgByAminoPrefix = exports2.convertObjectArrayNum = exports2.divide = exports2.BASENUMBER = void 0;
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var _types = require_types();
    var BASENUMBER = Math.pow(10, 8);
    exports2.BASENUMBER = BASENUMBER;
    var divide = function divide2(num) {
      return +new _big["default"](num).div(BASENUMBER).toString();
    };
    exports2.divide = divide;
    var convertObjectArrayNum = function convertObjectArrayNum2(objArr, keys) {
      objArr.forEach(function(item) {
        keys.forEach(function(key) {
          item[key] = divide(item[key]);
        });
      });
    };
    exports2.convertObjectArrayNum = convertObjectArrayNum;
    var getMsgByAminoPrefix = function getMsgByAminoPrefix2(aminoPrefix) {
      switch (aminoPrefix.toUpperCase()) {
        case _types.AminoPrefix.NewOrderMsg:
          return _types.NewOrderMsg;
        case _types.AminoPrefix.CancelOrderMsg:
          return _types.CancelOrderMsg;
        case _types.AminoPrefix.MsgSend:
          return _types.SendMsg;
        case _types.AminoPrefix.IssueMsg:
          return _types.IssueTokenMsg;
        case _types.AminoPrefix.FreezeMsg:
          return _types.FreezeTokenMsg;
        case _types.AminoPrefix.UnfreezeMsg:
          return _types.UnFreezeTokenMsg;
        case _types.AminoPrefix.BurnMsg:
          return _types.BurnTokenMsg;
        case _types.AminoPrefix.MintMsg:
          return _types.MintTokenMsg;
        case _types.AminoPrefix.TimeLockMsg:
          return _types.TimeLockMsg;
        case _types.AminoPrefix.TimeRelockMsg:
          return _types.TimeReLockMsg;
        case _types.AminoPrefix.TimeUnlockMsg:
          return _types.TimeUnlockMsg;
        default:
          return _types.BaseMsg;
      }
    };
    exports2.getMsgByAminoPrefix = getMsgByAminoPrefix;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/bind.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/utils.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/buildURL.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/InterceptorManager.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/transformData.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    module2.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/isCancel.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/enhanceError.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/createError.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/settle.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/cookies.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/combineURLs.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/buildFullPath.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/parseHeaders.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/adapters/xhr.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e2) {
            if (config.responseType !== "json") {
              throw e2;
            }
          }
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/defaults.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e2) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/dispatchRequest.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData(config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/mergeConfig.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/core/Axios.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/Cancel.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/cancel/CancelToken.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/spread.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/helpers/isAxiosError.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/lib/axios.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/node_modules/axios/index.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = require_axios();
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/request.js
var require_request = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/request.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = exports2.HttpRequest = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _axios = _interopRequireDefault(require_axios2());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var HttpRequest = function() {
      function HttpRequest2(baseURL) {
        (0, _classCallCheck2["default"])(this, HttpRequest2);
        (0, _defineProperty2["default"])(this, "httpClient", void 0);
        this.httpClient = _axios["default"].create({
          baseURL
        });
      }
      (0, _createClass2["default"])(HttpRequest2, [{
        key: "get",
        value: function get(path, params, opts) {
          return this.request("get", path, params, opts);
        }
      }, {
        key: "post",
        value: function post(path, body, opts) {
          return this.request("post", path, body, opts);
        }
      }, {
        key: "request",
        value: function request(method, path, params) {
          var opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          var options = _objectSpread({
            method,
            url: path
          }, opts);
          if (params) {
            if (method === "get") {
              options.params = params;
            } else {
              options.data = params;
            }
          }
          return this.httpClient.request(options).then(function(response) {
            return {
              result: response.data,
              status: response.status
            };
          })["catch"](function(err) {
            var error = err;
            try {
              var msgObj = err.response && err.response.data;
              error = new Error(msgObj.message);
              error.code = msgObj.code;
            } catch (err2) {
              throw error;
            }
            throw error;
          });
        }
      }]);
      return HttpRequest2;
    }();
    exports2.HttpRequest = HttpRequest;
    var _default = HttpRequest;
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/utils/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _cryptoHelper = require_cryptoHelper();
    Object.keys(_cryptoHelper).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _cryptoHelper[key];
        }
      });
    });
    var _encoderHelper = require_encoderHelper();
    Object.keys(_encoderHelper).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _encoderHelper[key];
        }
      });
    });
    var _validateHelper = require_validateHelper();
    Object.keys(_validateHelper).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _validateHelper[key];
        }
      });
    });
    var _rpcHelper = require_rpcHelper();
    Object.keys(_rpcHelper).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _rpcHelper[key];
        }
      });
    });
    var _request = require_request();
    Object.keys(_request).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _request[key];
        }
      });
    });
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/crypto/index.js
var require_crypto2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/crypto/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getPrivateKeyFromMnemonic = exports2.validateMnemonic = exports2.generateMnemonic = exports2.getPrivateKeyFromKeyStore = exports2.generateKeyStore = exports2.verifySignature = exports2.generateSignature = exports2.getAddressFromPrivateKey = exports2.getAddressFromPublicKey = exports2.generatePubKey = exports2.getPublicKeyFromPrivateKey = exports2.getPublicKey = exports2.generateRandomArray = exports2.generatePrivateKey = exports2.encodeAddress = exports2.checkAddress = exports2.decodeAddress = void 0;
    var _bech = _interopRequireDefault(require_bech32());
    var bip32 = _interopRequireWildcard(require_src());
    var bip39 = _interopRequireWildcard(require_src2());
    var _cryptoBrowserify = _interopRequireDefault(require_crypto_browserify());
    var _elliptic = require_elliptic();
    var _is_js = _interopRequireDefault(require_is());
    var _secureRandom = _interopRequireDefault(require_secure_random());
    var _tinySecp256k = _interopRequireDefault(require_js());
    var _uuid = _interopRequireDefault(require_uuid());
    var _utils = require_utils2();
    var PRIVKEY_LEN = 32;
    var MNEMONIC_LEN = 256;
    var DECODED_ADDRESS_LEN = 20;
    var CURVE = "secp256k1";
    var HDPATH = "44'/714'/0'/0/";
    var ec = new _elliptic.ec(CURVE);
    var decodeAddress = function decodeAddress2(value) {
      var decodeAddress3 = _bech["default"].decode(value);
      return Buffer.from(_bech["default"].fromWords(decodeAddress3.words));
    };
    exports2.decodeAddress = decodeAddress;
    var checkAddress = function checkAddress2(address, hrp) {
      try {
        if (!address.startsWith(hrp)) {
          return false;
        }
        var decodedAddress = _bech["default"].decode(address);
        var decodedAddressLength = decodeAddress(address).length;
        if (decodedAddressLength === DECODED_ADDRESS_LEN && decodedAddress.prefix === hrp) {
          return true;
        }
        return false;
      } catch (err) {
        return false;
      }
    };
    exports2.checkAddress = checkAddress;
    var encodeAddress = function encodeAddress2(value) {
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "tbnb";
      var type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "hex";
      var words;
      if (Buffer.isBuffer(value)) {
        words = _bech["default"].toWords(Buffer.from(value));
      } else {
        words = _bech["default"].toWords(Buffer.from(value, type));
      }
      return _bech["default"].encode(prefix, words);
    };
    exports2.encodeAddress = encodeAddress;
    var generatePrivateKey = function generatePrivateKey2() {
      var len = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : PRIVKEY_LEN;
      return (0, _utils.ab2hexstring)((0, _secureRandom["default"])(len));
    };
    exports2.generatePrivateKey = generatePrivateKey;
    var generateRandomArray = function generateRandomArray2(length) {
      return (0, _secureRandom["default"])(length);
    };
    exports2.generateRandomArray = generateRandomArray;
    var getPublicKey = function getPublicKey2(publicKey) {
      var keyPair = ec.keyFromPublic(publicKey, "hex");
      return keyPair.getPublic();
    };
    exports2.getPublicKey = getPublicKey;
    var getPublicKeyFromPrivateKey = function getPublicKeyFromPrivateKey2(privateKeyHex) {
      if (!privateKeyHex || privateKeyHex.length !== PRIVKEY_LEN * 2) {
        throw new Error("invalid privateKey");
      }
      var curve = new _elliptic.ec(CURVE);
      var keypair = curve.keyFromPrivate(privateKeyHex, "hex");
      var unencodedPubKey = keypair.getPublic().encode("hex", false);
      return unencodedPubKey;
    };
    exports2.getPublicKeyFromPrivateKey = getPublicKeyFromPrivateKey;
    var generatePubKey = function generatePubKey2(privateKey) {
      var curve = new _elliptic.ec(CURVE);
      var keypair = curve.keyFromPrivate(privateKey);
      return keypair.getPublic();
    };
    exports2.generatePubKey = generatePubKey;
    var getAddressFromPublicKey = function getAddressFromPublicKey2(publicKeyHex, prefix) {
      var pubKey = ec.keyFromPublic(publicKeyHex, "hex");
      var pubPoint = pubKey.getPublic();
      var compressed = pubPoint.encodeCompressed();
      var hexed = (0, _utils.ab2hexstring)(compressed);
      var hash = (0, _utils.sha256ripemd160)(hexed);
      var address = encodeAddress(hash, prefix);
      return address;
    };
    exports2.getAddressFromPublicKey = getAddressFromPublicKey;
    var getAddressFromPrivateKey = function getAddressFromPrivateKey2(privateKeyHex, prefix) {
      return getAddressFromPublicKey(getPublicKeyFromPrivateKey(privateKeyHex), prefix);
    };
    exports2.getAddressFromPrivateKey = getAddressFromPrivateKey;
    var generateSignature = function generateSignature2(signBytesHex, privateKey) {
      var msgHash = (0, _utils.sha256)(signBytesHex);
      var msgHashHex = Buffer.from(msgHash, "hex");
      var signature = _tinySecp256k["default"].sign(msgHashHex, typeof privateKey === "string" ? Buffer.from(privateKey, "hex") : privateKey);
      return signature;
    };
    exports2.generateSignature = generateSignature;
    var verifySignature = function verifySignature2(sigHex, signBytesHex, publicKeyHex) {
      var publicKey = Buffer.from(publicKeyHex, "hex");
      if (!_tinySecp256k["default"].isPoint(publicKey))
        throw new Error("Invalid public key provided");
      var msgHash = (0, _utils.sha256)(signBytesHex);
      var msgHashHex = Buffer.from(msgHash, "hex");
      return _tinySecp256k["default"].verify(msgHashHex, publicKey, Buffer.from(sigHex, "hex"));
    };
    exports2.verifySignature = verifySignature;
    var generateKeyStore = function generateKeyStore2(privateKeyHex, password) {
      var salt = _cryptoBrowserify["default"].randomBytes(32);
      var iv = _cryptoBrowserify["default"].randomBytes(16);
      var cipherAlg = "aes-256-ctr";
      var kdf = "pbkdf2";
      var kdfparams = {
        dklen: 32,
        salt: salt.toString("hex"),
        c: 262144,
        prf: "hmac-sha256"
      };
      var derivedKey = _cryptoBrowserify["default"].pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, "sha256");
      var cipher = _cryptoBrowserify["default"].createCipheriv(cipherAlg, derivedKey.slice(0, 32), iv);
      if (!cipher) {
        throw new Error("Unsupported cipher");
      }
      var ciphertext = Buffer.concat([cipher.update(Buffer.from(privateKeyHex, "hex")), cipher["final"]()]);
      var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]);
      return {
        version: 1,
        id: _uuid["default"].v4({
          random: _cryptoBrowserify["default"].randomBytes(16)
        }),
        crypto: {
          ciphertext: ciphertext.toString("hex"),
          cipherparams: {
            iv: iv.toString("hex")
          },
          cipher: cipherAlg,
          kdf,
          kdfparams,
          mac: (0, _utils.sha3)(bufferValue.toString("hex"))
        }
      };
    };
    exports2.generateKeyStore = generateKeyStore;
    var getPrivateKeyFromKeyStore = function getPrivateKeyFromKeyStore2(keystore, password) {
      if (!_is_js["default"].string(password)) {
        throw new Error("No password given.");
      }
      var json = _is_js["default"].object(keystore) ? keystore : JSON.parse(keystore);
      var kdfparams = json.crypto.kdfparams;
      if (kdfparams.prf !== "hmac-sha256") {
        throw new Error("Unsupported parameters to PBKDF2");
      }
      var derivedKey = _cryptoBrowserify["default"].pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, "hex"), kdfparams.c, kdfparams.dklen, "sha256");
      var ciphertext = Buffer.from(json.crypto.ciphertext, "hex");
      var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]);
      var mac = (0, _utils.sha3)(bufferValue.toString("hex"));
      if (mac !== json.crypto.mac) {
        var macLegacy = (0, _utils.sha256)(bufferValue.toString("hex"));
        if (macLegacy !== json.crypto.mac) {
          throw new Error("Keystore mac check failed (sha3 & sha256) - wrong password?");
        }
      }
      var decipher = _cryptoBrowserify["default"].createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 32), Buffer.from(json.crypto.cipherparams.iv, "hex"));
      var privateKey = Buffer.concat([decipher.update(ciphertext), decipher["final"]()]).toString("hex");
      return privateKey;
    };
    exports2.getPrivateKeyFromKeyStore = getPrivateKeyFromKeyStore;
    var generateMnemonic = function generateMnemonic2() {
      return bip39.generateMnemonic(MNEMONIC_LEN);
    };
    exports2.generateMnemonic = generateMnemonic;
    var validateMnemonic = bip39.validateMnemonic;
    exports2.validateMnemonic = validateMnemonic;
    var getPrivateKeyFromMnemonic = function getPrivateKeyFromMnemonic2(mnemonic) {
      var derive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var index = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var password = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
      if (!bip39.validateMnemonic(mnemonic, bip39.wordlists.english) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_simplified) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_traditional) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.korean) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.french) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.italian) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.spanish) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.japanese)) {
        throw new Error("wrong mnemonic format");
      }
      var seed = bip39.mnemonicToSeedSync(mnemonic, password);
      if (derive) {
        var master = bip32.fromSeed(seed);
        var child = master.derivePath(HDPATH + index);
        if (!child.privateKey) {
          throw new Error("child does not have a privateKey");
        }
        return child.privateKey.toString("hex");
      }
      return seed.toString("hex");
    };
    exports2.getPrivateKeyFromMnemonic = getPrivateKeyFromMnemonic;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/tx/index.js
var require_tx2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/tx/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _amino = require_amino();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var Transaction = function() {
      function Transaction2(data) {
        (0, _classCallCheck2["default"])(this, Transaction2);
        (0, _defineProperty2["default"])(this, "sequence", void 0);
        (0, _defineProperty2["default"])(this, "accountNumber", void 0);
        (0, _defineProperty2["default"])(this, "chainId", void 0);
        (0, _defineProperty2["default"])(this, "msg", void 0);
        (0, _defineProperty2["default"])(this, "baseMsg", void 0);
        (0, _defineProperty2["default"])(this, "memo", void 0);
        (0, _defineProperty2["default"])(this, "source", void 0);
        (0, _defineProperty2["default"])(this, "signatures", void 0);
        data = data || {};
        if (!data.chainId) {
          throw new Error("chain id should not be null");
        }
        this.sequence = data.sequence || 0;
        this.accountNumber = data.accountNumber || 0;
        this.chainId = data.chainId;
        this.msg = data.msg;
        this.baseMsg = data.baseMsg;
        this.memo = data.memo;
        this.source = data.source || 0;
        this.signatures = [];
      }
      (0, _createClass2["default"])(Transaction2, [{
        key: "getSignBytes",
        value: function getSignBytes(msg) {
          msg = msg || this.baseMsg && this.baseMsg.getSignMsg();
          var signMsg = {
            account_number: this.accountNumber.toString(),
            chain_id: this.chainId,
            data: null,
            memo: this.memo,
            msgs: [msg],
            sequence: this.sequence.toString(),
            source: this.source.toString()
          };
          return (0, _amino.convertObjectToSignBytes)(signMsg);
        }
      }, {
        key: "addSignature",
        value: function addSignature(pubKey, signature) {
          var pubKeyBuf = this._serializePubKey(pubKey);
          this.signatures = [{
            pub_key: pubKeyBuf,
            signature,
            account_number: this.accountNumber,
            sequence: this.sequence
          }];
          return this;
        }
      }, {
        key: "sign",
        value: function sign(privateKey, msg) {
          if (!privateKey) {
            throw new Error("private key should not be null");
          }
          var signBytes = this.getSignBytes(msg);
          var privKeyBuf = Buffer.from(privateKey, "hex");
          var signature = crypto2.generateSignature(signBytes.toString("hex"), privKeyBuf);
          this.addSignature(crypto2.generatePubKey(privKeyBuf), signature);
          return this;
        }
      }, {
        key: "serialize",
        value: function serialize() {
          if (!this.signatures) {
            throw new Error("need signature");
          }
          var msg = this.msg || this.baseMsg && this.baseMsg.getMsg();
          var stdTx = {
            msg: [msg],
            signatures: this.signatures,
            memo: this.memo,
            source: this.source,
            data: "",
            aminoPrefix: _types.AminoPrefix.StdTx
          };
          var bytes = (0, _amino.marshalBinary)(stdTx);
          return bytes.toString("hex");
        }
      }, {
        key: "_serializePubKey",
        value: function _serializePubKey(unencodedPubKey) {
          var format = 2;
          var y = unencodedPubKey.getY();
          var x = unencodedPubKey.getX();
          if (y && y.isOdd()) {
            format |= 1;
          }
          var pubBz = Buffer.concat([_amino.UVarInt.encode(format), x.toArrayLike(Buffer, "be", 32)]);
          pubBz = (0, _amino.encodeBinaryByteArray)(pubBz);
          pubBz = Buffer.concat([Buffer.from("EB5AE987", "hex"), pubBz]);
          return pubBz;
        }
      }]);
      return Transaction2;
    }();
    exports2["default"] = Transaction;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/gov/proposalType.js
var require_proposalType = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/gov/proposalType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var ProposalTypeNil = 0;
    var ProposalTypeText = 1;
    var ProposalTypeParameterChange = 2;
    var ProposalTypeSoftwareUpgrade = 3;
    var ProposalTypeListTradingPair = 4;
    var ProposalTypeFeeChange = 5;
    var ProposalTypeCreateValidator = 6;
    var ProposalTypeRemoveValidator = 7;
    var _default = {
      ProposalTypeNil,
      ProposalTypeText,
      ProposalTypeParameterChange,
      ProposalTypeSoftwareUpgrade,
      ProposalTypeListTradingPair,
      ProposalTypeFeeChange,
      ProposalTypeCreateValidator,
      ProposalTypeRemoveValidator
    };
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/gov/index.js
var require_gov = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/gov/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = exports2.voteOption = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var _validateHelper = require_validateHelper();
    var _proposalType = _interopRequireDefault(require_proposalType());
    var BASENUMBER = Math.pow(10, 8);
    var proposalTypeMapping = {
      4: "ListTradingPair",
      0: "Nil",
      1: "Text",
      2: "ParameterChange",
      3: "SoftwareUpgrade",
      5: "FeeChange",
      6: "CreateValidator",
      7: "RemoveValidator"
    };
    var voteOption = {
      OptionEmpty: 0,
      OptionYes: 1,
      OptionAbstain: 2,
      OptionNo: 3,
      OptionNoWithVeto: 4
    };
    exports2.voteOption = voteOption;
    var voteOptionMapping = {
      0: "Empty",
      1: "Yes",
      2: "Abstain",
      3: "No",
      4: "NoWithVeto"
    };
    var Gov = function() {
      function Gov2(bncClient) {
        (0, _classCallCheck2["default"])(this, Gov2);
        (0, _defineProperty2["default"])(this, "_bncClient", void 0);
        if (!Gov2.instance) {
          this._bncClient = bncClient;
          Gov2.instance = this;
        }
        return Gov2.instance;
      }
      (0, _createClass2["default"])(Gov2, [{
        key: "submitListProposal",
        value: function() {
          var _submitListProposal = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(listParams) {
            var listTradingPairObj, description, address, title, initialDeposit, votingPeriod;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    listTradingPairObj = {
                      base_asset_symbol: listParams.baseAsset,
                      quote_asset_symbol: listParams.quoteAsset,
                      init_price: +new _big["default"](listParams.initPrice).mul(BASENUMBER).toString(),
                      description: listParams.description,
                      expire_time: new Date(listParams.expireTime).toISOString()
                    };
                    description = JSON.stringify(listTradingPairObj);
                    address = listParams.address, title = listParams.title, initialDeposit = listParams.initialDeposit, votingPeriod = listParams.votingPeriod;
                    _context.next = 5;
                    return this.submitProposal(address, title, description, _proposalType["default"].ProposalTypeListTradingPair, initialDeposit, votingPeriod);
                  case 5:
                    return _context.abrupt("return", _context.sent);
                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function submitListProposal(_x) {
            return _submitListProposal.apply(this, arguments);
          }
          return submitListProposal;
        }()
      }, {
        key: "submitProposal",
        value: function() {
          var _submitProposal = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(address, title, description, proposalType, initialDeposit, votingPeriod) {
            var accAddress, coins, proposalMsg, signMsg, signedTx;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    accAddress = crypto2.decodeAddress(address);
                    coins = [{
                      denom: "BNB",
                      amount: new _big["default"](initialDeposit).mul(BASENUMBER).toString()
                    }];
                    votingPeriod = +new _big["default"](votingPeriod).mul(Math.pow(10, 9)).toString();
                    proposalMsg = {
                      title,
                      description,
                      proposal_type: proposalType,
                      proposer: accAddress,
                      initial_deposit: [{
                        denom: "BNB",
                        amount: +new _big["default"](initialDeposit).mul(BASENUMBER).toString()
                      }],
                      voting_period: votingPeriod,
                      aminoPrefix: _types.AminoPrefix.MsgSubmitProposal
                    };
                    signMsg = {
                      description,
                      initial_deposit: coins,
                      proposal_type: proposalTypeMapping[proposalType],
                      proposer: address,
                      title,
                      voting_period: votingPeriod.toString()
                    };
                    _context2.next = 7;
                    return this._bncClient._prepareTransaction(proposalMsg, signMsg, address);
                  case 7:
                    signedTx = _context2.sent;
                    return _context2.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function submitProposal(_x2, _x3, _x4, _x5, _x6, _x7) {
            return _submitProposal.apply(this, arguments);
          }
          return submitProposal;
        }()
      }, {
        key: "deposit",
        value: function() {
          var _deposit = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(proposalId, address, coins) {
            var accAddress, amount, depositMsg, signMsg, signedTx;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    accAddress = crypto2.decodeAddress(address);
                    (0, _validateHelper.checkCoins)(coins);
                    amount = [];
                    coins.forEach(function(coin) {
                      amount.push({
                        denom: coin.denom,
                        amount: +new _big["default"](coin.amount).mul(BASENUMBER).toString()
                      });
                    });
                    depositMsg = {
                      proposal_id: proposalId,
                      depositer: accAddress,
                      amount,
                      aminoPrefix: _types.AminoPrefix.MsgDeposit
                    };
                    signMsg = {
                      amount: amount.map(function(coin) {
                        return {
                          denom: coin.denom,
                          amount: String(coin.amount)
                        };
                      }),
                      depositer: address,
                      proposal_id: String(proposalId)
                    };
                    _context3.next = 8;
                    return this._bncClient._prepareTransaction(depositMsg, signMsg, address);
                  case 8:
                    signedTx = _context3.sent;
                    return _context3.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 10:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function deposit(_x8, _x9, _x10) {
            return _deposit.apply(this, arguments);
          }
          return deposit;
        }()
      }, {
        key: "vote",
        value: function() {
          var _vote = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(proposalId, voter, option) {
            var accAddress, voteMsg, signMsg, signedTx;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    accAddress = crypto2.decodeAddress(voter);
                    voteMsg = {
                      proposal_id: proposalId,
                      voter: accAddress,
                      option,
                      aminoPrefix: _types.AminoPrefix.MsgVote
                    };
                    signMsg = {
                      option: voteOptionMapping[option],
                      proposal_id: String(proposalId),
                      voter
                    };
                    _context4.next = 5;
                    return this._bncClient._prepareTransaction(voteMsg, signMsg, voter);
                  case 5:
                    signedTx = _context4.sent;
                    return _context4.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function vote(_x11, _x12, _x13) {
            return _vote.apply(this, arguments);
          }
          return vote;
        }()
      }]);
      return Gov2;
    }();
    (0, _defineProperty2["default"])(Gov, "instance", void 0);
    var _default = Gov;
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/swap/index.js
var require_swap = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/swap/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _buffer = require_buffer();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var _validateHelper = require_validateHelper();
    var Swap = function() {
      function Swap2(bncClient) {
        (0, _classCallCheck2["default"])(this, Swap2);
        (0, _defineProperty2["default"])(this, "_bncClient", void 0);
        if (!Swap2.instance) {
          this._bncClient = bncClient;
          Swap2.instance = this;
        }
        return Swap2.instance;
      }
      (0, _createClass2["default"])(Swap2, [{
        key: "HTLT",
        value: function() {
          var _HTLT = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(from, recipient, recipientOtherChain, senderOtherChain, randomNumberHash, timestamp, amount, expectedIncome, heightSpan, crossChain) {
            var htltMsg, signHTLTMsg, signedTx;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    (0, _validateHelper.checkCoins)(amount);
                    htltMsg = {
                      from: crypto2.decodeAddress(from),
                      to: crypto2.decodeAddress(recipient),
                      recipient_other_chain: recipientOtherChain,
                      sender_other_chain: senderOtherChain,
                      random_number_hash: _buffer.Buffer.from(randomNumberHash, "hex"),
                      timestamp,
                      amount,
                      expected_income: expectedIncome,
                      height_span: heightSpan,
                      cross_chain: crossChain,
                      aminoPrefix: _types.AminoPrefix.HTLTMsg
                    };
                    signHTLTMsg = {
                      from,
                      to: recipient,
                      recipient_other_chain: recipientOtherChain,
                      sender_other_chain: senderOtherChain,
                      random_number_hash: randomNumberHash,
                      timestamp,
                      amount,
                      expected_income: expectedIncome,
                      height_span: heightSpan,
                      cross_chain: crossChain
                    };
                    _context.next = 5;
                    return this._bncClient._prepareTransaction(htltMsg, signHTLTMsg, from);
                  case 5:
                    signedTx = _context.sent;
                    return _context.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function HTLT(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {
            return _HTLT.apply(this, arguments);
          }
          return HTLT;
        }()
      }, {
        key: "depositHTLT",
        value: function() {
          var _depositHTLT = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(from, swapID, amount) {
            var depositHTLTMsg, signDepositHTLTMsg, signedTx;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    (0, _validateHelper.checkCoins)(amount);
                    depositHTLTMsg = {
                      from: crypto2.decodeAddress(from),
                      amount,
                      swap_id: _buffer.Buffer.from(swapID, "hex"),
                      aminoPrefix: _types.AminoPrefix.DepositHTLTMsg
                    };
                    signDepositHTLTMsg = {
                      from,
                      amount,
                      swap_id: swapID
                    };
                    _context2.next = 5;
                    return this._bncClient._prepareTransaction(depositHTLTMsg, signDepositHTLTMsg, from);
                  case 5:
                    signedTx = _context2.sent;
                    return _context2.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function depositHTLT(_x11, _x12, _x13) {
            return _depositHTLT.apply(this, arguments);
          }
          return depositHTLT;
        }()
      }, {
        key: "claimHTLT",
        value: function() {
          var _claimHTLT = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(from, swapID, randomNumber) {
            var claimHTLTMsg, signClaimHTLTMsg, signedTx;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    claimHTLTMsg = {
                      from: crypto2.decodeAddress(from),
                      swap_id: _buffer.Buffer.from(swapID, "hex"),
                      random_number: _buffer.Buffer.from(randomNumber, "hex"),
                      aminoPrefix: _types.AminoPrefix.ClaimHTLTMsg
                    };
                    signClaimHTLTMsg = {
                      from,
                      swap_id: swapID,
                      random_number: randomNumber
                    };
                    _context3.next = 4;
                    return this._bncClient._prepareTransaction(claimHTLTMsg, signClaimHTLTMsg, from);
                  case 4:
                    signedTx = _context3.sent;
                    return _context3.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 6:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function claimHTLT(_x14, _x15, _x16) {
            return _claimHTLT.apply(this, arguments);
          }
          return claimHTLT;
        }()
      }, {
        key: "refundHTLT",
        value: function() {
          var _refundHTLT = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(from, swapID) {
            var refundHTLTMsg, signRefundHTLTMsg, signedTx;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    refundHTLTMsg = {
                      from: crypto2.decodeAddress(from),
                      swap_id: _buffer.Buffer.from(swapID, "hex"),
                      aminoPrefix: _types.AminoPrefix.RefundHTLTMsg
                    };
                    signRefundHTLTMsg = {
                      from,
                      swap_id: swapID
                    };
                    _context4.next = 4;
                    return this._bncClient._prepareTransaction(refundHTLTMsg, signRefundHTLTMsg, from);
                  case 4:
                    signedTx = _context4.sent;
                    return _context4.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function refundHTLT(_x17, _x18) {
            return _refundHTLT.apply(this, arguments);
          }
          return refundHTLT;
        }()
      }]);
      return Swap2;
    }();
    (0, _defineProperty2["default"])(Swap, "instance", void 0);
    var _default = Swap;
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/token/index.js
var require_token2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/token/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = exports2.validateMiniTokenSymbol = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var _ = require_client();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var _validateHelper = require_validateHelper();
    var MAXTOTALSUPPLY = 9e18;
    var MINI_TOKEN_MAX_TOTAL_SUPPAY = 1e6;
    var TINY_TOKEN_MAX_TOTAL_SUPPAY = 1e4;
    var validateNonZeroAmount = function() {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(amountParam, symbol, fromAddress, httpClient) {
        var type, amount, _yield$httpClient$req, result, balance, _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                type = _args.length > 4 && _args[4] !== void 0 ? _args[4] : "free";
                amount = new _big["default"](amountParam);
                if (!(amount.lte(0) || amount.gt(MAXTOTALSUPPLY))) {
                  _context.next = 4;
                  break;
                }
                throw new Error("invalid amount");
              case 4:
                _context.prev = 4;
                _context.next = 7;
                return httpClient.request("get", "".concat(_.api.getAccount, "/").concat(fromAddress));
              case 7:
                _yield$httpClient$req = _context.sent;
                result = _yield$httpClient$req.result;
                balance = result.balances.find(function(b2) {
                  return b2.symbol.toUpperCase() === symbol.toUpperCase();
                });
                if (balance) {
                  _context.next = 12;
                  break;
                }
                throw new Error("the account doesn't have ".concat(symbol));
              case 12:
                if (!amount.gte(balance[type])) {
                  _context.next = 14;
                  break;
                }
                throw new Error("the account doesn't have enougth balance");
              case 14:
                _context.next = 18;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](4);
              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[4, 16]]);
      }));
      return function validateNonZeroAmount2(_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      };
    }();
    var validateMiniTokenSymbol = function validateMiniTokenSymbol2(symbol) {
      if (!symbol) {
        throw new Error("suffixed token symbol cannot be empty");
      }
      var splitedSymbol = symbol.split("-");
      if (splitedSymbol.length != 2) {
        throw new Error("suffixed mini-token symbol must contain a hyphen ('-')");
      }
      if (!splitedSymbol[1]) {
        throw new Error('suffixed mini-token symbol must contain just one hyphen (" - ")');
      }
      if (!/^[a-zA-z\d]{3,8}$/.test(splitedSymbol[0])) {
        throw new Error("symbol should be alphanumeric and length is limited to 3~8");
      }
      if (!splitedSymbol[1].endsWith("M")) {
        throw new Error("mini-token symbol suffix must end with M");
      }
    };
    exports2.validateMiniTokenSymbol = validateMiniTokenSymbol;
    var TokenManagement = function() {
      function TokenManagement2(bncClient) {
        (0, _classCallCheck2["default"])(this, TokenManagement2);
        (0, _defineProperty2["default"])(this, "_bncClient", void 0);
        this._bncClient = bncClient;
      }
      (0, _createClass2["default"])(TokenManagement2, [{
        key: "issue",
        value: function() {
          var _issue = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(senderAddress, tokenName, symbol) {
            var totalSupply, mintable, issueMsg, signIssueMsg, signedTx, _args2 = arguments;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    totalSupply = _args2.length > 3 && _args2[3] !== void 0 ? _args2[3] : 0;
                    mintable = _args2.length > 4 && _args2[4] !== void 0 ? _args2[4] : false;
                    if (senderAddress) {
                      _context2.next = 4;
                      break;
                    }
                    throw new Error("sender address cannot be empty");
                  case 4:
                    if (!(tokenName.length > 32)) {
                      _context2.next = 6;
                      break;
                    }
                    throw new Error("token name is limited to 32 characters");
                  case 6:
                    if (/^[a-zA-z\d]{3,8}$/.test(symbol)) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error("symbol should be alphanumeric and length is limited to 3~8");
                  case 8:
                    if (!(totalSupply <= 0 || totalSupply > MAXTOTALSUPPLY)) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error("invalid supply amount");
                  case 10:
                    totalSupply = Number(new _big["default"](totalSupply).mul(Math.pow(10, 8)).toString());
                    issueMsg = {
                      from: crypto2.decodeAddress(senderAddress),
                      name: tokenName,
                      symbol,
                      total_supply: totalSupply,
                      mintable,
                      aminoPrefix: _types.AminoPrefix.IssueMsg
                    };
                    signIssueMsg = {
                      from: senderAddress,
                      name: tokenName,
                      symbol,
                      total_supply: totalSupply,
                      mintable
                    };
                    _context2.next = 15;
                    return this._bncClient._prepareTransaction(issueMsg, signIssueMsg, senderAddress);
                  case 15:
                    signedTx = _context2.sent;
                    return _context2.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 17:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function issue(_x5, _x6, _x7) {
            return _issue.apply(this, arguments);
          }
          return issue;
        }()
      }, {
        key: "issueMiniToken",
        value: function() {
          var _issueMiniToken = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(senderAddress, tokenName, symbol) {
            var totalSupply, mintable, tokenUri, issueMiniMsg, signedTx, _args3 = arguments;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    totalSupply = _args3.length > 3 && _args3[3] !== void 0 ? _args3[3] : 0;
                    mintable = _args3.length > 4 && _args3[4] !== void 0 ? _args3[4] : false;
                    tokenUri = _args3.length > 5 ? _args3[5] : void 0;
                    if (senderAddress) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error("sender address cannot be empty");
                  case 5:
                    if (!(tokenName.length > 32)) {
                      _context3.next = 7;
                      break;
                    }
                    throw new Error("token name is limited to 32 characters");
                  case 7:
                    if (/^[a-zA-z\d]{3,8}$/.test(symbol)) {
                      _context3.next = 9;
                      break;
                    }
                    throw new Error("symbol should be alphanumeric and length is limited to 3~8");
                  case 9:
                    if (!(totalSupply <= 0 || totalSupply > MINI_TOKEN_MAX_TOTAL_SUPPAY)) {
                      _context3.next = 11;
                      break;
                    }
                    throw new Error("invalid supply amount");
                  case 11:
                    totalSupply = Number(new _big["default"](totalSupply).mul(Math.pow(10, 8)).toString());
                    issueMiniMsg = new _types.IssueMiniTokenMsg({
                      name: tokenName,
                      symbol,
                      total_supply: totalSupply,
                      mintable,
                      token_uri: tokenUri,
                      from: senderAddress
                    });
                    _context3.next = 15;
                    return this._bncClient._prepareTransaction(issueMiniMsg.getMsg(), issueMiniMsg.getSignMsg(), senderAddress);
                  case 15:
                    signedTx = _context3.sent;
                    return _context3.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function issueMiniToken(_x8, _x9, _x10) {
            return _issueMiniToken.apply(this, arguments);
          }
          return issueMiniToken;
        }()
      }, {
        key: "issueTinyToken",
        value: function() {
          var _issueTinyToken = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(senderAddress, tokenName, symbol) {
            var totalSupply, mintable, tokenUri, issueMiniMsg, signedTx, _args4 = arguments;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    totalSupply = _args4.length > 3 && _args4[3] !== void 0 ? _args4[3] : 0;
                    mintable = _args4.length > 4 && _args4[4] !== void 0 ? _args4[4] : false;
                    tokenUri = _args4.length > 5 ? _args4[5] : void 0;
                    if (senderAddress) {
                      _context4.next = 5;
                      break;
                    }
                    throw new Error("sender address cannot be empty");
                  case 5:
                    if (!(tokenName.length > 32)) {
                      _context4.next = 7;
                      break;
                    }
                    throw new Error("token name is limited to 32 characters");
                  case 7:
                    if (/^[a-zA-z\d]{3,8}$/.test(symbol)) {
                      _context4.next = 9;
                      break;
                    }
                    throw new Error("symbol should be alphanumeric and length is limited to 3~8");
                  case 9:
                    if (!(totalSupply <= 0 || totalSupply > TINY_TOKEN_MAX_TOTAL_SUPPAY)) {
                      _context4.next = 11;
                      break;
                    }
                    throw new Error("invalid supply amount");
                  case 11:
                    totalSupply = Number(new _big["default"](totalSupply).mul(Math.pow(10, 8)).toString());
                    issueMiniMsg = new _types.IssueTinyTokenMsg({
                      name: tokenName,
                      symbol,
                      total_supply: totalSupply,
                      mintable,
                      token_uri: tokenUri,
                      from: senderAddress
                    });
                    _context4.next = 15;
                    return this._bncClient._prepareTransaction(issueMiniMsg.getMsg(), issueMiniMsg.getSignMsg(), senderAddress);
                  case 15:
                    signedTx = _context4.sent;
                    return _context4.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 17:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function issueTinyToken(_x11, _x12, _x13) {
            return _issueTinyToken.apply(this, arguments);
          }
          return issueTinyToken;
        }()
      }, {
        key: "setTokenUri",
        value: function() {
          var _setTokenUri = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(_ref2) {
            var fromAddress, tokenUri, symbol, setUriMsg, signedTx;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    fromAddress = _ref2.fromAddress, tokenUri = _ref2.tokenUri, symbol = _ref2.symbol;
                    validateMiniTokenSymbol(symbol);
                    if (!(tokenUri.length > 2048)) {
                      _context5.next = 4;
                      break;
                    }
                    throw new Error("uri cannot be longer than 2048 characters");
                  case 4:
                    if (fromAddress) {
                      _context5.next = 6;
                      break;
                    }
                    throw new Error("address cannot be empty");
                  case 6:
                    setUriMsg = new _types.SetTokenUriMsg({
                      from: fromAddress,
                      token_uri: tokenUri,
                      symbol
                    });
                    _context5.next = 9;
                    return this._bncClient._prepareTransaction(setUriMsg.getMsg(), setUriMsg.getSignMsg(), fromAddress);
                  case 9:
                    signedTx = _context5.sent;
                    return _context5.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 11:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function setTokenUri(_x14) {
            return _setTokenUri.apply(this, arguments);
          }
          return setTokenUri;
        }()
      }, {
        key: "freeze",
        value: function() {
          var _freeze = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(fromAddress, symbol, amount) {
            var freezeMsg, freezeSignMsg, signedTx;
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    (0, _validateHelper.validateSymbol)(symbol);
                    validateNonZeroAmount(amount, symbol, fromAddress, this._bncClient._httpClient, "free");
                    amount = +Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    freezeMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      symbol,
                      amount,
                      aminoPrefix: _types.AminoPrefix.FreezeMsg
                    };
                    freezeSignMsg = {
                      amount,
                      from: fromAddress,
                      symbol
                    };
                    _context6.next = 7;
                    return this._bncClient._prepareTransaction(freezeMsg, freezeSignMsg, fromAddress);
                  case 7:
                    signedTx = _context6.sent;
                    return _context6.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 9:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
          function freeze(_x15, _x16, _x17) {
            return _freeze.apply(this, arguments);
          }
          return freeze;
        }()
      }, {
        key: "unfreeze",
        value: function() {
          var _unfreeze = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(fromAddress, symbol, amount) {
            var unfreezeMsg, unfreezeSignMsg, signedTx;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    (0, _validateHelper.validateSymbol)(symbol);
                    validateNonZeroAmount(amount, symbol, fromAddress, this._bncClient._httpClient, "frozen");
                    amount = +Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    unfreezeMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      symbol,
                      amount,
                      aminoPrefix: _types.AminoPrefix.UnfreezeMsg
                    };
                    unfreezeSignMsg = {
                      amount,
                      from: fromAddress,
                      symbol
                    };
                    _context7.next = 7;
                    return this._bncClient._prepareTransaction(unfreezeMsg, unfreezeSignMsg, fromAddress);
                  case 7:
                    signedTx = _context7.sent;
                    return _context7.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 9:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function unfreeze(_x18, _x19, _x20) {
            return _unfreeze.apply(this, arguments);
          }
          return unfreeze;
        }()
      }, {
        key: "burn",
        value: function() {
          var _burn = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(fromAddress, symbol, amount) {
            var burnMsg, burnSignMsg, signedTx;
            return _regenerator["default"].wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    (0, _validateHelper.validateSymbol)(symbol);
                    validateNonZeroAmount(amount, symbol, fromAddress, this._bncClient._httpClient);
                    amount = +Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    burnMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      symbol,
                      amount,
                      aminoPrefix: _types.AminoPrefix.BurnMsg
                    };
                    burnSignMsg = {
                      amount,
                      from: fromAddress,
                      symbol
                    };
                    _context8.next = 7;
                    return this._bncClient._prepareTransaction(burnMsg, burnSignMsg, fromAddress);
                  case 7:
                    signedTx = _context8.sent;
                    return _context8.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 9:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
          function burn(_x21, _x22, _x23) {
            return _burn.apply(this, arguments);
          }
          return burn;
        }()
      }, {
        key: "mint",
        value: function() {
          var _mint = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(fromAddress, symbol, amount) {
            var mintMsg, mintSignMsg, signedTx;
            return _regenerator["default"].wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    (0, _validateHelper.validateSymbol)(symbol);
                    if (!(amount <= 0 || amount > MAXTOTALSUPPLY)) {
                      _context9.next = 3;
                      break;
                    }
                    throw new Error("invalid amount");
                  case 3:
                    amount = Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    mintMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      symbol,
                      amount,
                      aminoPrefix: _types.AminoPrefix.MintMsg
                    };
                    mintSignMsg = {
                      amount,
                      from: fromAddress,
                      symbol
                    };
                    _context9.next = 8;
                    return this._bncClient._prepareTransaction(mintMsg, mintSignMsg, fromAddress);
                  case 8:
                    signedTx = _context9.sent;
                    return _context9.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 10:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
          function mint(_x24, _x25, _x26) {
            return _mint.apply(this, arguments);
          }
          return mint;
        }()
      }, {
        key: "timeLock",
        value: function() {
          var _timeLock = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10(fromAddress, description, amount, lockTime) {
            var timeLockMsg, signTimeLockMsg, signedTx;
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    (0, _validateHelper.checkCoins)(amount);
                    if (!(description.length > 128)) {
                      _context10.next = 3;
                      break;
                    }
                    throw new Error("description is too long");
                  case 3:
                    if (!(lockTime < 60 || lockTime > 253402300800)) {
                      _context10.next = 5;
                      break;
                    }
                    throw new Error("timeTime must be in [60, 253402300800]");
                  case 5:
                    timeLockMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      description,
                      amount,
                      lock_time: lockTime,
                      aminoPrefix: _types.AminoPrefix.TimeLockMsg
                    };
                    signTimeLockMsg = {
                      from: fromAddress,
                      description,
                      amount,
                      lock_time: lockTime
                    };
                    _context10.next = 9;
                    return this._bncClient._prepareTransaction(timeLockMsg, signTimeLockMsg, fromAddress);
                  case 9:
                    signedTx = _context10.sent;
                    return _context10.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 11:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));
          function timeLock(_x27, _x28, _x29, _x30) {
            return _timeLock.apply(this, arguments);
          }
          return timeLock;
        }()
      }, {
        key: "timeRelock",
        value: function() {
          var _timeRelock = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11(fromAddress, id, description, amount, lockTime) {
            var timeRelockMsg, signTimeRelockMsg, signedTx;
            return _regenerator["default"].wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    (0, _validateHelper.checkCoins)(amount);
                    if (!(description.length > 128)) {
                      _context11.next = 3;
                      break;
                    }
                    throw new Error("description is too long");
                  case 3:
                    if (!(lockTime < 60 || lockTime > 253402300800)) {
                      _context11.next = 5;
                      break;
                    }
                    throw new Error("timeTime must be in [60, 253402300800]");
                  case 5:
                    timeRelockMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      time_lock_id: id,
                      description,
                      amount,
                      lock_time: lockTime,
                      aminoPrefix: _types.AminoPrefix.TimeRelockMsg
                    };
                    signTimeRelockMsg = {
                      from: fromAddress,
                      time_lock_id: id,
                      description,
                      amount,
                      lock_time: lockTime
                    };
                    _context11.next = 9;
                    return this._bncClient._prepareTransaction(timeRelockMsg, signTimeRelockMsg, fromAddress);
                  case 9:
                    signedTx = _context11.sent;
                    return _context11.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 11:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));
          function timeRelock(_x31, _x32, _x33, _x34, _x35) {
            return _timeRelock.apply(this, arguments);
          }
          return timeRelock;
        }()
      }, {
        key: "timeUnlock",
        value: function() {
          var _timeUnlock = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12(fromAddress, id) {
            var timeUnlockMsg, signTimeUnlockMsg, signedTx;
            return _regenerator["default"].wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    timeUnlockMsg = {
                      from: crypto2.decodeAddress(fromAddress),
                      time_lock_id: id,
                      aminoPrefix: _types.AminoPrefix.TimeUnlockMsg
                    };
                    signTimeUnlockMsg = {
                      from: fromAddress,
                      time_lock_id: id
                    };
                    _context12.next = 4;
                    return this._bncClient._prepareTransaction(timeUnlockMsg, signTimeUnlockMsg, fromAddress);
                  case 4:
                    signedTx = _context12.sent;
                    return _context12.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 6:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));
          function timeUnlock(_x36, _x37) {
            return _timeUnlock.apply(this, arguments);
          }
          return timeUnlock;
        }()
      }]);
      return TokenManagement2;
    }();
    var _default = TokenManagement;
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/bridge/index.js
var require_bridge = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/bridge/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Bridge = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _crypto = require_crypto2();
    var _types = require_types();
    var Bridge = function() {
      function Bridge2(bncClient) {
        (0, _classCallCheck2["default"])(this, Bridge2);
        (0, _defineProperty2["default"])(this, "_bncClient", void 0);
        this._bncClient = bncClient;
      }
      (0, _createClass2["default"])(Bridge2, [{
        key: "transferIn",
        value: function() {
          var _transferIn = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
            var sequence, contract_address, refund_addresses, receiver_addresses, amounts, relay_fee, expire_time, symbol, fromAddress, receiverAddresses, refundAddresses, claimHex;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    sequence = _ref.sequence, contract_address = _ref.contract_address, refund_addresses = _ref.refund_addresses, receiver_addresses = _ref.receiver_addresses, amounts = _ref.amounts, relay_fee = _ref.relay_fee, expire_time = _ref.expire_time, symbol = _ref.symbol, fromAddress = _ref.fromAddress;
                    if (!(sequence < 0)) {
                      _context.next = 3;
                      break;
                    }
                    throw new Error("sequence should not be less than 0");
                  case 3:
                    if (contract_address) {
                      _context.next = 5;
                      break;
                    }
                    throw new Error("contract address should not be empty");
                  case 5:
                    if (relay_fee) {
                      _context.next = 7;
                      break;
                    }
                    throw new Error("relay fee should not be empty");
                  case 7:
                    if (symbol) {
                      _context.next = 9;
                      break;
                    }
                    throw new Error("symbol should not be null");
                  case 9:
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context.next = 11;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 11:
                    if (!(refund_addresses.length != receiver_addresses.length || refund_addresses.length != amounts.length)) {
                      _context.next = 13;
                      break;
                    }
                    throw new Error("the length of refund address array, recipient address array and transfer amount array must be the same");
                  case 13:
                    receiverAddresses = receiver_addresses.map(function(address) {
                      var addressHrp = address.startsWith("tbnb") ? "tbnb" : "bnb";
                      if (!(0, _crypto.checkAddress)(address, addressHrp)) {
                        throw new Error("".concat(address, " in receiver_addresses is not a valid Binance Chain address"));
                      }
                      return (0, _crypto.decodeAddress)(address);
                    });
                    refundAddresses = refund_addresses.map(function(address) {
                      if (!address.startsWith("0x")) {
                        throw new Error("".concat(address, " is invalid"));
                      }
                      return Buffer.from(address.slice(2), "hex");
                    });
                    claimHex = Buffer.from(JSON.stringify({
                      contract_address,
                      refund_addresses: refundAddresses,
                      receiver_addresses: receiverAddresses,
                      amounts,
                      symbol,
                      relay_fee,
                      expire_time
                    })).toString("hex");
                    return _context.abrupt("return", this.buildClaimAndBroadcast({
                      claimHex,
                      claim_type: _types.ClaimTypes.ClaimTypeTransferIn,
                      fromAddress,
                      sequence
                    }));
                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function transferIn(_x) {
            return _transferIn.apply(this, arguments);
          }
          return transferIn;
        }()
      }, {
        key: "transferOutRefund",
        value: function() {
          var _transferOutRefund = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(_ref2) {
            var transfer_out_sequence, refund_address, refund_reason, amount, fromAddress, claimHex;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    transfer_out_sequence = _ref2.transfer_out_sequence, refund_address = _ref2.refund_address, refund_reason = _ref2.refund_reason, amount = _ref2.amount, fromAddress = _ref2.fromAddress;
                    if (!(transfer_out_sequence < 0)) {
                      _context2.next = 3;
                      break;
                    }
                    throw new Error("sequence should not be less than 0");
                  case 3:
                    if (amount) {
                      _context2.next = 5;
                      break;
                    }
                    throw new Error("amount should not be empty");
                  case 5:
                    if (refund_reason) {
                      _context2.next = 7;
                      break;
                    }
                    throw new Error("empty refund reason");
                  case 7:
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context2.next = 9;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 9:
                    claimHex = Buffer.from(JSON.stringify({
                      transfer_out_sequence,
                      refund_address,
                      amount,
                      refund_reason
                    })).toString("hex");
                    return _context2.abrupt("return", this.buildClaimAndBroadcast({
                      claimHex,
                      claim_type: _types.ClaimTypes.ClaimTypeTransferOutRefund,
                      sequence: transfer_out_sequence,
                      fromAddress
                    }));
                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function transferOutRefund(_x2) {
            return _transferOutRefund.apply(this, arguments);
          }
          return transferOutRefund;
        }()
      }, {
        key: "bind",
        value: function() {
          var _bind = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(_ref3) {
            var contractAddress, contractDecimal, amount, symbol, expireTime, fromAddress, bindMsg;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    contractAddress = _ref3.contractAddress, contractDecimal = _ref3.contractDecimal, amount = _ref3.amount, symbol = _ref3.symbol, expireTime = _ref3.expireTime, fromAddress = _ref3.fromAddress;
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context3.next = 3;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 3:
                    if (contractAddress.startsWith("0x")) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error('contractAddress "'.concat(contractAddress, '" is invalid'));
                  case 5:
                    bindMsg = new _types.BindMsg({
                      from: fromAddress,
                      amount,
                      contract_address: contractAddress,
                      contract_decimals: contractDecimal,
                      expire_time: expireTime,
                      symbol
                    });
                    _context3.next = 8;
                    return this.broadcast(bindMsg, fromAddress);
                  case 8:
                    return _context3.abrupt("return", _context3.sent);
                  case 9:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function bind(_x3) {
            return _bind.apply(this, arguments);
          }
          return bind;
        }()
      }, {
        key: "transferFromBcToBsc",
        value: function() {
          var _transferFromBcToBsc = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(_ref4) {
            var toAddress, amount, symbol, expireTime, fromAddress, transferOut;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    toAddress = _ref4.toAddress, amount = _ref4.amount, symbol = _ref4.symbol, expireTime = _ref4.expireTime, fromAddress = _ref4.fromAddress;
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context4.next = 3;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 3:
                    if (toAddress.startsWith("0x")) {
                      _context4.next = 5;
                      break;
                    }
                    throw new Error('toAddress "'.concat(toAddress, '" is invalid'));
                  case 5:
                    transferOut = new _types.TransferOutMsg({
                      from: fromAddress,
                      to: toAddress,
                      amount: {
                        denom: symbol,
                        amount
                      },
                      expire_time: expireTime
                    });
                    return _context4.abrupt("return", this.broadcast(transferOut, fromAddress));
                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function transferFromBcToBsc(_x4) {
            return _transferFromBcToBsc.apply(this, arguments);
          }
          return transferFromBcToBsc;
        }()
      }, {
        key: "upateBind",
        value: function() {
          var _upateBind = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(_ref5) {
            var sequence, contract_address, symbol, status, fromAddress, claimHex;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    sequence = _ref5.sequence, contract_address = _ref5.contract_address, symbol = _ref5.symbol, status = _ref5.status, fromAddress = _ref5.fromAddress;
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context5.next = 3;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 3:
                    if (contract_address.startsWith("0x")) {
                      _context5.next = 5;
                      break;
                    }
                    throw new Error('toAddress "'.concat(contract_address, '" is invalid'));
                  case 5:
                    claimHex = Buffer.from(JSON.stringify({
                      status,
                      symbol,
                      contract_address
                    })).toString("hex");
                    return _context5.abrupt("return", this.buildClaimAndBroadcast({
                      claimHex,
                      sequence,
                      fromAddress,
                      claim_type: _types.ClaimTypes.ClaimTypeUpdateBind
                    }));
                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function upateBind(_x5) {
            return _upateBind.apply(this, arguments);
          }
          return upateBind;
        }()
      }, {
        key: "skipSequence",
        value: function() {
          var _skipSequence = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(_ref6) {
            var sequence, sequenceToSkip, fromAddress, claimHex;
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    sequence = _ref6.sequence, sequenceToSkip = _ref6.sequenceToSkip, fromAddress = _ref6.fromAddress;
                    if (!(sequence < 0)) {
                      _context6.next = 3;
                      break;
                    }
                    throw new Error("sequence should not be less than 0");
                  case 3:
                    if ((0, _crypto.checkAddress)(fromAddress, this._bncClient.addressPrefix)) {
                      _context6.next = 5;
                      break;
                    }
                    throw new Error("fromAddress is not a valid Binance Chain address");
                  case 5:
                    claimHex = Buffer.from(JSON.stringify({
                      claim_type: _types.ClaimTypes.ClaimTypeUpdateBind,
                      sequence: sequenceToSkip
                    })).toString("hex");
                    return _context6.abrupt("return", this.buildClaimAndBroadcast({
                      claimHex,
                      sequence,
                      fromAddress,
                      claim_type: _types.ClaimTypes.ClaimTypeSkipSequence
                    }));
                  case 7:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
          function skipSequence(_x6) {
            return _skipSequence.apply(this, arguments);
          }
          return skipSequence;
        }()
      }, {
        key: "buildClaimAndBroadcast",
        value: function() {
          var _buildClaimAndBroadcast = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(_ref7) {
            var claimHex, claim_type, sequence, fromAddress, claimMsg;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    claimHex = _ref7.claimHex, claim_type = _ref7.claim_type, sequence = _ref7.sequence, fromAddress = _ref7.fromAddress;
                    claimMsg = new _types.ClaimMsg({
                      claim_type,
                      sequence,
                      claim: claimHex,
                      validator_address: fromAddress
                    });
                    _context7.next = 4;
                    return this.broadcast(claimMsg, fromAddress, sequence);
                  case 4:
                    return _context7.abrupt("return", _context7.sent);
                  case 5:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function buildClaimAndBroadcast(_x7) {
            return _buildClaimAndBroadcast.apply(this, arguments);
          }
          return buildClaimAndBroadcast;
        }()
      }, {
        key: "broadcast",
        value: function() {
          var _broadcast = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(msg, fromAddress, sequence) {
            var signedTx;
            return _regenerator["default"].wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _context8.next = 2;
                    return this._bncClient._prepareTransaction(msg.getMsg(), msg.getSignMsg(), fromAddress, sequence);
                  case 2:
                    signedTx = _context8.sent;
                    return _context8.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 4:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
          function broadcast(_x8, _x9, _x10) {
            return _broadcast.apply(this, arguments);
          }
          return broadcast;
        }()
      }]);
      return Bridge2;
    }();
    exports2.Bridge = Bridge;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/stake/index.js
var require_stake2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/stake/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Stake = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var Stake = function() {
      function Stake2(bncClient) {
        (0, _classCallCheck2["default"])(this, Stake2);
        (0, _defineProperty2["default"])(this, "_bncClient", void 0);
        this._bncClient = bncClient;
      }
      (0, _createClass2["default"])(Stake2, [{
        key: "bscDelegate",
        value: function() {
          var _bscDelegate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
            var delegateAddress, validatorAddress, amount, _ref$symbol, symbol, _ref$sideChainId, sideChainId, bscDelegateMsg;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    delegateAddress = _ref.delegateAddress, validatorAddress = _ref.validatorAddress, amount = _ref.amount, _ref$symbol = _ref.symbol, symbol = _ref$symbol === void 0 ? "BNB" : _ref$symbol, _ref$sideChainId = _ref.sideChainId, sideChainId = _ref$sideChainId === void 0 ? "chapel" : _ref$sideChainId;
                    if (amount) {
                      _context.next = 3;
                      break;
                    }
                    throw new Error("amount should not be empty");
                  case 3:
                    if (delegateAddress) {
                      _context.next = 5;
                      break;
                    }
                    throw new Error("delegate address should not be null");
                  case 5:
                    if (crypto2.checkAddress(validatorAddress, "bva")) {
                      _context.next = 7;
                      break;
                    }
                    throw new Error("validator address is not valid");
                  case 7:
                    amount = Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    bscDelegateMsg = new _types.BscDelegateMsg({
                      delegator_addr: delegateAddress,
                      validator_addr: validatorAddress,
                      delegation: {
                        denom: symbol,
                        amount
                      },
                      side_chain_id: sideChainId
                    });
                    _context.next = 11;
                    return this.broadcast(bscDelegateMsg, delegateAddress);
                  case 11:
                    return _context.abrupt("return", _context.sent);
                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function bscDelegate(_x) {
            return _bscDelegate.apply(this, arguments);
          }
          return bscDelegate;
        }()
      }, {
        key: "bscUndelegate",
        value: function() {
          var _bscUndelegate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(_ref2) {
            var delegateAddress, validatorAddress, amount, _ref2$symbol, symbol, _ref2$sideChainId, sideChainId, unDelegateMsg;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    delegateAddress = _ref2.delegateAddress, validatorAddress = _ref2.validatorAddress, amount = _ref2.amount, _ref2$symbol = _ref2.symbol, symbol = _ref2$symbol === void 0 ? "BNB" : _ref2$symbol, _ref2$sideChainId = _ref2.sideChainId, sideChainId = _ref2$sideChainId === void 0 ? "chapel" : _ref2$sideChainId;
                    if (amount) {
                      _context2.next = 3;
                      break;
                    }
                    throw new Error("amount should not be empty");
                  case 3:
                    if (delegateAddress) {
                      _context2.next = 5;
                      break;
                    }
                    throw new Error("delegate address should not be null");
                  case 5:
                    if (crypto2.checkAddress(validatorAddress, "bva")) {
                      _context2.next = 7;
                      break;
                    }
                    throw new Error("validator address is not valid");
                  case 7:
                    amount = Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    unDelegateMsg = new _types.BscUndelegateMsg({
                      delegator_addr: delegateAddress,
                      validator_addr: validatorAddress,
                      amount: {
                        denom: symbol,
                        amount
                      },
                      side_chain_id: sideChainId
                    });
                    _context2.next = 11;
                    return this.broadcast(unDelegateMsg, delegateAddress);
                  case 11:
                    return _context2.abrupt("return", _context2.sent);
                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function bscUndelegate(_x2) {
            return _bscUndelegate.apply(this, arguments);
          }
          return bscUndelegate;
        }()
      }, {
        key: "bscReDelegate",
        value: function() {
          var _bscReDelegate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(_ref3) {
            var delegateAddress, validatorSrcAddress, validatorDstAddress, amount, _ref3$symbol, symbol, _ref3$sideChainId, sideChainId, bscReDelegateMsg;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    delegateAddress = _ref3.delegateAddress, validatorSrcAddress = _ref3.validatorSrcAddress, validatorDstAddress = _ref3.validatorDstAddress, amount = _ref3.amount, _ref3$symbol = _ref3.symbol, symbol = _ref3$symbol === void 0 ? "BNB" : _ref3$symbol, _ref3$sideChainId = _ref3.sideChainId, sideChainId = _ref3$sideChainId === void 0 ? "chapel" : _ref3$sideChainId;
                    if (amount) {
                      _context3.next = 3;
                      break;
                    }
                    throw new Error("amount should not be empty");
                  case 3:
                    if (delegateAddress) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error("delegate address should not be null");
                  case 5:
                    if (crypto2.checkAddress(validatorSrcAddress, "bva")) {
                      _context3.next = 7;
                      break;
                    }
                    throw new Error("validator source address is not valid");
                  case 7:
                    if (crypto2.checkAddress(validatorDstAddress, "bva")) {
                      _context3.next = 9;
                      break;
                    }
                    throw new Error("validator dest address is not valid");
                  case 9:
                    amount = Number(new _big["default"](amount).mul(Math.pow(10, 8)).toString());
                    bscReDelegateMsg = new _types.BscReDelegateMsg({
                      delegator_addr: delegateAddress,
                      validator_src_addr: validatorSrcAddress,
                      validator_dst_addr: validatorDstAddress,
                      amount: {
                        denom: symbol,
                        amount
                      },
                      side_chain_id: sideChainId
                    });
                    _context3.next = 13;
                    return this.broadcast(bscReDelegateMsg, delegateAddress);
                  case 13:
                    return _context3.abrupt("return", _context3.sent);
                  case 14:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function bscReDelegate(_x3) {
            return _bscReDelegate.apply(this, arguments);
          }
          return bscReDelegate;
        }()
      }, {
        key: "broadcast",
        value: function() {
          var _broadcast = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(msg, fromAddress, sequence) {
            var signedTx;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this._bncClient._prepareTransaction(msg.getMsg(), msg.getSignMsg(), fromAddress, sequence);
                  case 2:
                    signedTx = _context4.sent;
                    return _context4.abrupt("return", this._bncClient._broadcastDelegate(signedTx));
                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function broadcast(_x4, _x5, _x6) {
            return _broadcast.apply(this, arguments);
          }
          return broadcast;
        }()
      }]);
      return Stake2;
    }();
    exports2.Stake = Stake;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/client/index.js
var require_client = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/client/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BncClient = exports2.DefaultBroadcastDelegate = exports2.DefaultSigningDelegate = exports2.NETWORK_PREFIX_MAPPING = exports2.api = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _big = _interopRequireDefault((init_big(), __toCommonJS(big_exports)));
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _tx = _interopRequireDefault(require_tx2());
    var _types = require_types();
    var _request = _interopRequireDefault(require_request());
    var _validateHelper = require_validateHelper();
    var _gov = _interopRequireDefault(require_gov());
    var _swap = _interopRequireDefault(require_swap());
    var _token = _interopRequireWildcard(require_token2());
    var _bridge = require_bridge();
    var _stake = require_stake2();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var BASENUMBER = Math.pow(10, 8);
    var api = {
      broadcast: "/api/v1/broadcast",
      nodeInfo: "/api/v1/node-info",
      getAccount: "/api/v1/account",
      getMarkets: "/api/v1/markets",
      getSwaps: "/api/v1/atomic-swaps",
      getOpenOrders: "/api/v1/orders/open",
      getDepth: "/api/v1/depth",
      getTransactions: "/api/v1/transactions",
      getTx: "/api/v1/tx"
    };
    exports2.api = api;
    var NETWORK_PREFIX_MAPPING = {
      testnet: "tbnb",
      mainnet: "bnb"
    };
    exports2.NETWORK_PREFIX_MAPPING = NETWORK_PREFIX_MAPPING;
    var DefaultSigningDelegate = function() {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(tx, signMsg) {
        var privateKey;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                privateKey = this.getPrivateKey();
                if (privateKey) {
                  _context.next = 3;
                  break;
                }
                return _context.abrupt("return", Promise.reject("Private key has to be set before signing a transaction"));
              case 3:
                return _context.abrupt("return", tx.sign(privateKey, signMsg));
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function DefaultSigningDelegate2(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }();
    exports2.DefaultSigningDelegate = DefaultSigningDelegate;
    var DefaultBroadcastDelegate = function() {
      var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(signedTx) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.sendTransaction(signedTx, true));
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function DefaultBroadcastDelegate2(_x4, _x5) {
        return _ref2.apply(this, arguments);
      };
    }();
    exports2.DefaultBroadcastDelegate = DefaultBroadcastDelegate;
    var checkOutputs = function checkOutputs2(outputs) {
      outputs.forEach(function(transfer) {
        var coins = transfer.coins || [];
        coins.forEach(function(coin) {
          (0, _validateHelper.checkNumber)(coin.amount);
          if (!coin.denom) {
            throw new Error("invalid denmon");
          }
        });
      });
    };
    var calInputCoins = function calInputCoins2(inputs, coins) {
      coins.forEach(function(coin) {
        var existCoin = inputs[0].coins.find(function(c2) {
          return c2.denom === coin.denom;
        });
        if (existCoin) {
          var existAmount = new _big["default"](existCoin.amount);
          existCoin.amount = Number(existAmount.plus(coin.amount).toString());
        } else {
          inputs[0].coins.push(_objectSpread({}, coin));
        }
      });
    };
    var BncClient = function() {
      function BncClient2(server) {
        var useAsyncBroadcast = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        (0, _classCallCheck2["default"])(this, BncClient2);
        (0, _defineProperty2["default"])(this, "_httpClient", void 0);
        (0, _defineProperty2["default"])(this, "_signingDelegate", void 0);
        (0, _defineProperty2["default"])(this, "_broadcastDelegate", void 0);
        (0, _defineProperty2["default"])(this, "_useAsyncBroadcast", void 0);
        (0, _defineProperty2["default"])(this, "_source", void 0);
        (0, _defineProperty2["default"])(this, "tokens", void 0);
        (0, _defineProperty2["default"])(this, "swap", void 0);
        (0, _defineProperty2["default"])(this, "gov", void 0);
        (0, _defineProperty2["default"])(this, "bridge", void 0);
        (0, _defineProperty2["default"])(this, "stake", void 0);
        (0, _defineProperty2["default"])(this, "chainId", void 0);
        (0, _defineProperty2["default"])(this, "addressPrefix", "tbnb");
        (0, _defineProperty2["default"])(this, "network", "testnet");
        (0, _defineProperty2["default"])(this, "address", void 0);
        (0, _defineProperty2["default"])(this, "_setPkPromise", void 0);
        (0, _defineProperty2["default"])(this, "account_number", void 0);
        (0, _defineProperty2["default"])(this, "_privateKey", null);
        if (!server) {
          throw new Error("Binance chain server should not be null");
        }
        this._httpClient = new _request["default"](server);
        this._signingDelegate = DefaultSigningDelegate;
        this._broadcastDelegate = DefaultBroadcastDelegate;
        this._useAsyncBroadcast = useAsyncBroadcast;
        this._source = source;
        this.tokens = new _token["default"](this);
        this.swap = new _swap["default"](this);
        this.gov = new _gov["default"](this);
        this.bridge = new _bridge.Bridge(this);
        this.stake = new _stake.Stake(this);
      }
      (0, _createClass2["default"])(BncClient2, [{
        key: "initChain",
        value: function() {
          var _initChain = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
            var data;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (this.chainId) {
                      _context3.next = 5;
                      break;
                    }
                    _context3.next = 3;
                    return this._httpClient.request("get", api.nodeInfo);
                  case 3:
                    data = _context3.sent;
                    this.chainId = data.result.node_info && data.result.node_info.network;
                  case 5:
                    return _context3.abrupt("return", this);
                  case 6:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function initChain() {
            return _initChain.apply(this, arguments);
          }
          return initChain;
        }()
      }, {
        key: "chooseNetwork",
        value: function chooseNetwork(network) {
          this.addressPrefix = NETWORK_PREFIX_MAPPING[network] || "tbnb";
          this.network = NETWORK_PREFIX_MAPPING[network] ? network : "testnet";
        }
      }, {
        key: "setPrivateKey",
        value: function() {
          var _setPrivateKey = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(privateKey) {
            var localOnly, address, promise, data, _args4 = arguments;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    localOnly = _args4.length > 1 && _args4[1] !== void 0 ? _args4[1] : false;
                    if (!(privateKey !== this._privateKey)) {
                      _context4.next = 19;
                      break;
                    }
                    address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
                    if (address) {
                      _context4.next = 5;
                      break;
                    }
                    throw new Error("address is falsy: ".concat(address, ". invalid private key?"));
                  case 5:
                    this._privateKey = privateKey;
                    this.address = address;
                    if (localOnly) {
                      _context4.next = 19;
                      break;
                    }
                    _context4.prev = 8;
                    promise = this._setPkPromise = this._httpClient.request("get", "".concat(api.getAccount, "/").concat(address));
                    _context4.next = 12;
                    return promise;
                  case 12:
                    data = _context4.sent;
                    this.account_number = data.result.account_number;
                    _context4.next = 19;
                    break;
                  case 16:
                    _context4.prev = 16;
                    _context4.t0 = _context4["catch"](8);
                    throw new Error("unable to query the address on the blockchain. try sending it some funds first: ".concat(address));
                  case 19:
                    return _context4.abrupt("return", this);
                  case 20:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[8, 16]]);
          }));
          function setPrivateKey(_x6) {
            return _setPrivateKey.apply(this, arguments);
          }
          return setPrivateKey;
        }()
      }, {
        key: "removePrivateKey",
        value: function removePrivateKey() {
          this._privateKey = null;
          return this;
        }
      }, {
        key: "getPrivateKey",
        value: function getPrivateKey() {
          return this._privateKey;
        }
      }, {
        key: "setAccountNumber",
        value: function setAccountNumber(accountNumber) {
          this.account_number = accountNumber;
        }
      }, {
        key: "useAsyncBroadcast",
        value: function useAsyncBroadcast() {
          var _useAsyncBroadcast = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          this._useAsyncBroadcast = _useAsyncBroadcast;
          return this;
        }
      }, {
        key: "setSigningDelegate",
        value: function setSigningDelegate(delegate) {
          if (typeof delegate !== "function")
            throw new Error("signing delegate must be a function");
          this._signingDelegate = delegate;
          return this;
        }
      }, {
        key: "setBroadcastDelegate",
        value: function setBroadcastDelegate(delegate) {
          if (typeof delegate !== "function")
            throw new Error("broadcast delegate must be a function");
          this._broadcastDelegate = delegate;
          return this;
        }
      }, {
        key: "useDefaultSigningDelegate",
        value: function useDefaultSigningDelegate() {
          this._signingDelegate = DefaultSigningDelegate;
          return this;
        }
      }, {
        key: "useDefaultBroadcastDelegate",
        value: function useDefaultBroadcastDelegate() {
          this._broadcastDelegate = DefaultBroadcastDelegate;
          return this;
        }
      }, {
        key: "transfer",
        value: function() {
          var _transfer = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(fromAddress, toAddress, amount, asset) {
            var memo, sequence, accCode, toAccCode, coin, msg, signMsg, signedTx, signedBz, _args5 = arguments;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    memo = _args5.length > 4 && _args5[4] !== void 0 ? _args5[4] : "";
                    sequence = _args5.length > 5 && _args5[5] !== void 0 ? _args5[5] : null;
                    accCode = crypto2.decodeAddress(fromAddress);
                    toAccCode = crypto2.decodeAddress(toAddress);
                    amount = new _big["default"](amount);
                    amount = Number(amount.mul(BASENUMBER).toString());
                    (0, _validateHelper.checkNumber)(amount, "amount");
                    coin = {
                      denom: asset,
                      amount
                    };
                    msg = {
                      inputs: [{
                        address: accCode,
                        coins: [coin]
                      }],
                      outputs: [{
                        address: toAccCode,
                        coins: [coin]
                      }],
                      aminoPrefix: _types.AminoPrefix.MsgSend
                    };
                    signMsg = {
                      inputs: [{
                        address: fromAddress,
                        coins: [{
                          amount,
                          denom: asset
                        }]
                      }],
                      outputs: [{
                        address: toAddress,
                        coins: [{
                          amount,
                          denom: asset
                        }]
                      }]
                    };
                    _context5.next = 12;
                    return this._prepareTransaction(msg, signMsg, fromAddress, sequence, memo);
                  case 12:
                    signedTx = _context5.sent;
                    signedBz = signedTx.serialize();
                    signedTx.serialized = signedBz;
                    return _context5.abrupt("return", signedTx);
                  case 16:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function transfer(_x7, _x8, _x9, _x10) {
            return _transfer.apply(this, arguments);
          }
          return transfer;
        }()
      }, {
        key: "multiSend",
        value: function() {
          var _multiSend = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(fromAddress, outputs) {
            var memo, sequence, fromAddrCode, inputs, transfers, msg, signInputs, signOutputs, signMsg, signedTx, _args6 = arguments;
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    memo = _args6.length > 2 && _args6[2] !== void 0 ? _args6[2] : "";
                    sequence = _args6.length > 3 && _args6[3] !== void 0 ? _args6[3] : null;
                    if (fromAddress) {
                      _context6.next = 4;
                      break;
                    }
                    throw new Error("fromAddress should not be falsy");
                  case 4:
                    if (Array.isArray(outputs)) {
                      _context6.next = 6;
                      break;
                    }
                    throw new Error("outputs should be array");
                  case 6:
                    checkOutputs(outputs);
                    outputs.forEach(function(item) {
                      item.coins = item.coins.sort(function(a2, b2) {
                        return a2.denom.localeCompare(b2.denom);
                      });
                      item.coins.forEach(function(coin) {
                        var amount = new _big["default"](coin.amount);
                        coin.amount = Number(amount.mul(BASENUMBER).toString());
                      });
                    });
                    fromAddrCode = crypto2.decodeAddress(fromAddress);
                    inputs = [{
                      address: fromAddrCode,
                      coins: []
                    }];
                    transfers = [];
                    outputs.forEach(function(item) {
                      var toAddcCode = crypto2.decodeAddress(item.to);
                      calInputCoins(inputs, item.coins);
                      transfers.push({
                        address: toAddcCode,
                        coins: item.coins
                      });
                    });
                    msg = {
                      inputs,
                      outputs: transfers,
                      aminoPrefix: _types.AminoPrefix.MsgSend
                    };
                    signInputs = [{
                      address: fromAddress,
                      coins: []
                    }];
                    signOutputs = [];
                    outputs.forEach(function(item, index) {
                      signOutputs.push({
                        address: item.to,
                        coins: []
                      });
                      item.coins.forEach(function(c2) {
                        signOutputs[index].coins.push(c2);
                      });
                      calInputCoins(signInputs, item.coins);
                    });
                    signMsg = {
                      inputs: signInputs,
                      outputs: signOutputs
                    };
                    _context6.next = 19;
                    return this._prepareTransaction(msg, signMsg, fromAddress, sequence, memo);
                  case 19:
                    signedTx = _context6.sent;
                    return _context6.abrupt("return", this._broadcastDelegate(signedTx));
                  case 21:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
          function multiSend(_x11, _x12) {
            return _multiSend.apply(this, arguments);
          }
          return multiSend;
        }()
      }, {
        key: "cancelOrder",
        value: function() {
          var _cancelOrder = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(fromAddress, symbol, refid) {
            var sequence, accCode, msg, signMsg, signedTx, _args7 = arguments;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    sequence = _args7.length > 3 && _args7[3] !== void 0 ? _args7[3] : null;
                    accCode = crypto2.decodeAddress(fromAddress);
                    msg = {
                      sender: accCode,
                      symbol,
                      refid,
                      aminoPrefix: _types.AminoPrefix.CancelOrderMsg
                    };
                    signMsg = {
                      refid,
                      sender: fromAddress,
                      symbol
                    };
                    _context7.next = 6;
                    return this._prepareTransaction(msg, signMsg, fromAddress, sequence, "");
                  case 6:
                    signedTx = _context7.sent;
                    return _context7.abrupt("return", this._broadcastDelegate(signedTx));
                  case 8:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function cancelOrder(_x13, _x14, _x15) {
            return _cancelOrder.apply(this, arguments);
          }
          return cancelOrder;
        }()
      }, {
        key: "placeOrder",
        value: function() {
          var _placeOrder = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {
            var address, symbol, side, price, quantity, sequence, timeinforce, accCode, data, bigPrice, bigQuantity, placeOrderMsg, signMsg, signedTx, _args8 = arguments;
            return _regenerator["default"].wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    address = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : this.address;
                    symbol = _args8.length > 1 ? _args8[1] : void 0;
                    side = _args8.length > 2 ? _args8[2] : void 0;
                    price = _args8.length > 3 ? _args8[3] : void 0;
                    quantity = _args8.length > 4 ? _args8[4] : void 0;
                    sequence = _args8.length > 5 && _args8[5] !== void 0 ? _args8[5] : null;
                    timeinforce = _args8.length > 6 && _args8[6] !== void 0 ? _args8[6] : 1;
                    if (address) {
                      _context8.next = 9;
                      break;
                    }
                    throw new Error("address should not be falsy");
                  case 9:
                    if (symbol) {
                      _context8.next = 11;
                      break;
                    }
                    throw new Error("symbol should not be falsy");
                  case 11:
                    if (!(side !== 1 && side !== 2)) {
                      _context8.next = 13;
                      break;
                    }
                    throw new Error("side can only be 1 or 2");
                  case 13:
                    if (!(timeinforce !== 1 && timeinforce !== 3)) {
                      _context8.next = 15;
                      break;
                    }
                    throw new Error("timeinforce can only be 1 or 3");
                  case 15:
                    accCode = crypto2.decodeAddress(address);
                    if (!(sequence !== 0 && !sequence)) {
                      _context8.next = 21;
                      break;
                    }
                    _context8.next = 19;
                    return this._httpClient.request("get", "".concat(api.getAccount, "/").concat(address));
                  case 19:
                    data = _context8.sent;
                    sequence = data.result && data.result.sequence;
                  case 21:
                    bigPrice = new _big["default"](price);
                    bigQuantity = new _big["default"](quantity);
                    placeOrderMsg = {
                      sender: accCode,
                      id: "".concat(accCode.toString("hex"), "-").concat(sequence + 1).toUpperCase(),
                      symbol,
                      ordertype: 2,
                      side,
                      price: parseFloat(bigPrice.mul(BASENUMBER).toString()),
                      quantity: parseFloat(bigQuantity.mul(BASENUMBER).toString()),
                      timeinforce,
                      aminoPrefix: _types.AminoPrefix.NewOrderMsg
                    };
                    signMsg = {
                      id: placeOrderMsg.id,
                      ordertype: placeOrderMsg.ordertype,
                      price: placeOrderMsg.price,
                      quantity: placeOrderMsg.quantity,
                      sender: address,
                      side: placeOrderMsg.side,
                      symbol: placeOrderMsg.symbol,
                      timeinforce
                    };
                    (0, _validateHelper.checkNumber)(placeOrderMsg.price, "price");
                    (0, _validateHelper.checkNumber)(placeOrderMsg.quantity, "quantity");
                    _context8.next = 29;
                    return this._prepareTransaction(placeOrderMsg, signMsg, address, sequence, "");
                  case 29:
                    signedTx = _context8.sent;
                    return _context8.abrupt("return", this._broadcastDelegate(signedTx));
                  case 31:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
          function placeOrder() {
            return _placeOrder.apply(this, arguments);
          }
          return placeOrder;
        }()
      }, {
        key: "list",
        value: function() {
          var _list = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(address, proposalId, baseAsset, quoteAsset, initPrice) {
            var sequence, accCode, init_price, listMsg, signMsg, signedTx, _args9 = arguments;
            return _regenerator["default"].wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    sequence = _args9.length > 5 && _args9[5] !== void 0 ? _args9[5] : null;
                    accCode = crypto2.decodeAddress(address);
                    if (address) {
                      _context9.next = 4;
                      break;
                    }
                    throw new Error("address should not be falsy");
                  case 4:
                    if (!(proposalId <= 0)) {
                      _context9.next = 6;
                      break;
                    }
                    throw new Error("proposal id should larger than 0");
                  case 6:
                    if (!(initPrice <= 0)) {
                      _context9.next = 8;
                      break;
                    }
                    throw new Error("price should larger than 0");
                  case 8:
                    if (baseAsset) {
                      _context9.next = 10;
                      break;
                    }
                    throw new Error("baseAsset should not be falsy");
                  case 10:
                    if (quoteAsset) {
                      _context9.next = 12;
                      break;
                    }
                    throw new Error("quoteAsset should not be falsy");
                  case 12:
                    init_price = Number(new _big["default"](initPrice).mul(BASENUMBER).toString());
                    listMsg = {
                      from: accCode,
                      proposal_id: proposalId,
                      base_asset_symbol: baseAsset,
                      quote_asset_symbol: quoteAsset,
                      init_price,
                      aminoPrefix: _types.AminoPrefix.ListMsg
                    };
                    signMsg = {
                      base_asset_symbol: baseAsset,
                      from: address,
                      init_price,
                      proposal_id: proposalId,
                      quote_asset_symbol: quoteAsset
                    };
                    _context9.next = 17;
                    return this._prepareTransaction(listMsg, signMsg, address, sequence, "");
                  case 17:
                    signedTx = _context9.sent;
                    return _context9.abrupt("return", this._broadcastDelegate(signedTx));
                  case 19:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
          function list(_x16, _x17, _x18, _x19, _x20) {
            return _list.apply(this, arguments);
          }
          return list;
        }()
      }, {
        key: "listMiniToken",
        value: function() {
          var _listMiniToken = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10(_ref3) {
            var from, baseAsset, quoteAsset, initPrice, _ref3$sequence, sequence, init_price, listMiniMsg, signedTx;
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    from = _ref3.from, baseAsset = _ref3.baseAsset, quoteAsset = _ref3.quoteAsset, initPrice = _ref3.initPrice, _ref3$sequence = _ref3.sequence, sequence = _ref3$sequence === void 0 ? null : _ref3$sequence;
                    (0, _token.validateMiniTokenSymbol)(baseAsset);
                    if (!(initPrice <= 0)) {
                      _context10.next = 4;
                      break;
                    }
                    throw new Error("price should larger than 0");
                  case 4:
                    if (from) {
                      _context10.next = 6;
                      break;
                    }
                    throw new Error("address should not be falsy");
                  case 6:
                    if (quoteAsset) {
                      _context10.next = 8;
                      break;
                    }
                    throw new Error("quoteAsset should not be falsy");
                  case 8:
                    init_price = Number(new _big["default"](initPrice).mul(BASENUMBER).toString());
                    listMiniMsg = new _types.ListMiniMsg({
                      from,
                      base_asset_symbol: baseAsset,
                      quote_asset_symbol: quoteAsset,
                      init_price
                    });
                    _context10.next = 12;
                    return this._prepareTransaction(listMiniMsg.getMsg(), listMiniMsg.getSignMsg(), from, sequence);
                  case 12:
                    signedTx = _context10.sent;
                    return _context10.abrupt("return", this._broadcastDelegate(signedTx));
                  case 14:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));
          function listMiniToken(_x21) {
            return _listMiniToken.apply(this, arguments);
          }
          return listMiniToken;
        }()
      }, {
        key: "setAccountFlags",
        value: function() {
          var _setAccountFlags = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11(address, flags) {
            var sequence, accCode, msg, signMsg, signedTx, _args11 = arguments;
            return _regenerator["default"].wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    sequence = _args11.length > 2 && _args11[2] !== void 0 ? _args11[2] : null;
                    accCode = crypto2.decodeAddress(address);
                    msg = {
                      from: accCode,
                      flags,
                      aminoPrefix: _types.AminoPrefix.SetAccountFlagsMsg
                    };
                    signMsg = {
                      flags,
                      from: address
                    };
                    _context11.next = 6;
                    return this._prepareTransaction(msg, signMsg, address, sequence, "");
                  case 6:
                    signedTx = _context11.sent;
                    return _context11.abrupt("return", this._broadcastDelegate(signedTx));
                  case 8:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));
          function setAccountFlags(_x22, _x23) {
            return _setAccountFlags.apply(this, arguments);
          }
          return setAccountFlags;
        }()
      }, {
        key: "_prepareTransaction",
        value: function() {
          var _prepareTransaction2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12(msg, stdSignMsg, address) {
            var sequence, memo, data, tx, _args12 = arguments;
            return _regenerator["default"].wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    sequence = _args12.length > 3 && _args12[3] !== void 0 ? _args12[3] : null;
                    memo = _args12.length > 4 && _args12[4] !== void 0 ? _args12[4] : "";
                    if (!((!this.account_number || sequence !== 0 && !sequence) && address)) {
                      _context12.next = 10;
                      break;
                    }
                    _context12.next = 5;
                    return this._httpClient.request("get", "".concat(api.getAccount, "/").concat(address));
                  case 5:
                    data = _context12.sent;
                    sequence = data.result.sequence;
                    this.account_number = data.result.account_number;
                    _context12.next = 13;
                    break;
                  case 10:
                    if (!this._setPkPromise) {
                      _context12.next = 13;
                      break;
                    }
                    _context12.next = 13;
                    return this._setPkPromise;
                  case 13:
                    tx = new _tx["default"]({
                      accountNumber: typeof this.account_number !== "number" ? parseInt(this.account_number) : this.account_number,
                      chainId: this.chainId,
                      memo,
                      msg,
                      sequence: typeof sequence !== "number" ? parseInt(sequence) : sequence,
                      source: this._source
                    });
                    return _context12.abrupt("return", this._signingDelegate.call(this, tx, stdSignMsg));
                  case 15:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));
          function _prepareTransaction(_x24, _x25, _x26) {
            return _prepareTransaction2.apply(this, arguments);
          }
          return _prepareTransaction;
        }()
      }, {
        key: "sendTransaction",
        value: function() {
          var _sendTransaction2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13(signedTx, sync) {
            var signedBz;
            return _regenerator["default"].wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    signedBz = signedTx.serialize();
                    return _context13.abrupt("return", this.sendRawTransaction(signedBz, sync));
                  case 2:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));
          function sendTransaction(_x27, _x28) {
            return _sendTransaction2.apply(this, arguments);
          }
          return sendTransaction;
        }()
      }, {
        key: "sendRawTransaction",
        value: function() {
          var _sendRawTransaction = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14(signedBz) {
            var sync, opts, _args14 = arguments;
            return _regenerator["default"].wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    sync = _args14.length > 1 && _args14[1] !== void 0 ? _args14[1] : !this._useAsyncBroadcast;
                    opts = {
                      data: signedBz,
                      headers: {
                        "content-type": "text/plain"
                      }
                    };
                    return _context14.abrupt("return", this._httpClient.request("post", "".concat(api.broadcast, "?sync=").concat(sync), null, opts));
                  case 3:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14, this);
          }));
          function sendRawTransaction(_x29) {
            return _sendRawTransaction.apply(this, arguments);
          }
          return sendRawTransaction;
        }()
      }, {
        key: "_sendTransaction",
        value: function() {
          var _sendTransaction3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15(msg, stdSignMsg, address) {
            var sequence, memo, sync, signedTx, _args15 = arguments;
            return _regenerator["default"].wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    sequence = _args15.length > 3 && _args15[3] !== void 0 ? _args15[3] : null;
                    memo = _args15.length > 4 && _args15[4] !== void 0 ? _args15[4] : "";
                    sync = _args15.length > 5 && _args15[5] !== void 0 ? _args15[5] : !this._useAsyncBroadcast;
                    _context15.next = 5;
                    return this._prepareTransaction(msg, stdSignMsg, address, sequence, memo);
                  case 5:
                    signedTx = _context15.sent;
                    return _context15.abrupt("return", this.sendTransaction(signedTx, sync));
                  case 7:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this);
          }));
          function _sendTransaction(_x30, _x31, _x32) {
            return _sendTransaction3.apply(this, arguments);
          }
          return _sendTransaction;
        }()
      }, {
        key: "getAccount",
        value: function() {
          var _getAccount = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {
            var address, data, _args16 = arguments;
            return _regenerator["default"].wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    address = _args16.length > 0 && _args16[0] !== void 0 ? _args16[0] : this.address;
                    if (address) {
                      _context16.next = 3;
                      break;
                    }
                    throw new Error("address should not be falsy");
                  case 3:
                    _context16.prev = 3;
                    _context16.next = 6;
                    return this._httpClient.request("get", "".concat(api.getAccount, "/").concat(address));
                  case 6:
                    data = _context16.sent;
                    return _context16.abrupt("return", data);
                  case 10:
                    _context16.prev = 10;
                    _context16.t0 = _context16["catch"](3);
                    return _context16.abrupt("return", null);
                  case 13:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16, this, [[3, 10]]);
          }));
          function getAccount() {
            return _getAccount.apply(this, arguments);
          }
          return getAccount;
        }()
      }, {
        key: "getBalance",
        value: function() {
          var _getBalance = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {
            var address, data, _args17 = arguments;
            return _regenerator["default"].wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    address = _args17.length > 0 && _args17[0] !== void 0 ? _args17[0] : this.address;
                    _context17.prev = 1;
                    _context17.next = 4;
                    return this.getAccount(address);
                  case 4:
                    data = _context17.sent;
                    return _context17.abrupt("return", data.result.balances);
                  case 8:
                    _context17.prev = 8;
                    _context17.t0 = _context17["catch"](1);
                    return _context17.abrupt("return", []);
                  case 11:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17, this, [[1, 8]]);
          }));
          function getBalance() {
            return _getBalance.apply(this, arguments);
          }
          return getBalance;
        }()
      }, {
        key: "getMarkets",
        value: function() {
          var _getMarkets = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {
            var limit, offset, data, _args18 = arguments;
            return _regenerator["default"].wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    limit = _args18.length > 0 && _args18[0] !== void 0 ? _args18[0] : 1e3;
                    offset = _args18.length > 1 && _args18[1] !== void 0 ? _args18[1] : 0;
                    _context18.prev = 2;
                    _context18.next = 5;
                    return this._httpClient.request("get", "".concat(api.getMarkets, "?limit=").concat(limit, "&offset=").concat(offset));
                  case 5:
                    data = _context18.sent;
                    return _context18.abrupt("return", data);
                  case 9:
                    _context18.prev = 9;
                    _context18.t0 = _context18["catch"](2);
                    console.warn("getMarkets error", _context18.t0);
                    return _context18.abrupt("return", []);
                  case 13:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18, this, [[2, 9]]);
          }));
          function getMarkets() {
            return _getMarkets.apply(this, arguments);
          }
          return getMarkets;
        }()
      }, {
        key: "getTransactions",
        value: function() {
          var _getTransactions = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {
            var address, offset, data, _args19 = arguments;
            return _regenerator["default"].wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    address = _args19.length > 0 && _args19[0] !== void 0 ? _args19[0] : this.address;
                    offset = _args19.length > 1 && _args19[1] !== void 0 ? _args19[1] : 0;
                    _context19.prev = 2;
                    _context19.next = 5;
                    return this._httpClient.request("get", "".concat(api.getTransactions, "?address=").concat(address, "&offset=").concat(offset));
                  case 5:
                    data = _context19.sent;
                    return _context19.abrupt("return", data);
                  case 9:
                    _context19.prev = 9;
                    _context19.t0 = _context19["catch"](2);
                    console.warn("getTransactions error", _context19.t0);
                    return _context19.abrupt("return", []);
                  case 13:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19, this, [[2, 9]]);
          }));
          function getTransactions() {
            return _getTransactions.apply(this, arguments);
          }
          return getTransactions;
        }()
      }, {
        key: "getTx",
        value: function() {
          var _getTx = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20(hash) {
            var data;
            return _regenerator["default"].wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    _context20.prev = 0;
                    _context20.next = 3;
                    return this._httpClient.request("get", "".concat(api.getTx, "/").concat(hash));
                  case 3:
                    data = _context20.sent;
                    return _context20.abrupt("return", data);
                  case 7:
                    _context20.prev = 7;
                    _context20.t0 = _context20["catch"](0);
                    console.warn("getTx error", _context20.t0);
                    return _context20.abrupt("return", []);
                  case 11:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20, this, [[0, 7]]);
          }));
          function getTx(_x33) {
            return _getTx.apply(this, arguments);
          }
          return getTx;
        }()
      }, {
        key: "getDepth",
        value: function() {
          var _getDepth = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {
            var symbol, data, _args21 = arguments;
            return _regenerator["default"].wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    symbol = _args21.length > 0 && _args21[0] !== void 0 ? _args21[0] : "BNB_BUSD-BD1";
                    _context21.prev = 1;
                    _context21.next = 4;
                    return this._httpClient.request("get", "".concat(api.getDepth, "?symbol=").concat(symbol));
                  case 4:
                    data = _context21.sent;
                    return _context21.abrupt("return", data);
                  case 8:
                    _context21.prev = 8;
                    _context21.t0 = _context21["catch"](1);
                    console.warn("getDepth error", _context21.t0);
                    return _context21.abrupt("return", []);
                  case 12:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21, this, [[1, 8]]);
          }));
          function getDepth() {
            return _getDepth.apply(this, arguments);
          }
          return getDepth;
        }()
      }, {
        key: "getOpenOrders",
        value: function() {
          var _getOpenOrders = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {
            var address, data, _args22 = arguments;
            return _regenerator["default"].wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    address = _args22.length > 0 && _args22[0] !== void 0 ? _args22[0] : this.address;
                    _context22.prev = 1;
                    _context22.next = 4;
                    return this._httpClient.request("get", "".concat(api.getOpenOrders, "?address=").concat(address));
                  case 4:
                    data = _context22.sent;
                    return _context22.abrupt("return", data);
                  case 8:
                    _context22.prev = 8;
                    _context22.t0 = _context22["catch"](1);
                    console.warn("getOpenOrders error", _context22.t0);
                    return _context22.abrupt("return", []);
                  case 12:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22, this, [[1, 8]]);
          }));
          function getOpenOrders() {
            return _getOpenOrders.apply(this, arguments);
          }
          return getOpenOrders;
        }()
      }, {
        key: "getSwapByID",
        value: function() {
          var _getSwapByID = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23(swapID) {
            var data;
            return _regenerator["default"].wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    _context23.prev = 0;
                    _context23.next = 3;
                    return this._httpClient.request("get", "".concat(api.getSwaps, "/").concat(swapID));
                  case 3:
                    data = _context23.sent;
                    return _context23.abrupt("return", data);
                  case 7:
                    _context23.prev = 7;
                    _context23.t0 = _context23["catch"](0);
                    console.warn("query swap by swapID error", _context23.t0);
                    return _context23.abrupt("return", []);
                  case 11:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23, this, [[0, 7]]);
          }));
          function getSwapByID(_x34) {
            return _getSwapByID.apply(this, arguments);
          }
          return getSwapByID;
        }()
      }, {
        key: "getSwapByCreator",
        value: function() {
          var _getSwapByCreator = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24(creator) {
            var limit, offset, data, _args24 = arguments;
            return _regenerator["default"].wrap(function _callee24$(_context24) {
              while (1) {
                switch (_context24.prev = _context24.next) {
                  case 0:
                    limit = _args24.length > 1 && _args24[1] !== void 0 ? _args24[1] : 100;
                    offset = _args24.length > 2 && _args24[2] !== void 0 ? _args24[2] : 0;
                    _context24.prev = 2;
                    _context24.next = 5;
                    return this._httpClient.request("get", "".concat(api.getSwaps, "?fromAddress=").concat(creator, "&limit=").concat(limit, "&offset=").concat(offset));
                  case 5:
                    data = _context24.sent;
                    return _context24.abrupt("return", data);
                  case 9:
                    _context24.prev = 9;
                    _context24.t0 = _context24["catch"](2);
                    console.warn("query swap list by swap creator error", _context24.t0);
                    return _context24.abrupt("return", []);
                  case 13:
                  case "end":
                    return _context24.stop();
                }
              }
            }, _callee24, this, [[2, 9]]);
          }));
          function getSwapByCreator(_x35) {
            return _getSwapByCreator.apply(this, arguments);
          }
          return getSwapByCreator;
        }()
      }, {
        key: "getSwapByRecipient",
        value: function() {
          var _getSwapByRecipient = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25(recipient) {
            var limit, offset, data, _args25 = arguments;
            return _regenerator["default"].wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    limit = _args25.length > 1 && _args25[1] !== void 0 ? _args25[1] : 100;
                    offset = _args25.length > 2 && _args25[2] !== void 0 ? _args25[2] : 0;
                    _context25.prev = 2;
                    _context25.next = 5;
                    return this._httpClient.request("get", "".concat(api.getSwaps, "?toAddress=").concat(recipient, "&limit=").concat(limit, "&offset=").concat(offset));
                  case 5:
                    data = _context25.sent;
                    return _context25.abrupt("return", data);
                  case 9:
                    _context25.prev = 9;
                    _context25.t0 = _context25["catch"](2);
                    console.warn("query swap list by swap recipient error", _context25.t0);
                    return _context25.abrupt("return", []);
                  case 13:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25, this, [[2, 9]]);
          }));
          function getSwapByRecipient(_x36) {
            return _getSwapByRecipient.apply(this, arguments);
          }
          return getSwapByRecipient;
        }()
      }, {
        key: "createAccount",
        value: function createAccount() {
          var privateKey = crypto2.generatePrivateKey();
          return {
            privateKey,
            address: crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix)
          };
        }
      }, {
        key: "createAccountWithKeystore",
        value: function createAccountWithKeystore(password) {
          if (!password) {
            throw new Error("password should not be falsy");
          }
          var privateKey = crypto2.generatePrivateKey();
          var address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
          var keystore = crypto2.generateKeyStore(privateKey, password);
          return {
            privateKey,
            address,
            keystore
          };
        }
      }, {
        key: "createAccountWithMneomnic",
        value: function createAccountWithMneomnic() {
          var mnemonic = crypto2.generateMnemonic();
          var privateKey = crypto2.getPrivateKeyFromMnemonic(mnemonic);
          var address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
          return {
            privateKey,
            address,
            mnemonic
          };
        }
      }, {
        key: "recoverAccountFromKeystore",
        value: function recoverAccountFromKeystore(keystore, password) {
          var privateKey = crypto2.getPrivateKeyFromKeyStore(keystore, password);
          var address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
          return {
            privateKey,
            address
          };
        }
      }, {
        key: "recoverAccountFromMnemonic",
        value: function recoverAccountFromMnemonic(mnemonic) {
          var privateKey = crypto2.getPrivateKeyFromMnemonic(mnemonic);
          var address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
          return {
            privateKey,
            address
          };
        }
      }, {
        key: "recoverAccountFromMneomnic",
        value: function recoverAccountFromMneomnic(mnemonic) {
          return this.recoverAccountFromMnemonic(mnemonic);
        }
      }, {
        key: "recoverAccountFromPrivateKey",
        value: function recoverAccountFromPrivateKey(privateKey) {
          var address = crypto2.getAddressFromPrivateKey(privateKey, this.addressPrefix);
          return {
            privateKey,
            address
          };
        }
      }, {
        key: "checkAddress",
        value: function checkAddress(address) {
          var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.addressPrefix;
          return crypto2.checkAddress(address, prefix);
        }
      }, {
        key: "getClientKeyAddress",
        value: function getClientKeyAddress() {
          if (!this._privateKey)
            throw new Error("no private key is set on this client");
          var address = crypto2.getAddressFromPrivateKey(this._privateKey, this.addressPrefix);
          this.address = address;
          return address;
        }
      }]);
      return BncClient2;
    }();
    exports2.BncClient = BncClient;
  }
});

// node_modules/split2/index.js
var require_split2 = __commonJS({
  "node_modules/split2/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var through = require_through2();
    var StringDecoder = require_string_decoder().StringDecoder;
    function transform(chunk, enc, cb) {
      this._last += this._decoder.write(chunk);
      if (this._last.length > this.maxLength) {
        return cb(new Error("maximum buffer reached"));
      }
      var list = this._last.split(this.matcher);
      this._last = list.pop();
      for (var i = 0; i < list.length; i++) {
        push(this, this.mapper(list[i]));
      }
      cb();
    }
    function flush(cb) {
      this._last += this._decoder.end();
      if (this._last) {
        push(this, this.mapper(this._last));
      }
      cb();
    }
    function push(self2, val) {
      if (val !== void 0) {
        self2.push(val);
      }
    }
    function noop(incoming) {
      return incoming;
    }
    function split(matcher, mapper, options) {
      matcher = matcher || /\r?\n/;
      mapper = mapper || noop;
      options = options || {};
      switch (arguments.length) {
        case 1:
          if (typeof matcher === "function") {
            mapper = matcher;
            matcher = /\r?\n/;
          } else if (typeof matcher === "object" && !(matcher instanceof RegExp)) {
            options = matcher;
            matcher = /\r?\n/;
          }
          break;
        case 2:
          if (typeof matcher === "function") {
            options = mapper;
            mapper = matcher;
            matcher = /\r?\n/;
          } else if (typeof mapper === "object") {
            options = mapper;
            mapper = noop;
          }
      }
      var stream = through(options, transform, flush);
      stream._readableState.objectMode = true;
      if (stream._readableState.highWaterMark && !options.highWaterMark) {
        stream._readableState.highWaterMark = 16;
      }
      stream._last = "";
      stream._decoder = new StringDecoder("utf8");
      stream.matcher = matcher;
      stream.mapper = mapper;
      stream.maxLength = options.maxLength;
      return stream;
    }
    module2.exports = split;
  }
});

// node_modules/json-stringify-safe/stringify.js
var require_stringify = __commonJS({
  "node_modules/json-stringify-safe/stringify.js"(exports2, module2) {
    init_define_process_env();
    exports2 = module2.exports = stringify2;
    exports2.getSerialize = serializer;
    function stringify2(obj, replacer, spaces, cycleReplacer) {
      return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
    }
    function serializer(replacer, cycleReplacer) {
      var stack = [], keys = [];
      if (cycleReplacer == null)
        cycleReplacer = function(key, value) {
          if (stack[0] === value)
            return "[Circular ~]";
          return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
        };
      return function(key, value) {
        if (stack.length > 0) {
          var thisPos = stack.indexOf(this);
          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
          if (~stack.indexOf(value))
            value = cycleReplacer.call(this, key, value);
        } else
          stack.push(value);
        return replacer == null ? value : replacer.call(this, key, value);
      };
    }
  }
});

// node_modules/ndjson/index.js
var require_ndjson = __commonJS({
  "node_modules/ndjson/index.js"(exports2, module2) {
    init_define_process_env();
    var through = require_through2();
    var split = require_split2();
    var EOL = (init_os(), __toCommonJS(os_exports)).EOL;
    var stringify2 = require_stringify();
    module2.exports = parse2;
    module2.exports.serialize = module2.exports.stringify = serialize;
    module2.exports.parse = parse2;
    function parse2(opts) {
      opts = opts || {};
      opts.strict = opts.strict !== false;
      function parseRow(row) {
        try {
          if (row)
            return JSON.parse(row);
        } catch (e2) {
          if (opts.strict) {
            this.emit("error", new Error("Could not parse row " + row.slice(0, 50) + "..."));
          }
        }
      }
      return split(parseRow, opts);
    }
    function serialize(opts) {
      return through.obj(opts, function(obj, enc, cb) {
        cb(null, stringify2(obj) + EOL);
      });
    }
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = require_events().EventEmitter;
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c2 = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c2;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c2 = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c2;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/pumpify/node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/errors-browser.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser2()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/pumpify/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder2 = __commonJS({
  "node_modules/pumpify/node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    init_define_process_env();
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c2 = r.charCodeAt(r.length - 1);
          if (c2 >= 55296 && c2 <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream2 = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream2();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder2().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder2().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream2();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/pumpify/node_modules/readable-stream/readable-browser.js
var require_readable_browser2 = __commonJS({
  "node_modules/pumpify/node_modules/readable-stream/readable-browser.js"(exports2, module2) {
    init_define_process_env();
    exports2 = module2.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
    exports2.finished = require_end_of_stream2();
    exports2.pipeline = require_pipeline();
  }
});

// node_modules/stream-shift/index.js
var require_stream_shift = __commonJS({
  "node_modules/stream-shift/index.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = shift;
    function shift(stream) {
      var rs = stream._readableState;
      if (!rs)
        return null;
      return rs.objectMode || typeof stream._duplexState === "number" ? stream.read() : stream.read(getStateLength(rs));
    }
    function getStateLength(state) {
      if (state.buffer.length) {
        if (state.buffer.head) {
          return state.buffer.head.data.length;
        }
        return state.buffer[0].length;
      }
      return state.length;
    }
  }
});

// node_modules/pumpify/node_modules/duplexify/index.js
var require_duplexify = __commonJS({
  "node_modules/pumpify/node_modules/duplexify/index.js"(exports2, module2) {
    init_define_process_env();
    var stream = require_readable_browser2();
    var eos = require_end_of_stream();
    var inherits = require_inherits_browser();
    var shift = require_stream_shift();
    var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);
    var onuncork = function(self2, fn) {
      if (self2._corked)
        self2.once("uncork", fn);
      else
        fn();
    };
    var autoDestroy = function(self2, err) {
      if (self2._autoDestroy)
        self2.destroy(err);
    };
    var destroyer = function(self2, end2) {
      return function(err) {
        if (err)
          autoDestroy(self2, err.message === "premature close" ? null : err);
        else if (end2 && !self2._ended)
          self2.end();
      };
    };
    var end = function(ws, fn) {
      if (!ws)
        return fn();
      if (ws._writableState && ws._writableState.finished)
        return fn();
      if (ws._writableState)
        return ws.end(fn);
      ws.end();
      fn();
    };
    var noop = function() {
    };
    var toStreams2 = function(rs) {
      return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);
    };
    var Duplexify = function(writable, readable, opts) {
      if (!(this instanceof Duplexify))
        return new Duplexify(writable, readable, opts);
      stream.Duplex.call(this, opts);
      this._writable = null;
      this._readable = null;
      this._readable2 = null;
      this._autoDestroy = !opts || opts.autoDestroy !== false;
      this._forwardDestroy = !opts || opts.destroy !== false;
      this._forwardEnd = !opts || opts.end !== false;
      this._corked = 1;
      this._ondrain = null;
      this._drained = false;
      this._forwarding = false;
      this._unwrite = null;
      this._unread = null;
      this._ended = false;
      this.destroyed = false;
      if (writable)
        this.setWritable(writable);
      if (readable)
        this.setReadable(readable);
    };
    inherits(Duplexify, stream.Duplex);
    Duplexify.obj = function(writable, readable, opts) {
      if (!opts)
        opts = {};
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return new Duplexify(writable, readable, opts);
    };
    Duplexify.prototype.cork = function() {
      if (++this._corked === 1)
        this.emit("cork");
    };
    Duplexify.prototype.uncork = function() {
      if (this._corked && --this._corked === 0)
        this.emit("uncork");
    };
    Duplexify.prototype.setWritable = function(writable) {
      if (this._unwrite)
        this._unwrite();
      if (this.destroyed) {
        if (writable && writable.destroy)
          writable.destroy();
        return;
      }
      if (writable === null || writable === false) {
        this.end();
        return;
      }
      var self2 = this;
      var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));
      var ondrain = function() {
        var ondrain2 = self2._ondrain;
        self2._ondrain = null;
        if (ondrain2)
          ondrain2();
      };
      var clear = function() {
        self2._writable.removeListener("drain", ondrain);
        unend();
      };
      if (this._unwrite)
        process.nextTick(ondrain);
      this._writable = writable;
      this._writable.on("drain", ondrain);
      this._unwrite = clear;
      this.uncork();
    };
    Duplexify.prototype.setReadable = function(readable) {
      if (this._unread)
        this._unread();
      if (this.destroyed) {
        if (readable && readable.destroy)
          readable.destroy();
        return;
      }
      if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
      }
      var self2 = this;
      var unend = eos(readable, { writable: false, readable: true }, destroyer(this));
      var onreadable = function() {
        self2._forward();
      };
      var onend = function() {
        self2.push(null);
      };
      var clear = function() {
        self2._readable2.removeListener("readable", onreadable);
        self2._readable2.removeListener("end", onend);
        unend();
      };
      this._drained = true;
      this._readable = readable;
      this._readable2 = readable._readableState ? readable : toStreams2(readable);
      this._readable2.on("readable", onreadable);
      this._readable2.on("end", onend);
      this._unread = clear;
      this._forward();
    };
    Duplexify.prototype._read = function() {
      this._drained = true;
      this._forward();
    };
    Duplexify.prototype._forward = function() {
      if (this._forwarding || !this._readable2 || !this._drained)
        return;
      this._forwarding = true;
      var data;
      while (this._drained && (data = shift(this._readable2)) !== null) {
        if (this.destroyed)
          continue;
        this._drained = this.push(data);
      }
      this._forwarding = false;
    };
    Duplexify.prototype.destroy = function(err, cb) {
      if (!cb)
        cb = noop;
      if (this.destroyed)
        return cb(null);
      this.destroyed = true;
      var self2 = this;
      process.nextTick(function() {
        self2._destroy(err);
        cb(null);
      });
    };
    Duplexify.prototype._destroy = function(err) {
      if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain)
          ondrain(err);
        else
          this.emit("error", err);
      }
      if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy)
          this._readable.destroy();
        if (this._writable && this._writable.destroy)
          this._writable.destroy();
      }
      this.emit("close");
    };
    Duplexify.prototype._write = function(data, enc, cb) {
      if (this.destroyed)
        return;
      if (this._corked)
        return onuncork(this, this._write.bind(this, data, enc, cb));
      if (data === SIGNAL_FLUSH)
        return this._finish(cb);
      if (!this._writable)
        return cb();
      if (this._writable.write(data) === false)
        this._ondrain = cb;
      else if (!this.destroyed)
        cb();
    };
    Duplexify.prototype._finish = function(cb) {
      var self2 = this;
      this.emit("preend");
      onuncork(this, function() {
        end(self2._forwardEnd && self2._writable, function() {
          if (self2._writableState.prefinished === false)
            self2._writableState.prefinished = true;
          self2.emit("prefinish");
          onuncork(self2, cb);
        });
      });
    };
    Duplexify.prototype.end = function(data, enc, cb) {
      if (typeof data === "function")
        return this.end(null, null, data);
      if (typeof enc === "function")
        return this.end(data, null, enc);
      this._ended = true;
      if (data)
        this.write(data);
      if (!this._writableState.ending && !this._writableState.destroyed)
        this.write(SIGNAL_FLUSH);
      return stream.Writable.prototype.end.call(this, cb);
    };
    module2.exports = Duplexify;
  }
});

// node_modules/pumpify/index.js
var require_pumpify = __commonJS({
  "node_modules/pumpify/index.js"(exports2, module2) {
    init_define_process_env();
    var pump = require_pump();
    var inherits = require_inherits_browser();
    var Duplexify = require_duplexify();
    var toArray = function(args) {
      if (!args.length)
        return [];
      return Array.isArray(args[0]) ? args[0] : Array.prototype.slice.call(args);
    };
    var define2 = function(opts) {
      var Pumpify = function() {
        var streams = toArray(arguments);
        if (!(this instanceof Pumpify))
          return new Pumpify(streams);
        Duplexify.call(this, null, null, opts);
        if (streams.length)
          this.setPipeline(streams);
      };
      inherits(Pumpify, Duplexify);
      Pumpify.prototype.setPipeline = function() {
        var streams = toArray(arguments);
        var self2 = this;
        var ended = false;
        var w = streams[0];
        var r = streams[streams.length - 1];
        r = r.readable ? r : null;
        w = w.writable ? w : null;
        var onclose = function() {
          streams[0].emit("error", new Error("stream was destroyed"));
        };
        this.on("close", onclose);
        this.on("prefinish", function() {
          if (!ended)
            self2.cork();
        });
        pump(streams, function(err) {
          self2.removeListener("close", onclose);
          if (err)
            return self2.destroy(err.message === "premature close" ? null : err);
          ended = true;
          if (self2._autoDestroy === false)
            self2._autoDestroy = true;
          self2.uncork();
        });
        if (this.destroyed)
          return onclose();
        this.setWritable(w);
        this.setReadable(r);
      };
      return Pumpify;
    };
    module2.exports = define2({ autoDestroy: false, destroy: false });
    module2.exports.obj = define2({ autoDestroy: false, destroy: false, objectMode: true, highWaterMark: 16 });
    module2.exports.ctor = define2;
  }
});

// node_modules/duplexify/index.js
var require_duplexify2 = __commonJS({
  "node_modules/duplexify/index.js"(exports2, module2) {
    init_define_process_env();
    var stream = require_readable_browser();
    var eos = require_end_of_stream();
    var inherits = require_inherits_browser();
    var shift = require_stream_shift();
    var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);
    var onuncork = function(self2, fn) {
      if (self2._corked)
        self2.once("uncork", fn);
      else
        fn();
    };
    var autoDestroy = function(self2, err) {
      if (self2._autoDestroy)
        self2.destroy(err);
    };
    var destroyer = function(self2, end2) {
      return function(err) {
        if (err)
          autoDestroy(self2, err.message === "premature close" ? null : err);
        else if (end2 && !self2._ended)
          self2.end();
      };
    };
    var end = function(ws, fn) {
      if (!ws)
        return fn();
      if (ws._writableState && ws._writableState.finished)
        return fn();
      if (ws._writableState)
        return ws.end(fn);
      ws.end();
      fn();
    };
    var toStreams2 = function(rs) {
      return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);
    };
    var Duplexify = function(writable, readable, opts) {
      if (!(this instanceof Duplexify))
        return new Duplexify(writable, readable, opts);
      stream.Duplex.call(this, opts);
      this._writable = null;
      this._readable = null;
      this._readable2 = null;
      this._autoDestroy = !opts || opts.autoDestroy !== false;
      this._forwardDestroy = !opts || opts.destroy !== false;
      this._forwardEnd = !opts || opts.end !== false;
      this._corked = 1;
      this._ondrain = null;
      this._drained = false;
      this._forwarding = false;
      this._unwrite = null;
      this._unread = null;
      this._ended = false;
      this.destroyed = false;
      if (writable)
        this.setWritable(writable);
      if (readable)
        this.setReadable(readable);
    };
    inherits(Duplexify, stream.Duplex);
    Duplexify.obj = function(writable, readable, opts) {
      if (!opts)
        opts = {};
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return new Duplexify(writable, readable, opts);
    };
    Duplexify.prototype.cork = function() {
      if (++this._corked === 1)
        this.emit("cork");
    };
    Duplexify.prototype.uncork = function() {
      if (this._corked && --this._corked === 0)
        this.emit("uncork");
    };
    Duplexify.prototype.setWritable = function(writable) {
      if (this._unwrite)
        this._unwrite();
      if (this.destroyed) {
        if (writable && writable.destroy)
          writable.destroy();
        return;
      }
      if (writable === null || writable === false) {
        this.end();
        return;
      }
      var self2 = this;
      var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));
      var ondrain = function() {
        var ondrain2 = self2._ondrain;
        self2._ondrain = null;
        if (ondrain2)
          ondrain2();
      };
      var clear = function() {
        self2._writable.removeListener("drain", ondrain);
        unend();
      };
      if (this._unwrite)
        process.nextTick(ondrain);
      this._writable = writable;
      this._writable.on("drain", ondrain);
      this._unwrite = clear;
      this.uncork();
    };
    Duplexify.prototype.setReadable = function(readable) {
      if (this._unread)
        this._unread();
      if (this.destroyed) {
        if (readable && readable.destroy)
          readable.destroy();
        return;
      }
      if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
      }
      var self2 = this;
      var unend = eos(readable, { writable: false, readable: true }, destroyer(this));
      var onreadable = function() {
        self2._forward();
      };
      var onend = function() {
        self2.push(null);
      };
      var clear = function() {
        self2._readable2.removeListener("readable", onreadable);
        self2._readable2.removeListener("end", onend);
        unend();
      };
      this._drained = true;
      this._readable = readable;
      this._readable2 = readable._readableState ? readable : toStreams2(readable);
      this._readable2.on("readable", onreadable);
      this._readable2.on("end", onend);
      this._unread = clear;
      this._forward();
    };
    Duplexify.prototype._read = function() {
      this._drained = true;
      this._forward();
    };
    Duplexify.prototype._forward = function() {
      if (this._forwarding || !this._readable2 || !this._drained)
        return;
      this._forwarding = true;
      var data;
      while (this._drained && (data = shift(this._readable2)) !== null) {
        if (this.destroyed)
          continue;
        this._drained = this.push(data);
      }
      this._forwarding = false;
    };
    Duplexify.prototype.destroy = function(err) {
      if (this.destroyed)
        return;
      this.destroyed = true;
      var self2 = this;
      process.nextTick(function() {
        self2._destroy(err);
      });
    };
    Duplexify.prototype._destroy = function(err) {
      if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain)
          ondrain(err);
        else
          this.emit("error", err);
      }
      if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy)
          this._readable.destroy();
        if (this._writable && this._writable.destroy)
          this._writable.destroy();
      }
      this.emit("close");
    };
    Duplexify.prototype._write = function(data, enc, cb) {
      if (this.destroyed)
        return cb();
      if (this._corked)
        return onuncork(this, this._write.bind(this, data, enc, cb));
      if (data === SIGNAL_FLUSH)
        return this._finish(cb);
      if (!this._writable)
        return cb();
      if (this._writable.write(data) === false)
        this._ondrain = cb;
      else
        cb();
    };
    Duplexify.prototype._finish = function(cb) {
      var self2 = this;
      this.emit("preend");
      onuncork(this, function() {
        end(self2._forwardEnd && self2._writable, function() {
          if (self2._writableState.prefinished === false)
            self2._writableState.prefinished = true;
          self2.emit("prefinish");
          onuncork(self2, cb);
        });
      });
    };
    Duplexify.prototype.end = function(data, enc, cb) {
      if (typeof data === "function")
        return this.end(null, null, data);
      if (typeof enc === "function")
        return this.end(data, null, enc);
      this._ended = true;
      if (data)
        this.write(data);
      if (!this._writableState.ending)
        this.write(SIGNAL_FLUSH);
      return stream.Writable.prototype.end.call(this, cb);
    };
    module2.exports = Duplexify;
  }
});

// node_modules/websocket-stream/ws-fallback.js
var require_ws_fallback = __commonJS({
  "node_modules/websocket-stream/ws-fallback.js"(exports2, module2) {
    init_define_process_env();
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    }
    module2.exports = ws;
  }
});

// node_modules/websocket-stream/stream.js
var require_stream = __commonJS({
  "node_modules/websocket-stream/stream.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Transform = require_readable_browser().Transform;
    var duplexify = require_duplexify2();
    var WS = require_ws_fallback();
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = WebSocketStream;
    function buildProxy(options, socketWrite, socketEnd) {
      var proxy = new Transform({
        objectMode: options.objectMode
      });
      proxy._write = socketWrite;
      proxy._flush = socketEnd;
      return proxy;
    }
    function WebSocketStream(target, protocols, options) {
      var stream, socket;
      var isBrowser = process.title === "browser";
      var isNative = !!global.WebSocket;
      var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode;
      if (protocols && !Array.isArray(protocols) && typeof protocols === "object") {
        options = protocols;
        protocols = null;
        if (typeof options.protocol === "string" || Array.isArray(options.protocol)) {
          protocols = options.protocol;
        }
      }
      if (!options)
        options = {};
      if (options.objectMode === void 0) {
        options.objectMode = !(options.binary === true || options.binary === void 0);
      }
      var proxy = buildProxy(options, socketWrite, socketEnd);
      if (!options.objectMode) {
        proxy._writev = writev;
      }
      var bufferSize = options.browserBufferSize || 1024 * 512;
      var bufferTimeout = options.browserBufferTimeout || 1e3;
      if (typeof target === "object") {
        socket = target;
      } else {
        if (isNative && isBrowser) {
          socket = new WS(target, protocols);
        } else {
          socket = new WS(target, protocols, options);
        }
        socket.binaryType = "arraybuffer";
      }
      var eventListenerSupport = typeof socket.addEventListener === "undefined";
      if (socket.readyState === socket.OPEN) {
        stream = proxy;
      } else {
        stream = stream = duplexify(void 0, void 0, options);
        if (!options.objectMode) {
          stream._writev = writev;
        }
        if (eventListenerSupport) {
          socket.addEventListener("open", onopen);
        } else {
          socket.onopen = onopen;
        }
      }
      stream.socket = socket;
      if (eventListenerSupport) {
        socket.addEventListener("close", onclose);
        socket.addEventListener("error", onerror);
        socket.addEventListener("message", onmessage);
      } else {
        socket.onclose = onclose;
        socket.onerror = onerror;
        socket.onmessage = onmessage;
      }
      proxy.on("close", destroy);
      var coerceToBuffer = !options.objectMode;
      function socketWriteNode(chunk, enc, next) {
        if (socket.readyState !== socket.OPEN) {
          next();
          return;
        }
        if (coerceToBuffer && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, "utf8");
        }
        socket.send(chunk, next);
      }
      function socketWriteBrowser(chunk, enc, next) {
        if (socket.bufferedAmount > bufferSize) {
          setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);
          return;
        }
        if (coerceToBuffer && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, "utf8");
        }
        try {
          socket.send(chunk);
        } catch (err) {
          return next(err);
        }
        next();
      }
      function socketEnd(done) {
        socket.close();
        done();
      }
      function onopen() {
        stream.setReadable(proxy);
        stream.setWritable(proxy);
        stream.emit("connect");
      }
      function onclose() {
        stream.end();
        stream.destroy();
      }
      function onerror(err) {
        stream.destroy(err);
      }
      function onmessage(event) {
        var data = event.data;
        if (data instanceof ArrayBuffer)
          data = Buffer2.from(data);
        else
          data = Buffer2.from(data, "utf8");
        proxy.push(data);
      }
      function destroy() {
        socket.close();
      }
      function writev(chunks, cb) {
        var buffers = new Array(chunks.length);
        for (var i = 0; i < chunks.length; i++) {
          if (typeof chunks[i].chunk === "string") {
            buffers[i] = Buffer2.from(chunks[i], "utf8");
          } else {
            buffers[i] = chunks[i].chunk;
          }
        }
        this._write(Buffer2.concat(buffers), "binary", cb);
      }
      return stream;
    }
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/rpc/baseRpc.js
var require_baseRpc = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/rpc/baseRpc.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _axios = _interopRequireDefault(require_axios2());
    var _events = require_events();
    var _is_js = _interopRequireDefault(require_is());
    var _ndjson = _interopRequireDefault(require_ndjson());
    var _pumpify = _interopRequireDefault(require_pumpify());
    var _url = _interopRequireDefault(require_url());
    var _websocketStream = _interopRequireDefault(require_stream());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    function convertHttpArgs(url) {
      var args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var search = [];
      for (var _k in args) {
        if (_is_js["default"].string(args[_k])) {
          search.push("".concat(_k, '="').concat(args[_k], '"'));
        } else if (Buffer.isBuffer(args[_k])) {
          search.push("".concat(_k, "=0x").concat(args[_k].toString("hex")));
        } else {
          search.push("".concat(_k, "=").concat(args[_k]));
        }
      }
      return "".concat(url, "?").concat(search.join("&"));
    }
    function convertWsArgs() {
      var args = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      for (var _k2 in args) {
        var v = args[_k2];
        if (typeof v === "number") {
          args[_k2] = String(v);
        } else if (Buffer.isBuffer(v)) {
          args[_k2] = "0x" + v.toString("hex");
        } else if (v instanceof Uint8Array) {
          args[_k2] = "0x" + Buffer.from(v).toString("hex");
        }
      }
      return args;
    }
    var wsProtocols = ["ws:", "wss:"];
    var httpProtocols = ["http:", "https:"];
    var allProtocols = wsProtocols.concat(httpProtocols);
    var BaseRpc = function(_EventEmitter) {
      (0, _inherits2["default"])(BaseRpc2, _EventEmitter);
      var _super = _createSuper(BaseRpc2);
      function BaseRpc2() {
        var _this;
        var uriString = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "localhost:27146";
        (0, _classCallCheck2["default"])(this, BaseRpc2);
        _this = _super.call(this);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "uri", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "call", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "closed", false);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "ws", void 0);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "createCallBasedMethod", function(name) {
          return function(args, listener) {
            return _this.call(name, args, listener).then(function(res) {
              return res;
            });
          };
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "subscribe", _this.createCallBasedMethod("subscribe"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "unsubscribe", _this.createCallBasedMethod("unsubscribe"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "unsubscribeAll", _this.createCallBasedMethod("unsubscribe_all"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "status", _this.createCallBasedMethod("status"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "netInfo", _this.createCallBasedMethod("net_info"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "blockchain", _this.createCallBasedMethod("blockchain"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "genesis", _this.createCallBasedMethod("genesis"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "health", _this.createCallBasedMethod("health"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "block", _this.createCallBasedMethod("block"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "blockResults", _this.createCallBasedMethod("block_results"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "validators", _this.createCallBasedMethod("validators"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "consensusState", _this.createCallBasedMethod("consensus_state"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dumpConsensusState", _this.createCallBasedMethod("dump_consensus_state"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "broadcastTxCommit", _this.createCallBasedMethod("broadcast_tx_commit"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "broadcastTxSync", _this.createCallBasedMethod("broadcast_tx_sync"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "broadcastTxAsync", _this.createCallBasedMethod("broadcast_tx_async"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "unconfirmedTxs", _this.createCallBasedMethod("unconfirmed_txs"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "numUnconfirmedTxs", _this.createCallBasedMethod("num_unconfirmed_txs"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "commit", _this.createCallBasedMethod("commit"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "tx", _this.createCallBasedMethod("tx"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "txSearch", _this.createCallBasedMethod("tx_search"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "abciQuery", _this.createCallBasedMethod("abci_query"));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "abciInfo", _this.createCallBasedMethod("abci_info"));
        var _url$parse = _url["default"].parse(uriString), protocol = _url$parse.protocol, hostname = _url$parse.hostname, port = _url$parse.port;
        if (!protocol || !allProtocols.includes(protocol)) {
          var uri = _url["default"].parse("http://".concat(uriString));
          protocol = uri.protocol;
          hostname = uri.hostname;
          port = uri.port;
        }
        _this.uri = !port ? "".concat(protocol, "//").concat(hostname, "/") : "".concat(protocol, "//").concat(hostname, ":").concat(port, "/");
        if (protocol && wsProtocols.includes(protocol)) {
          _this.uri = "".concat(_this.uri, "websocket");
          _this.call = _this.callWs;
          _this.connectWs();
        } else if (protocol && httpProtocols.includes(protocol)) {
          _this.call = _this.callHttp;
        }
        return _this;
      }
      (0, _createClass2["default"])(BaseRpc2, [{
        key: "connectWs",
        value: function connectWs() {
          var _this2 = this;
          this.ws = new _pumpify["default"].obj(_ndjson["default"].stringify(), (0, _websocketStream["default"])(this.uri));
          this.ws.on("error", function(err) {
            return _this2.emit("error", err);
          });
          this.ws.on("close", function() {
            if (_this2.closed)
              return;
            _this2.emit("error", Error("websocket disconnected"));
          });
          this.ws.on("data", function(data) {
            data = JSON.parse(data);
            if (!data.id)
              return;
            _this2.emit(data.id, data.error, data.result);
          });
        }
      }, {
        key: "callHttp",
        value: function callHttp(method, args) {
          var url = this.uri + method;
          url = convertHttpArgs(url, args);
          return (0, _axios["default"])({
            url
          }).then(function(_ref) {
            var data = _ref.data;
            if (data.error) {
              var err = Error(data.error.message);
              Object.assign(err, data.error);
              throw err;
            }
            return data.result;
          }, function(err) {
            throw Error(err);
          });
        }
      }, {
        key: "callWs",
        value: function callWs(method, args, listener) {
          var _this3 = this;
          var self2 = this;
          return new Promise(function(resolve, reject) {
            var _this3$ws;
            var id = Math.random().toString(36);
            var params = convertWsArgs(args);
            if (method === "subscribe") {
              if (typeof listener !== "function") {
                throw Error("Must provide listener function");
              }
              _this3.on(id + "#event", function(err, res) {
                if (err)
                  return self2.emit("error", err);
                return listener(res.data.value);
              });
              _this3.on(id, function(err) {
                if (err)
                  return reject(err);
                resolve();
              });
            } else {
              _this3.once(id, function(err, res) {
                if (err)
                  return reject(err);
                resolve(res);
              });
            }
            (_this3$ws = _this3.ws) === null || _this3$ws === void 0 ? void 0 : _this3$ws.write({
              jsonrpc: "2.0",
              id,
              method,
              params
            });
          });
        }
      }, {
        key: "close",
        value: function close() {
          this.closed = true;
          if (!this.ws)
            return;
          this.ws.destroy();
        }
      }]);
      return BaseRpc2;
    }(_events.EventEmitter);
    exports2["default"] = BaseRpc;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/rpc/index.js
var require_rpc2 = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/rpc/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _big = (init_big(), __toCommonJS(big_exports));
    var _amino = require_amino();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    var _types = require_types();
    var _utils = require_utils2();
    var _baseRpc = _interopRequireDefault(require_baseRpc());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2["default"])(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2["default"])(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var RpcClient = function(_BaseRpc) {
      (0, _inherits2["default"])(RpcClient2, _BaseRpc);
      var _super = _createSuper(RpcClient2);
      function RpcClient2() {
        var _this;
        var uriString = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "localhost:27146";
        var netWork = arguments.length > 1 ? arguments[1] : void 0;
        (0, _classCallCheck2["default"])(this, RpcClient2);
        _this = _super.call(this, uriString);
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "netWork", void 0);
        _this.netWork = netWork || "mainnet";
        return _this;
      }
      (0, _createClass2["default"])(RpcClient2, [{
        key: "broadcastDelegate",
        value: function() {
          var _broadcastDelegate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(signedTx) {
            var encoded, res;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    encoded = signedTx.serialize();
                    _context.next = 3;
                    return this.broadcastTxSync({
                      tx: Buffer.from(encoded, "hex")
                    });
                  case 3:
                    res = _context.sent;
                    if (!("".concat(res.code) === "0")) {
                      _context.next = 8;
                      break;
                    }
                    return _context.abrupt("return", res);
                  case 8:
                    throw new Error("broadcastDelegate: non-zero status code ".concat(res.code));
                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function broadcastDelegate(_x) {
            return _broadcastDelegate.apply(this, arguments);
          }
          return broadcastDelegate;
        }()
      }, {
        key: "getBech32Prefix",
        value: function getBech32Prefix() {
          if (this.netWork === "mainnet") {
            return "bnb";
          }
          if (this.netWork === "testnet") {
            return "tbnb";
          }
          return "";
        }
      }, {
        key: "getTokenInfo",
        value: function() {
          var _getTokenInfo = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(symbol) {
            var path, res, bytes, tokenInfo, bech32Prefix, ownerAddress;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    (0, _utils.validateSymbol)(symbol);
                    path = "/tokens/info/" + symbol;
                    _context2.next = 4;
                    return this.abciQuery({
                      path
                    });
                  case 4:
                    res = _context2.sent;
                    bytes = Buffer.from(res.response.value, "base64");
                    tokenInfo = new _types.Token();
                    (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, tokenInfo);
                    bech32Prefix = this.getBech32Prefix();
                    ownerAddress = crypto2.encodeAddress(tokenInfo.owner, bech32Prefix);
                    delete tokenInfo.aminoPrefix;
                    return _context2.abrupt("return", _objectSpread(_objectSpread({}, tokenInfo), {}, {
                      owner: ownerAddress
                    }));
                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function getTokenInfo(_x2) {
            return _getTokenInfo.apply(this, arguments);
          }
          return getTokenInfo;
        }()
      }, {
        key: "listAllTokens",
        value: function() {
          var _listAllTokens = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(offset, limit) {
            var _this2 = this;
            var path, res, bytes, tokenArr, _unMarshalBinaryLengt, tokenList;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    (0, _utils.validateOffsetLimit)(offset, limit);
                    path = "tokens/list/".concat(offset, "/").concat(limit);
                    _context3.next = 4;
                    return this.abciQuery({
                      path
                    });
                  case 4:
                    res = _context3.sent;
                    bytes = Buffer.from(res.response.value, "base64");
                    tokenArr = [new _types.TokenOfList()];
                    _unMarshalBinaryLengt = (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, tokenArr), tokenList = _unMarshalBinaryLengt.val;
                    (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, tokenList);
                    return _context3.abrupt("return", tokenList.map(function(item) {
                      return _objectSpread(_objectSpread({}, item), {}, {
                        owner: crypto2.encodeAddress(item.owner, _this2.getBech32Prefix())
                      });
                    }));
                  case 10:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function listAllTokens(_x3, _x4) {
            return _listAllTokens.apply(this, arguments);
          }
          return listAllTokens;
        }()
      }, {
        key: "getAccount",
        value: function() {
          var _getAccount = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(address) {
            var res, accountInfo, bytes, bech32Prefix;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.abciQuery({
                      path: "/account/".concat(address)
                    });
                  case 2:
                    res = _context4.sent;
                    accountInfo = new _types.AppAccount();
                    bytes = Buffer.from(res.response.value, "base64");
                    (0, _amino.unMarshalBinaryBare)(bytes, accountInfo);
                    bech32Prefix = this.getBech32Prefix();
                    return _context4.abrupt("return", {
                      name: accountInfo.name,
                      locked: accountInfo.locked,
                      frozen: accountInfo.frozen,
                      base: _objectSpread(_objectSpread({}, accountInfo.base), {}, {
                        address: crypto2.encodeAddress(accountInfo.base.address, bech32Prefix)
                      })
                    });
                  case 8:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function getAccount(_x5) {
            return _getAccount.apply(this, arguments);
          }
          return getAccount;
        }()
      }, {
        key: "getBalances",
        value: function() {
          var _getBalances = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(address) {
            var account, coins, balances;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return this.getAccount(address);
                  case 2:
                    account = _context5.sent;
                    coins = [];
                    balances = [];
                    if (account) {
                      coins = account.base && account.base.coins || [];
                      (0, _utils.convertObjectArrayNum)(coins, ["amount"]);
                      (0, _utils.convertObjectArrayNum)(account.locked, ["amount"]);
                      (0, _utils.convertObjectArrayNum)(account.frozen, ["amount"]);
                    }
                    coins.forEach(function(item) {
                      var locked = account.locked.find(function(lockedItem) {
                        return item.denom === lockedItem.denom;
                      }) || {};
                      var frozen = account.frozen.find(function(frozenItem) {
                        return item.denom === frozenItem.denom;
                      }) || {};
                      var bal = new _types.TokenBalance();
                      bal.symbol = item.denom;
                      bal.free = +new _big.Big(item.amount).toString();
                      bal.locked = locked.amount || 0;
                      bal.frozen = frozen.amount || 0;
                      balances.push(bal);
                    });
                    return _context5.abrupt("return", balances);
                  case 8:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function getBalances(_x6) {
            return _getBalances.apply(this, arguments);
          }
          return getBalances;
        }()
      }, {
        key: "getBalance",
        value: function() {
          var _getBalance = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(address, symbol) {
            var balances, bal;
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    (0, _utils.validateSymbol)(symbol);
                    _context6.next = 3;
                    return this.getBalances(address);
                  case 3:
                    balances = _context6.sent;
                    bal = balances.find(function(item) {
                      return item.symbol.toUpperCase() === symbol.toUpperCase();
                    });
                    return _context6.abrupt("return", bal);
                  case 6:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
          function getBalance(_x7, _x8) {
            return _getBalance.apply(this, arguments);
          }
          return getBalance;
        }()
      }, {
        key: "getOpenOrders",
        value: function() {
          var _getOpenOrders = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(address, symbol) {
            var path, res, bytes, result, _unMarshalBinaryLengt2, openOrders;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    path = "/dex/openorders/".concat(symbol, "/").concat(address);
                    _context7.next = 3;
                    return this.abciQuery({
                      path
                    });
                  case 3:
                    res = _context7.sent;
                    bytes = Buffer.from(res.response.value, "base64");
                    result = [new _types.OpenOrder()];
                    _unMarshalBinaryLengt2 = (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, result), openOrders = _unMarshalBinaryLengt2.val;
                    (0, _utils.convertObjectArrayNum)(openOrders, ["price", "quantity", "cumQty"]);
                    return _context7.abrupt("return", openOrders);
                  case 9:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function getOpenOrders(_x9, _x10) {
            return _getOpenOrders.apply(this, arguments);
          }
          return getOpenOrders;
        }()
      }, {
        key: "getTradingPairs",
        value: function() {
          var _getTradingPairs = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(offset, limit) {
            var path, res, bytes, result, _unMarshalBinaryLengt3, tradingPairs;
            return _regenerator["default"].wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    (0, _utils.validateOffsetLimit)(offset, limit);
                    path = "/dex/pairs/".concat(offset, "/").concat(limit);
                    _context8.next = 4;
                    return this.abciQuery({
                      path
                    });
                  case 4:
                    res = _context8.sent;
                    bytes = Buffer.from(res.response.value, "base64");
                    result = [new _types.TradingPair()];
                    _unMarshalBinaryLengt3 = (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, result), tradingPairs = _unMarshalBinaryLengt3.val;
                    (0, _utils.convertObjectArrayNum)(tradingPairs, ["list_price", "tick_size", "lot_size"]);
                    return _context8.abrupt("return", tradingPairs);
                  case 10:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
          function getTradingPairs(_x11, _x12) {
            return _getTradingPairs.apply(this, arguments);
          }
          return getTradingPairs;
        }()
      }, {
        key: "getDepth",
        value: function() {
          var _getDepth = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(tradePair) {
            var path, res, bytes, result, _unMarshalBinaryLengt4, depth;
            return _regenerator["default"].wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    (0, _utils.validateTradingPair)(tradePair);
                    path = "dex/orderbook/".concat(tradePair);
                    _context9.next = 4;
                    return this.abciQuery({
                      path
                    });
                  case 4:
                    res = _context9.sent;
                    bytes = Buffer.from(res.response.value, "base64");
                    result = new _types.OrderBook();
                    _unMarshalBinaryLengt4 = (0, _amino.unMarshalBinaryLengthPrefixed)(bytes, result), depth = _unMarshalBinaryLengt4.val;
                    (0, _utils.convertObjectArrayNum)(depth.levels, ["buyQty", "buyPrice", "sellQty", "sellPrice"]);
                    return _context9.abrupt("return", depth);
                  case 10:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
          function getDepth(_x13) {
            return _getDepth.apply(this, arguments);
          }
          return getDepth;
        }()
      }, {
        key: "getTxByHash",
        value: function() {
          var _getTxByHash = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10(hash) {
            var prove, res, txBytes, msgAminoPrefix, msgType, type, _unMarshalBinaryLengt5, result, txResult, _args10 = arguments;
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    prove = _args10.length > 1 && _args10[1] !== void 0 ? _args10[1] : true;
                    if (!Buffer.isBuffer(hash)) {
                      hash = Buffer.from(hash, "hex");
                    }
                    _context10.next = 4;
                    return this.tx({
                      hash,
                      prove
                    });
                  case 4:
                    res = _context10.sent;
                    txBytes = Buffer.from(res.tx, "base64");
                    msgAminoPrefix = txBytes.slice(8, 12).toString("hex");
                    msgType = (0, _utils.getMsgByAminoPrefix)(msgAminoPrefix);
                    type = {
                      msg: [msgType.defaultMsg()],
                      signatures: [{
                        pub_key: Buffer.from(""),
                        signature: Buffer.from(""),
                        account_number: 0,
                        sequence: 0
                      }],
                      memo: "",
                      source: 0,
                      data: "",
                      aminoPrefix: _types.AminoPrefix.StdTx
                    };
                    _unMarshalBinaryLengt5 = (0, _amino.unMarshalBinaryLengthPrefixed)(txBytes, type), result = _unMarshalBinaryLengt5.val;
                    txResult = this.parseTxResult(res.tx_result);
                    return _context10.abrupt("return", _objectSpread(_objectSpread({}, res), {}, {
                      tx: result,
                      tx_result: txResult
                    }));
                  case 12:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));
          function getTxByHash(_x14) {
            return _getTxByHash.apply(this, arguments);
          }
          return getTxByHash;
        }()
      }, {
        key: "parseTxResult",
        value: function parseTxResult(txResult) {
          if (txResult.data) {
            txResult.data = Buffer.from(txResult.data, "base64").toString();
          }
          if (txResult.events && txResult.events.length > 0) {
            for (var i = 0; i < txResult.events.length; i++) {
              var event = txResult.events[i];
              if (event.attributes && event.attributes.length > 0) {
                event.attributes = event.attributes.map(function(item) {
                  return {
                    key: Buffer.from(item.key, "base64").toString(),
                    value: Buffer.from(item.value, "base64").toString()
                  };
                });
              }
            }
          }
          if (txResult.tags && txResult.tags.length > 0) {
            txResult.tags = txResult.tags.map(function(item) {
              return {
                key: Buffer.from(item.key, "base64").toString(),
                value: Buffer.from(item.value, "base64").toString()
              };
            });
          }
          return _objectSpread({}, txResult);
        }
      }]);
      return RpcClient2;
    }(_baseRpc["default"]);
    var _default = RpcClient;
    exports2["default"] = _default;
  }
});

// node_modules/bnb-javascript-sdk-nobroadcast/lib/index.js
var require_lib = __commonJS({
  "node_modules/bnb-javascript-sdk-nobroadcast/lib/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "BncClient", {
      enumerable: true,
      get: function get() {
        return _client.BncClient;
      }
    });
    Object.defineProperty(exports2, "rpc", {
      enumerable: true,
      get: function get() {
        return _rpc["default"];
      }
    });
    Object.defineProperty(exports2, "Transaction", {
      enumerable: true,
      get: function get() {
        return _tx["default"];
      }
    });
    exports2.utils = exports2.types = exports2.crypto = exports2.amino = void 0;
    require_declarations();
    var amino = _interopRequireWildcard(require_amino());
    exports2.amino = amino;
    var _client = require_client();
    var crypto2 = _interopRequireWildcard(require_crypto2());
    exports2.crypto = crypto2;
    var types = _interopRequireWildcard(require_types());
    exports2.types = types;
    var utils = _interopRequireWildcard(require_utils2());
    exports2.utils = utils;
    var _rpc = _interopRequireDefault(require_rpc2());
    var _tx = _interopRequireDefault(require_tx2());
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/bnbencoding.js
var require_bnbencoding = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/bnbencoding.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateBnbTx = exports2.decodeBnbTx = exports2.encodeBnbTx = void 0;
    var bnbSdk = __importStar(require_lib());
    var crypto_js_1 = __importDefault(require_crypto_js());
    var tiny_secp256k1_1 = __importDefault(require_js());
    function encodeBnbTx(unsignedTx, publicKey, signature) {
      const { account_number, chain_id, sequence, source } = unsignedTx;
      const msg = unsignedTx.msgs[0];
      const amountToInt = (x) => Number(x);
      const msgNormalizer = (x) => ({
        address: bnbSdk.crypto.decodeAddress(x.address),
        coins: x.coins.map((y) => ({
          denom: y.denom,
          amount: amountToInt(y.amount)
        }))
      });
      const baseMsg = {
        inputs: msg.inputs.map(msgNormalizer),
        outputs: msg.outputs.map(msgNormalizer),
        aminoPrefix: "2A2C87FA"
      };
      const tx = new bnbSdk.Transaction(Object.assign({}, unsignedTx, {
        chainId: chain_id,
        accountNumber: Number(account_number),
        source: Number(source !== null && source !== void 0 ? source : 0),
        sequence: Number(sequence),
        baseMsg: { getMsg: () => baseMsg, getBaseMsg: () => baseMsg, getSignMsg: () => baseMsg }
      }));
      const ecPubKey = bnbSdk.crypto.getPublicKey(Buffer.from(publicKey).toString("hex"));
      tx.addSignature(ecPubKey, signature);
      const serializedTx = Buffer.from(tx.serialize(), "hex");
      if (!validateBnbTx(serializedTx, chain_id))
        throw new Error("serialized tx did not validate");
      return serializedTx;
    }
    exports2.encodeBnbTx = encodeBnbTx;
    function decodeBnbTx(txBytes, chainId) {
      const txDecoded = bnbSdk.amino.decoder.unMarshalBinaryLengthPrefixed(txBytes, {
        aminoPrefix: "f0625dee",
        msgs: [
          {
            aminoPrefix: "2a2c87fa",
            inputs: [{ address: Buffer.alloc(0), coins: [{ denom: "", amount: 0 }] }],
            outputs: [{ address: Buffer.alloc(0), coins: [{ denom: "", amount: 0 }] }]
          }
        ],
        signatures: [
          {
            pubKey: Buffer.alloc(0),
            signature: Buffer.alloc(0),
            accountNumber: 0,
            sequence: 0
          }
        ],
        memo: "",
        source: 0,
        data: Buffer.alloc(0)
      }).val;
      if (txDecoded.data !== null)
        throw new Error("bad data length");
      if (txDecoded.msgs.length !== 1)
        throw new Error("bad msgs length");
      if (txDecoded.signatures.length !== 1)
        throw new Error("bad signatures length");
      const signBytes = JSON.stringify({
        account_number: String(txDecoded.signatures[0].accountNumber),
        chain_id: chainId,
        data: null,
        memo: txDecoded.memo,
        msgs: [
          {
            inputs: txDecoded.msgs[0].inputs.map((x) => ({
              address: bnbSdk.crypto.encodeAddress(x.address, "bnb"),
              coins: x.coins.map((y) => ({
                amount: Number(y.amount),
                denom: y.denom
              }))
            })),
            outputs: txDecoded.msgs[0].outputs.map((x) => ({
              address: bnbSdk.crypto.encodeAddress(x.address, "bnb"),
              coins: x.coins.map((y) => ({
                amount: Number(y.amount),
                denom: y.denom
              }))
            }))
          }
        ],
        sequence: String(txDecoded.signatures[0].sequence),
        source: String(txDecoded.source)
      });
      const signBytesHash = crypto_js_1.default.SHA256(crypto_js_1.default.enc.Utf8.parse(signBytes)).toString();
      const pubKeyAmino = Buffer.from(txDecoded.signatures[0].pubKey);
      if (pubKeyAmino.readUInt32BE(0) !== 3948603783)
        throw new Error("bad pubkey aminoPrefix");
      if (pubKeyAmino.readUInt8(4) !== 33)
        throw new Error("bad pubKey length");
      const pubKey = pubKeyAmino.slice(5);
      const signature = txDecoded.signatures[0].signature;
      return { signBytes, signBytesHash, pubKey, signature };
    }
    exports2.decodeBnbTx = decodeBnbTx;
    function validateBnbTx(txBytes, chainId) {
      const { signBytesHash, pubKey, signature } = decodeBnbTx(txBytes, chainId);
      return tiny_secp256k1_1.default.verify(Buffer.from(signBytesHash, "hex"), pubKey, signature);
    }
    exports2.validateBnbTx = validateBnbTx;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/binance.js
var require_binance = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/binance.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.binanceGetAddress = exports2.binanceSignTx = exports2.binanceGetAccountPaths = void 0;
    var BinanceMessages = __importStar(require_messages_binance_pb());
    var Messages = __importStar(require_messages_pb());
    var core = __importStar(require_dist3());
    var bignumber_js_1 = __importDefault((init_bignumber(), __toCommonJS(bignumber_exports)));
    var crypto_js_1 = __importDefault(require_crypto_js());
    var bnbencoding_1 = require_bnbencoding();
    function binanceGetAccountPaths(msg) {
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + core.slip44ByCoin("Binance"), 2147483648 + msg.accountIdx, 0, 0]
        }
      ];
    }
    exports2.binanceGetAccountPaths = binanceGetAccountPaths;
    function binanceSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          if (msg.testnet)
            throw new Error("testnet not supported");
          const partialTx = Object.assign({}, msg.tx);
          if (!partialTx.data)
            partialTx.data = null;
          if (!partialTx.memo)
            partialTx.memo = "";
          if (!partialTx.sequence)
            partialTx.sequence = "0";
          if (!partialTx.source)
            partialTx.source = "0";
          if (!partialTx.account_number)
            throw new Error("account_number is required");
          if (!partialTx.chain_id)
            throw new Error("chain_id is required");
          const tx = partialTx;
          if (tx.data)
            throw new Error("tx data field not supported");
          const signTx = new BinanceMessages.BinanceSignTx();
          signTx.setAddressNList(msg.addressNList);
          signTx.setAccountNumber(tx.account_number);
          signTx.setChainId(tx.chain_id);
          signTx.setSequence(tx.sequence);
          if (tx.memo)
            signTx.setMemo(tx.memo);
          if (msg.tx.msgs.length > 1)
            throw new Error("Binance batch sending not supported!");
          let message = msg.tx.msgs[0];
          signTx.setMsgCount(1);
          let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCESIGNTX, signTx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          const outputAmount = new bignumber_js_1.default(message.outputs[0].coins[0].amount);
          const inputAmount = new bignumber_js_1.default(message.inputs[0].coins[0].amount);
          if (!outputAmount.isInteger())
            throw new Error("Output amount must be an integer");
          if (!inputAmount.isInteger())
            throw new Error("Input amount must be an integer");
          let coinOut = new BinanceMessages.BinanceTransferMsg.BinanceCoin();
          coinOut.setAmount(outputAmount.toString());
          coinOut.setDenom(message.outputs[0].coins[0].denom);
          let outputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();
          outputs.setAddress(message.outputs[0].address);
          outputs.setCoinsList([coinOut]);
          let coinIn = new BinanceMessages.BinanceTransferMsg.BinanceCoin();
          coinIn.setAmount(inputAmount.toString());
          coinIn.setDenom(message.inputs[0].coins[0].denom);
          let inputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();
          inputs.setAddress(message.inputs[0].address);
          inputs.setCoinsList([coinIn]);
          const send = new BinanceMessages.BinanceTransferMsg();
          send.addInputs(inputs);
          send.addOutputs(outputs);
          resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCETRANSFERMSG, send, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_BINANCESIGNEDTX) {
            throw new Error(`binance: unexpected response ${resp.message_type}`);
          }
          let signedTx = new BinanceMessages.BinanceSignedTx();
          signedTx.setSignature(resp.message.signature);
          signedTx.setPublicKey(resp.message.publicKey);
          const serialized = bnbencoding_1.encodeBnbTx(tx, Buffer.from(signedTx.getPublicKey_asU8()), Buffer.from(signedTx.getSignature_asU8())).toString("hex");
          const out = Object.assign(Object.assign({}, tx), { signatures: {
            pub_key: signedTx.getPublicKey_asB64(),
            signature: signedTx.getSignature_asB64()
          }, serialized, txid: crypto_js_1.default.SHA256(crypto_js_1.default.enc.Hex.parse(serialized)).toString() });
          return out;
        }));
      });
    }
    exports2.binanceSignTx = binanceSignTx;
    function binanceGetAddress(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new BinanceMessages.BinanceGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCEGETADDRESS, getAddr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const binanceAddress = response.proto;
        return core.mustBeDefined(binanceAddress.getAddress());
      });
    }
    exports2.binanceGetAddress = binanceGetAddress;
  }
});

// node_modules/big-integer/BigInteger.js
var require_BigInteger = __commonJS({
  "node_modules/big-integer/BigInteger.js"(exports2, module2) {
    init_define_process_env();
    var bigInt = function(undefined2) {
      "use strict";
      var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
      var supportsNativeBigInt = typeof BigInt === "function";
      function Integer(v, radix, alphabet, caseSensitive) {
        if (typeof v === "undefined")
          return Integer[0];
        if (typeof radix !== "undefined")
          return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
        return parseValue(v);
      }
      function BigInteger(value, sign) {
        this.value = value;
        this.sign = sign;
        this.isSmall = false;
      }
      BigInteger.prototype = Object.create(Integer.prototype);
      function SmallInteger(value) {
        this.value = value;
        this.sign = value < 0;
        this.isSmall = true;
      }
      SmallInteger.prototype = Object.create(Integer.prototype);
      function NativeBigInt(value) {
        this.value = value;
      }
      NativeBigInt.prototype = Object.create(Integer.prototype);
      function isPrecise(n) {
        return -MAX_INT < n && n < MAX_INT;
      }
      function smallToArray(n) {
        if (n < 1e7)
          return [n];
        if (n < 1e14)
          return [n % 1e7, Math.floor(n / 1e7)];
        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
      }
      function arrayToSmall(arr) {
        trim(arr);
        var length = arr.length;
        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
          switch (length) {
            case 0:
              return 0;
            case 1:
              return arr[0];
            case 2:
              return arr[0] + arr[1] * BASE;
            default:
              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
          }
        }
        return arr;
      }
      function trim(v) {
        var i2 = v.length;
        while (v[--i2] === 0)
          ;
        v.length = i2 + 1;
      }
      function createArray(length) {
        var x = new Array(length);
        var i2 = -1;
        while (++i2 < length) {
          x[i2] = 0;
        }
        return x;
      }
      function truncate(n) {
        if (n > 0)
          return Math.floor(n);
        return Math.ceil(n);
      }
      function add(a2, b2) {
        var l_a = a2.length, l_b = b2.length, r = new Array(l_a), carry = 0, base = BASE, sum, i2;
        for (i2 = 0; i2 < l_b; i2++) {
          sum = a2[i2] + b2[i2] + carry;
          carry = sum >= base ? 1 : 0;
          r[i2] = sum - carry * base;
        }
        while (i2 < l_a) {
          sum = a2[i2] + carry;
          carry = sum === base ? 1 : 0;
          r[i2++] = sum - carry * base;
        }
        if (carry > 0)
          r.push(carry);
        return r;
      }
      function addAny(a2, b2) {
        if (a2.length >= b2.length)
          return add(a2, b2);
        return add(b2, a2);
      }
      function addSmall(a2, carry) {
        var l = a2.length, r = new Array(l), base = BASE, sum, i2;
        for (i2 = 0; i2 < l; i2++) {
          sum = a2[i2] - base + carry;
          carry = Math.floor(sum / base);
          r[i2] = sum - carry * base;
          carry += 1;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      BigInteger.prototype.add = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.subtract(n.negate());
        }
        var a2 = this.value, b2 = n.value;
        if (n.isSmall) {
          return new BigInteger(addSmall(a2, Math.abs(b2)), this.sign);
        }
        return new BigInteger(addAny(a2, b2), this.sign);
      };
      BigInteger.prototype.plus = BigInteger.prototype.add;
      SmallInteger.prototype.add = function(v) {
        var n = parseValue(v);
        var a2 = this.value;
        if (a2 < 0 !== n.sign) {
          return this.subtract(n.negate());
        }
        var b2 = n.value;
        if (n.isSmall) {
          if (isPrecise(a2 + b2))
            return new SmallInteger(a2 + b2);
          b2 = smallToArray(Math.abs(b2));
        }
        return new BigInteger(addSmall(b2, Math.abs(a2)), a2 < 0);
      };
      SmallInteger.prototype.plus = SmallInteger.prototype.add;
      NativeBigInt.prototype.add = function(v) {
        return new NativeBigInt(this.value + parseValue(v).value);
      };
      NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
      function subtract(a2, b2) {
        var a_l = a2.length, b_l = b2.length, r = new Array(a_l), borrow = 0, base = BASE, i2, difference;
        for (i2 = 0; i2 < b_l; i2++) {
          difference = a2[i2] - borrow - b2[i2];
          if (difference < 0) {
            difference += base;
            borrow = 1;
          } else
            borrow = 0;
          r[i2] = difference;
        }
        for (i2 = b_l; i2 < a_l; i2++) {
          difference = a2[i2] - borrow;
          if (difference < 0)
            difference += base;
          else {
            r[i2++] = difference;
            break;
          }
          r[i2] = difference;
        }
        for (; i2 < a_l; i2++) {
          r[i2] = a2[i2];
        }
        trim(r);
        return r;
      }
      function subtractAny(a2, b2, sign) {
        var value;
        if (compareAbs(a2, b2) >= 0) {
          value = subtract(a2, b2);
        } else {
          value = subtract(b2, a2);
          sign = !sign;
        }
        value = arrayToSmall(value);
        if (typeof value === "number") {
          if (sign)
            value = -value;
          return new SmallInteger(value);
        }
        return new BigInteger(value, sign);
      }
      function subtractSmall(a2, b2, sign) {
        var l = a2.length, r = new Array(l), carry = -b2, base = BASE, i2, difference;
        for (i2 = 0; i2 < l; i2++) {
          difference = a2[i2] + carry;
          carry = Math.floor(difference / base);
          difference %= base;
          r[i2] = difference < 0 ? difference + base : difference;
        }
        r = arrayToSmall(r);
        if (typeof r === "number") {
          if (sign)
            r = -r;
          return new SmallInteger(r);
        }
        return new BigInteger(r, sign);
      }
      BigInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.add(n.negate());
        }
        var a2 = this.value, b2 = n.value;
        if (n.isSmall)
          return subtractSmall(a2, Math.abs(b2), this.sign);
        return subtractAny(a2, b2, this.sign);
      };
      BigInteger.prototype.minus = BigInteger.prototype.subtract;
      SmallInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        var a2 = this.value;
        if (a2 < 0 !== n.sign) {
          return this.add(n.negate());
        }
        var b2 = n.value;
        if (n.isSmall) {
          return new SmallInteger(a2 - b2);
        }
        return subtractSmall(b2, Math.abs(a2), a2 >= 0);
      };
      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
      NativeBigInt.prototype.subtract = function(v) {
        return new NativeBigInt(this.value - parseValue(v).value);
      };
      NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
      BigInteger.prototype.negate = function() {
        return new BigInteger(this.value, !this.sign);
      };
      SmallInteger.prototype.negate = function() {
        var sign = this.sign;
        var small = new SmallInteger(-this.value);
        small.sign = !sign;
        return small;
      };
      NativeBigInt.prototype.negate = function() {
        return new NativeBigInt(-this.value);
      };
      BigInteger.prototype.abs = function() {
        return new BigInteger(this.value, false);
      };
      SmallInteger.prototype.abs = function() {
        return new SmallInteger(Math.abs(this.value));
      };
      NativeBigInt.prototype.abs = function() {
        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
      };
      function multiplyLong(a2, b2) {
        var a_l = a2.length, b_l = b2.length, l = a_l + b_l, r = createArray(l), base = BASE, product, carry, i2, a_i, b_j;
        for (i2 = 0; i2 < a_l; ++i2) {
          a_i = a2[i2];
          for (var j = 0; j < b_l; ++j) {
            b_j = b2[j];
            product = a_i * b_j + r[i2 + j];
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
            r[i2 + j + 1] += carry;
          }
        }
        trim(r);
        return r;
      }
      function multiplySmall(a2, b2) {
        var l = a2.length, r = new Array(l), base = BASE, carry = 0, product, i2;
        for (i2 = 0; i2 < l; i2++) {
          product = a2[i2] * b2 + carry;
          carry = Math.floor(product / base);
          r[i2] = product - carry * base;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      function shiftLeft(x, n) {
        var r = [];
        while (n-- > 0)
          r.push(0);
        return r.concat(x);
      }
      function multiplyKaratsuba(x, y) {
        var n = Math.max(x.length, y.length);
        if (n <= 30)
          return multiplyLong(x, y);
        n = Math.ceil(n / 2);
        var b2 = x.slice(n), a2 = x.slice(0, n), d2 = y.slice(n), c2 = y.slice(0, n);
        var ac = multiplyKaratsuba(a2, c2), bd = multiplyKaratsuba(b2, d2), abcd = multiplyKaratsuba(addAny(a2, b2), addAny(c2, d2));
        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
        trim(product);
        return product;
      }
      function useKaratsuba(l1, l2) {
        return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;
      }
      BigInteger.prototype.multiply = function(v) {
        var n = parseValue(v), a2 = this.value, b2 = n.value, sign = this.sign !== n.sign, abs;
        if (n.isSmall) {
          if (b2 === 0)
            return Integer[0];
          if (b2 === 1)
            return this;
          if (b2 === -1)
            return this.negate();
          abs = Math.abs(b2);
          if (abs < BASE) {
            return new BigInteger(multiplySmall(a2, abs), sign);
          }
          b2 = smallToArray(abs);
        }
        if (useKaratsuba(a2.length, b2.length))
          return new BigInteger(multiplyKaratsuba(a2, b2), sign);
        return new BigInteger(multiplyLong(a2, b2), sign);
      };
      BigInteger.prototype.times = BigInteger.prototype.multiply;
      function multiplySmallAndArray(a2, b2, sign) {
        if (a2 < BASE) {
          return new BigInteger(multiplySmall(b2, a2), sign);
        }
        return new BigInteger(multiplyLong(b2, smallToArray(a2)), sign);
      }
      SmallInteger.prototype._multiplyBySmall = function(a2) {
        if (isPrecise(a2.value * this.value)) {
          return new SmallInteger(a2.value * this.value);
        }
        return multiplySmallAndArray(Math.abs(a2.value), smallToArray(Math.abs(this.value)), this.sign !== a2.sign);
      };
      BigInteger.prototype._multiplyBySmall = function(a2) {
        if (a2.value === 0)
          return Integer[0];
        if (a2.value === 1)
          return this;
        if (a2.value === -1)
          return this.negate();
        return multiplySmallAndArray(Math.abs(a2.value), this.value, this.sign !== a2.sign);
      };
      SmallInteger.prototype.multiply = function(v) {
        return parseValue(v)._multiplyBySmall(this);
      };
      SmallInteger.prototype.times = SmallInteger.prototype.multiply;
      NativeBigInt.prototype.multiply = function(v) {
        return new NativeBigInt(this.value * parseValue(v).value);
      };
      NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
      function square(a2) {
        var l = a2.length, r = createArray(l + l), base = BASE, product, carry, i2, a_i, a_j;
        for (i2 = 0; i2 < l; i2++) {
          a_i = a2[i2];
          carry = 0 - a_i * a_i;
          for (var j = i2; j < l; j++) {
            a_j = a2[j];
            product = 2 * (a_i * a_j) + r[i2 + j] + carry;
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
          }
          r[i2 + l] = carry;
        }
        trim(r);
        return r;
      }
      BigInteger.prototype.square = function() {
        return new BigInteger(square(this.value), false);
      };
      SmallInteger.prototype.square = function() {
        var value = this.value * this.value;
        if (isPrecise(value))
          return new SmallInteger(value);
        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
      };
      NativeBigInt.prototype.square = function(v) {
        return new NativeBigInt(this.value * this.value);
      };
      function divMod1(a2, b2) {
        var a_l = a2.length, b_l = b2.length, base = BASE, result = createArray(b2.length), divisorMostSignificantDigit = b2[b_l - 1], lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a2, lambda), divisor = multiplySmall(b2, lambda), quotientDigit, shift, carry, borrow, i2, l, q;
        if (remainder.length <= a_l)
          remainder.push(0);
        divisor.push(0);
        divisorMostSignificantDigit = divisor[b_l - 1];
        for (shift = a_l - b_l; shift >= 0; shift--) {
          quotientDigit = base - 1;
          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
          }
          carry = 0;
          borrow = 0;
          l = divisor.length;
          for (i2 = 0; i2 < l; i2++) {
            carry += quotientDigit * divisor[i2];
            q = Math.floor(carry / base);
            borrow += remainder[shift + i2] - (carry - q * base);
            carry = q;
            if (borrow < 0) {
              remainder[shift + i2] = borrow + base;
              borrow = -1;
            } else {
              remainder[shift + i2] = borrow;
              borrow = 0;
            }
          }
          while (borrow !== 0) {
            quotientDigit -= 1;
            carry = 0;
            for (i2 = 0; i2 < l; i2++) {
              carry += remainder[shift + i2] - base + divisor[i2];
              if (carry < 0) {
                remainder[shift + i2] = carry + base;
                carry = 0;
              } else {
                remainder[shift + i2] = carry;
                carry = 1;
              }
            }
            borrow += carry;
          }
          result[shift] = quotientDigit;
        }
        remainder = divModSmall(remainder, lambda)[0];
        return [arrayToSmall(result), arrayToSmall(remainder)];
      }
      function divMod2(a2, b2) {
        var a_l = a2.length, b_l = b2.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;
        while (a_l) {
          part.unshift(a2[--a_l]);
          trim(part);
          if (compareAbs(part, b2) < 0) {
            result.push(0);
            continue;
          }
          xlen = part.length;
          highx = part[xlen - 1] * base + part[xlen - 2];
          highy = b2[b_l - 1] * base + b2[b_l - 2];
          if (xlen > b_l) {
            highx = (highx + 1) * base;
          }
          guess = Math.ceil(highx / highy);
          do {
            check = multiplySmall(b2, guess);
            if (compareAbs(check, part) <= 0)
              break;
            guess--;
          } while (guess);
          result.push(guess);
          part = subtract(part, check);
        }
        result.reverse();
        return [arrayToSmall(result), arrayToSmall(part)];
      }
      function divModSmall(value, lambda) {
        var length = value.length, quotient = createArray(length), base = BASE, i2, q, remainder, divisor;
        remainder = 0;
        for (i2 = length - 1; i2 >= 0; --i2) {
          divisor = remainder * base + value[i2];
          q = truncate(divisor / lambda);
          remainder = divisor - q * lambda;
          quotient[i2] = q | 0;
        }
        return [quotient, remainder | 0];
      }
      function divModAny(self2, v) {
        var value, n = parseValue(v);
        if (supportsNativeBigInt) {
          return [new NativeBigInt(self2.value / n.value), new NativeBigInt(self2.value % n.value)];
        }
        var a2 = self2.value, b2 = n.value;
        var quotient;
        if (b2 === 0)
          throw new Error("Cannot divide by zero");
        if (self2.isSmall) {
          if (n.isSmall) {
            return [new SmallInteger(truncate(a2 / b2)), new SmallInteger(a2 % b2)];
          }
          return [Integer[0], self2];
        }
        if (n.isSmall) {
          if (b2 === 1)
            return [self2, Integer[0]];
          if (b2 == -1)
            return [self2.negate(), Integer[0]];
          var abs = Math.abs(b2);
          if (abs < BASE) {
            value = divModSmall(a2, abs);
            quotient = arrayToSmall(value[0]);
            var remainder = value[1];
            if (self2.sign)
              remainder = -remainder;
            if (typeof quotient === "number") {
              if (self2.sign !== n.sign)
                quotient = -quotient;
              return [new SmallInteger(quotient), new SmallInteger(remainder)];
            }
            return [new BigInteger(quotient, self2.sign !== n.sign), new SmallInteger(remainder)];
          }
          b2 = smallToArray(abs);
        }
        var comparison = compareAbs(a2, b2);
        if (comparison === -1)
          return [Integer[0], self2];
        if (comparison === 0)
          return [Integer[self2.sign === n.sign ? 1 : -1], Integer[0]];
        if (a2.length + b2.length <= 200)
          value = divMod1(a2, b2);
        else
          value = divMod2(a2, b2);
        quotient = value[0];
        var qSign = self2.sign !== n.sign, mod = value[1], mSign = self2.sign;
        if (typeof quotient === "number") {
          if (qSign)
            quotient = -quotient;
          quotient = new SmallInteger(quotient);
        } else
          quotient = new BigInteger(quotient, qSign);
        if (typeof mod === "number") {
          if (mSign)
            mod = -mod;
          mod = new SmallInteger(mod);
        } else
          mod = new BigInteger(mod, mSign);
        return [quotient, mod];
      }
      BigInteger.prototype.divmod = function(v) {
        var result = divModAny(this, v);
        return {
          quotient: result[0],
          remainder: result[1]
        };
      };
      NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;
      BigInteger.prototype.divide = function(v) {
        return divModAny(this, v)[0];
      };
      NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {
        return new NativeBigInt(this.value / parseValue(v).value);
      };
      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;
      BigInteger.prototype.mod = function(v) {
        return divModAny(this, v)[1];
      };
      NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {
        return new NativeBigInt(this.value % parseValue(v).value);
      };
      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;
      BigInteger.prototype.pow = function(v) {
        var n = parseValue(v), a2 = this.value, b2 = n.value, value, x, y;
        if (b2 === 0)
          return Integer[1];
        if (a2 === 0)
          return Integer[0];
        if (a2 === 1)
          return Integer[1];
        if (a2 === -1)
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.sign) {
          return Integer[0];
        }
        if (!n.isSmall)
          throw new Error("The exponent " + n.toString() + " is too large.");
        if (this.isSmall) {
          if (isPrecise(value = Math.pow(a2, b2)))
            return new SmallInteger(truncate(value));
        }
        x = this;
        y = Integer[1];
        while (true) {
          if (b2 & true) {
            y = y.times(x);
            --b2;
          }
          if (b2 === 0)
            break;
          b2 /= 2;
          x = x.square();
        }
        return y;
      };
      SmallInteger.prototype.pow = BigInteger.prototype.pow;
      NativeBigInt.prototype.pow = function(v) {
        var n = parseValue(v);
        var a2 = this.value, b2 = n.value;
        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
        if (b2 === _0)
          return Integer[1];
        if (a2 === _0)
          return Integer[0];
        if (a2 === _1)
          return Integer[1];
        if (a2 === BigInt(-1))
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.isNegative())
          return new NativeBigInt(_0);
        var x = this;
        var y = Integer[1];
        while (true) {
          if ((b2 & _1) === _1) {
            y = y.times(x);
            --b2;
          }
          if (b2 === _0)
            break;
          b2 /= _2;
          x = x.square();
        }
        return y;
      };
      BigInteger.prototype.modPow = function(exp, mod) {
        exp = parseValue(exp);
        mod = parseValue(mod);
        if (mod.isZero())
          throw new Error("Cannot take modPow with modulus 0");
        var r = Integer[1], base = this.mod(mod);
        if (exp.isNegative()) {
          exp = exp.multiply(Integer[-1]);
          base = base.modInv(mod);
        }
        while (exp.isPositive()) {
          if (base.isZero())
            return Integer[0];
          if (exp.isOdd())
            r = r.multiply(base).mod(mod);
          exp = exp.divide(2);
          base = base.square().mod(mod);
        }
        return r;
      };
      NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;
      function compareAbs(a2, b2) {
        if (a2.length !== b2.length) {
          return a2.length > b2.length ? 1 : -1;
        }
        for (var i2 = a2.length - 1; i2 >= 0; i2--) {
          if (a2[i2] !== b2[i2])
            return a2[i2] > b2[i2] ? 1 : -1;
        }
        return 0;
      }
      BigInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a2 = this.value, b2 = n.value;
        if (n.isSmall)
          return 1;
        return compareAbs(a2, b2);
      };
      SmallInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a2 = Math.abs(this.value), b2 = n.value;
        if (n.isSmall) {
          b2 = Math.abs(b2);
          return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
        }
        return -1;
      };
      NativeBigInt.prototype.compareAbs = function(v) {
        var a2 = this.value;
        var b2 = parseValue(v).value;
        a2 = a2 >= 0 ? a2 : -a2;
        b2 = b2 >= 0 ? b2 : -b2;
        return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
      };
      BigInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a2 = this.value, b2 = n.value;
        if (this.sign !== n.sign) {
          return n.sign ? 1 : -1;
        }
        if (n.isSmall) {
          return this.sign ? -1 : 1;
        }
        return compareAbs(a2, b2) * (this.sign ? -1 : 1);
      };
      BigInteger.prototype.compareTo = BigInteger.prototype.compare;
      SmallInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a2 = this.value, b2 = n.value;
        if (n.isSmall) {
          return a2 == b2 ? 0 : a2 > b2 ? 1 : -1;
        }
        if (a2 < 0 !== n.sign) {
          return a2 < 0 ? -1 : 1;
        }
        return a2 < 0 ? 1 : -1;
      };
      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
      NativeBigInt.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var a2 = this.value;
        var b2 = parseValue(v).value;
        return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
      };
      NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
      BigInteger.prototype.equals = function(v) {
        return this.compare(v) === 0;
      };
      NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;
      BigInteger.prototype.notEquals = function(v) {
        return this.compare(v) !== 0;
      };
      NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;
      BigInteger.prototype.greater = function(v) {
        return this.compare(v) > 0;
      };
      NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;
      BigInteger.prototype.lesser = function(v) {
        return this.compare(v) < 0;
      };
      NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;
      BigInteger.prototype.greaterOrEquals = function(v) {
        return this.compare(v) >= 0;
      };
      NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;
      BigInteger.prototype.lesserOrEquals = function(v) {
        return this.compare(v) <= 0;
      };
      NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;
      BigInteger.prototype.isEven = function() {
        return (this.value[0] & 1) === 0;
      };
      SmallInteger.prototype.isEven = function() {
        return (this.value & 1) === 0;
      };
      NativeBigInt.prototype.isEven = function() {
        return (this.value & BigInt(1)) === BigInt(0);
      };
      BigInteger.prototype.isOdd = function() {
        return (this.value[0] & 1) === 1;
      };
      SmallInteger.prototype.isOdd = function() {
        return (this.value & 1) === 1;
      };
      NativeBigInt.prototype.isOdd = function() {
        return (this.value & BigInt(1)) === BigInt(1);
      };
      BigInteger.prototype.isPositive = function() {
        return !this.sign;
      };
      SmallInteger.prototype.isPositive = function() {
        return this.value > 0;
      };
      NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
      BigInteger.prototype.isNegative = function() {
        return this.sign;
      };
      SmallInteger.prototype.isNegative = function() {
        return this.value < 0;
      };
      NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
      BigInteger.prototype.isUnit = function() {
        return false;
      };
      SmallInteger.prototype.isUnit = function() {
        return Math.abs(this.value) === 1;
      };
      NativeBigInt.prototype.isUnit = function() {
        return this.abs().value === BigInt(1);
      };
      BigInteger.prototype.isZero = function() {
        return false;
      };
      SmallInteger.prototype.isZero = function() {
        return this.value === 0;
      };
      NativeBigInt.prototype.isZero = function() {
        return this.value === BigInt(0);
      };
      BigInteger.prototype.isDivisibleBy = function(v) {
        var n = parseValue(v);
        if (n.isZero())
          return false;
        if (n.isUnit())
          return true;
        if (n.compareAbs(2) === 0)
          return this.isEven();
        return this.mod(n).isZero();
      };
      NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;
      function isBasicPrime(v) {
        var n = v.abs();
        if (n.isUnit())
          return false;
        if (n.equals(2) || n.equals(3) || n.equals(5))
          return true;
        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
          return false;
        if (n.lesser(49))
          return true;
      }
      function millerRabinTest(n, a2) {
        var nPrev = n.prev(), b2 = nPrev, r = 0, d2, t, i2, x;
        while (b2.isEven())
          b2 = b2.divide(2), r++;
        next:
          for (i2 = 0; i2 < a2.length; i2++) {
            if (n.lesser(a2[i2]))
              continue;
            x = bigInt(a2[i2]).modPow(b2, n);
            if (x.isUnit() || x.equals(nPrev))
              continue;
            for (d2 = r - 1; d2 != 0; d2--) {
              x = x.square().mod(n);
              if (x.isUnit())
                return false;
              if (x.equals(nPrev))
                continue next;
            }
            return false;
          }
        return true;
      }
      BigInteger.prototype.isPrime = function(strict) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var bits = n.bitLength();
        if (bits <= 64)
          return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
        var logN = Math.log(2) * bits.toJSNumber();
        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
        for (var a2 = [], i2 = 0; i2 < t; i2++) {
          a2.push(bigInt(i2 + 2));
        }
        return millerRabinTest(n, a2);
      };
      NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;
      BigInteger.prototype.isProbablePrime = function(iterations, rng) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var t = iterations === undefined2 ? 5 : iterations;
        for (var a2 = [], i2 = 0; i2 < t; i2++) {
          a2.push(bigInt.randBetween(2, n.minus(2), rng));
        }
        return millerRabinTest(n, a2);
      };
      NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;
      BigInteger.prototype.modInv = function(n) {
        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;
        while (!newR.isZero()) {
          q = r.divide(newR);
          lastT = t;
          lastR = r;
          t = newT;
          r = newR;
          newT = lastT.subtract(q.multiply(newT));
          newR = lastR.subtract(q.multiply(newR));
        }
        if (!r.isUnit())
          throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
        if (t.compare(0) === -1) {
          t = t.add(n);
        }
        if (this.isNegative()) {
          return t.negate();
        }
        return t;
      };
      NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;
      BigInteger.prototype.next = function() {
        var value = this.value;
        if (this.sign) {
          return subtractSmall(value, 1, this.sign);
        }
        return new BigInteger(addSmall(value, 1), this.sign);
      };
      SmallInteger.prototype.next = function() {
        var value = this.value;
        if (value + 1 < MAX_INT)
          return new SmallInteger(value + 1);
        return new BigInteger(MAX_INT_ARR, false);
      };
      NativeBigInt.prototype.next = function() {
        return new NativeBigInt(this.value + BigInt(1));
      };
      BigInteger.prototype.prev = function() {
        var value = this.value;
        if (this.sign) {
          return new BigInteger(addSmall(value, 1), true);
        }
        return subtractSmall(value, 1, this.sign);
      };
      SmallInteger.prototype.prev = function() {
        var value = this.value;
        if (value - 1 > -MAX_INT)
          return new SmallInteger(value - 1);
        return new BigInteger(MAX_INT_ARR, true);
      };
      NativeBigInt.prototype.prev = function() {
        return new NativeBigInt(this.value - BigInt(1));
      };
      var powersOfTwo = [1];
      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
        powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
      var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
      function shift_isSmall(n) {
        return Math.abs(n) <= BASE;
      }
      BigInteger.prototype.shiftLeft = function(v) {
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftRight(-n);
        var result = this;
        if (result.isZero())
          return result;
        while (n >= powers2Length) {
          result = result.multiply(highestPower2);
          n -= powers2Length - 1;
        }
        return result.multiply(powersOfTwo[n]);
      };
      NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;
      BigInteger.prototype.shiftRight = function(v) {
        var remQuo;
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftLeft(-n);
        var result = this;
        while (n >= powers2Length) {
          if (result.isZero() || result.isNegative() && result.isUnit())
            return result;
          remQuo = divModAny(result, highestPower2);
          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
          n -= powers2Length - 1;
        }
        remQuo = divModAny(result, powersOfTwo[n]);
        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
      };
      NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;
      function bitwise(x, y, fn) {
        y = parseValue(y);
        var xSign = x.isNegative(), ySign = y.isNegative();
        var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;
        var xDigit = 0, yDigit = 0;
        var xDivMod = null, yDivMod = null;
        var result = [];
        while (!xRem.isZero() || !yRem.isZero()) {
          xDivMod = divModAny(xRem, highestPower2);
          xDigit = xDivMod[1].toJSNumber();
          if (xSign) {
            xDigit = highestPower2 - 1 - xDigit;
          }
          yDivMod = divModAny(yRem, highestPower2);
          yDigit = yDivMod[1].toJSNumber();
          if (ySign) {
            yDigit = highestPower2 - 1 - yDigit;
          }
          xRem = xDivMod[0];
          yRem = yDivMod[0];
          result.push(fn(xDigit, yDigit));
        }
        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
        for (var i2 = result.length - 1; i2 >= 0; i2 -= 1) {
          sum = sum.multiply(highestPower2).add(bigInt(result[i2]));
        }
        return sum;
      }
      BigInteger.prototype.not = function() {
        return this.negate().prev();
      };
      NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;
      BigInteger.prototype.and = function(n) {
        return bitwise(this, n, function(a2, b2) {
          return a2 & b2;
        });
      };
      NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;
      BigInteger.prototype.or = function(n) {
        return bitwise(this, n, function(a2, b2) {
          return a2 | b2;
        });
      };
      NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;
      BigInteger.prototype.xor = function(n) {
        return bitwise(this, n, function(a2, b2) {
          return a2 ^ b2;
        });
      };
      NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;
      var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
      function roughLOB(n) {
        var v = n.value, x = typeof v === "number" ? v | LOBMASK_I : typeof v === "bigint" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;
        return x & -x;
      }
      function integerLogarithm(value, base) {
        if (base.compareTo(value) <= 0) {
          var tmp = integerLogarithm(value, base.square(base));
          var p = tmp.p;
          var e2 = tmp.e;
          var t = p.multiply(base);
          return t.compareTo(value) <= 0 ? { p: t, e: e2 * 2 + 1 } : { p, e: e2 * 2 };
        }
        return { p: bigInt(1), e: 0 };
      }
      BigInteger.prototype.bitLength = function() {
        var n = this;
        if (n.compareTo(bigInt(0)) < 0) {
          n = n.negate().subtract(bigInt(1));
        }
        if (n.compareTo(bigInt(0)) === 0) {
          return bigInt(0);
        }
        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
      };
      NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;
      function max(a2, b2) {
        a2 = parseValue(a2);
        b2 = parseValue(b2);
        return a2.greater(b2) ? a2 : b2;
      }
      function min(a2, b2) {
        a2 = parseValue(a2);
        b2 = parseValue(b2);
        return a2.lesser(b2) ? a2 : b2;
      }
      function gcd(a2, b2) {
        a2 = parseValue(a2).abs();
        b2 = parseValue(b2).abs();
        if (a2.equals(b2))
          return a2;
        if (a2.isZero())
          return b2;
        if (b2.isZero())
          return a2;
        var c2 = Integer[1], d2, t;
        while (a2.isEven() && b2.isEven()) {
          d2 = min(roughLOB(a2), roughLOB(b2));
          a2 = a2.divide(d2);
          b2 = b2.divide(d2);
          c2 = c2.multiply(d2);
        }
        while (a2.isEven()) {
          a2 = a2.divide(roughLOB(a2));
        }
        do {
          while (b2.isEven()) {
            b2 = b2.divide(roughLOB(b2));
          }
          if (a2.greater(b2)) {
            t = b2;
            b2 = a2;
            a2 = t;
          }
          b2 = b2.subtract(a2);
        } while (!b2.isZero());
        return c2.isUnit() ? a2 : a2.multiply(c2);
      }
      function lcm(a2, b2) {
        a2 = parseValue(a2).abs();
        b2 = parseValue(b2).abs();
        return a2.divide(gcd(a2, b2)).multiply(b2);
      }
      function randBetween(a2, b2, rng) {
        a2 = parseValue(a2);
        b2 = parseValue(b2);
        var usedRNG = rng || Math.random;
        var low = min(a2, b2), high = max(a2, b2);
        var range = high.subtract(low).add(1);
        if (range.isSmall)
          return low.add(Math.floor(usedRNG() * range));
        var digits = toBase(range, BASE).value;
        var result = [], restricted = true;
        for (var i2 = 0; i2 < digits.length; i2++) {
          var top = restricted ? digits[i2] + (i2 + 1 < digits.length ? digits[i2 + 1] / BASE : 0) : BASE;
          var digit = truncate(usedRNG() * top);
          result.push(digit);
          if (digit < digits[i2])
            restricted = false;
        }
        return low.add(Integer.fromArray(result, BASE, false));
      }
      var parseBase = function(text, base, alphabet, caseSensitive) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        text = String(text);
        if (!caseSensitive) {
          text = text.toLowerCase();
          alphabet = alphabet.toLowerCase();
        }
        var length = text.length;
        var i2;
        var absBase = Math.abs(base);
        var alphabetValues = {};
        for (i2 = 0; i2 < alphabet.length; i2++) {
          alphabetValues[alphabet[i2]] = i2;
        }
        for (i2 = 0; i2 < length; i2++) {
          var c2 = text[i2];
          if (c2 === "-")
            continue;
          if (c2 in alphabetValues) {
            if (alphabetValues[c2] >= absBase) {
              if (c2 === "1" && absBase === 1)
                continue;
              throw new Error(c2 + " is not a valid digit in base " + base + ".");
            }
          }
        }
        base = parseValue(base);
        var digits = [];
        var isNegative = text[0] === "-";
        for (i2 = isNegative ? 1 : 0; i2 < text.length; i2++) {
          var c2 = text[i2];
          if (c2 in alphabetValues)
            digits.push(parseValue(alphabetValues[c2]));
          else if (c2 === "<") {
            var start = i2;
            do {
              i2++;
            } while (text[i2] !== ">" && i2 < text.length);
            digits.push(parseValue(text.slice(start + 1, i2)));
          } else
            throw new Error(c2 + " is not a valid character");
        }
        return parseBaseFromArray(digits, base, isNegative);
      };
      function parseBaseFromArray(digits, base, isNegative) {
        var val = Integer[0], pow = Integer[1], i2;
        for (i2 = digits.length - 1; i2 >= 0; i2--) {
          val = val.add(digits[i2].times(pow));
          pow = pow.times(base);
        }
        return isNegative ? val.negate() : val;
      }
      function stringify2(digit, alphabet) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        if (digit < alphabet.length) {
          return alphabet[digit];
        }
        return "<" + digit + ">";
      }
      function toBase(n, base) {
        base = bigInt(base);
        if (base.isZero()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          throw new Error("Cannot convert nonzero numbers to base 0.");
        }
        if (base.equals(-1)) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          if (n.isNegative())
            return {
              value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])),
              isNegative: false
            };
          var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
          arr.unshift([1]);
          return {
            value: [].concat.apply([], arr),
            isNegative: false
          };
        }
        var neg = false;
        if (n.isNegative() && base.isPositive()) {
          neg = true;
          n = n.abs();
        }
        if (base.isUnit()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          return {
            value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),
            isNegative: neg
          };
        }
        var out = [];
        var left = n, divmod;
        while (left.isNegative() || left.compareAbs(base) >= 0) {
          divmod = left.divmod(base);
          left = divmod.quotient;
          var digit = divmod.remainder;
          if (digit.isNegative()) {
            digit = base.minus(digit).abs();
            left = left.next();
          }
          out.push(digit.toJSNumber());
        }
        out.push(left.toJSNumber());
        return { value: out.reverse(), isNegative: neg };
      }
      function toBaseString(n, base, alphabet) {
        var arr = toBase(n, base);
        return (arr.isNegative ? "-" : "") + arr.value.map(function(x) {
          return stringify2(x, alphabet);
        }).join("");
      }
      BigInteger.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      SmallInteger.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      NativeBigInt.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      BigInteger.prototype.toString = function(radix, alphabet) {
        if (radix === undefined2)
          radix = 10;
        if (radix !== 10)
          return toBaseString(this, radix, alphabet);
        var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
        while (--l >= 0) {
          digit = String(v[l]);
          str += zeros.slice(digit.length) + digit;
        }
        var sign = this.sign ? "-" : "";
        return sign + str;
      };
      SmallInteger.prototype.toString = function(radix, alphabet) {
        if (radix === undefined2)
          radix = 10;
        if (radix != 10)
          return toBaseString(this, radix, alphabet);
        return String(this.value);
      };
      NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
      NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
        return this.toString();
      };
      BigInteger.prototype.valueOf = function() {
        return parseInt(this.toString(), 10);
      };
      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;
      SmallInteger.prototype.valueOf = function() {
        return this.value;
      };
      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
      NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
        return parseInt(this.toString(), 10);
      };
      function parseStringValue(v) {
        if (isPrecise(+v)) {
          var x = +v;
          if (x === truncate(x))
            return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
          throw new Error("Invalid integer: " + v);
        }
        var sign = v[0] === "-";
        if (sign)
          v = v.slice(1);
        var split = v.split(/e/i);
        if (split.length > 2)
          throw new Error("Invalid integer: " + split.join("e"));
        if (split.length === 2) {
          var exp = split[1];
          if (exp[0] === "+")
            exp = exp.slice(1);
          exp = +exp;
          if (exp !== truncate(exp) || !isPrecise(exp))
            throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
          var text = split[0];
          var decimalPlace = text.indexOf(".");
          if (decimalPlace >= 0) {
            exp -= text.length - decimalPlace - 1;
            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
          }
          if (exp < 0)
            throw new Error("Cannot include negative exponent part for integers");
          text += new Array(exp + 1).join("0");
          v = text;
        }
        var isValid = /^([0-9][0-9]*)$/.test(v);
        if (!isValid)
          throw new Error("Invalid integer: " + v);
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(sign ? "-" + v : v));
        }
        var r = [], max2 = v.length, l = LOG_BASE, min2 = max2 - l;
        while (max2 > 0) {
          r.push(+v.slice(min2, max2));
          min2 -= l;
          if (min2 < 0)
            min2 = 0;
          max2 -= l;
        }
        trim(r);
        return new BigInteger(r, sign);
      }
      function parseNumberValue(v) {
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(v));
        }
        if (isPrecise(v)) {
          if (v !== truncate(v))
            throw new Error(v + " is not an integer.");
          return new SmallInteger(v);
        }
        return parseStringValue(v.toString());
      }
      function parseValue(v) {
        if (typeof v === "number") {
          return parseNumberValue(v);
        }
        if (typeof v === "string") {
          return parseStringValue(v);
        }
        if (typeof v === "bigint") {
          return new NativeBigInt(v);
        }
        return v;
      }
      for (var i = 0; i < 1e3; i++) {
        Integer[i] = parseValue(i);
        if (i > 0)
          Integer[-i] = parseValue(-i);
      }
      Integer.one = Integer[1];
      Integer.zero = Integer[0];
      Integer.minusOne = Integer[-1];
      Integer.max = max;
      Integer.min = min;
      Integer.gcd = gcd;
      Integer.lcm = lcm;
      Integer.isInstance = function(x) {
        return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
      };
      Integer.randBetween = randBetween;
      Integer.fromArray = function(digits, base, isNegative) {
        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
      };
      return Integer;
    }();
    if (typeof module2 !== "undefined" && module2.hasOwnProperty("exports")) {
      module2.exports = bigInt;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return bigInt;
      });
    }
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/validation.js
var require_validation = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/validation.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ValidationError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "ValidationError";
        Object.setPrototypeOf(this, ValidationError.prototype);
      }
    };
    exports2.ValidationError = ValidationError;
    function validate(condition, message) {
      if (!condition) {
        throw new ValidationError(message);
      }
    }
    exports2.validate = validate;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/base32.js
var require_base32 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/base32.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var validation_1 = require_validation();
    var CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var CHARSET_INVERSE_INDEX = {
      q: 0,
      p: 1,
      z: 2,
      r: 3,
      y: 4,
      9: 5,
      x: 6,
      8: 7,
      g: 8,
      f: 9,
      2: 10,
      t: 11,
      v: 12,
      d: 13,
      w: 14,
      0: 15,
      s: 16,
      3: 17,
      j: 18,
      n: 19,
      5: 20,
      4: 21,
      k: 22,
      h: 23,
      c: 24,
      e: 25,
      6: 26,
      m: 27,
      u: 28,
      a: 29,
      7: 30,
      l: 31
    };
    function encode(data) {
      validation_1.validate(data instanceof Uint8Array, "Invalid data: " + data + ".");
      let base32 = "";
      for (const value of data) {
        validation_1.validate(0 <= value && value < 32, "Invalid value: " + value + ".");
        base32 += CHARSET[value];
      }
      return base32;
    }
    exports2.encode = encode;
    function decode(strng) {
      validation_1.validate(typeof strng === "string", "Invalid base32-encoded string: " + strng + ".");
      const data = new Uint8Array(strng.length);
      for (let i = 0; i < strng.length; ++i) {
        const value = strng[i];
        validation_1.validate(value in CHARSET_INVERSE_INDEX, "Invalid value: " + value + ".");
        data[i] = CHARSET_INVERSE_INDEX[value];
      }
      return data;
    }
    exports2.decode = decode;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/convertBits.js
var require_convertBits = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/convertBits.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var validation_1 = require_validation();
    function convertBits(data, from, to, strictMode) {
      const length = strictMode ? Math.floor(data.length * from / to) : Math.ceil(data.length * from / to);
      const mask = (1 << to) - 1;
      const result = new Uint8Array(length);
      let index = 0;
      let accumulator = 0;
      let bits = 0;
      for (const value of data) {
        validation_1.validate(0 <= value && value >> from === 0, "Invalid value: " + value + ".");
        accumulator = accumulator << from | value;
        bits += from;
        while (bits >= to) {
          bits -= to;
          result[index] = accumulator >> bits & mask;
          ++index;
        }
      }
      if (!strictMode) {
        if (bits > 0) {
          result[index] = accumulator << to - bits & mask;
          ++index;
        }
      } else {
        validation_1.validate(bits < from && (accumulator << to - bits & mask) === 0, "Input cannot be converted to " + to + " bits without padding, but strict mode was used.");
      }
      return result;
    }
    exports2.convertBits = convertBits;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/index.js
var require_cashaddr = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bigInt = require_BigInteger();
    var base32 = require_base32();
    var convertBits_1 = require_convertBits();
    var validation = require_validation();
    var validate = validation.validate;
    function encode(prefix, type, hash) {
      validate(typeof prefix === "string" && isValidPrefix(prefix), "Invalid prefix: " + prefix + ".");
      validate(typeof type === "string", "Invalid type: " + type + ".");
      validate(hash instanceof Uint8Array, "Invalid hash: " + hash + ".");
      const prefixData = concat(prefixToUint5Array(prefix), new Uint8Array(1));
      const versionByte = getTypeBits(type) + getHashSizeBits(hash);
      const payloadData = toUint5Array(concat(new Uint8Array([versionByte]), hash));
      const checksumData = concat(concat(prefixData, payloadData), new Uint8Array(8));
      const payload = concat(payloadData, checksumToUint5Array(polymod(checksumData)));
      return prefix + ":" + base32.encode(payload);
    }
    exports2.encode = encode;
    function decode(address) {
      validate(typeof address === "string" && hasSingleCase(address), "Invalid address: " + address + ".");
      const pieces = address.toLowerCase().split(":");
      validate(pieces.length === 2, "Missing prefix: " + address + ".");
      const prefix = pieces[0];
      const payload = base32.decode(pieces[1]);
      validate(validChecksum(prefix, payload), "Invalid checksum: " + address + ".");
      const payloadData = fromUint5Array(payload.subarray(0, -8));
      const versionByte = payloadData[0];
      const hash = payloadData.subarray(1);
      validate(getHashSize(versionByte) === hash.length * 8, "Invalid hash size: " + address + ".");
      const type = getType(versionByte);
      return {
        prefix,
        type,
        hash
      };
    }
    exports2.decode = decode;
    exports2.ValidationError = validation.ValidationError;
    exports2.VALID_PREFIXES = ["bitcoincash", "bchtest", "bchreg"];
    function isValidPrefix(prefix) {
      return hasSingleCase(prefix) && exports2.VALID_PREFIXES.indexOf(prefix.toLowerCase()) !== -1;
    }
    function prefixToUint5Array(prefix) {
      const result = new Uint8Array(prefix.length);
      for (let i = 0; i < prefix.length; ++i) {
        result[i] = prefix[i].charCodeAt(0) & 31;
      }
      return result;
    }
    function checksumToUint5Array(checksum) {
      const result = new Uint8Array(8);
      for (let i = 0; i < 8; ++i) {
        result[7 - i] = checksum.and(31).toJSNumber();
        checksum = checksum.shiftRight(5);
      }
      return result;
    }
    function getTypeBits(type) {
      switch (type) {
        case "P2PKH":
          return 0;
        case "P2SH":
          return 8;
        default:
          throw new exports2.ValidationError("Invalid type: " + type + ".");
      }
    }
    function getType(versionByte) {
      switch (versionByte & 120) {
        case 0:
          return "P2PKH";
        case 8:
          return "P2SH";
        default:
          throw new exports2.ValidationError("Invalid address type in version byte: " + versionByte + ".");
      }
    }
    function getHashSizeBits(hash) {
      switch (hash.length * 8) {
        case 160:
          return 0;
        case 192:
          return 1;
        case 224:
          return 2;
        case 256:
          return 3;
        case 320:
          return 4;
        case 384:
          return 5;
        case 448:
          return 6;
        case 512:
          return 7;
        default:
          throw new exports2.ValidationError("Invalid hash size: " + hash.length + ".");
      }
    }
    function getHashSize(versionByte) {
      switch (versionByte & 7) {
        case 0:
          return 160;
        case 1:
          return 192;
        case 2:
          return 224;
        case 3:
          return 256;
        case 4:
          return 320;
        case 5:
          return 384;
        case 6:
          return 448;
        case 7:
          return 512;
        default:
          throw new exports2.ValidationError("Invalid versionByte: " + (versionByte & 7) + ".");
      }
    }
    function toUint5Array(data) {
      return convertBits_1.convertBits(data, 8, 5);
    }
    function fromUint5Array(data) {
      return convertBits_1.convertBits(data, 5, 8, true);
    }
    function concat(a2, b2) {
      const ab = new Uint8Array(a2.length + b2.length);
      ab.set(a2);
      ab.set(b2, a2.length);
      return ab;
    }
    function polymod(data) {
      const GENERATOR = [
        656907472481,
        522768456162,
        1044723512260,
        748107326120,
        130178868336
      ];
      let checksum = bigInt(1);
      for (const value of data) {
        const topBits = checksum.shiftRight(35);
        checksum = checksum.and(34359738367).shiftLeft(5).xor(value);
        for (let j = 0; j < GENERATOR.length; ++j) {
          if (topBits.shiftRight(j).and(1).equals(1)) {
            checksum = checksum.xor(GENERATOR[j]);
          }
        }
      }
      return checksum.xor(1);
    }
    function validChecksum(prefix, payload) {
      const prefixData = concat(prefixToUint5Array(prefix), new Uint8Array(1));
      const checksumData = concat(prefixData, payload);
      return polymod(checksumData).equals(0);
    }
    function hasSingleCase(strng) {
      return strng === strng.toLowerCase() || strng === strng.toUpperCase();
    }
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/networks.js
var require_networks = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/networks.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitcoingold = {
      messagePrefix: "Bitcoin Gold Signed Message:\n",
      bech32: "btg",
      bip32: {
        public: 76067358,
        private: 76066276
      },
      pubKeyHash: 38,
      scriptHash: 23,
      wif: 128
    };
    exports2.bitcoin = {
      messagePrefix: "Bitcoin Signed Message:\n",
      bech32: "bc",
      bip32: {
        public: 76067358,
        private: 76066276
      },
      pubKeyHash: 0,
      scriptHash: 5,
      wif: 128
    };
    exports2.regtest = {
      messagePrefix: "Bitcoin Signed Message:\n",
      bech32: "bcrt",
      bip32: {
        public: 70617039,
        private: 70615956
      },
      pubKeyHash: 111,
      scriptHash: 196,
      wif: 239
    };
    exports2.testnet = {
      messagePrefix: "Bitcoin Signed Message:\n",
      bech32: "tb",
      bip32: {
        public: 70617039,
        private: 70615956
      },
      pubKeyHash: 111,
      scriptHash: 196,
      wif: 239
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/script_number.js
var require_script_number = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/script_number.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function decode(buffer, maxLength, minimal) {
      maxLength = maxLength || 4;
      minimal = minimal === void 0 ? true : minimal;
      const length = buffer.length;
      if (length === 0)
        return 0;
      if (length > maxLength)
        throw new TypeError("Script number overflow");
      if (minimal) {
        if ((buffer[length - 1] & 127) === 0) {
          if (length <= 1 || (buffer[length - 2] & 128) === 0)
            throw new Error("Non-minimally encoded script number");
        }
      }
      if (length === 5) {
        const a2 = buffer.readUInt32LE(0);
        const b2 = buffer.readUInt8(4);
        if (b2 & 128)
          return -((b2 & ~128) * 4294967296 + a2);
        return b2 * 4294967296 + a2;
      }
      let result = 0;
      for (let i = 0; i < length; ++i) {
        result |= buffer[i] << 8 * i;
      }
      if (buffer[length - 1] & 128)
        return -(result & ~(128 << 8 * (length - 1)));
      return result;
    }
    exports2.decode = decode;
    function scriptNumSize(i) {
      return i > 2147483647 ? 5 : i > 8388607 ? 4 : i > 32767 ? 3 : i > 127 ? 2 : i > 0 ? 1 : 0;
    }
    function encode(_number) {
      let value = Math.abs(_number);
      const size = scriptNumSize(value);
      const buffer = Buffer.allocUnsafe(size);
      const negative = _number < 0;
      for (let i = 0; i < size; ++i) {
        buffer.writeUInt8(value & 255, i);
        value >>= 8;
      }
      if (buffer[size - 1] & 128) {
        buffer.writeUInt8(negative ? 128 : 0, size - 1);
      } else if (negative) {
        buffer[size - 1] |= 128;
      }
      return buffer;
    }
    exports2.encode = encode;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/types.js
var require_types2 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/types.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeforce = require_typeforce();
    var UINT31_MAX = Math.pow(2, 31) - 1;
    function UInt31(value) {
      return typeforce.UInt32(value) && value <= UINT31_MAX;
    }
    exports2.UInt31 = UInt31;
    function BIP32Path(value) {
      return typeforce.String(value) && !!value.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
    }
    exports2.BIP32Path = BIP32Path;
    BIP32Path.toJSON = () => {
      return "BIP32 derivation path";
    };
    function Signer(obj) {
      return (typeforce.Buffer(obj.publicKey) || typeof obj.getPublicKey === "function") && typeof obj.sign === "function";
    }
    exports2.Signer = Signer;
    var SATOSHI_MAX = 21 * 1e14;
    function Satoshi(value) {
      return typeforce.UInt53(value) && value <= SATOSHI_MAX;
    }
    exports2.Satoshi = Satoshi;
    exports2.ECPoint = typeforce.quacksLike("Point");
    exports2.Network = typeforce.compile({
      messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),
      bip32: {
        public: typeforce.UInt32,
        private: typeforce.UInt32
      },
      pubKeyHash: typeforce.UInt8,
      scriptHash: typeforce.UInt8,
      wif: typeforce.UInt8
    });
    exports2.Buffer256bit = typeforce.BufferN(32);
    exports2.Hash160bit = typeforce.BufferN(20);
    exports2.Hash256bit = typeforce.BufferN(32);
    exports2.Number = typeforce.Number;
    exports2.Array = typeforce.Array;
    exports2.Boolean = typeforce.Boolean;
    exports2.String = typeforce.String;
    exports2.Buffer = typeforce.Buffer;
    exports2.Hex = typeforce.Hex;
    exports2.maybe = typeforce.maybe;
    exports2.tuple = typeforce.tuple;
    exports2.UInt8 = typeforce.UInt8;
    exports2.UInt32 = typeforce.UInt32;
    exports2.UInt53 = typeforce.UInt53;
    exports2.Function = typeforce.Function;
    exports2.BufferN = typeforce.BufferN;
    exports2.Null = typeforce.Null;
    exports2.oneOf = typeforce.oneOf;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/script_signature.js
var require_script_signature = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/script_signature.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var types = require_types2();
    var bip66 = require_bip66();
    var typeforce = require_typeforce();
    var ZERO = Buffer.alloc(1, 0);
    function toDER(x) {
      let i = 0;
      while (x[i] === 0)
        ++i;
      if (i === x.length)
        return ZERO;
      x = x.slice(i);
      if (x[0] & 128)
        return Buffer.concat([ZERO, x], 1 + x.length);
      return x;
    }
    function fromDER(x) {
      if (x[0] === 0)
        x = x.slice(1);
      const buffer = Buffer.alloc(32, 0);
      const bstart = Math.max(0, 32 - x.length);
      x.copy(buffer, bstart);
      return buffer;
    }
    function decode(buffer) {
      const hashType = buffer.readUInt8(buffer.length - 1);
      const hashTypeMod = hashType & ~192;
      if (hashTypeMod <= 0 || hashTypeMod >= 4)
        throw new Error("Invalid hashType " + hashType);
      const decoded = bip66.decode(buffer.slice(0, -1));
      const r = fromDER(decoded.r);
      const s = fromDER(decoded.s);
      const signature = Buffer.concat([r, s], 64);
      return { signature, hashType };
    }
    exports2.decode = decode;
    function encode(signature, hashType) {
      typeforce({
        signature: types.BufferN(64),
        hashType: types.UInt8
      }, { signature, hashType });
      const hashTypeMod = hashType & ~192;
      if (hashTypeMod <= 0 || hashTypeMod >= 4)
        throw new Error("Invalid hashType " + hashType);
      const hashTypeBuffer = Buffer.allocUnsafe(1);
      hashTypeBuffer.writeUInt8(hashType, 0);
      const r = toDER(signature.slice(0, 32));
      const s = toDER(signature.slice(32, 64));
      return Buffer.concat([bip66.encode(r, s), hashTypeBuffer]);
    }
    exports2.encode = encode;
  }
});

// node_modules/bitcoin-ops/index.json
var require_bitcoin_ops = __commonJS({
  "node_modules/bitcoin-ops/index.json"(exports2, module2) {
    module2.exports = {
      OP_FALSE: 0,
      OP_0: 0,
      OP_PUSHDATA1: 76,
      OP_PUSHDATA2: 77,
      OP_PUSHDATA4: 78,
      OP_1NEGATE: 79,
      OP_RESERVED: 80,
      OP_TRUE: 81,
      OP_1: 81,
      OP_2: 82,
      OP_3: 83,
      OP_4: 84,
      OP_5: 85,
      OP_6: 86,
      OP_7: 87,
      OP_8: 88,
      OP_9: 89,
      OP_10: 90,
      OP_11: 91,
      OP_12: 92,
      OP_13: 93,
      OP_14: 94,
      OP_15: 95,
      OP_16: 96,
      OP_NOP: 97,
      OP_VER: 98,
      OP_IF: 99,
      OP_NOTIF: 100,
      OP_VERIF: 101,
      OP_VERNOTIF: 102,
      OP_ELSE: 103,
      OP_ENDIF: 104,
      OP_VERIFY: 105,
      OP_RETURN: 106,
      OP_TOALTSTACK: 107,
      OP_FROMALTSTACK: 108,
      OP_2DROP: 109,
      OP_2DUP: 110,
      OP_3DUP: 111,
      OP_2OVER: 112,
      OP_2ROT: 113,
      OP_2SWAP: 114,
      OP_IFDUP: 115,
      OP_DEPTH: 116,
      OP_DROP: 117,
      OP_DUP: 118,
      OP_NIP: 119,
      OP_OVER: 120,
      OP_PICK: 121,
      OP_ROLL: 122,
      OP_ROT: 123,
      OP_SWAP: 124,
      OP_TUCK: 125,
      OP_CAT: 126,
      OP_SUBSTR: 127,
      OP_LEFT: 128,
      OP_RIGHT: 129,
      OP_SIZE: 130,
      OP_INVERT: 131,
      OP_AND: 132,
      OP_OR: 133,
      OP_XOR: 134,
      OP_EQUAL: 135,
      OP_EQUALVERIFY: 136,
      OP_RESERVED1: 137,
      OP_RESERVED2: 138,
      OP_1ADD: 139,
      OP_1SUB: 140,
      OP_2MUL: 141,
      OP_2DIV: 142,
      OP_NEGATE: 143,
      OP_ABS: 144,
      OP_NOT: 145,
      OP_0NOTEQUAL: 146,
      OP_ADD: 147,
      OP_SUB: 148,
      OP_MUL: 149,
      OP_DIV: 150,
      OP_MOD: 151,
      OP_LSHIFT: 152,
      OP_RSHIFT: 153,
      OP_BOOLAND: 154,
      OP_BOOLOR: 155,
      OP_NUMEQUAL: 156,
      OP_NUMEQUALVERIFY: 157,
      OP_NUMNOTEQUAL: 158,
      OP_LESSTHAN: 159,
      OP_GREATERTHAN: 160,
      OP_LESSTHANOREQUAL: 161,
      OP_GREATERTHANOREQUAL: 162,
      OP_MIN: 163,
      OP_MAX: 164,
      OP_WITHIN: 165,
      OP_RIPEMD160: 166,
      OP_SHA1: 167,
      OP_SHA256: 168,
      OP_HASH160: 169,
      OP_HASH256: 170,
      OP_CODESEPARATOR: 171,
      OP_CHECKSIG: 172,
      OP_CHECKSIGVERIFY: 173,
      OP_CHECKMULTISIG: 174,
      OP_CHECKMULTISIGVERIFY: 175,
      OP_NOP1: 176,
      OP_NOP2: 177,
      OP_CHECKLOCKTIMEVERIFY: 177,
      OP_NOP3: 178,
      OP_CHECKSEQUENCEVERIFY: 178,
      OP_NOP4: 179,
      OP_NOP5: 180,
      OP_NOP6: 181,
      OP_NOP7: 182,
      OP_NOP8: 183,
      OP_NOP9: 184,
      OP_NOP10: 185,
      OP_PUBKEYHASH: 253,
      OP_PUBKEY: 254,
      OP_INVALIDOPCODE: 255
    };
  }
});

// node_modules/pushdata-bitcoin/index.js
var require_pushdata_bitcoin = __commonJS({
  "node_modules/pushdata-bitcoin/index.js"(exports2, module2) {
    init_define_process_env();
    var OPS = require_bitcoin_ops();
    function encodingLength(i) {
      return i < OPS.OP_PUSHDATA1 ? 1 : i <= 255 ? 2 : i <= 65535 ? 3 : 5;
    }
    function encode(buffer, number, offset) {
      var size = encodingLength(number);
      if (size === 1) {
        buffer.writeUInt8(number, offset);
      } else if (size === 2) {
        buffer.writeUInt8(OPS.OP_PUSHDATA1, offset);
        buffer.writeUInt8(number, offset + 1);
      } else if (size === 3) {
        buffer.writeUInt8(OPS.OP_PUSHDATA2, offset);
        buffer.writeUInt16LE(number, offset + 1);
      } else {
        buffer.writeUInt8(OPS.OP_PUSHDATA4, offset);
        buffer.writeUInt32LE(number, offset + 1);
      }
      return size;
    }
    function decode(buffer, offset) {
      var opcode = buffer.readUInt8(offset);
      var number, size;
      if (opcode < OPS.OP_PUSHDATA1) {
        number = opcode;
        size = 1;
      } else if (opcode === OPS.OP_PUSHDATA1) {
        if (offset + 2 > buffer.length)
          return null;
        number = buffer.readUInt8(offset + 1);
        size = 2;
      } else if (opcode === OPS.OP_PUSHDATA2) {
        if (offset + 3 > buffer.length)
          return null;
        number = buffer.readUInt16LE(offset + 1);
        size = 3;
      } else {
        if (offset + 5 > buffer.length)
          return null;
        if (opcode !== OPS.OP_PUSHDATA4)
          throw new Error("Unexpected opcode");
        number = buffer.readUInt32LE(offset + 1);
        size = 5;
      }
      return {
        opcode,
        number,
        size
      };
    }
    module2.exports = {
      encodingLength,
      encode,
      decode
    };
  }
});

// node_modules/bitcoin-ops/map.js
var require_map = __commonJS({
  "node_modules/bitcoin-ops/map.js"(exports2, module2) {
    init_define_process_env();
    var OPS = require_bitcoin_ops();
    var map = {};
    for (op in OPS) {
      code = OPS[op];
      map[code] = op;
    }
    var code;
    var op;
    module2.exports = map;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/script.js
var require_script = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/script.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var scriptNumber = require_script_number();
    var scriptSignature = require_script_signature();
    var types = require_types2();
    var bip66 = require_bip66();
    var ecc = require_js();
    var pushdata = require_pushdata_bitcoin();
    var typeforce = require_typeforce();
    exports2.OPS = require_bitcoin_ops();
    var REVERSE_OPS = require_map();
    var OP_INT_BASE = exports2.OPS.OP_RESERVED;
    function isOPInt(value) {
      return types.Number(value) && (value === exports2.OPS.OP_0 || value >= exports2.OPS.OP_1 && value <= exports2.OPS.OP_16 || value === exports2.OPS.OP_1NEGATE);
    }
    function isPushOnlyChunk(value) {
      return types.Buffer(value) || isOPInt(value);
    }
    function isPushOnly(value) {
      return types.Array(value) && value.every(isPushOnlyChunk);
    }
    exports2.isPushOnly = isPushOnly;
    function asMinimalOP(buffer) {
      if (buffer.length === 0)
        return exports2.OPS.OP_0;
      if (buffer.length !== 1)
        return;
      if (buffer[0] >= 1 && buffer[0] <= 16)
        return OP_INT_BASE + buffer[0];
      if (buffer[0] === 129)
        return exports2.OPS.OP_1NEGATE;
    }
    function chunksIsBuffer(buf) {
      return Buffer.isBuffer(buf);
    }
    function chunksIsArray(buf) {
      return types.Array(buf);
    }
    function singleChunkIsBuffer(buf) {
      return Buffer.isBuffer(buf);
    }
    function compile(chunks) {
      if (chunksIsBuffer(chunks))
        return chunks;
      typeforce(types.Array, chunks);
      const bufferSize = chunks.reduce((accum, chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          if (chunk.length === 1 && asMinimalOP(chunk) !== void 0) {
            return accum + 1;
          }
          return accum + pushdata.encodingLength(chunk.length) + chunk.length;
        }
        return accum + 1;
      }, 0);
      const buffer = Buffer.allocUnsafe(bufferSize);
      let offset = 0;
      chunks.forEach((chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          const opcode = asMinimalOP(chunk);
          if (opcode !== void 0) {
            buffer.writeUInt8(opcode, offset);
            offset += 1;
            return;
          }
          offset += pushdata.encode(buffer, chunk.length, offset);
          chunk.copy(buffer, offset);
          offset += chunk.length;
        } else {
          buffer.writeUInt8(chunk, offset);
          offset += 1;
        }
      });
      if (offset !== buffer.length)
        throw new Error("Could not decode chunks");
      return buffer;
    }
    exports2.compile = compile;
    function decompile(buffer) {
      if (chunksIsArray(buffer))
        return buffer;
      typeforce(types.Buffer, buffer);
      const chunks = [];
      let i = 0;
      while (i < buffer.length) {
        const opcode = buffer[i];
        if (opcode > exports2.OPS.OP_0 && opcode <= exports2.OPS.OP_PUSHDATA4) {
          const d2 = pushdata.decode(buffer, i);
          if (d2 === null)
            return null;
          i += d2.size;
          if (i + d2.number > buffer.length)
            return null;
          const data = buffer.slice(i, i + d2.number);
          i += d2.number;
          const op = asMinimalOP(data);
          if (op !== void 0) {
            chunks.push(op);
          } else {
            chunks.push(data);
          }
        } else {
          chunks.push(opcode);
          i += 1;
        }
      }
      return chunks;
    }
    exports2.decompile = decompile;
    function toASM(chunks) {
      if (chunksIsBuffer(chunks)) {
        chunks = decompile(chunks);
      }
      return chunks.map((chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          const op = asMinimalOP(chunk);
          if (op === void 0)
            return chunk.toString("hex");
          chunk = op;
        }
        return REVERSE_OPS[chunk];
      }).join(" ");
    }
    exports2.toASM = toASM;
    function fromASM(asm) {
      typeforce(types.String, asm);
      return compile(asm.split(" ").map((chunkStr) => {
        if (exports2.OPS[chunkStr] !== void 0)
          return exports2.OPS[chunkStr];
        typeforce(types.Hex, chunkStr);
        return Buffer.from(chunkStr, "hex");
      }));
    }
    exports2.fromASM = fromASM;
    function toStack(chunks) {
      chunks = decompile(chunks);
      typeforce(isPushOnly, chunks);
      return chunks.map((op) => {
        if (singleChunkIsBuffer(op))
          return op;
        if (op === exports2.OPS.OP_0)
          return Buffer.allocUnsafe(0);
        return scriptNumber.encode(op - OP_INT_BASE);
      });
    }
    exports2.toStack = toStack;
    function isCanonicalPubKey(buffer) {
      return ecc.isPoint(buffer);
    }
    exports2.isCanonicalPubKey = isCanonicalPubKey;
    function isDefinedHashType(hashType) {
      const hashTypeMod = hashType & ~192;
      return hashTypeMod > 0 && hashTypeMod < 4;
    }
    exports2.isDefinedHashType = isDefinedHashType;
    function isCanonicalScriptSignature(buffer) {
      if (!Buffer.isBuffer(buffer))
        return false;
      if (!isDefinedHashType(buffer[buffer.length - 1]))
        return false;
      return bip66.check(buffer.slice(0, -1));
    }
    exports2.isCanonicalScriptSignature = isCanonicalScriptSignature;
    exports2.number = scriptNumber;
    exports2.signature = scriptSignature;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/lazy.js
var require_lazy = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/lazy.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function prop(object, name, f2) {
      Object.defineProperty(object, name, {
        configurable: true,
        enumerable: true,
        get() {
          const _value = f2.call(this);
          this[name] = _value;
          return _value;
        },
        set(_value) {
          Object.defineProperty(this, name, {
            configurable: true,
            enumerable: true,
            value: _value,
            writable: true
          });
        }
      });
    }
    exports2.prop = prop;
    function value(f2) {
      let _value;
      return () => {
        if (_value !== void 0)
          return _value;
        _value = f2();
        return _value;
      };
    }
    exports2.value = value;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/embed.js
var require_embed = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/embed.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    function stacksEqual(a2, b2) {
      if (a2.length !== b2.length)
        return false;
      return a2.every((x, i) => {
        return x.equals(b2[i]);
      });
    }
    function p2data(a2, opts) {
      if (!a2.data && !a2.output)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        network: typef.maybe(typef.Object),
        output: typef.maybe(typef.Buffer),
        data: typef.maybe(typef.arrayOf(typef.Buffer))
      }, a2);
      const network = a2.network || networks_1.bitcoin;
      const o = { name: "embed", network };
      lazy.prop(o, "output", () => {
        if (!a2.data)
          return;
        return bscript.compile([OPS.OP_RETURN].concat(a2.data));
      });
      lazy.prop(o, "data", () => {
        if (!a2.output)
          return;
        return bscript.decompile(a2.output).slice(1);
      });
      if (opts.validate) {
        if (a2.output) {
          const chunks = bscript.decompile(a2.output);
          if (chunks[0] !== OPS.OP_RETURN)
            throw new TypeError("Output is invalid");
          if (!chunks.slice(1).every(typef.Buffer))
            throw new TypeError("Output is invalid");
          if (a2.data && !stacksEqual(a2.data, o.data))
            throw new TypeError("Data mismatch");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2data = p2data;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2ms.js
var require_p2ms = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2ms.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var OPS = bscript.OPS;
    var typef = require_typeforce();
    var ecc = require_js();
    var OP_INT_BASE = OPS.OP_RESERVED;
    function stacksEqual(a2, b2) {
      if (a2.length !== b2.length)
        return false;
      return a2.every((x, i) => {
        return x.equals(b2[i]);
      });
    }
    function p2ms(a2, opts) {
      if (!a2.input && !a2.output && !(a2.pubkeys && a2.m !== void 0) && !a2.signatures)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      function isAcceptableSignature(x) {
        return bscript.isCanonicalScriptSignature(x) || (opts.allowIncomplete && x === OPS.OP_0) !== void 0;
      }
      typef({
        network: typef.maybe(typef.Object),
        m: typef.maybe(typef.Number),
        n: typef.maybe(typef.Number),
        output: typef.maybe(typef.Buffer),
        pubkeys: typef.maybe(typef.arrayOf(ecc.isPoint)),
        signatures: typef.maybe(typef.arrayOf(isAcceptableSignature)),
        input: typef.maybe(typef.Buffer)
      }, a2);
      const network = a2.network || networks_1.bitcoin;
      const o = { network };
      let chunks = [];
      let decoded = false;
      function decode(output) {
        if (decoded)
          return;
        decoded = true;
        chunks = bscript.decompile(output);
        o.m = chunks[0] - OP_INT_BASE;
        o.n = chunks[chunks.length - 2] - OP_INT_BASE;
        o.pubkeys = chunks.slice(1, -2);
      }
      lazy.prop(o, "output", () => {
        if (!a2.m)
          return;
        if (!o.n)
          return;
        if (!a2.pubkeys)
          return;
        return bscript.compile([].concat(OP_INT_BASE + a2.m, a2.pubkeys, OP_INT_BASE + o.n, OPS.OP_CHECKMULTISIG));
      });
      lazy.prop(o, "m", () => {
        if (!o.output)
          return;
        decode(o.output);
        return o.m;
      });
      lazy.prop(o, "n", () => {
        if (!o.pubkeys)
          return;
        return o.pubkeys.length;
      });
      lazy.prop(o, "pubkeys", () => {
        if (!a2.output)
          return;
        decode(a2.output);
        return o.pubkeys;
      });
      lazy.prop(o, "signatures", () => {
        if (!a2.input)
          return;
        return bscript.decompile(a2.input).slice(1);
      });
      lazy.prop(o, "input", () => {
        if (!a2.signatures)
          return;
        return bscript.compile([OPS.OP_0].concat(a2.signatures));
      });
      lazy.prop(o, "witness", () => {
        if (!o.input)
          return;
        return [];
      });
      lazy.prop(o, "name", () => {
        if (!o.m || !o.n)
          return;
        return `p2ms(${o.m} of ${o.n})`;
      });
      if (opts.validate) {
        if (a2.output) {
          decode(a2.output);
          if (!typef.Number(chunks[0]))
            throw new TypeError("Output is invalid");
          if (!typef.Number(chunks[chunks.length - 2]))
            throw new TypeError("Output is invalid");
          if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)
            throw new TypeError("Output is invalid");
          if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== chunks.length - 3)
            throw new TypeError("Output is invalid");
          if (!o.pubkeys.every((x) => ecc.isPoint(x)))
            throw new TypeError("Output is invalid");
          if (a2.m !== void 0 && a2.m !== o.m)
            throw new TypeError("m mismatch");
          if (a2.n !== void 0 && a2.n !== o.n)
            throw new TypeError("n mismatch");
          if (a2.pubkeys && !stacksEqual(a2.pubkeys, o.pubkeys))
            throw new TypeError("Pubkeys mismatch");
        }
        if (a2.pubkeys) {
          if (a2.n !== void 0 && a2.n !== a2.pubkeys.length)
            throw new TypeError("Pubkey count mismatch");
          o.n = a2.pubkeys.length;
          if (o.n < o.m)
            throw new TypeError("Pubkey count cannot be less than m");
        }
        if (a2.signatures) {
          if (a2.signatures.length < o.m)
            throw new TypeError("Not enough signatures provided");
          if (a2.signatures.length > o.m)
            throw new TypeError("Too many signatures provided");
        }
        if (a2.input) {
          if (a2.input[0] !== OPS.OP_0)
            throw new TypeError("Input is invalid");
          if (o.signatures.length === 0 || !o.signatures.every(isAcceptableSignature))
            throw new TypeError("Input has invalid signature(s)");
          if (a2.signatures && !stacksEqual(a2.signatures, o.signatures))
            throw new TypeError("Signature mismatch");
          if (a2.m !== void 0 && a2.m !== a2.signatures.length)
            throw new TypeError("Signature count mismatch");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2ms = p2ms;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2pk.js
var require_p2pk = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2pk.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    var ecc = require_js();
    function p2pk(a2, opts) {
      if (!a2.input && !a2.output && !a2.pubkey && !a2.input && !a2.signature)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        network: typef.maybe(typef.Object),
        output: typef.maybe(typef.Buffer),
        pubkey: typef.maybe(ecc.isPoint),
        signature: typef.maybe(bscript.isCanonicalScriptSignature),
        input: typef.maybe(typef.Buffer)
      }, a2);
      const _chunks = lazy.value(() => {
        return bscript.decompile(a2.input);
      });
      const network = a2.network || networks_1.bitcoin;
      const o = { name: "p2pk", network };
      lazy.prop(o, "output", () => {
        if (!a2.pubkey)
          return;
        return bscript.compile([a2.pubkey, OPS.OP_CHECKSIG]);
      });
      lazy.prop(o, "pubkey", () => {
        if (!a2.output)
          return;
        return a2.output.slice(1, -1);
      });
      lazy.prop(o, "signature", () => {
        if (!a2.input)
          return;
        return _chunks()[0];
      });
      lazy.prop(o, "input", () => {
        if (!a2.signature)
          return;
        return bscript.compile([a2.signature]);
      });
      lazy.prop(o, "witness", () => {
        if (!o.input)
          return;
        return [];
      });
      if (opts.validate) {
        if (a2.output) {
          if (a2.output[a2.output.length - 1] !== OPS.OP_CHECKSIG)
            throw new TypeError("Output is invalid");
          if (!ecc.isPoint(o.pubkey))
            throw new TypeError("Output pubkey is invalid");
          if (a2.pubkey && !a2.pubkey.equals(o.pubkey))
            throw new TypeError("Pubkey mismatch");
        }
        if (a2.signature) {
          if (a2.input && !a2.input.equals(o.input))
            throw new TypeError("Signature mismatch");
        }
        if (a2.input) {
          if (_chunks().length !== 1)
            throw new TypeError("Input is invalid");
          if (!bscript.isCanonicalScriptSignature(o.signature))
            throw new TypeError("Input has invalid signature");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2pk = p2pk;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/crypto.js
var require_crypto3 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/crypto.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var createHash = require_browser3();
    var AlgorithmLength = {
      ripemd160: 20,
      sha1: 20,
      sha256: 32,
      hash160: 20,
      hash256: 32
    };
    function asDigest(buffer, preimage, algorithm) {
      const out = Object.assign(buffer, {
        preimage,
        algorithm
      });
      const expectedLength = AlgorithmLength[algorithm];
      if (out.length !== expectedLength)
        throw new Error("bad digest length");
      return out;
    }
    function ripemd160(buffer) {
      let out;
      try {
        out = createHash("rmd160").update(buffer).digest();
      } catch (err) {
        out = createHash("ripemd160").update(buffer).digest();
      }
      return asDigest(out, buffer, "ripemd160");
    }
    exports2.ripemd160 = ripemd160;
    function sha1(buffer) {
      const out = createHash("sha1").update(buffer).digest();
      return asDigest(out, buffer, "sha1");
    }
    exports2.sha1 = sha1;
    function sha256(buffer) {
      const out = createHash("sha256").update(buffer).digest();
      return asDigest(out, buffer, "sha256");
    }
    exports2.sha256 = sha256;
    function hash160(buffer) {
      const out = ripemd160(sha256(buffer));
      return asDigest(out, buffer, "hash160");
    }
    exports2.hash160 = hash160;
    function hash256(buffer) {
      const out = sha256(sha256(buffer));
      return asDigest(out, buffer, "hash256");
    }
    exports2.hash256 = hash256;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2pkh.js
var require_p2pkh = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2pkh.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bcrypto = require_crypto3();
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    var ecc = require_js();
    var bs58check = require_bs58check();
    function p2pkh(a2, opts) {
      if (!a2.address && !a2.hash && !a2.output && !a2.pubkey && !a2.input)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        network: typef.maybe(typef.Object),
        address: typef.maybe(typef.String),
        hash: typef.maybe(typef.BufferN(20)),
        output: typef.maybe(typef.BufferN(25)),
        pubkey: typef.maybe(ecc.isPoint),
        signature: typef.maybe(bscript.isCanonicalScriptSignature),
        input: typef.maybe(typef.Buffer)
      }, a2);
      const _address = lazy.value(() => {
        const payload = bs58check.decode(a2.address);
        const version = payload.readUInt8(0);
        const hash = payload.slice(1);
        return { version, hash };
      });
      const _chunks = lazy.value(() => {
        return bscript.decompile(a2.input);
      });
      const network = a2.network || networks_1.bitcoin;
      const o = { name: "p2pkh", network };
      lazy.prop(o, "address", () => {
        if (!o.hash)
          return;
        const payload = Buffer.allocUnsafe(21);
        payload.writeUInt8(network.pubKeyHash, 0);
        o.hash.copy(payload, 1);
        return bs58check.encode(payload);
      });
      lazy.prop(o, "hash", () => {
        if (a2.output)
          return a2.output.slice(3, 23);
        if (a2.address)
          return _address().hash;
        if (a2.pubkey || o.pubkey)
          return bcrypto.hash160(a2.pubkey || o.pubkey);
      });
      lazy.prop(o, "output", () => {
        if (!o.hash)
          return;
        return bscript.compile([
          OPS.OP_DUP,
          OPS.OP_HASH160,
          o.hash,
          OPS.OP_EQUALVERIFY,
          OPS.OP_CHECKSIG
        ]);
      });
      lazy.prop(o, "pubkey", () => {
        if (!a2.input)
          return;
        return _chunks()[1];
      });
      lazy.prop(o, "signature", () => {
        if (!a2.input)
          return;
        return _chunks()[0];
      });
      lazy.prop(o, "input", () => {
        if (!a2.pubkey)
          return;
        if (!a2.signature)
          return;
        return bscript.compile([a2.signature, a2.pubkey]);
      });
      lazy.prop(o, "witness", () => {
        if (!o.input)
          return;
        return [];
      });
      if (opts.validate) {
        let hash = Buffer.from([]);
        if (a2.address) {
          if (_address().version !== network.pubKeyHash)
            throw new TypeError("Invalid version or Network mismatch");
          if (_address().hash.length !== 20)
            throw new TypeError("Invalid address");
          hash = _address().hash;
        }
        if (a2.hash) {
          if (hash.length > 0 && !hash.equals(a2.hash))
            throw new TypeError("Hash mismatch");
          else
            hash = a2.hash;
        }
        if (a2.output) {
          if (a2.output.length !== 25 || a2.output[0] !== OPS.OP_DUP || a2.output[1] !== OPS.OP_HASH160 || a2.output[2] !== 20 || a2.output[23] !== OPS.OP_EQUALVERIFY || a2.output[24] !== OPS.OP_CHECKSIG)
            throw new TypeError("Output is invalid");
          const hash2 = a2.output.slice(3, 23);
          if (hash.length > 0 && !hash.equals(hash2))
            throw new TypeError("Hash mismatch");
          else
            hash = hash2;
        }
        if (a2.pubkey) {
          const pkh = bcrypto.hash160(a2.pubkey);
          if (hash.length > 0 && !hash.equals(pkh))
            throw new TypeError("Hash mismatch");
          else
            hash = pkh;
        }
        if (a2.input) {
          const chunks = _chunks();
          if (chunks.length !== 2)
            throw new TypeError("Input is invalid");
          if (!bscript.isCanonicalScriptSignature(chunks[0]))
            throw new TypeError("Input has invalid signature");
          if (!ecc.isPoint(chunks[1]))
            throw new TypeError("Input has invalid pubkey");
          if (a2.signature && !a2.signature.equals(chunks[0]))
            throw new TypeError("Signature mismatch");
          if (a2.pubkey && !a2.pubkey.equals(chunks[1]))
            throw new TypeError("Pubkey mismatch");
          const pkh = bcrypto.hash160(chunks[1]);
          if (hash.length > 0 && !hash.equals(pkh))
            throw new TypeError("Hash mismatch");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2pkh = p2pkh;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2sh.js
var require_p2sh = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2sh.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bcrypto = require_crypto3();
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    var bs58check = require_bs58check();
    function stacksEqual(a2, b2) {
      if (a2.length !== b2.length)
        return false;
      return a2.every((x, i) => {
        return x.equals(b2[i]);
      });
    }
    function p2sh(a2, opts) {
      if (!a2.address && !a2.hash && !a2.output && !a2.redeem && !a2.input)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        network: typef.maybe(typef.Object),
        address: typef.maybe(typef.String),
        hash: typef.maybe(typef.BufferN(20)),
        output: typef.maybe(typef.BufferN(23)),
        redeem: typef.maybe({
          network: typef.maybe(typef.Object),
          output: typef.maybe(typef.Buffer),
          input: typef.maybe(typef.Buffer),
          witness: typef.maybe(typef.arrayOf(typef.Buffer))
        }),
        input: typef.maybe(typef.Buffer),
        witness: typef.maybe(typef.arrayOf(typef.Buffer))
      }, a2);
      let network = a2.network;
      if (!network) {
        network = a2.redeem && a2.redeem.network || networks_1.bitcoin;
      }
      const o = { network };
      const _address = lazy.value(() => {
        const payload = bs58check.decode(a2.address);
        const version = payload.readUInt8(0);
        const hash = payload.slice(1);
        return { version, hash };
      });
      const _chunks = lazy.value(() => {
        return bscript.decompile(a2.input);
      });
      const _redeem = lazy.value(() => {
        const chunks = _chunks();
        return {
          network,
          output: chunks[chunks.length - 1],
          input: bscript.compile(chunks.slice(0, -1)),
          witness: a2.witness || []
        };
      });
      lazy.prop(o, "address", () => {
        if (!o.hash)
          return;
        const payload = Buffer.allocUnsafe(21);
        payload.writeUInt8(o.network.scriptHash, 0);
        o.hash.copy(payload, 1);
        return bs58check.encode(payload);
      });
      lazy.prop(o, "hash", () => {
        if (a2.output)
          return a2.output.slice(2, 22);
        if (a2.address)
          return _address().hash;
        if (o.redeem && o.redeem.output)
          return bcrypto.hash160(o.redeem.output);
      });
      lazy.prop(o, "output", () => {
        if (!o.hash)
          return;
        return bscript.compile([OPS.OP_HASH160, o.hash, OPS.OP_EQUAL]);
      });
      lazy.prop(o, "redeem", () => {
        if (!a2.input)
          return;
        return _redeem();
      });
      lazy.prop(o, "input", () => {
        if (!a2.redeem || !a2.redeem.input || !a2.redeem.output)
          return;
        return bscript.compile([].concat(bscript.decompile(a2.redeem.input), a2.redeem.output));
      });
      lazy.prop(o, "witness", () => {
        if (o.redeem && o.redeem.witness)
          return o.redeem.witness;
        if (o.input)
          return [];
      });
      lazy.prop(o, "name", () => {
        const nameParts = ["p2sh"];
        if (o.redeem !== void 0)
          nameParts.push(o.redeem.name);
        return nameParts.join("-");
      });
      if (opts.validate) {
        let hash = Buffer.from([]);
        if (a2.address) {
          if (_address().version !== network.scriptHash)
            throw new TypeError("Invalid version or Network mismatch");
          if (_address().hash.length !== 20)
            throw new TypeError("Invalid address");
          hash = _address().hash;
        }
        if (a2.hash) {
          if (hash.length > 0 && !hash.equals(a2.hash))
            throw new TypeError("Hash mismatch");
          else
            hash = a2.hash;
        }
        if (a2.output) {
          if (a2.output.length !== 23 || a2.output[0] !== OPS.OP_HASH160 || a2.output[1] !== 20 || a2.output[22] !== OPS.OP_EQUAL)
            throw new TypeError("Output is invalid");
          const hash2 = a2.output.slice(2, 22);
          if (hash.length > 0 && !hash.equals(hash2))
            throw new TypeError("Hash mismatch");
          else
            hash = hash2;
        }
        const checkRedeem = (redeem) => {
          if (redeem.output) {
            const decompile = bscript.decompile(redeem.output);
            if (!decompile || decompile.length < 1)
              throw new TypeError("Redeem.output too short");
            const hash2 = bcrypto.hash160(redeem.output);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (redeem.input) {
            const hasInput = redeem.input.length > 0;
            const hasWitness = redeem.witness && redeem.witness.length > 0;
            if (!hasInput && !hasWitness)
              throw new TypeError("Empty input");
            if (hasInput && hasWitness)
              throw new TypeError("Input and witness provided");
            if (hasInput) {
              const richunks = bscript.decompile(redeem.input);
              if (!bscript.isPushOnly(richunks))
                throw new TypeError("Non push-only scriptSig");
            }
          }
        };
        if (a2.input) {
          const chunks = _chunks();
          if (!chunks || chunks.length < 1)
            throw new TypeError("Input too short");
          if (!Buffer.isBuffer(_redeem().output))
            throw new TypeError("Input is invalid");
          checkRedeem(_redeem());
        }
        if (a2.redeem) {
          if (a2.redeem.network && a2.redeem.network !== network)
            throw new TypeError("Network mismatch");
          if (a2.input) {
            const redeem = _redeem();
            if (a2.redeem.output && !a2.redeem.output.equals(redeem.output))
              throw new TypeError("Redeem.output mismatch");
            if (a2.redeem.input && !a2.redeem.input.equals(redeem.input))
              throw new TypeError("Redeem.input mismatch");
          }
          checkRedeem(a2.redeem);
        }
        if (a2.witness) {
          if (a2.redeem && a2.redeem.witness && !stacksEqual(a2.redeem.witness, a2.witness))
            throw new TypeError("Witness and redeem.witness mismatch");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2sh = p2sh;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2wpkh.js
var require_p2wpkh = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2wpkh.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bcrypto = require_crypto3();
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    var ecc = require_js();
    var bech32 = require_bech32();
    var EMPTY_BUFFER = Buffer.alloc(0);
    function p2wpkh(a2, opts) {
      if (!a2.address && !a2.hash && !a2.output && !a2.pubkey && !a2.witness)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        address: typef.maybe(typef.String),
        hash: typef.maybe(typef.BufferN(20)),
        input: typef.maybe(typef.BufferN(0)),
        network: typef.maybe(typef.Object),
        output: typef.maybe(typef.BufferN(22)),
        pubkey: typef.maybe(ecc.isPoint),
        signature: typef.maybe(bscript.isCanonicalScriptSignature),
        witness: typef.maybe(typef.arrayOf(typef.Buffer))
      }, a2);
      const _address = lazy.value(() => {
        const result = bech32.decode(a2.address);
        const version = result.words.shift();
        const data = bech32.fromWords(result.words);
        return {
          version,
          prefix: result.prefix,
          data: Buffer.from(data)
        };
      });
      const network = a2.network || networks_1.bitcoin;
      const o = { name: "p2wpkh", network };
      lazy.prop(o, "address", () => {
        if (!o.hash)
          return;
        const words = bech32.toWords(o.hash);
        words.unshift(0);
        return bech32.encode(network.bech32, words);
      });
      lazy.prop(o, "hash", () => {
        if (a2.output)
          return a2.output.slice(2, 22);
        if (a2.address)
          return _address().data;
        if (a2.pubkey || o.pubkey)
          return bcrypto.hash160(a2.pubkey || o.pubkey);
      });
      lazy.prop(o, "output", () => {
        if (!o.hash)
          return;
        return bscript.compile([OPS.OP_0, o.hash]);
      });
      lazy.prop(o, "pubkey", () => {
        if (a2.pubkey)
          return a2.pubkey;
        if (!a2.witness)
          return;
        return a2.witness[1];
      });
      lazy.prop(o, "signature", () => {
        if (!a2.witness)
          return;
        return a2.witness[0];
      });
      lazy.prop(o, "input", () => {
        if (!o.witness)
          return;
        return EMPTY_BUFFER;
      });
      lazy.prop(o, "witness", () => {
        if (!a2.pubkey)
          return;
        if (!a2.signature)
          return;
        return [a2.signature, a2.pubkey];
      });
      if (opts.validate) {
        let hash = Buffer.from([]);
        if (a2.address) {
          if (network && network.bech32 !== _address().prefix)
            throw new TypeError("Invalid prefix or Network mismatch");
          if (_address().version !== 0)
            throw new TypeError("Invalid address version");
          if (_address().data.length !== 20)
            throw new TypeError("Invalid address data");
          hash = _address().data;
        }
        if (a2.hash) {
          if (hash.length > 0 && !hash.equals(a2.hash))
            throw new TypeError("Hash mismatch");
          else
            hash = a2.hash;
        }
        if (a2.output) {
          if (a2.output.length !== 22 || a2.output[0] !== OPS.OP_0 || a2.output[1] !== 20)
            throw new TypeError("Output is invalid");
          if (hash.length > 0 && !hash.equals(a2.output.slice(2)))
            throw new TypeError("Hash mismatch");
          else
            hash = a2.output.slice(2);
        }
        if (a2.pubkey) {
          const pkh = bcrypto.hash160(a2.pubkey);
          if (hash.length > 0 && !hash.equals(pkh))
            throw new TypeError("Hash mismatch");
          else
            hash = pkh;
          if (!ecc.isPoint(a2.pubkey) || a2.pubkey.length !== 33)
            throw new TypeError("Invalid pubkey for p2wpkh");
        }
        if (a2.witness) {
          if (a2.witness.length !== 2)
            throw new TypeError("Witness is invalid");
          if (!bscript.isCanonicalScriptSignature(a2.witness[0]))
            throw new TypeError("Witness has invalid signature");
          if (!ecc.isPoint(a2.witness[1]) || a2.witness[1].length !== 33)
            throw new TypeError("Witness has invalid pubkey");
          if (a2.signature && !a2.signature.equals(a2.witness[0]))
            throw new TypeError("Signature mismatch");
          if (a2.pubkey && !a2.pubkey.equals(a2.witness[1]))
            throw new TypeError("Pubkey mismatch");
          const pkh = bcrypto.hash160(a2.witness[1]);
          if (hash.length > 0 && !hash.equals(pkh))
            throw new TypeError("Hash mismatch");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2wpkh = p2wpkh;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2wsh.js
var require_p2wsh = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/p2wsh.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bcrypto = require_crypto3();
    var networks_1 = require_networks();
    var bscript = require_script();
    var lazy = require_lazy();
    var typef = require_typeforce();
    var OPS = bscript.OPS;
    var ecc = require_js();
    var bech32 = require_bech32();
    var EMPTY_BUFFER = Buffer.alloc(0);
    function stacksEqual(a2, b2) {
      if (a2.length !== b2.length)
        return false;
      return a2.every((x, i) => {
        return x.equals(b2[i]);
      });
    }
    function chunkHasUncompressedPubkey(chunk) {
      if (Buffer.isBuffer(chunk) && chunk.length === 65 && chunk[0] === 4 && ecc.isPoint(chunk)) {
        return true;
      } else {
        return false;
      }
    }
    function p2wsh(a2, opts) {
      if (!a2.address && !a2.hash && !a2.output && !a2.redeem && !a2.witness)
        throw new TypeError("Not enough data");
      opts = Object.assign({ validate: true }, opts || {});
      typef({
        network: typef.maybe(typef.Object),
        address: typef.maybe(typef.String),
        hash: typef.maybe(typef.BufferN(32)),
        output: typef.maybe(typef.BufferN(34)),
        redeem: typef.maybe({
          input: typef.maybe(typef.Buffer),
          network: typef.maybe(typef.Object),
          output: typef.maybe(typef.Buffer),
          witness: typef.maybe(typef.arrayOf(typef.Buffer))
        }),
        input: typef.maybe(typef.BufferN(0)),
        witness: typef.maybe(typef.arrayOf(typef.Buffer))
      }, a2);
      const _address = lazy.value(() => {
        const result = bech32.decode(a2.address);
        const version = result.words.shift();
        const data = bech32.fromWords(result.words);
        return {
          version,
          prefix: result.prefix,
          data: Buffer.from(data)
        };
      });
      const _rchunks = lazy.value(() => {
        return bscript.decompile(a2.redeem.input);
      });
      let network = a2.network;
      if (!network) {
        network = a2.redeem && a2.redeem.network || networks_1.bitcoin;
      }
      const o = { network };
      lazy.prop(o, "address", () => {
        if (!o.hash)
          return;
        const words = bech32.toWords(o.hash);
        words.unshift(0);
        return bech32.encode(network.bech32, words);
      });
      lazy.prop(o, "hash", () => {
        if (a2.output)
          return a2.output.slice(2);
        if (a2.address)
          return _address().data;
        if (o.redeem && o.redeem.output)
          return bcrypto.sha256(o.redeem.output);
      });
      lazy.prop(o, "output", () => {
        if (!o.hash)
          return;
        return bscript.compile([OPS.OP_0, o.hash]);
      });
      lazy.prop(o, "redeem", () => {
        if (!a2.witness)
          return;
        return {
          output: a2.witness[a2.witness.length - 1],
          input: EMPTY_BUFFER,
          witness: a2.witness.slice(0, -1)
        };
      });
      lazy.prop(o, "input", () => {
        if (!o.witness)
          return;
        return EMPTY_BUFFER;
      });
      lazy.prop(o, "witness", () => {
        if (a2.redeem && a2.redeem.input && a2.redeem.input.length > 0 && a2.redeem.output && a2.redeem.output.length > 0) {
          const stack = bscript.toStack(_rchunks());
          o.redeem = Object.assign({ witness: stack }, a2.redeem);
          o.redeem.input = EMPTY_BUFFER;
          return [].concat(stack, a2.redeem.output);
        }
        if (!a2.redeem)
          return;
        if (!a2.redeem.output)
          return;
        if (!a2.redeem.witness)
          return;
        return [].concat(a2.redeem.witness, a2.redeem.output);
      });
      lazy.prop(o, "name", () => {
        const nameParts = ["p2wsh"];
        if (o.redeem !== void 0)
          nameParts.push(o.redeem.name);
        return nameParts.join("-");
      });
      if (opts.validate) {
        let hash = Buffer.from([]);
        if (a2.address) {
          if (_address().prefix !== network.bech32)
            throw new TypeError("Invalid prefix or Network mismatch");
          if (_address().version !== 0)
            throw new TypeError("Invalid address version");
          if (_address().data.length !== 32)
            throw new TypeError("Invalid address data");
          hash = _address().data;
        }
        if (a2.hash) {
          if (hash.length > 0 && !hash.equals(a2.hash))
            throw new TypeError("Hash mismatch");
          else
            hash = a2.hash;
        }
        if (a2.output) {
          if (a2.output.length !== 34 || a2.output[0] !== OPS.OP_0 || a2.output[1] !== 32)
            throw new TypeError("Output is invalid");
          const hash2 = a2.output.slice(2);
          if (hash.length > 0 && !hash.equals(hash2))
            throw new TypeError("Hash mismatch");
          else
            hash = hash2;
        }
        if (a2.redeem) {
          if (a2.redeem.network && a2.redeem.network !== network)
            throw new TypeError("Network mismatch");
          if (a2.redeem.input && a2.redeem.input.length > 0 && a2.redeem.witness && a2.redeem.witness.length > 0)
            throw new TypeError("Ambiguous witness source");
          if (a2.redeem.output) {
            if (bscript.decompile(a2.redeem.output).length === 0)
              throw new TypeError("Redeem.output is invalid");
            const hash2 = bcrypto.sha256(a2.redeem.output);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (a2.redeem.input && !bscript.isPushOnly(_rchunks()))
            throw new TypeError("Non push-only scriptSig");
          if (a2.witness && a2.redeem.witness && !stacksEqual(a2.witness, a2.redeem.witness))
            throw new TypeError("Witness and redeem.witness mismatch");
          if (a2.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a2.redeem.output && (bscript.decompile(a2.redeem.output) || []).some(chunkHasUncompressedPubkey)) {
            throw new TypeError("redeem.input or redeem.output contains uncompressed pubkey");
          }
        }
        if (a2.witness && a2.witness.length > 0) {
          const wScript = a2.witness[a2.witness.length - 1];
          if (a2.redeem && a2.redeem.output && !a2.redeem.output.equals(wScript))
            throw new TypeError("Witness and redeem.output mismatch");
          if (a2.witness.some(chunkHasUncompressedPubkey) || (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey))
            throw new TypeError("Witness contains uncompressed pubkey");
        }
      }
      return Object.assign(o, a2);
    }
    exports2.p2wsh = p2wsh;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/index.js
var require_payments = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/payments/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var embed_1 = require_embed();
    exports2.embed = embed_1.p2data;
    var p2ms_1 = require_p2ms();
    exports2.p2ms = p2ms_1.p2ms;
    var p2pk_1 = require_p2pk();
    exports2.p2pk = p2pk_1.p2pk;
    var p2pkh_1 = require_p2pkh();
    exports2.p2pkh = p2pkh_1.p2pkh;
    var p2sh_1 = require_p2sh();
    exports2.p2sh = p2sh_1.p2sh;
    var p2wpkh_1 = require_p2wpkh();
    exports2.p2wpkh = p2wpkh_1.p2wpkh;
    var p2wsh_1 = require_p2wsh();
    exports2.p2wsh = p2wsh_1.p2wsh;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/address.js
var require_address = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/address.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cashaddr = require_cashaddr();
    var networks = require_networks();
    var payments = require_payments();
    var bscript = require_script();
    var types = require_types2();
    var bech32 = require_bech32();
    var bs58check = require_bs58check();
    var typeforce = require_typeforce();
    function fromBase58Check(address) {
      const isBCH = cashaddr.VALID_PREFIXES.indexOf(address.split(":")[0]) > -1;
      if (isBCH) {
        const result = cashaddr.decode(address);
        let network;
        switch (result.prefix) {
          case "bitcoincash":
            network = networks.bitcoin;
            break;
          case "bchtest":
            network = networks.testnet;
            break;
          case "bchreg":
            network = networks.regtest;
            break;
        }
        let version;
        switch (result.type) {
          case "P2PKH":
            version = network.pubKeyHash;
            break;
          case "P2SH":
            version = network.scriptHash;
            break;
        }
        if (result.hash.length < 20)
          throw new TypeError(address + " is too short");
        if (result.hash.length > 20)
          throw new TypeError(address + " is too long");
        return {
          version,
          hash: Buffer.from(result.hash)
        };
      } else {
        const payload = bs58check.decode(address);
        if (payload.length < 21)
          throw new TypeError(address + " is too short");
        if (payload.length > 21)
          throw new TypeError(address + " is too long");
        const version = payload.readUInt8(0);
        const hash = payload.slice(1);
        return { version, hash };
      }
    }
    exports2.fromBase58Check = fromBase58Check;
    function fromBech32(address) {
      const result = bech32.decode(address);
      const data = bech32.fromWords(result.words.slice(1));
      return {
        version: result.words[0],
        prefix: result.prefix,
        data: Buffer.from(data)
      };
    }
    exports2.fromBech32 = fromBech32;
    function toBase58Check(hash, version) {
      typeforce(types.tuple(types.Hash160bit, types.UInt8), arguments);
      const payload = Buffer.allocUnsafe(21);
      payload.writeUInt8(version, 0);
      hash.copy(payload, 1);
      return bs58check.encode(payload);
    }
    exports2.toBase58Check = toBase58Check;
    function toBech32(data, version, prefix) {
      const words = bech32.toWords(data);
      words.unshift(version);
      return bech32.encode(prefix, words);
    }
    exports2.toBech32 = toBech32;
    function fromOutputScript(output, network) {
      network = network || networks.bitcoin;
      try {
        return payments.p2pkh({ output, network }).address;
      } catch (e2) {
      }
      try {
        return payments.p2sh({ output, network }).address;
      } catch (e2) {
      }
      try {
        return payments.p2wpkh({ output, network }).address;
      } catch (e2) {
      }
      try {
        return payments.p2wsh({ output, network }).address;
      } catch (e2) {
      }
      throw new Error(bscript.toASM(output) + " has no matching Address");
    }
    exports2.fromOutputScript = fromOutputScript;
    function toOutputScript(address, network) {
      network = network || networks.bitcoin;
      let decodeBase58;
      let decodeBech32;
      try {
        decodeBase58 = fromBase58Check(address);
      } catch (e2) {
      }
      if (decodeBase58) {
        if (decodeBase58.version === network.pubKeyHash)
          return payments.p2pkh({ hash: decodeBase58.hash }).output;
        if (decodeBase58.version === network.scriptHash)
          return payments.p2sh({ hash: decodeBase58.hash }).output;
      } else {
        try {
          decodeBech32 = fromBech32(address);
        } catch (e2) {
        }
        if (decodeBech32) {
          if (decodeBech32.prefix !== network.bech32)
            throw new Error(address + " has an invalid prefix");
          if (decodeBech32.version === 0) {
            if (decodeBech32.data.length === 20)
              return payments.p2wpkh({ hash: decodeBech32.data }).output;
            if (decodeBech32.data.length === 32)
              return payments.p2wsh({ hash: decodeBech32.data }).output;
          }
        }
      }
      throw new Error(address + " has no matching Script");
    }
    exports2.toOutputScript = toOutputScript;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/ecpair.js
var require_ecpair = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/ecpair.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var NETWORKS = require_networks();
    var types = require_types2();
    var ecc = require_js();
    var randomBytes = require_browser();
    var typeforce = require_typeforce();
    var wif = require_wif();
    var isOptions = typeforce.maybe(typeforce.compile({
      compressed: types.maybe(types.Boolean),
      network: types.maybe(types.Network)
    }));
    var ECPair = class {
      constructor(__D, __Q, options) {
        this.__D = __D;
        this.__Q = __Q;
        this.lowR = false;
        if (options === void 0)
          options = {};
        this.compressed = options.compressed === void 0 ? true : options.compressed;
        this.network = options.network || NETWORKS.bitcoin;
        if (__Q !== void 0)
          this.__Q = ecc.pointCompress(__Q, this.compressed);
      }
      get privateKey() {
        return this.__D;
      }
      get publicKey() {
        if (!this.__Q)
          this.__Q = ecc.pointFromScalar(this.__D, this.compressed);
        return this.__Q;
      }
      toWIF() {
        if (!this.__D)
          throw new Error("Missing private key");
        return wif.encode(this.network.wif, this.__D, this.compressed);
      }
      sign(hash, lowR) {
        if (!this.__D)
          throw new Error("Missing private key");
        if (lowR === void 0)
          lowR = this.lowR;
        if (lowR === false) {
          return ecc.sign(hash, this.__D);
        } else {
          let sig = ecc.sign(hash, this.__D);
          const extraData = Buffer.alloc(32, 0);
          let counter = 0;
          while (sig[0] > 127) {
            counter++;
            extraData.writeUIntLE(counter, 0, 6);
            sig = ecc.signWithEntropy(hash, this.__D, extraData);
          }
          return sig;
        }
      }
      verify(hash, signature) {
        return ecc.verify(hash, this.publicKey, signature);
      }
    };
    function fromPrivateKey(buffer, options) {
      typeforce(types.Buffer256bit, buffer);
      if (!ecc.isPrivate(buffer))
        throw new TypeError("Private key not in range [1, n)");
      typeforce(isOptions, options);
      return new ECPair(buffer, void 0, options);
    }
    exports2.fromPrivateKey = fromPrivateKey;
    function fromPublicKey(buffer, options) {
      typeforce(ecc.isPoint, buffer);
      typeforce(isOptions, options);
      return new ECPair(void 0, buffer, options);
    }
    exports2.fromPublicKey = fromPublicKey;
    function fromWIF(wifString, network) {
      const decoded = wif.decode(wifString);
      const version = decoded.version;
      if (types.Array(network)) {
        network = network.filter((x) => {
          return version === x.wif;
        }).pop();
        if (!network)
          throw new Error("Unknown network version");
      } else {
        network = network || NETWORKS.bitcoin;
        if (version !== network.wif)
          throw new Error("Invalid network version");
      }
      return fromPrivateKey(decoded.privateKey, {
        compressed: decoded.compressed,
        network
      });
    }
    exports2.fromWIF = fromWIF;
    function makeRandom(options) {
      typeforce(isOptions, options);
      if (options === void 0)
        options = {};
      const rng = options.rng || randomBytes;
      let d2;
      do {
        d2 = rng(32);
        typeforce(types.Buffer256bit, d2);
      } while (!ecc.isPrivate(d2));
      return fromPrivateKey(d2, options);
    }
    exports2.makeRandom = makeRandom;
  }
});

// node_modules/varuint-bitcoin/index.js
var require_varuint_bitcoin = __commonJS({
  "node_modules/varuint-bitcoin/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Buffer2 = require_safe_buffer().Buffer;
    var MAX_SAFE_INTEGER = 9007199254740991;
    function checkUInt53(n) {
      if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
        throw new RangeError("value out of range");
    }
    function encode(number, buffer, offset) {
      checkUInt53(number);
      if (!buffer)
        buffer = Buffer2.allocUnsafe(encodingLength(number));
      if (!Buffer2.isBuffer(buffer))
        throw new TypeError("buffer must be a Buffer instance");
      if (!offset)
        offset = 0;
      if (number < 253) {
        buffer.writeUInt8(number, offset);
        encode.bytes = 1;
      } else if (number <= 65535) {
        buffer.writeUInt8(253, offset);
        buffer.writeUInt16LE(number, offset + 1);
        encode.bytes = 3;
      } else if (number <= 4294967295) {
        buffer.writeUInt8(254, offset);
        buffer.writeUInt32LE(number, offset + 1);
        encode.bytes = 5;
      } else {
        buffer.writeUInt8(255, offset);
        buffer.writeUInt32LE(number >>> 0, offset + 1);
        buffer.writeUInt32LE(number / 4294967296 | 0, offset + 5);
        encode.bytes = 9;
      }
      return buffer;
    }
    function decode(buffer, offset) {
      if (!Buffer2.isBuffer(buffer))
        throw new TypeError("buffer must be a Buffer instance");
      if (!offset)
        offset = 0;
      var first = buffer.readUInt8(offset);
      if (first < 253) {
        decode.bytes = 1;
        return first;
      } else if (first === 253) {
        decode.bytes = 3;
        return buffer.readUInt16LE(offset + 1);
      } else if (first === 254) {
        decode.bytes = 5;
        return buffer.readUInt32LE(offset + 1);
      } else {
        decode.bytes = 9;
        var lo = buffer.readUInt32LE(offset + 1);
        var hi = buffer.readUInt32LE(offset + 5);
        var number = hi * 4294967296 + lo;
        checkUInt53(number);
        return number;
      }
    }
    function encodingLength(number) {
      checkUInt53(number);
      return number < 253 ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;
    }
    module2.exports = { encode, decode, encodingLength };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/bufferutils.js
var require_bufferutils = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/bufferutils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var types = require_types2();
    var typeforce = require_typeforce();
    var varuint = require_varuint_bitcoin();
    function verifuint(value, max) {
      if (typeof value !== "number")
        throw new Error("cannot write a non-number as a number");
      if (value < 0)
        throw new Error("specified a negative value for writing an unsigned value");
      if (value > max)
        throw new Error("RangeError: value out of range");
      if (Math.floor(value) !== value)
        throw new Error("value has a fractional component");
    }
    function readUInt64LE(buffer, offset) {
      const a2 = buffer.readUInt32LE(offset);
      let b2 = buffer.readUInt32LE(offset + 4);
      b2 *= 4294967296;
      verifuint(b2 + a2, 9007199254740991);
      return b2 + a2;
    }
    exports2.readUInt64LE = readUInt64LE;
    function writeUInt64LE(buffer, value, offset) {
      verifuint(value, 9007199254740991);
      buffer.writeInt32LE(value & -1, offset);
      buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
      return offset + 8;
    }
    exports2.writeUInt64LE = writeUInt64LE;
    function reverseBuffer(buffer) {
      if (buffer.length < 1)
        return buffer;
      let j = buffer.length - 1;
      let tmp = 0;
      for (let i = 0; i < buffer.length / 2; i++) {
        tmp = buffer[i];
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        j--;
      }
      return buffer;
    }
    exports2.reverseBuffer = reverseBuffer;
    function cloneBuffer(buffer) {
      const clone = Buffer.allocUnsafe(buffer.length);
      buffer.copy(clone);
      return clone;
    }
    exports2.cloneBuffer = cloneBuffer;
    var BufferWriter = class {
      constructor(buffer, offset = 0) {
        this.buffer = buffer;
        this.offset = offset;
        typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
      }
      writeUInt8(i) {
        this.offset = this.buffer.writeUInt8(i, this.offset);
      }
      writeInt32(i) {
        this.offset = this.buffer.writeInt32LE(i, this.offset);
      }
      writeUInt32(i) {
        this.offset = this.buffer.writeUInt32LE(i, this.offset);
      }
      writeUInt64(i) {
        this.offset = writeUInt64LE(this.buffer, i, this.offset);
      }
      writeVarInt(i) {
        varuint.encode(i, this.buffer, this.offset);
        this.offset += varuint.encode.bytes;
      }
      writeSlice(slice) {
        if (this.buffer.length < this.offset + slice.length) {
          throw new Error("Cannot write slice out of bounds");
        }
        this.offset += slice.copy(this.buffer, this.offset);
      }
      writeVarSlice(slice) {
        this.writeVarInt(slice.length);
        this.writeSlice(slice);
      }
      writeVector(vector) {
        this.writeVarInt(vector.length);
        vector.forEach((buf) => this.writeVarSlice(buf));
      }
    };
    exports2.BufferWriter = BufferWriter;
    var BufferReader = class {
      constructor(buffer, offset = 0) {
        this.buffer = buffer;
        this.offset = offset;
        typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
      }
      readUInt8() {
        const result = this.buffer.readUInt8(this.offset);
        this.offset++;
        return result;
      }
      readInt32() {
        const result = this.buffer.readInt32LE(this.offset);
        this.offset += 4;
        return result;
      }
      readUInt32() {
        const result = this.buffer.readUInt32LE(this.offset);
        this.offset += 4;
        return result;
      }
      readUInt64() {
        const result = readUInt64LE(this.buffer, this.offset);
        this.offset += 8;
        return result;
      }
      readVarInt() {
        const vi = varuint.decode(this.buffer, this.offset);
        this.offset += varuint.decode.bytes;
        return vi;
      }
      readSlice(n) {
        if (this.buffer.length < this.offset + n) {
          throw new Error("Cannot read slice out of bounds");
        }
        const result = this.buffer.slice(this.offset, this.offset + n);
        this.offset += n;
        return result;
      }
      readVarSlice() {
        return this.readSlice(this.readVarInt());
      }
      readVector() {
        const count = this.readVarInt();
        const vector = [];
        for (let i = 0; i < count; i++)
          vector.push(this.readVarSlice());
        return vector;
      }
    };
    exports2.BufferReader = BufferReader;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/transaction.js
var require_transaction = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/transaction.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bufferutils_1 = require_bufferutils();
    var bcrypto = require_crypto3();
    var bscript = require_script();
    var script_1 = require_script();
    var types = require_types2();
    var typeforce = require_typeforce();
    var varuint = require_varuint_bitcoin();
    function varSliceSize(someScript) {
      const length = someScript.length;
      return varuint.encodingLength(length) + length;
    }
    function vectorSize(someVector) {
      const length = someVector.length;
      return varuint.encodingLength(length) + someVector.reduce((sum, witness) => {
        return sum + varSliceSize(witness);
      }, 0);
    }
    var EMPTY_SCRIPT = Buffer.allocUnsafe(0);
    var EMPTY_WITNESS = [];
    var ZERO = Buffer.from("0000000000000000000000000000000000000000000000000000000000000000", "hex");
    var ONE = Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex");
    var VALUE_UINT64_MAX = Buffer.from("ffffffffffffffff", "hex");
    var BLANK_OUTPUT = {
      script: EMPTY_SCRIPT,
      valueBuffer: VALUE_UINT64_MAX
    };
    function isOutput(out) {
      return out.value !== void 0;
    }
    var Transaction = class {
      constructor() {
        this.version = 1;
        this.locktime = 0;
        this.ins = [];
        this.outs = [];
      }
      static fromBuffer(buffer, _NO_STRICT) {
        const bufferReader = new bufferutils_1.BufferReader(buffer);
        const tx = new Transaction();
        tx.version = bufferReader.readInt32();
        const marker = bufferReader.readUInt8();
        const flag = bufferReader.readUInt8();
        let hasWitnesses = false;
        if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG) {
          hasWitnesses = true;
        } else {
          bufferReader.offset -= 2;
        }
        const vinLen = bufferReader.readVarInt();
        for (let i = 0; i < vinLen; ++i) {
          tx.ins.push({
            hash: bufferReader.readSlice(32),
            index: bufferReader.readUInt32(),
            script: bufferReader.readVarSlice(),
            sequence: bufferReader.readUInt32(),
            witness: EMPTY_WITNESS
          });
        }
        const voutLen = bufferReader.readVarInt();
        for (let i = 0; i < voutLen; ++i) {
          tx.outs.push({
            value: bufferReader.readUInt64(),
            script: bufferReader.readVarSlice()
          });
        }
        if (hasWitnesses) {
          for (let i = 0; i < vinLen; ++i) {
            tx.ins[i].witness = bufferReader.readVector();
          }
          if (!tx.hasWitnesses())
            throw new Error("Transaction has superfluous witness data");
        }
        tx.locktime = bufferReader.readUInt32();
        if (_NO_STRICT)
          return tx;
        if (bufferReader.offset !== buffer.length)
          throw new Error("Transaction has unexpected data");
        return tx;
      }
      static fromHex(hex) {
        return Transaction.fromBuffer(Buffer.from(hex, "hex"), false);
      }
      static isCoinbaseHash(buffer) {
        typeforce(types.Hash256bit, buffer);
        for (let i = 0; i < 32; ++i) {
          if (buffer[i] !== 0)
            return false;
        }
        return true;
      }
      isCoinbase() {
        return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);
      }
      addInput(hash, index, sequence, scriptSig) {
        typeforce(types.tuple(types.Hash256bit, types.UInt32, types.maybe(types.UInt32), types.maybe(types.Buffer)), arguments);
        if (types.Null(sequence)) {
          sequence = Transaction.DEFAULT_SEQUENCE;
        }
        return this.ins.push({
          hash,
          index,
          script: scriptSig || EMPTY_SCRIPT,
          sequence,
          witness: EMPTY_WITNESS
        }) - 1;
      }
      addOutput(scriptPubKey, value) {
        typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);
        return this.outs.push({
          script: scriptPubKey,
          value
        }) - 1;
      }
      hasWitnesses() {
        return this.ins.some((x) => {
          return x.witness.length !== 0;
        });
      }
      weight() {
        const base = this.byteLength(false);
        const total = this.byteLength(true);
        return base * 3 + total;
      }
      virtualSize() {
        return Math.ceil(this.weight() / 4);
      }
      byteLength(_ALLOW_WITNESS = true) {
        const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
        return (hasWitnesses ? 10 : 8) + varuint.encodingLength(this.ins.length) + varuint.encodingLength(this.outs.length) + this.ins.reduce((sum, input) => {
          return sum + 40 + varSliceSize(input.script);
        }, 0) + this.outs.reduce((sum, output) => {
          return sum + 8 + varSliceSize(output.script);
        }, 0) + (hasWitnesses ? this.ins.reduce((sum, input) => {
          return sum + vectorSize(input.witness);
        }, 0) : 0);
      }
      clone() {
        const newTx = new Transaction();
        newTx.version = this.version;
        newTx.locktime = this.locktime;
        newTx.ins = this.ins.map((txIn) => {
          return {
            hash: txIn.hash,
            index: txIn.index,
            script: txIn.script,
            sequence: txIn.sequence,
            witness: txIn.witness
          };
        });
        newTx.outs = this.outs.map((txOut) => {
          return {
            script: txOut.script,
            value: txOut.value
          };
        });
        return newTx;
      }
      hashForSignature(inIndex, prevOutScript, hashType) {
        typeforce(types.tuple(types.UInt32, types.Buffer, types.Number), arguments);
        if (inIndex >= this.ins.length)
          return ONE;
        const ourScript = bscript.compile(bscript.decompile(prevOutScript).filter((x) => {
          return x !== script_1.OPS.OP_CODESEPARATOR;
        }));
        const txTmp = this.clone();
        if ((hashType & 31) === Transaction.SIGHASH_NONE) {
          txTmp.outs = [];
          txTmp.ins.forEach((input, i) => {
            if (i === inIndex)
              return;
            input.sequence = 0;
          });
        } else if ((hashType & 31) === Transaction.SIGHASH_SINGLE) {
          if (inIndex >= this.outs.length)
            return ONE;
          txTmp.outs.length = inIndex + 1;
          for (let i = 0; i < inIndex; i++) {
            txTmp.outs[i] = BLANK_OUTPUT;
          }
          txTmp.ins.forEach((input, y) => {
            if (y === inIndex)
              return;
            input.sequence = 0;
          });
        }
        if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
          txTmp.ins = [txTmp.ins[inIndex]];
          txTmp.ins[0].script = ourScript;
        } else {
          txTmp.ins.forEach((input) => {
            input.script = EMPTY_SCRIPT;
          });
          txTmp.ins[inIndex].script = ourScript;
        }
        const buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);
        buffer.writeInt32LE(hashType, buffer.length - 4);
        txTmp.__toBuffer(buffer, 0, false);
        return bcrypto.hash256(buffer);
      }
      hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
        typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);
        let tbuffer = Buffer.from([]);
        let bufferWriter;
        let hashOutputs = ZERO;
        let hashPrevouts = ZERO;
        let hashSequence = ZERO;
        if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
          tbuffer = Buffer.allocUnsafe(36 * this.ins.length);
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          this.ins.forEach((txIn) => {
            bufferWriter.writeSlice(txIn.hash);
            bufferWriter.writeUInt32(txIn.index);
          });
          hashPrevouts = bcrypto.hash256(tbuffer);
        }
        if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 31) !== Transaction.SIGHASH_SINGLE && (hashType & 31) !== Transaction.SIGHASH_NONE) {
          tbuffer = Buffer.allocUnsafe(4 * this.ins.length);
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          this.ins.forEach((txIn) => {
            bufferWriter.writeUInt32(txIn.sequence);
          });
          hashSequence = bcrypto.hash256(tbuffer);
        }
        if ((hashType & 31) !== Transaction.SIGHASH_SINGLE && (hashType & 31) !== Transaction.SIGHASH_NONE) {
          const txOutsSize = this.outs.reduce((sum, output) => {
            return sum + 8 + varSliceSize(output.script);
          }, 0);
          tbuffer = Buffer.allocUnsafe(txOutsSize);
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          this.outs.forEach((out) => {
            bufferWriter.writeUInt64(out.value);
            bufferWriter.writeVarSlice(out.script);
          });
          hashOutputs = bcrypto.hash256(tbuffer);
        } else if ((hashType & 31) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {
          const output = this.outs[inIndex];
          tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          bufferWriter.writeUInt64(output.value);
          bufferWriter.writeVarSlice(output.script);
          hashOutputs = bcrypto.hash256(tbuffer);
        }
        tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));
        bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
        const input = this.ins[inIndex];
        bufferWriter.writeUInt32(this.version);
        bufferWriter.writeSlice(hashPrevouts);
        bufferWriter.writeSlice(hashSequence);
        bufferWriter.writeSlice(input.hash);
        bufferWriter.writeUInt32(input.index);
        bufferWriter.writeVarSlice(prevOutScript);
        bufferWriter.writeUInt64(value);
        bufferWriter.writeUInt32(input.sequence);
        bufferWriter.writeSlice(hashOutputs);
        bufferWriter.writeUInt32(this.locktime);
        bufferWriter.writeUInt32(hashType);
        return bcrypto.hash256(tbuffer);
      }
      hashForCashSignature(inIndex, prevOutScript, inAmount, hashType) {
        typeforce(types.tuple(types.UInt32, types.Buffer, types.Number, types.maybe(types.UInt53)), arguments);
        if (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) {
          if (types.Null(inAmount)) {
            throw new Error("Bitcoin Cash sighash requires value of input to be signed.");
          }
          return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, hashType);
        } else {
          return this.hashForSignature(inIndex, prevOutScript, hashType);
        }
      }
      hashForGoldSignature(inIndex, prevOutScript, inAmount, hashType, sigVersion) {
        typeforce(types.tuple(types.UInt32, types.Buffer, types.Number, types.maybe(types.UInt53)), arguments);
        let nForkHashType = hashType;
        const fUseForkId = (hashType & Transaction.SIGHASH_BITCOINCASHBIP143) > 0;
        if (fUseForkId) {
          nForkHashType |= Transaction.FORKID_BTG << 8;
        }
        if (sigVersion || fUseForkId) {
          if (types.Null(inAmount)) {
            throw new Error("Bitcoin Cash sighash requires value of input to be signed.");
          }
          return this.hashForWitnessV0(inIndex, prevOutScript, inAmount, nForkHashType);
        } else {
          return this.hashForSignature(inIndex, prevOutScript, nForkHashType);
        }
      }
      getHash(forWitness) {
        if (forWitness && this.isCoinbase())
          return Buffer.alloc(32, 0);
        return bcrypto.hash256(this.__toBuffer(void 0, void 0, forWitness));
      }
      getId() {
        return bufferutils_1.reverseBuffer(this.getHash(false)).toString("hex");
      }
      toBuffer(buffer, initialOffset) {
        return this.__toBuffer(buffer, initialOffset, true);
      }
      toHex() {
        return this.toBuffer(void 0, void 0).toString("hex");
      }
      setInputScript(index, scriptSig) {
        typeforce(types.tuple(types.Number, types.Buffer), arguments);
        this.ins[index].script = scriptSig;
      }
      setWitness(index, witness) {
        typeforce(types.tuple(types.Number, [types.Buffer]), arguments);
        this.ins[index].witness = witness;
      }
      __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {
        if (!buffer)
          buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));
        const bufferWriter = new bufferutils_1.BufferWriter(buffer, initialOffset || 0);
        bufferWriter.writeInt32(this.version);
        const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
        if (hasWitnesses) {
          bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);
          bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);
        }
        bufferWriter.writeVarInt(this.ins.length);
        this.ins.forEach((txIn) => {
          bufferWriter.writeSlice(txIn.hash);
          bufferWriter.writeUInt32(txIn.index);
          bufferWriter.writeVarSlice(txIn.script);
          bufferWriter.writeUInt32(txIn.sequence);
        });
        bufferWriter.writeVarInt(this.outs.length);
        this.outs.forEach((txOut) => {
          if (isOutput(txOut)) {
            bufferWriter.writeUInt64(txOut.value);
          } else {
            bufferWriter.writeSlice(txOut.valueBuffer);
          }
          bufferWriter.writeVarSlice(txOut.script);
        });
        if (hasWitnesses) {
          this.ins.forEach((input) => {
            bufferWriter.writeVector(input.witness);
          });
        }
        bufferWriter.writeUInt32(this.locktime);
        if (initialOffset !== void 0)
          return buffer.slice(initialOffset, bufferWriter.offset);
        return buffer;
      }
    };
    Transaction.DEFAULT_SEQUENCE = 4294967295;
    Transaction.SIGHASH_ALL = 1;
    Transaction.SIGHASH_NONE = 2;
    Transaction.SIGHASH_SINGLE = 3;
    Transaction.SIGHASH_ANYONECANPAY = 128;
    Transaction.SIGHASH_BITCOINCASHBIP143 = 64;
    Transaction.ADVANCED_TRANSACTION_MARKER = 0;
    Transaction.ADVANCED_TRANSACTION_FLAG = 1;
    Transaction.FORKID_BTG = 79;
    Transaction.FORKID_BCH = 0;
    exports2.Transaction = Transaction;
  }
});

// node_modules/merkle-lib/fastRoot.js
var require_fastRoot = __commonJS({
  "node_modules/merkle-lib/fastRoot.js"(exports2, module2) {
    init_define_process_env();
    module2.exports = function fastRoot(values, digestFn) {
      if (!Array.isArray(values))
        throw TypeError("Expected values Array");
      if (typeof digestFn !== "function")
        throw TypeError("Expected digest Function");
      var length = values.length;
      var results = values.concat();
      while (length > 1) {
        var j = 0;
        for (var i = 0; i < length; i += 2, ++j) {
          var left = results[i];
          var right = i + 1 === length ? left : results[i + 1];
          var data = Buffer.concat([left, right]);
          results[j] = digestFn(data);
        }
        length = j;
      }
      return results[0];
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/block.js
var require_block = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/block.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bufferutils_1 = require_bufferutils();
    var bcrypto = require_crypto3();
    var transaction_1 = require_transaction();
    var types = require_types2();
    var fastMerkleRoot = require_fastRoot();
    var typeforce = require_typeforce();
    var varuint = require_varuint_bitcoin();
    var errorMerkleNoTxes = new TypeError("Cannot compute merkle root for zero transactions");
    var errorWitnessNotSegwit = new TypeError("Cannot compute witness commit for non-segwit block");
    var Block = class {
      constructor() {
        this.version = 1;
        this.prevHash = void 0;
        this.merkleRoot = void 0;
        this.timestamp = 0;
        this.witnessCommit = void 0;
        this.bits = 0;
        this.nonce = 0;
        this.transactions = void 0;
      }
      static fromBuffer(buffer) {
        if (buffer.length < 80)
          throw new Error("Buffer too small (< 80 bytes)");
        const bufferReader = new bufferutils_1.BufferReader(buffer);
        const block = new Block();
        block.version = bufferReader.readInt32();
        block.prevHash = bufferReader.readSlice(32);
        block.merkleRoot = bufferReader.readSlice(32);
        block.timestamp = bufferReader.readUInt32();
        block.bits = bufferReader.readUInt32();
        block.nonce = bufferReader.readUInt32();
        if (buffer.length === 80)
          return block;
        const readTransaction = () => {
          const tx = transaction_1.Transaction.fromBuffer(bufferReader.buffer.slice(bufferReader.offset), true);
          bufferReader.offset += tx.byteLength();
          return tx;
        };
        const nTransactions = bufferReader.readVarInt();
        block.transactions = [];
        for (let i = 0; i < nTransactions; ++i) {
          const tx = readTransaction();
          block.transactions.push(tx);
        }
        const witnessCommit = block.getWitnessCommit();
        if (witnessCommit)
          block.witnessCommit = witnessCommit;
        return block;
      }
      static fromHex(hex) {
        return Block.fromBuffer(Buffer.from(hex, "hex"));
      }
      static calculateTarget(bits) {
        const exponent = ((bits & 4278190080) >> 24) - 3;
        const mantissa = bits & 8388607;
        const target = Buffer.alloc(32, 0);
        target.writeUIntBE(mantissa, 29 - exponent, 3);
        return target;
      }
      static calculateMerkleRoot(transactions, forWitness) {
        typeforce([{ getHash: types.Function }], transactions);
        if (transactions.length === 0)
          throw errorMerkleNoTxes;
        if (forWitness && !txesHaveWitnessCommit(transactions))
          throw errorWitnessNotSegwit;
        const hashes = transactions.map((transaction) => transaction.getHash(forWitness));
        const rootHash = fastMerkleRoot(hashes, bcrypto.hash256);
        return forWitness ? bcrypto.hash256(Buffer.concat([rootHash, transactions[0].ins[0].witness[0]])) : rootHash;
      }
      getWitnessCommit() {
        if (!txesHaveWitnessCommit(this.transactions))
          return null;
        const witnessCommits = this.transactions[0].outs.filter((out) => out.script.slice(0, 6).equals(Buffer.from("6a24aa21a9ed", "hex"))).map((out) => out.script.slice(6, 38));
        if (witnessCommits.length === 0)
          return null;
        const result = witnessCommits[witnessCommits.length - 1];
        if (!(result instanceof Buffer && result.length === 32))
          return null;
        return result;
      }
      hasWitnessCommit() {
        if (this.witnessCommit instanceof Buffer && this.witnessCommit.length === 32)
          return true;
        if (this.getWitnessCommit() !== null)
          return true;
        return false;
      }
      hasWitness() {
        return anyTxHasWitness(this.transactions);
      }
      weight() {
        const base = this.byteLength(false, false);
        const total = this.byteLength(false, true);
        return base * 3 + total;
      }
      byteLength(headersOnly, allowWitness = true) {
        if (headersOnly || !this.transactions)
          return 80;
        return 80 + varuint.encodingLength(this.transactions.length) + this.transactions.reduce((a2, x) => a2 + x.byteLength(allowWitness), 0);
      }
      getHash() {
        return bcrypto.hash256(this.toBuffer(true));
      }
      getId() {
        return bufferutils_1.reverseBuffer(this.getHash()).toString("hex");
      }
      getUTCDate() {
        const date = new Date(0);
        date.setUTCSeconds(this.timestamp);
        return date;
      }
      toBuffer(headersOnly) {
        const buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));
        const bufferWriter = new bufferutils_1.BufferWriter(buffer);
        bufferWriter.writeInt32(this.version);
        bufferWriter.writeSlice(this.prevHash);
        bufferWriter.writeSlice(this.merkleRoot);
        bufferWriter.writeUInt32(this.timestamp);
        bufferWriter.writeUInt32(this.bits);
        bufferWriter.writeUInt32(this.nonce);
        if (headersOnly || !this.transactions)
          return buffer;
        varuint.encode(this.transactions.length, buffer, bufferWriter.offset);
        bufferWriter.offset += varuint.encode.bytes;
        this.transactions.forEach((tx) => {
          const txSize = tx.byteLength();
          tx.toBuffer(buffer, bufferWriter.offset);
          bufferWriter.offset += txSize;
        });
        return buffer;
      }
      toHex(headersOnly) {
        return this.toBuffer(headersOnly).toString("hex");
      }
      checkTxRoots() {
        const hasWitnessCommit = this.hasWitnessCommit();
        if (!hasWitnessCommit && this.hasWitness())
          return false;
        return this.__checkMerkleRoot() && (hasWitnessCommit ? this.__checkWitnessCommit() : true);
      }
      checkProofOfWork() {
        const hash = bufferutils_1.reverseBuffer(this.getHash());
        const target = Block.calculateTarget(this.bits);
        return hash.compare(target) <= 0;
      }
      __checkMerkleRoot() {
        if (!this.transactions)
          throw errorMerkleNoTxes;
        const actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);
        return this.merkleRoot.compare(actualMerkleRoot) === 0;
      }
      __checkWitnessCommit() {
        if (!this.transactions)
          throw errorMerkleNoTxes;
        if (!this.hasWitnessCommit())
          throw errorWitnessNotSegwit;
        const actualWitnessCommit = Block.calculateMerkleRoot(this.transactions, true);
        return this.witnessCommit.compare(actualWitnessCommit) === 0;
      }
    };
    exports2.Block = Block;
    function txesHaveWitnessCommit(transactions) {
      return transactions instanceof Array && transactions[0] && transactions[0].ins && transactions[0].ins instanceof Array && transactions[0].ins[0] && transactions[0].ins[0].witness && transactions[0].ins[0].witness instanceof Array && transactions[0].ins[0].witness.length > 0;
    }
    function anyTxHasWitness(transactions) {
      return transactions instanceof Array && transactions.some((tx) => typeof tx === "object" && tx.ins instanceof Array && tx.ins.some((input) => typeof input === "object" && input.witness instanceof Array && input.witness.length > 0));
    }
  }
});

// node_modules/bip174/src/lib/typeFields.js
var require_typeFields = __commonJS({
  "node_modules/bip174/src/lib/typeFields.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var GlobalTypes;
    (function(GlobalTypes2) {
      GlobalTypes2[GlobalTypes2["UNSIGNED_TX"] = 0] = "UNSIGNED_TX";
      GlobalTypes2[GlobalTypes2["GLOBAL_XPUB"] = 1] = "GLOBAL_XPUB";
    })(GlobalTypes = exports2.GlobalTypes || (exports2.GlobalTypes = {}));
    exports2.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"];
    var InputTypes;
    (function(InputTypes2) {
      InputTypes2[InputTypes2["NON_WITNESS_UTXO"] = 0] = "NON_WITNESS_UTXO";
      InputTypes2[InputTypes2["WITNESS_UTXO"] = 1] = "WITNESS_UTXO";
      InputTypes2[InputTypes2["PARTIAL_SIG"] = 2] = "PARTIAL_SIG";
      InputTypes2[InputTypes2["SIGHASH_TYPE"] = 3] = "SIGHASH_TYPE";
      InputTypes2[InputTypes2["REDEEM_SCRIPT"] = 4] = "REDEEM_SCRIPT";
      InputTypes2[InputTypes2["WITNESS_SCRIPT"] = 5] = "WITNESS_SCRIPT";
      InputTypes2[InputTypes2["BIP32_DERIVATION"] = 6] = "BIP32_DERIVATION";
      InputTypes2[InputTypes2["FINAL_SCRIPTSIG"] = 7] = "FINAL_SCRIPTSIG";
      InputTypes2[InputTypes2["FINAL_SCRIPTWITNESS"] = 8] = "FINAL_SCRIPTWITNESS";
      InputTypes2[InputTypes2["POR_COMMITMENT"] = 9] = "POR_COMMITMENT";
    })(InputTypes = exports2.InputTypes || (exports2.InputTypes = {}));
    exports2.INPUT_TYPE_NAMES = [
      "nonWitnessUtxo",
      "witnessUtxo",
      "partialSig",
      "sighashType",
      "redeemScript",
      "witnessScript",
      "bip32Derivation",
      "finalScriptSig",
      "finalScriptWitness",
      "porCommitment"
    ];
    var OutputTypes;
    (function(OutputTypes2) {
      OutputTypes2[OutputTypes2["REDEEM_SCRIPT"] = 0] = "REDEEM_SCRIPT";
      OutputTypes2[OutputTypes2["WITNESS_SCRIPT"] = 1] = "WITNESS_SCRIPT";
      OutputTypes2[OutputTypes2["BIP32_DERIVATION"] = 2] = "BIP32_DERIVATION";
    })(OutputTypes = exports2.OutputTypes || (exports2.OutputTypes = {}));
    exports2.OUTPUT_TYPE_NAMES = [
      "redeemScript",
      "witnessScript",
      "bip32Derivation"
    ];
  }
});

// node_modules/bip174/src/lib/converter/global/globalXpub.js
var require_globalXpub = __commonJS({
  "node_modules/bip174/src/lib/converter/global/globalXpub.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    var range = (n) => [...Array(n).keys()];
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.GlobalTypes.GLOBAL_XPUB) {
        throw new Error("Decode Error: could not decode globalXpub with key 0x" + keyVal.key.toString("hex"));
      }
      if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {
        throw new Error("Decode Error: globalXpub has invalid extended pubkey in key 0x" + keyVal.key.toString("hex"));
      }
      if (keyVal.value.length / 4 % 1 !== 0) {
        throw new Error("Decode Error: Global GLOBAL_XPUB value length should be multiple of 4");
      }
      const extendedPubkey = keyVal.key.slice(1);
      const data = {
        masterFingerprint: keyVal.value.slice(0, 4),
        extendedPubkey,
        path: "m"
      };
      for (const i of range(keyVal.value.length / 4 - 1)) {
        const val = keyVal.value.readUInt32LE(i * 4 + 4);
        const isHard = !!(val & 2147483648);
        const idx = val & 2147483647;
        data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
      }
      return data;
    }
    exports2.decode = decode;
    function encode(data) {
      const head = Buffer.from([typeFields_1.GlobalTypes.GLOBAL_XPUB]);
      const key = Buffer.concat([head, data.extendedPubkey]);
      const splitPath = data.path.split("/");
      const value = Buffer.allocUnsafe(splitPath.length * 4);
      data.masterFingerprint.copy(value, 0);
      let offset = 4;
      splitPath.slice(1).forEach((level) => {
        const isHard = level.slice(-1) === "'";
        let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
        if (isHard)
          num += 2147483648;
        value.writeUInt32LE(num, offset);
        offset += 4;
      });
      return {
        key,
        value
      };
    }
    exports2.encode = encode;
    exports2.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
    function check(data) {
      const epk = data.extendedPubkey;
      const mfp = data.masterFingerprint;
      const p = data.path;
      return Buffer.isBuffer(epk) && epk.length === 78 && [2, 3].indexOf(epk[45]) > -1 && Buffer.isBuffer(mfp) && mfp.length === 4 && typeof p === "string" && !!p.match(/^m(\/\d+'?)+$/);
    }
    exports2.check = check;
    function canAddToArray(array, item, dupeSet) {
      const dupeString = item.extendedPubkey.toString("hex");
      if (dupeSet.has(dupeString))
        return false;
      dupeSet.add(dupeString);
      return array.filter((v) => v.extendedPubkey.equals(item.extendedPubkey)).length === 0;
    }
    exports2.canAddToArray = canAddToArray;
  }
});

// node_modules/bip174/src/lib/converter/global/unsignedTx.js
var require_unsignedTx = __commonJS({
  "node_modules/bip174/src/lib/converter/global/unsignedTx.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function encode(data) {
      return {
        key: Buffer.from([typeFields_1.GlobalTypes.UNSIGNED_TX]),
        value: data.toBuffer()
      };
    }
    exports2.encode = encode;
  }
});

// node_modules/bip174/src/lib/converter/input/finalScriptSig.js
var require_finalScriptSig = __commonJS({
  "node_modules/bip174/src/lib/converter/input/finalScriptSig.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTSIG) {
        throw new Error("Decode Error: could not decode finalScriptSig with key 0x" + keyVal.key.toString("hex"));
      }
      return keyVal.value;
    }
    exports2.decode = decode;
    function encode(data) {
      const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTSIG]);
      return {
        key,
        value: data
      };
    }
    exports2.encode = encode;
    exports2.expected = "Buffer";
    function check(data) {
      return Buffer.isBuffer(data);
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.finalScriptSig === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/input/finalScriptWitness.js
var require_finalScriptWitness = __commonJS({
  "node_modules/bip174/src/lib/converter/input/finalScriptWitness.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {
        throw new Error("Decode Error: could not decode finalScriptWitness with key 0x" + keyVal.key.toString("hex"));
      }
      return keyVal.value;
    }
    exports2.decode = decode;
    function encode(data) {
      const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);
      return {
        key,
        value: data
      };
    }
    exports2.encode = encode;
    exports2.expected = "Buffer";
    function check(data) {
      return Buffer.isBuffer(data);
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.finalScriptWitness === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/input/nonWitnessUtxo.js
var require_nonWitnessUtxo = __commonJS({
  "node_modules/bip174/src/lib/converter/input/nonWitnessUtxo.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.NON_WITNESS_UTXO) {
        throw new Error("Decode Error: could not decode nonWitnessUtxo with key 0x" + keyVal.key.toString("hex"));
      }
      return keyVal.value;
    }
    exports2.decode = decode;
    function encode(data) {
      return {
        key: Buffer.from([typeFields_1.InputTypes.NON_WITNESS_UTXO]),
        value: data
      };
    }
    exports2.encode = encode;
    exports2.expected = "Buffer";
    function check(data) {
      return Buffer.isBuffer(data);
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.nonWitnessUtxo === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/input/partialSig.js
var require_partialSig = __commonJS({
  "node_modules/bip174/src/lib/converter/input/partialSig.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.PARTIAL_SIG) {
        throw new Error("Decode Error: could not decode partialSig with key 0x" + keyVal.key.toString("hex"));
      }
      if (!(keyVal.key.length === 34 || keyVal.key.length === 66) || ![2, 3, 4].includes(keyVal.key[1])) {
        throw new Error("Decode Error: partialSig has invalid pubkey in key 0x" + keyVal.key.toString("hex"));
      }
      const pubkey = keyVal.key.slice(1);
      return {
        pubkey,
        signature: keyVal.value
      };
    }
    exports2.decode = decode;
    function encode(pSig) {
      const head = Buffer.from([typeFields_1.InputTypes.PARTIAL_SIG]);
      return {
        key: Buffer.concat([head, pSig.pubkey]),
        value: pSig.signature
      };
    }
    exports2.encode = encode;
    exports2.expected = "{ pubkey: Buffer; signature: Buffer; }";
    function check(data) {
      return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.signature) && [33, 65].includes(data.pubkey.length) && [2, 3, 4].includes(data.pubkey[0]) && isDerSigWithSighash(data.signature);
    }
    exports2.check = check;
    function isDerSigWithSighash(buf) {
      if (!Buffer.isBuffer(buf) || buf.length < 9)
        return false;
      if (buf[0] !== 48)
        return false;
      if (buf.length !== buf[1] + 3)
        return false;
      if (buf[2] !== 2)
        return false;
      const rLen = buf[3];
      if (rLen > 33 || rLen < 1)
        return false;
      if (buf[3 + rLen + 1] !== 2)
        return false;
      const sLen = buf[3 + rLen + 2];
      if (sLen > 33 || sLen < 1)
        return false;
      if (buf.length !== 3 + rLen + 2 + sLen + 2)
        return false;
      return true;
    }
    function canAddToArray(array, item, dupeSet) {
      const dupeString = item.pubkey.toString("hex");
      if (dupeSet.has(dupeString))
        return false;
      dupeSet.add(dupeString);
      return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
    }
    exports2.canAddToArray = canAddToArray;
  }
});

// node_modules/bip174/src/lib/converter/input/porCommitment.js
var require_porCommitment = __commonJS({
  "node_modules/bip174/src/lib/converter/input/porCommitment.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.POR_COMMITMENT) {
        throw new Error("Decode Error: could not decode porCommitment with key 0x" + keyVal.key.toString("hex"));
      }
      return keyVal.value.toString("utf8");
    }
    exports2.decode = decode;
    function encode(data) {
      const key = Buffer.from([typeFields_1.InputTypes.POR_COMMITMENT]);
      return {
        key,
        value: Buffer.from(data, "utf8")
      };
    }
    exports2.encode = encode;
    exports2.expected = "string";
    function check(data) {
      return typeof data === "string";
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.porCommitment === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/input/sighashType.js
var require_sighashType = __commonJS({
  "node_modules/bip174/src/lib/converter/input/sighashType.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {
        throw new Error("Decode Error: could not decode sighashType with key 0x" + keyVal.key.toString("hex"));
      }
      return keyVal.value.readUInt32LE(0);
    }
    exports2.decode = decode;
    function encode(data) {
      const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);
      const value = Buffer.allocUnsafe(4);
      value.writeUInt32LE(data, 0);
      return {
        key,
        value
      };
    }
    exports2.encode = encode;
    exports2.expected = "number";
    function check(data) {
      return typeof data === "number";
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.sighashType === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/varint.js
var require_varint4 = __commonJS({
  "node_modules/bip174/src/lib/converter/varint.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var MAX_SAFE_INTEGER = 9007199254740991;
    function checkUInt53(n) {
      if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
        throw new RangeError("value out of range");
    }
    function encode(_number, buffer, offset) {
      checkUInt53(_number);
      if (!buffer)
        buffer = Buffer.allocUnsafe(encodingLength(_number));
      if (!Buffer.isBuffer(buffer))
        throw new TypeError("buffer must be a Buffer instance");
      if (!offset)
        offset = 0;
      if (_number < 253) {
        buffer.writeUInt8(_number, offset);
        Object.assign(encode, { bytes: 1 });
      } else if (_number <= 65535) {
        buffer.writeUInt8(253, offset);
        buffer.writeUInt16LE(_number, offset + 1);
        Object.assign(encode, { bytes: 3 });
      } else if (_number <= 4294967295) {
        buffer.writeUInt8(254, offset);
        buffer.writeUInt32LE(_number, offset + 1);
        Object.assign(encode, { bytes: 5 });
      } else {
        buffer.writeUInt8(255, offset);
        buffer.writeUInt32LE(_number >>> 0, offset + 1);
        buffer.writeUInt32LE(_number / 4294967296 | 0, offset + 5);
        Object.assign(encode, { bytes: 9 });
      }
      return buffer;
    }
    exports2.encode = encode;
    function decode(buffer, offset) {
      if (!Buffer.isBuffer(buffer))
        throw new TypeError("buffer must be a Buffer instance");
      if (!offset)
        offset = 0;
      const first = buffer.readUInt8(offset);
      if (first < 253) {
        Object.assign(decode, { bytes: 1 });
        return first;
      } else if (first === 253) {
        Object.assign(decode, { bytes: 3 });
        return buffer.readUInt16LE(offset + 1);
      } else if (first === 254) {
        Object.assign(decode, { bytes: 5 });
        return buffer.readUInt32LE(offset + 1);
      } else {
        Object.assign(decode, { bytes: 9 });
        const lo = buffer.readUInt32LE(offset + 1);
        const hi = buffer.readUInt32LE(offset + 5);
        const _number = hi * 4294967296 + lo;
        checkUInt53(_number);
        return _number;
      }
    }
    exports2.decode = decode;
    function encodingLength(_number) {
      checkUInt53(_number);
      return _number < 253 ? 1 : _number <= 65535 ? 3 : _number <= 4294967295 ? 5 : 9;
    }
    exports2.encodingLength = encodingLength;
  }
});

// node_modules/bip174/src/lib/converter/tools.js
var require_tools = __commonJS({
  "node_modules/bip174/src/lib/converter/tools.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var varuint = require_varint4();
    exports2.range = (n) => [...Array(n).keys()];
    function reverseBuffer(buffer) {
      if (buffer.length < 1)
        return buffer;
      let j = buffer.length - 1;
      let tmp = 0;
      for (let i = 0; i < buffer.length / 2; i++) {
        tmp = buffer[i];
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        j--;
      }
      return buffer;
    }
    exports2.reverseBuffer = reverseBuffer;
    function keyValsToBuffer(keyVals) {
      const buffers = keyVals.map(keyValToBuffer);
      buffers.push(Buffer.from([0]));
      return Buffer.concat(buffers);
    }
    exports2.keyValsToBuffer = keyValsToBuffer;
    function keyValToBuffer(keyVal) {
      const keyLen = keyVal.key.length;
      const valLen = keyVal.value.length;
      const keyVarIntLen = varuint.encodingLength(keyLen);
      const valVarIntLen = varuint.encodingLength(valLen);
      const buffer = Buffer.allocUnsafe(keyVarIntLen + keyLen + valVarIntLen + valLen);
      varuint.encode(keyLen, buffer, 0);
      keyVal.key.copy(buffer, keyVarIntLen);
      varuint.encode(valLen, buffer, keyVarIntLen + keyLen);
      keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);
      return buffer;
    }
    exports2.keyValToBuffer = keyValToBuffer;
    function verifuint(value, max) {
      if (typeof value !== "number")
        throw new Error("cannot write a non-number as a number");
      if (value < 0)
        throw new Error("specified a negative value for writing an unsigned value");
      if (value > max)
        throw new Error("RangeError: value out of range");
      if (Math.floor(value) !== value)
        throw new Error("value has a fractional component");
    }
    function readUInt64LE(buffer, offset) {
      const a2 = buffer.readUInt32LE(offset);
      let b2 = buffer.readUInt32LE(offset + 4);
      b2 *= 4294967296;
      verifuint(b2 + a2, 9007199254740991);
      return b2 + a2;
    }
    exports2.readUInt64LE = readUInt64LE;
    function writeUInt64LE(buffer, value, offset) {
      verifuint(value, 9007199254740991);
      buffer.writeInt32LE(value & -1, offset);
      buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
      return offset + 8;
    }
    exports2.writeUInt64LE = writeUInt64LE;
  }
});

// node_modules/bip174/src/lib/converter/input/witnessUtxo.js
var require_witnessUtxo = __commonJS({
  "node_modules/bip174/src/lib/converter/input/witnessUtxo.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    var tools_1 = require_tools();
    var varuint = require_varint4();
    function decode(keyVal) {
      if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {
        throw new Error("Decode Error: could not decode witnessUtxo with key 0x" + keyVal.key.toString("hex"));
      }
      const value = tools_1.readUInt64LE(keyVal.value, 0);
      let _offset = 8;
      const scriptLen = varuint.decode(keyVal.value, _offset);
      _offset += varuint.encodingLength(scriptLen);
      const script = keyVal.value.slice(_offset);
      if (script.length !== scriptLen) {
        throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
      }
      return {
        script,
        value
      };
    }
    exports2.decode = decode;
    function encode(data) {
      const { script, value } = data;
      const varintLen = varuint.encodingLength(script.length);
      const result = Buffer.allocUnsafe(8 + varintLen + script.length);
      tools_1.writeUInt64LE(result, value, 0);
      varuint.encode(script.length, result, 8);
      script.copy(result, 8 + varintLen);
      return {
        key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),
        value: result
      };
    }
    exports2.encode = encode;
    exports2.expected = "{ script: Buffer; value: number; }";
    function check(data) {
      return Buffer.isBuffer(data.script) && typeof data.value === "number";
    }
    exports2.check = check;
    function canAdd(currentData, newData) {
      return !!currentData && !!newData && currentData.witnessUtxo === void 0;
    }
    exports2.canAdd = canAdd;
  }
});

// node_modules/bip174/src/lib/converter/shared/bip32Derivation.js
var require_bip32Derivation = __commonJS({
  "node_modules/bip174/src/lib/converter/shared/bip32Derivation.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var range = (n) => [...Array(n).keys()];
    function makeConverter(TYPE_BYTE) {
      function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
          throw new Error("Decode Error: could not decode bip32Derivation with key 0x" + keyVal.key.toString("hex"));
        }
        if (!(keyVal.key.length === 34 || keyVal.key.length === 66) || ![2, 3, 4].includes(keyVal.key[1])) {
          throw new Error("Decode Error: bip32Derivation has invalid pubkey in key 0x" + keyVal.key.toString("hex"));
        }
        if (keyVal.value.length / 4 % 1 !== 0) {
          throw new Error("Decode Error: Input BIP32_DERIVATION value length should be multiple of 4");
        }
        const pubkey = keyVal.key.slice(1);
        const data = {
          masterFingerprint: keyVal.value.slice(0, 4),
          pubkey,
          path: "m"
        };
        for (const i of range(keyVal.value.length / 4 - 1)) {
          const val = keyVal.value.readUInt32LE(i * 4 + 4);
          const isHard = !!(val & 2147483648);
          const idx = val & 2147483647;
          data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
        }
        return data;
      }
      function encode(data) {
        const head = Buffer.from([TYPE_BYTE]);
        const key = Buffer.concat([head, data.pubkey]);
        const splitPath = data.path.split("/");
        const value = Buffer.allocUnsafe(splitPath.length * 4);
        data.masterFingerprint.copy(value, 0);
        let offset = 4;
        splitPath.slice(1).forEach((level) => {
          const isHard = level.slice(-1) === "'";
          let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
          if (isHard)
            num += 2147483648;
          value.writeUInt32LE(num, offset);
          offset += 4;
        });
        return {
          key,
          value
        };
      }
      const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
      function check(data) {
        return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.masterFingerprint) && typeof data.path === "string" && [33, 65].includes(data.pubkey.length) && [2, 3, 4].includes(data.pubkey[0]) && data.masterFingerprint.length === 4;
      }
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.pubkey.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
      }
      return {
        decode,
        encode,
        check,
        expected,
        canAddToArray
      };
    }
    exports2.makeConverter = makeConverter;
  }
});

// node_modules/bip174/src/lib/converter/shared/checkPubkey.js
var require_checkPubkey = __commonJS({
  "node_modules/bip174/src/lib/converter/shared/checkPubkey.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function makeChecker(pubkeyTypes) {
      return checkPubkey;
      function checkPubkey(keyVal) {
        let pubkey;
        if (pubkeyTypes.includes(keyVal.key[0])) {
          pubkey = keyVal.key.slice(1);
          if (!(pubkey.length === 33 || pubkey.length === 65) || ![2, 3, 4].includes(pubkey[0])) {
            throw new Error("Format Error: invalid pubkey in key 0x" + keyVal.key.toString("hex"));
          }
        }
        return pubkey;
      }
    }
    exports2.makeChecker = makeChecker;
  }
});

// node_modules/bip174/src/lib/converter/shared/redeemScript.js
var require_redeemScript = __commonJS({
  "node_modules/bip174/src/lib/converter/shared/redeemScript.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function makeConverter(TYPE_BYTE) {
      function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
          throw new Error("Decode Error: could not decode redeemScript with key 0x" + keyVal.key.toString("hex"));
        }
        return keyVal.value;
      }
      function encode(data) {
        const key = Buffer.from([TYPE_BYTE]);
        return {
          key,
          value: data
        };
      }
      const expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.redeemScript === void 0;
      }
      return {
        decode,
        encode,
        check,
        expected,
        canAdd
      };
    }
    exports2.makeConverter = makeConverter;
  }
});

// node_modules/bip174/src/lib/converter/shared/witnessScript.js
var require_witnessScript = __commonJS({
  "node_modules/bip174/src/lib/converter/shared/witnessScript.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    function makeConverter(TYPE_BYTE) {
      function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
          throw new Error("Decode Error: could not decode witnessScript with key 0x" + keyVal.key.toString("hex"));
        }
        return keyVal.value;
      }
      function encode(data) {
        const key = Buffer.from([TYPE_BYTE]);
        return {
          key,
          value: data
        };
      }
      const expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.witnessScript === void 0;
      }
      return {
        decode,
        encode,
        check,
        expected,
        canAdd
      };
    }
    exports2.makeConverter = makeConverter;
  }
});

// node_modules/bip174/src/lib/converter/index.js
var require_converter = __commonJS({
  "node_modules/bip174/src/lib/converter/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var typeFields_1 = require_typeFields();
    var globalXpub = require_globalXpub();
    var unsignedTx = require_unsignedTx();
    var finalScriptSig = require_finalScriptSig();
    var finalScriptWitness = require_finalScriptWitness();
    var nonWitnessUtxo = require_nonWitnessUtxo();
    var partialSig = require_partialSig();
    var porCommitment = require_porCommitment();
    var sighashType = require_sighashType();
    var witnessUtxo = require_witnessUtxo();
    var bip32Derivation = require_bip32Derivation();
    var checkPubkey = require_checkPubkey();
    var redeemScript = require_redeemScript();
    var witnessScript = require_witnessScript();
    var globals = {
      unsignedTx,
      globalXpub,
      checkPubkey: checkPubkey.makeChecker([])
    };
    exports2.globals = globals;
    var inputs = {
      nonWitnessUtxo,
      partialSig,
      sighashType,
      finalScriptSig,
      finalScriptWitness,
      porCommitment,
      witnessUtxo,
      bip32Derivation: bip32Derivation.makeConverter(typeFields_1.InputTypes.BIP32_DERIVATION),
      redeemScript: redeemScript.makeConverter(typeFields_1.InputTypes.REDEEM_SCRIPT),
      witnessScript: witnessScript.makeConverter(typeFields_1.InputTypes.WITNESS_SCRIPT),
      checkPubkey: checkPubkey.makeChecker([
        typeFields_1.InputTypes.PARTIAL_SIG,
        typeFields_1.InputTypes.BIP32_DERIVATION
      ])
    };
    exports2.inputs = inputs;
    var outputs = {
      bip32Derivation: bip32Derivation.makeConverter(typeFields_1.OutputTypes.BIP32_DERIVATION),
      redeemScript: redeemScript.makeConverter(typeFields_1.OutputTypes.REDEEM_SCRIPT),
      witnessScript: witnessScript.makeConverter(typeFields_1.OutputTypes.WITNESS_SCRIPT),
      checkPubkey: checkPubkey.makeChecker([
        typeFields_1.OutputTypes.BIP32_DERIVATION
      ])
    };
    exports2.outputs = outputs;
  }
});

// node_modules/bip174/src/lib/parser/fromBuffer.js
var require_fromBuffer = __commonJS({
  "node_modules/bip174/src/lib/parser/fromBuffer.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var convert = require_converter();
    var tools_1 = require_tools();
    var varuint = require_varint4();
    var typeFields_1 = require_typeFields();
    function psbtFromBuffer(buffer, txGetter) {
      let offset = 0;
      function varSlice() {
        const keyLen = varuint.decode(buffer, offset);
        offset += varuint.encodingLength(keyLen);
        const key = buffer.slice(offset, offset + keyLen);
        offset += keyLen;
        return key;
      }
      function readUInt32BE() {
        const num = buffer.readUInt32BE(offset);
        offset += 4;
        return num;
      }
      function readUInt8() {
        const num = buffer.readUInt8(offset);
        offset += 1;
        return num;
      }
      function getKeyValue() {
        const key = varSlice();
        const value = varSlice();
        return {
          key,
          value
        };
      }
      function checkEndOfKeyValPairs() {
        if (offset >= buffer.length) {
          throw new Error("Format Error: Unexpected End of PSBT");
        }
        const isEnd = buffer.readUInt8(offset) === 0;
        if (isEnd) {
          offset++;
        }
        return isEnd;
      }
      if (readUInt32BE() !== 1886610036) {
        throw new Error("Format Error: Invalid Magic Number");
      }
      if (readUInt8() !== 255) {
        throw new Error("Format Error: Magic Number must be followed by 0xff separator");
      }
      const globalMapKeyVals = [];
      const globalKeyIndex = {};
      while (!checkEndOfKeyValPairs()) {
        const keyVal = getKeyValue();
        const hexKey = keyVal.key.toString("hex");
        if (globalKeyIndex[hexKey]) {
          throw new Error("Format Error: Keys must be unique for global keymap: key " + hexKey);
        }
        globalKeyIndex[hexKey] = 1;
        globalMapKeyVals.push(keyVal);
      }
      const unsignedTxMaps = globalMapKeyVals.filter((keyVal) => keyVal.key[0] === typeFields_1.GlobalTypes.UNSIGNED_TX);
      if (unsignedTxMaps.length !== 1) {
        throw new Error("Format Error: Only one UNSIGNED_TX allowed");
      }
      const unsignedTx = txGetter(unsignedTxMaps[0].value);
      const { inputCount, outputCount } = unsignedTx.getInputOutputCounts();
      const inputKeyVals = [];
      const outputKeyVals = [];
      for (const index of tools_1.range(inputCount)) {
        const inputKeyIndex = {};
        const input = [];
        while (!checkEndOfKeyValPairs()) {
          const keyVal = getKeyValue();
          const hexKey = keyVal.key.toString("hex");
          if (inputKeyIndex[hexKey]) {
            throw new Error("Format Error: Keys must be unique for each input: input index " + index + " key " + hexKey);
          }
          inputKeyIndex[hexKey] = 1;
          input.push(keyVal);
        }
        inputKeyVals.push(input);
      }
      for (const index of tools_1.range(outputCount)) {
        const outputKeyIndex = {};
        const output = [];
        while (!checkEndOfKeyValPairs()) {
          const keyVal = getKeyValue();
          const hexKey = keyVal.key.toString("hex");
          if (outputKeyIndex[hexKey]) {
            throw new Error("Format Error: Keys must be unique for each output: output index " + index + " key " + hexKey);
          }
          outputKeyIndex[hexKey] = 1;
          output.push(keyVal);
        }
        outputKeyVals.push(output);
      }
      return psbtFromKeyVals(unsignedTx, {
        globalMapKeyVals,
        inputKeyVals,
        outputKeyVals
      });
    }
    exports2.psbtFromBuffer = psbtFromBuffer;
    function checkKeyBuffer(type, keyBuf, keyNum) {
      if (!keyBuf.equals(Buffer.from([keyNum]))) {
        throw new Error(`Format Error: Invalid ${type} key: ${keyBuf.toString("hex")}`);
      }
    }
    exports2.checkKeyBuffer = checkKeyBuffer;
    function psbtFromKeyVals(unsignedTx, { globalMapKeyVals, inputKeyVals, outputKeyVals }) {
      const globalMap = {
        unsignedTx
      };
      let txCount = 0;
      for (const keyVal of globalMapKeyVals) {
        switch (keyVal.key[0]) {
          case typeFields_1.GlobalTypes.UNSIGNED_TX:
            checkKeyBuffer("global", keyVal.key, typeFields_1.GlobalTypes.UNSIGNED_TX);
            if (txCount > 0) {
              throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
            }
            txCount++;
            break;
          case typeFields_1.GlobalTypes.GLOBAL_XPUB:
            if (globalMap.globalXpub === void 0) {
              globalMap.globalXpub = [];
            }
            globalMap.globalXpub.push(convert.globals.globalXpub.decode(keyVal));
            break;
          default:
            if (!globalMap.unknownKeyVals)
              globalMap.unknownKeyVals = [];
            globalMap.unknownKeyVals.push(keyVal);
        }
      }
      const inputCount = inputKeyVals.length;
      const outputCount = outputKeyVals.length;
      const inputs = [];
      const outputs = [];
      for (const index of tools_1.range(inputCount)) {
        const input = {};
        for (const keyVal of inputKeyVals[index]) {
          convert.inputs.checkPubkey(keyVal);
          switch (keyVal.key[0]) {
            case typeFields_1.InputTypes.NON_WITNESS_UTXO:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.NON_WITNESS_UTXO);
              if (input.nonWitnessUtxo !== void 0) {
                throw new Error("Format Error: Input has multiple NON_WITNESS_UTXO");
              }
              input.nonWitnessUtxo = convert.inputs.nonWitnessUtxo.decode(keyVal);
              break;
            case typeFields_1.InputTypes.WITNESS_UTXO:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.WITNESS_UTXO);
              if (input.witnessUtxo !== void 0) {
                throw new Error("Format Error: Input has multiple WITNESS_UTXO");
              }
              input.witnessUtxo = convert.inputs.witnessUtxo.decode(keyVal);
              break;
            case typeFields_1.InputTypes.PARTIAL_SIG:
              if (input.partialSig === void 0) {
                input.partialSig = [];
              }
              input.partialSig.push(convert.inputs.partialSig.decode(keyVal));
              break;
            case typeFields_1.InputTypes.SIGHASH_TYPE:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.SIGHASH_TYPE);
              if (input.sighashType !== void 0) {
                throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
              }
              input.sighashType = convert.inputs.sighashType.decode(keyVal);
              break;
            case typeFields_1.InputTypes.REDEEM_SCRIPT:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.REDEEM_SCRIPT);
              if (input.redeemScript !== void 0) {
                throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
              }
              input.redeemScript = convert.inputs.redeemScript.decode(keyVal);
              break;
            case typeFields_1.InputTypes.WITNESS_SCRIPT:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.WITNESS_SCRIPT);
              if (input.witnessScript !== void 0) {
                throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
              }
              input.witnessScript = convert.inputs.witnessScript.decode(keyVal);
              break;
            case typeFields_1.InputTypes.BIP32_DERIVATION:
              if (input.bip32Derivation === void 0) {
                input.bip32Derivation = [];
              }
              input.bip32Derivation.push(convert.inputs.bip32Derivation.decode(keyVal));
              break;
            case typeFields_1.InputTypes.FINAL_SCRIPTSIG:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.FINAL_SCRIPTSIG);
              input.finalScriptSig = convert.inputs.finalScriptSig.decode(keyVal);
              break;
            case typeFields_1.InputTypes.FINAL_SCRIPTWITNESS:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.FINAL_SCRIPTWITNESS);
              input.finalScriptWitness = convert.inputs.finalScriptWitness.decode(keyVal);
              break;
            case typeFields_1.InputTypes.POR_COMMITMENT:
              checkKeyBuffer("input", keyVal.key, typeFields_1.InputTypes.POR_COMMITMENT);
              input.porCommitment = convert.inputs.porCommitment.decode(keyVal);
              break;
            default:
              if (!input.unknownKeyVals)
                input.unknownKeyVals = [];
              input.unknownKeyVals.push(keyVal);
          }
        }
        inputs.push(input);
      }
      for (const index of tools_1.range(outputCount)) {
        const output = {};
        for (const keyVal of outputKeyVals[index]) {
          convert.outputs.checkPubkey(keyVal);
          switch (keyVal.key[0]) {
            case typeFields_1.OutputTypes.REDEEM_SCRIPT:
              checkKeyBuffer("output", keyVal.key, typeFields_1.OutputTypes.REDEEM_SCRIPT);
              if (output.redeemScript !== void 0) {
                throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
              }
              output.redeemScript = convert.outputs.redeemScript.decode(keyVal);
              break;
            case typeFields_1.OutputTypes.WITNESS_SCRIPT:
              checkKeyBuffer("output", keyVal.key, typeFields_1.OutputTypes.WITNESS_SCRIPT);
              if (output.witnessScript !== void 0) {
                throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
              }
              output.witnessScript = convert.outputs.witnessScript.decode(keyVal);
              break;
            case typeFields_1.OutputTypes.BIP32_DERIVATION:
              if (output.bip32Derivation === void 0) {
                output.bip32Derivation = [];
              }
              output.bip32Derivation.push(convert.outputs.bip32Derivation.decode(keyVal));
              break;
            default:
              if (!output.unknownKeyVals)
                output.unknownKeyVals = [];
              output.unknownKeyVals.push(keyVal);
          }
        }
        outputs.push(output);
      }
      return { globalMap, inputs, outputs };
    }
    exports2.psbtFromKeyVals = psbtFromKeyVals;
  }
});

// node_modules/bip174/src/lib/parser/toBuffer.js
var require_toBuffer = __commonJS({
  "node_modules/bip174/src/lib/parser/toBuffer.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var convert = require_converter();
    var tools_1 = require_tools();
    function psbtToBuffer({ globalMap, inputs, outputs }) {
      const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
        globalMap,
        inputs,
        outputs
      });
      const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
      const keyValsOrEmptyToBuffer = (keyVals) => keyVals.length === 0 ? [Buffer.from([0])] : keyVals.map(tools_1.keyValsToBuffer);
      const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
      const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
      const header = Buffer.allocUnsafe(5);
      header.writeUIntBE(482972169471, 0, 5);
      return Buffer.concat([header, globalBuffer].concat(inputBuffers, outputBuffers));
    }
    exports2.psbtToBuffer = psbtToBuffer;
    var sortKeyVals = (a2, b2) => {
      return a2.key.compare(b2.key);
    };
    function keyValsFromMap(keyValMap, converterFactory) {
      const keyHexSet = /* @__PURE__ */ new Set();
      const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {
        if (key === "unknownKeyVals")
          return result;
        const converter = converterFactory[key];
        if (converter === void 0)
          return result;
        const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(converter.encode);
        const keyHexes = encodedKeyVals.map((kv) => kv.key.toString("hex"));
        keyHexes.forEach((hex) => {
          if (keyHexSet.has(hex))
            throw new Error("Serialize Error: Duplicate key: " + hex);
          keyHexSet.add(hex);
        });
        return result.concat(encodedKeyVals);
      }, []);
      const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter((keyVal) => {
        return !keyHexSet.has(keyVal.key.toString("hex"));
      }) : [];
      return keyVals.concat(otherKeyVals).sort(sortKeyVals);
    }
    function psbtToKeyVals({ globalMap, inputs, outputs }) {
      return {
        globalKeyVals: keyValsFromMap(globalMap, convert.globals),
        inputKeyVals: inputs.map((i) => keyValsFromMap(i, convert.inputs)),
        outputKeyVals: outputs.map((o) => keyValsFromMap(o, convert.outputs))
      };
    }
    exports2.psbtToKeyVals = psbtToKeyVals;
  }
});

// node_modules/bip174/src/lib/parser/index.js
var require_parser = __commonJS({
  "node_modules/bip174/src/lib/parser/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    function __export2(m) {
      for (var p in m)
        if (!exports2.hasOwnProperty(p))
          exports2[p] = m[p];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    __export2(require_fromBuffer());
    __export2(require_toBuffer());
  }
});

// node_modules/bip174/src/lib/combiner/index.js
var require_combiner = __commonJS({
  "node_modules/bip174/src/lib/combiner/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var parser_1 = require_parser();
    function combine(psbts) {
      const self2 = psbts[0];
      const selfKeyVals = parser_1.psbtToKeyVals(self2);
      const others = psbts.slice(1);
      if (others.length === 0)
        throw new Error("Combine: Nothing to combine");
      const selfTx = getTx(self2);
      if (selfTx === void 0) {
        throw new Error("Combine: Self missing transaction");
      }
      const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
      const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
      const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
      for (const other of others) {
        const otherTx = getTx(other);
        if (otherTx === void 0 || !otherTx.toBuffer().equals(selfTx.toBuffer())) {
          throw new Error("Combine: One of the Psbts does not have the same transaction.");
        }
        const otherKeyVals = parser_1.psbtToKeyVals(other);
        const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
        otherGlobalSet.forEach(keyPusher(selfGlobalSet, selfKeyVals.globalKeyVals, otherKeyVals.globalKeyVals));
        const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
        otherInputSets.forEach((inputSet, idx) => inputSet.forEach(keyPusher(selfInputSets[idx], selfKeyVals.inputKeyVals[idx], otherKeyVals.inputKeyVals[idx])));
        const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
        otherOutputSets.forEach((outputSet, idx) => outputSet.forEach(keyPusher(selfOutputSets[idx], selfKeyVals.outputKeyVals[idx], otherKeyVals.outputKeyVals[idx])));
      }
      return parser_1.psbtFromKeyVals(selfTx, {
        globalMapKeyVals: selfKeyVals.globalKeyVals,
        inputKeyVals: selfKeyVals.inputKeyVals,
        outputKeyVals: selfKeyVals.outputKeyVals
      });
    }
    exports2.combine = combine;
    function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
      return (key) => {
        if (selfSet.has(key))
          return;
        const newKv = otherKeyVals.filter((kv) => kv.key.toString("hex") === key)[0];
        selfKeyVals.push(newKv);
        selfSet.add(key);
      };
    }
    function getTx(psbt) {
      return psbt.globalMap.unsignedTx;
    }
    function getKeySet(keyVals) {
      const set = /* @__PURE__ */ new Set();
      keyVals.forEach((keyVal) => {
        const hex = keyVal.key.toString("hex");
        if (set.has(hex))
          throw new Error("Combine: KeyValue Map keys should be unique");
        set.add(hex);
      });
      return set;
    }
  }
});

// node_modules/bip174/src/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/bip174/src/lib/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var converter = require_converter();
    function checkForInput(inputs, inputIndex) {
      const input = inputs[inputIndex];
      if (input === void 0)
        throw new Error(`No input #${inputIndex}`);
      return input;
    }
    exports2.checkForInput = checkForInput;
    function checkForOutput(outputs, outputIndex) {
      const output = outputs[outputIndex];
      if (output === void 0)
        throw new Error(`No output #${outputIndex}`);
      return output;
    }
    exports2.checkForOutput = checkForOutput;
    function checkHasKey(checkKeyVal, keyVals, enumLength) {
      if (checkKeyVal.key[0] < enumLength) {
        throw new Error(`Use the method for your specific key instead of addUnknownKeyVal*`);
      }
      if (keyVals && keyVals.filter((kv) => kv.key.equals(checkKeyVal.key)).length !== 0) {
        throw new Error(`Duplicate Key: ${checkKeyVal.key.toString("hex")}`);
      }
    }
    exports2.checkHasKey = checkHasKey;
    function getEnumLength(myenum) {
      let count = 0;
      Object.keys(myenum).forEach((val) => {
        if (Number(isNaN(Number(val)))) {
          count++;
        }
      });
      return count;
    }
    exports2.getEnumLength = getEnumLength;
    function inputCheckUncleanFinalized(inputIndex, input) {
      let result = false;
      if (input.nonWitnessUtxo || input.witnessUtxo) {
        const needScriptSig = !!input.redeemScript;
        const needWitnessScript = !!input.witnessScript;
        const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
        const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
        const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
        result = scriptSigOK && witnessScriptOK && hasOneFinal;
      }
      if (result === false) {
        throw new Error(`Input #${inputIndex} has too much or too little data to clean`);
      }
    }
    exports2.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
    function throwForUpdateMaker(typeName, name, expected, data) {
      throw new Error(`Data for ${typeName} key ${name} is incorrect: Expected ${expected} and got ${JSON.stringify(data)}`);
    }
    function updateMaker(typeName) {
      return (updateData, mainData) => {
        for (const name of Object.keys(updateData)) {
          const data = updateData[name];
          const { canAdd, canAddToArray, check, expected } = converter[typeName + "s"][name] || {};
          const isArray = !!canAddToArray;
          if (check) {
            if (isArray) {
              if (!Array.isArray(data) || mainData[name] && !Array.isArray(mainData[name])) {
                throw new Error(`Key type ${name} must be an array`);
              }
              if (!data.every(check)) {
                throwForUpdateMaker(typeName, name, expected, data);
              }
              const arr = mainData[name] || [];
              const dupeCheckSet = /* @__PURE__ */ new Set();
              if (!data.every((v) => canAddToArray(arr, v, dupeCheckSet))) {
                throw new Error("Can not add duplicate data to array");
              }
              mainData[name] = arr.concat(data);
            } else {
              if (!check(data)) {
                throwForUpdateMaker(typeName, name, expected, data);
              }
              if (!canAdd(mainData, data)) {
                throw new Error(`Can not add duplicate data to ${typeName}`);
              }
              mainData[name] = data;
            }
          }
        }
      };
    }
    exports2.updateGlobal = updateMaker("global");
    exports2.updateInput = updateMaker("input");
    exports2.updateOutput = updateMaker("output");
    function addInputAttributes(inputs, data) {
      const index = inputs.length - 1;
      const input = checkForInput(inputs, index);
      exports2.updateInput(data, input);
    }
    exports2.addInputAttributes = addInputAttributes;
    function addOutputAttributes(outputs, data) {
      const index = outputs.length - 1;
      const output = checkForInput(outputs, index);
      exports2.updateOutput(data, output);
    }
    exports2.addOutputAttributes = addOutputAttributes;
    function defaultVersionSetter(version, txBuf) {
      if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
        throw new Error("Set Version: Invalid Transaction");
      }
      txBuf.writeUInt32LE(version, 0);
      return txBuf;
    }
    exports2.defaultVersionSetter = defaultVersionSetter;
    function defaultLocktimeSetter(locktime, txBuf) {
      if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
        throw new Error("Set Locktime: Invalid Transaction");
      }
      txBuf.writeUInt32LE(locktime, txBuf.length - 4);
      return txBuf;
    }
    exports2.defaultLocktimeSetter = defaultLocktimeSetter;
  }
});

// node_modules/bip174/src/lib/psbt.js
var require_psbt = __commonJS({
  "node_modules/bip174/src/lib/psbt.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var combiner_1 = require_combiner();
    var parser_1 = require_parser();
    var typeFields_1 = require_typeFields();
    var utils_1 = require_utils3();
    var Psbt = class {
      constructor(tx) {
        this.inputs = [];
        this.outputs = [];
        this.globalMap = {
          unsignedTx: tx
        };
      }
      static fromBase64(data, txFromBuffer) {
        const buffer = Buffer.from(data, "base64");
        return this.fromBuffer(buffer, txFromBuffer);
      }
      static fromHex(data, txFromBuffer) {
        const buffer = Buffer.from(data, "hex");
        return this.fromBuffer(buffer, txFromBuffer);
      }
      static fromBuffer(buffer, txFromBuffer) {
        const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);
        const psbt = new this(results.globalMap.unsignedTx);
        Object.assign(psbt, results);
        return psbt;
      }
      toBase64() {
        const buffer = this.toBuffer();
        return buffer.toString("base64");
      }
      toHex() {
        const buffer = this.toBuffer();
        return buffer.toString("hex");
      }
      toBuffer() {
        return parser_1.psbtToBuffer(this);
      }
      updateGlobal(updateData) {
        utils_1.updateGlobal(updateData, this.globalMap);
        return this;
      }
      updateInput(inputIndex, updateData) {
        const input = utils_1.checkForInput(this.inputs, inputIndex);
        utils_1.updateInput(updateData, input);
        return this;
      }
      updateOutput(outputIndex, updateData) {
        const output = utils_1.checkForOutput(this.outputs, outputIndex);
        utils_1.updateOutput(updateData, output);
        return this;
      }
      addUnknownKeyValToGlobal(keyVal) {
        utils_1.checkHasKey(keyVal, this.globalMap.unknownKeyVals, utils_1.getEnumLength(typeFields_1.GlobalTypes));
        if (!this.globalMap.unknownKeyVals)
          this.globalMap.unknownKeyVals = [];
        this.globalMap.unknownKeyVals.push(keyVal);
        return this;
      }
      addUnknownKeyValToInput(inputIndex, keyVal) {
        const input = utils_1.checkForInput(this.inputs, inputIndex);
        utils_1.checkHasKey(keyVal, input.unknownKeyVals, utils_1.getEnumLength(typeFields_1.InputTypes));
        if (!input.unknownKeyVals)
          input.unknownKeyVals = [];
        input.unknownKeyVals.push(keyVal);
        return this;
      }
      addUnknownKeyValToOutput(outputIndex, keyVal) {
        const output = utils_1.checkForOutput(this.outputs, outputIndex);
        utils_1.checkHasKey(keyVal, output.unknownKeyVals, utils_1.getEnumLength(typeFields_1.OutputTypes));
        if (!output.unknownKeyVals)
          output.unknownKeyVals = [];
        output.unknownKeyVals.push(keyVal);
        return this;
      }
      addInput(inputData) {
        this.globalMap.unsignedTx.addInput(inputData);
        this.inputs.push({
          unknownKeyVals: []
        });
        const addKeyVals = inputData.unknownKeyVals || [];
        const inputIndex = this.inputs.length - 1;
        if (!Array.isArray(addKeyVals)) {
          throw new Error("unknownKeyVals must be an Array");
        }
        addKeyVals.forEach((keyVal) => this.addUnknownKeyValToInput(inputIndex, keyVal));
        utils_1.addInputAttributes(this.inputs, inputData);
        return this;
      }
      addOutput(outputData) {
        this.globalMap.unsignedTx.addOutput(outputData);
        this.outputs.push({
          unknownKeyVals: []
        });
        const addKeyVals = outputData.unknownKeyVals || [];
        const outputIndex = this.outputs.length - 1;
        if (!Array.isArray(addKeyVals)) {
          throw new Error("unknownKeyVals must be an Array");
        }
        addKeyVals.forEach((keyVal) => this.addUnknownKeyValToInput(outputIndex, keyVal));
        utils_1.addOutputAttributes(this.outputs, outputData);
        return this;
      }
      clearFinalizedInput(inputIndex) {
        const input = utils_1.checkForInput(this.inputs, inputIndex);
        utils_1.inputCheckUncleanFinalized(inputIndex, input);
        for (const key of Object.keys(input)) {
          if (![
            "witnessUtxo",
            "nonWitnessUtxo",
            "finalScriptSig",
            "finalScriptWitness",
            "unknownKeyVals"
          ].includes(key)) {
            delete input[key];
          }
        }
        return this;
      }
      combine(...those) {
        const result = combiner_1.combine([this].concat(those));
        Object.assign(this, result);
        return this;
      }
      getTransaction() {
        return this.globalMap.unsignedTx.toBuffer();
      }
    };
    exports2.Psbt = Psbt;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/psbt.js
var require_psbt2 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/psbt.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bip174_1 = require_psbt();
    var varuint = require_varint4();
    var utils_1 = require_utils3();
    var address_1 = require_address();
    var bufferutils_1 = require_bufferutils();
    var crypto_1 = require_crypto3();
    var ecpair_1 = require_ecpair();
    var networks_1 = require_networks();
    var payments = require_payments();
    var bscript = require_script();
    var transaction_1 = require_transaction();
    var BCH_SIGHASH_ALL = transaction_1.Transaction.SIGHASH_ALL | transaction_1.Transaction.SIGHASH_BITCOINCASHBIP143;
    var BTG_SIGHASH_ALL = transaction_1.Transaction.SIGHASH_ALL | transaction_1.Transaction.SIGHASH_BITCOINCASHBIP143 | transaction_1.Transaction.FORKID_BTG << 8;
    var DEFAULT_SIGHASHES = [
      transaction_1.Transaction.SIGHASH_ALL,
      BCH_SIGHASH_ALL,
      BTG_SIGHASH_ALL
    ];
    var DEFAULT_OPTS = {
      network: networks_1.bitcoin,
      maximumFeeRate: 5e3,
      forkCoin: "none"
    };
    var Psbt = class {
      constructor(opts = {}, data = new bip174_1.Psbt(new PsbtTransaction())) {
        this.data = data;
        this.opts = Object.assign({}, DEFAULT_OPTS, opts);
        this.__CACHE = {
          __NON_WITNESS_UTXO_TX_CACHE: [],
          __NON_WITNESS_UTXO_BUF_CACHE: [],
          __TX_IN_CACHE: {},
          __TX: this.data.globalMap.unsignedTx.tx,
          __UNSAFE_SIGN_NONSEGWIT: false
        };
        if (this.data.inputs.length === 0)
          this.setVersion(2);
        const dpew = (obj, attr, enumerable, writable) => Object.defineProperty(obj, attr, {
          enumerable,
          writable
        });
        dpew(this, "__CACHE", false, true);
        dpew(this, "opts", false, true);
      }
      static fromBase64(data, opts = {}) {
        const buffer = Buffer.from(data, "base64");
        return this.fromBuffer(buffer, opts);
      }
      static fromHex(data, opts = {}) {
        const buffer = Buffer.from(data, "hex");
        return this.fromBuffer(buffer, opts);
      }
      static fromBuffer(buffer, opts = {}) {
        const psbtBase = bip174_1.Psbt.fromBuffer(buffer, transactionFromBuffer);
        const psbt = new Psbt(opts, psbtBase);
        checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
        return psbt;
      }
      get inputCount() {
        return this.data.inputs.length;
      }
      get version() {
        return this.__CACHE.__TX.version;
      }
      set version(version) {
        this.setVersion(version);
      }
      get locktime() {
        return this.__CACHE.__TX.locktime;
      }
      set locktime(locktime) {
        this.setLocktime(locktime);
      }
      get txInputs() {
        return this.__CACHE.__TX.ins.map((input) => ({
          hash: bufferutils_1.cloneBuffer(input.hash),
          index: input.index,
          sequence: input.sequence
        }));
      }
      get txOutputs() {
        return this.__CACHE.__TX.outs.map((output) => {
          let address;
          try {
            address = address_1.fromOutputScript(output.script, this.opts.network);
          } catch (_) {
          }
          return {
            script: bufferutils_1.cloneBuffer(output.script),
            value: output.value,
            address
          };
        });
      }
      combine(...those) {
        this.data.combine(...those.map((o) => o.data));
        return this;
      }
      clone() {
        const res = Psbt.fromBuffer(this.data.toBuffer());
        res.opts = JSON.parse(JSON.stringify(this.opts));
        return res;
      }
      setMaximumFeeRate(satoshiPerByte) {
        check32Bit(satoshiPerByte);
        this.opts.maximumFeeRate = satoshiPerByte;
      }
      setVersion(version) {
        check32Bit(version);
        checkInputsForPartialSig(this.data.inputs, "setVersion");
        const c2 = this.__CACHE;
        c2.__TX.version = version;
        c2.__EXTRACTED_TX = void 0;
        return this;
      }
      setLocktime(locktime) {
        check32Bit(locktime);
        checkInputsForPartialSig(this.data.inputs, "setLocktime");
        const c2 = this.__CACHE;
        c2.__TX.locktime = locktime;
        c2.__EXTRACTED_TX = void 0;
        return this;
      }
      setInputSequence(inputIndex, sequence) {
        check32Bit(sequence);
        checkInputsForPartialSig(this.data.inputs, "setInputSequence");
        const c2 = this.__CACHE;
        if (c2.__TX.ins.length <= inputIndex) {
          throw new Error("Input index too high");
        }
        c2.__TX.ins[inputIndex].sequence = sequence;
        c2.__EXTRACTED_TX = void 0;
        return this;
      }
      addInputs(inputDatas) {
        inputDatas.forEach((inputData) => this.addInput(inputData));
        return this;
      }
      addInput(inputData) {
        if (arguments.length > 1 || !inputData || inputData.hash === void 0 || inputData.index === void 0) {
          throw new Error(`Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]`);
        }
        checkInputsForPartialSig(this.data.inputs, "addInput");
        if (inputData.witnessScript)
          checkInvalidP2WSH(inputData.witnessScript);
        const c2 = this.__CACHE;
        this.data.addInput(inputData);
        const txIn = c2.__TX.ins[c2.__TX.ins.length - 1];
        checkTxInputCache(c2, txIn);
        const inputIndex = this.data.inputs.length - 1;
        const input = this.data.inputs[inputIndex];
        if (input.nonWitnessUtxo) {
          addNonWitnessTxCache(this.__CACHE, input, inputIndex);
        }
        c2.__FEE = void 0;
        c2.__FEE_RATE = void 0;
        c2.__EXTRACTED_TX = void 0;
        return this;
      }
      addOutputs(outputDatas) {
        outputDatas.forEach((outputData) => this.addOutput(outputData));
        return this;
      }
      addOutput(outputData) {
        if (arguments.length > 1 || !outputData || outputData.value === void 0 || outputData.address === void 0 && outputData.script === void 0) {
          throw new Error(`Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]`);
        }
        checkInputsForPartialSig(this.data.inputs, "addOutput");
        const { address } = outputData;
        if (typeof address === "string") {
          const { network } = this.opts;
          const script = address_1.toOutputScript(address, network);
          outputData = Object.assign(outputData, { script });
        }
        const c2 = this.__CACHE;
        this.data.addOutput(outputData);
        c2.__FEE = void 0;
        c2.__FEE_RATE = void 0;
        c2.__EXTRACTED_TX = void 0;
        return this;
      }
      extractTransaction(disableFeeCheck) {
        if (!this.data.inputs.every(isFinalized))
          throw new Error("Not finalized");
        const c2 = this.__CACHE;
        if (!disableFeeCheck) {
          checkFees(this, c2, this.opts);
        }
        if (c2.__EXTRACTED_TX)
          return c2.__EXTRACTED_TX;
        const tx = c2.__TX.clone();
        inputFinalizeGetAmts(this.data.inputs, tx, c2, true);
        return tx;
      }
      getFeeRate() {
        return getTxCacheValue("__FEE_RATE", "fee rate", this.data.inputs, this.__CACHE);
      }
      getFee() {
        return getTxCacheValue("__FEE", "fee", this.data.inputs, this.__CACHE);
      }
      finalizeAllInputs() {
        utils_1.checkForInput(this.data.inputs, 0);
        range(this.data.inputs.length).forEach((idx) => this.finalizeInput(idx));
        return this;
      }
      finalizeInput(inputIndex, finalScriptsFunc = getFinalScripts) {
        const input = utils_1.checkForInput(this.data.inputs, inputIndex);
        const { script, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(inputIndex, input, this.__CACHE);
        if (!script)
          throw new Error(`No script found for input #${inputIndex}`);
        checkPartialSigSighashes(input);
        const { finalScriptSig, finalScriptWitness } = finalScriptsFunc(inputIndex, input, script, isSegwit, isP2SH, isP2WSH);
        if (finalScriptSig)
          this.data.updateInput(inputIndex, { finalScriptSig });
        if (finalScriptWitness)
          this.data.updateInput(inputIndex, { finalScriptWitness });
        if (!finalScriptSig && !finalScriptWitness)
          throw new Error(`Unknown error finalizing input #${inputIndex}`);
        this.data.clearFinalizedInput(inputIndex);
        return this;
      }
      getInputType(inputIndex) {
        const input = utils_1.checkForInput(this.data.inputs, inputIndex);
        const script = getScriptFromUtxo(inputIndex, input, this.__CACHE);
        const result = getMeaningfulScript(script, inputIndex, "input", input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig), input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness));
        const type = result.type === "raw" ? "" : result.type + "-";
        const mainType = classifyScript(result.meaningfulScript);
        return type + mainType;
      }
      inputHasPubkey(inputIndex, pubkey) {
        const input = utils_1.checkForInput(this.data.inputs, inputIndex);
        return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
      }
      inputHasHDKey(inputIndex, root) {
        const input = utils_1.checkForInput(this.data.inputs, inputIndex);
        const derivationIsMine = bip32DerivationIsMine(root);
        return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);
      }
      outputHasPubkey(outputIndex, pubkey) {
        const output = utils_1.checkForOutput(this.data.outputs, outputIndex);
        return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);
      }
      outputHasHDKey(outputIndex, root) {
        const output = utils_1.checkForOutput(this.data.outputs, outputIndex);
        const derivationIsMine = bip32DerivationIsMine(root);
        return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);
      }
      validateSignaturesOfAllInputs() {
        utils_1.checkForInput(this.data.inputs, 0);
        const results = range(this.data.inputs.length).map((idx) => this.validateSignaturesOfInput(idx));
        return results.reduce((final, res) => res === true && final, true);
      }
      validateSignaturesOfInput(inputIndex, pubkey) {
        const input = this.data.inputs[inputIndex];
        const partialSig = (input || {}).partialSig;
        if (!input || !partialSig || partialSig.length < 1)
          throw new Error("No signatures to validate");
        const mySigs = pubkey ? partialSig.filter((sig) => sig.pubkey.equals(pubkey)) : partialSig;
        if (mySigs.length < 1)
          throw new Error("No signatures for this pubkey");
        const results = [];
        let hashCache;
        let scriptCache;
        let sighashCache;
        for (const pSig of mySigs) {
          const sig = bscript.signature.decode(pSig.signature);
          const { hash, script } = sighashCache !== sig.hashType ? getHashForSig(inputIndex, Object.assign({}, input, { sighashType: sig.hashType }), this.__CACHE, true, this.opts.forkCoin) : { hash: hashCache, script: scriptCache };
          sighashCache = sig.hashType;
          hashCache = hash;
          scriptCache = script;
          checkScriptForPubkey(pSig.pubkey, script, "verify");
          const keypair = ecpair_1.fromPublicKey(pSig.pubkey);
          results.push(keypair.verify(hash, sig.signature));
        }
        return results.every((res) => res === true);
      }
      signAllInputsHD(hdKeyPair, sighashTypes = DEFAULT_SIGHASHES) {
        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
          throw new Error("Need HDSigner to sign input");
        }
        const results = [];
        for (const i of range(this.data.inputs.length)) {
          try {
            this.signInputHD(i, hdKeyPair, sighashTypes);
            results.push(true);
          } catch (err) {
            results.push(false);
          }
        }
        if (results.every((v) => v === false)) {
          throw new Error("No inputs were signed");
        }
        return this;
      }
      signAllInputsHDAsync(hdKeyPair, sighashTypes = DEFAULT_SIGHASHES) {
        return new Promise((resolve, reject) => {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            return reject(new Error("Need HDSigner to sign input"));
          }
          const results = [];
          const promises = [];
          for (const i of range(this.data.inputs.length)) {
            promises.push(this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(() => {
              results.push(true);
            }, () => {
              results.push(false);
            }));
          }
          return Promise.all(promises).then(() => {
            if (results.every((v) => v === false)) {
              return reject(new Error("No inputs were signed"));
            }
            resolve();
          });
        });
      }
      signInputHD(inputIndex, hdKeyPair, sighashTypes = DEFAULT_SIGHASHES) {
        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
          throw new Error("Need HDSigner to sign input");
        }
        const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
        signers.forEach((signer) => this.signInput(inputIndex, signer, sighashTypes));
        return this;
      }
      signInputHDAsync(inputIndex, hdKeyPair, sighashTypes = DEFAULT_SIGHASHES) {
        return new Promise((resolve, reject) => {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            return reject(new Error("Need HDSigner to sign input"));
          }
          const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
          const promises = signers.map((signer) => this.signInputAsync(inputIndex, signer, sighashTypes));
          return Promise.all(promises).then(() => {
            resolve();
          }).catch(reject);
        });
      }
      signAllInputs(keyPair, sighashTypes = DEFAULT_SIGHASHES) {
        if (!keyPair || !keyPair.publicKey)
          throw new Error("Need Signer to sign input");
        const results = [];
        for (const i of range(this.data.inputs.length)) {
          try {
            this.signInput(i, keyPair, sighashTypes);
            results.push(true);
          } catch (err) {
            results.push(false);
          }
        }
        if (results.every((v) => v === false)) {
          throw new Error("No inputs were signed");
        }
        return this;
      }
      signAllInputsAsync(keyPair, sighashTypes = DEFAULT_SIGHASHES) {
        return new Promise((resolve, reject) => {
          if (!keyPair || !keyPair.publicKey)
            return reject(new Error("Need Signer to sign input"));
          const results = [];
          const promises = [];
          for (const [i] of this.data.inputs.entries()) {
            promises.push(this.signInputAsync(i, keyPair, sighashTypes).then(() => {
              results.push(true);
            }, () => {
              results.push(false);
            }));
          }
          return Promise.all(promises).then(() => {
            if (results.every((v) => v === false)) {
              return reject(new Error("No inputs were signed"));
            }
            resolve();
          });
        });
      }
      signInput(inputIndex, keyPair, sighashTypes = DEFAULT_SIGHASHES) {
        if (!keyPair || !keyPair.publicKey)
          throw new Error("Need Signer to sign input");
        const { hash, sighashType } = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes, this.opts.forkCoin);
        const partialSig = [
          {
            pubkey: keyPair.publicKey,
            signature: bscript.signature.encode(keyPair.sign(hash), sighashType & 255)
          }
        ];
        this.data.updateInput(inputIndex, { partialSig });
        return this;
      }
      signInputAsync(inputIndex, keyPair, sighashTypes = DEFAULT_SIGHASHES) {
        return Promise.resolve().then(() => {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          const { hash, sighashType } = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes, this.opts.forkCoin);
          return Promise.resolve(keyPair.sign(hash)).then((signature) => {
            const partialSig = [
              {
                pubkey: keyPair.publicKey,
                signature: bscript.signature.encode(signature, sighashType & 255)
              }
            ];
            this.data.updateInput(inputIndex, { partialSig });
          });
        });
      }
      toBuffer() {
        checkCache(this.__CACHE);
        return this.data.toBuffer();
      }
      toHex() {
        checkCache(this.__CACHE);
        return this.data.toHex();
      }
      toBase64() {
        checkCache(this.__CACHE);
        return this.data.toBase64();
      }
      updateGlobal(updateData) {
        this.data.updateGlobal(updateData);
        return this;
      }
      updateInput(inputIndex, updateData) {
        if (updateData.witnessScript)
          checkInvalidP2WSH(updateData.witnessScript);
        this.data.updateInput(inputIndex, updateData);
        if (updateData.nonWitnessUtxo) {
          addNonWitnessTxCache(this.__CACHE, this.data.inputs[inputIndex], inputIndex);
        }
        return this;
      }
      updateOutput(outputIndex, updateData) {
        this.data.updateOutput(outputIndex, updateData);
        return this;
      }
      addUnknownKeyValToGlobal(keyVal) {
        this.data.addUnknownKeyValToGlobal(keyVal);
        return this;
      }
      addUnknownKeyValToInput(inputIndex, keyVal) {
        this.data.addUnknownKeyValToInput(inputIndex, keyVal);
        return this;
      }
      addUnknownKeyValToOutput(outputIndex, keyVal) {
        this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
        return this;
      }
      clearFinalizedInput(inputIndex) {
        this.data.clearFinalizedInput(inputIndex);
        return this;
      }
    };
    exports2.Psbt = Psbt;
    var transactionFromBuffer = (buffer) => new PsbtTransaction(buffer);
    var PsbtTransaction = class {
      constructor(buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
        this.tx = transaction_1.Transaction.fromBuffer(buffer);
        checkTxEmpty(this.tx);
        Object.defineProperty(this, "tx", {
          enumerable: false,
          writable: true
        });
      }
      getInputOutputCounts() {
        return {
          inputCount: this.tx.ins.length,
          outputCount: this.tx.outs.length
        };
      }
      addInput(input) {
        if (input.hash === void 0 || input.index === void 0 || !Buffer.isBuffer(input.hash) && typeof input.hash !== "string" || typeof input.index !== "number") {
          throw new Error("Error adding input.");
        }
        const hash = typeof input.hash === "string" ? bufferutils_1.reverseBuffer(Buffer.from(input.hash, "hex")) : input.hash;
        this.tx.addInput(hash, input.index, input.sequence);
      }
      addOutput(output) {
        if (output.script === void 0 || output.value === void 0 || !Buffer.isBuffer(output.script) || typeof output.value !== "number") {
          throw new Error("Error adding output.");
        }
        this.tx.addOutput(output.script, output.value);
      }
      toBuffer() {
        return this.tx.toBuffer();
      }
    };
    function canFinalize(input, script, scriptType) {
      switch (scriptType) {
        case "pubkey":
        case "pubkeyhash":
        case "witnesspubkeyhash":
          return hasSigs(1, input.partialSig);
        case "multisig":
          const p2ms = payments.p2ms({ output: script });
          return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
        default:
          return false;
      }
    }
    function checkCache(cache) {
      if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
        throw new Error("Not BIP174 compliant, can not export");
      }
    }
    function hasSigs(neededSigs, partialSig, pubkeys) {
      if (!partialSig)
        return false;
      let sigs;
      if (pubkeys) {
        sigs = pubkeys.map((pkey) => {
          const pubkey = ecpair_1.fromPublicKey(pkey, { compressed: true }).publicKey;
          return partialSig.find((pSig) => pSig.pubkey.equals(pubkey));
        }).filter((v) => !!v);
      } else {
        sigs = partialSig;
      }
      if (sigs.length > neededSigs)
        throw new Error("Too many signatures");
      return sigs.length === neededSigs;
    }
    function isFinalized(input) {
      return !!input.finalScriptSig || !!input.finalScriptWitness;
    }
    function isPaymentFactory(payment) {
      return (script) => {
        try {
          payment({ output: script });
          return true;
        } catch (err) {
          return false;
        }
      };
    }
    var isP2MS = isPaymentFactory(payments.p2ms);
    var isP2PK = isPaymentFactory(payments.p2pk);
    var isP2PKH = isPaymentFactory(payments.p2pkh);
    var isP2WPKH = isPaymentFactory(payments.p2wpkh);
    var isP2WSHScript = isPaymentFactory(payments.p2wsh);
    var isP2SHScript = isPaymentFactory(payments.p2sh);
    function bip32DerivationIsMine(root) {
      return (d2) => {
        if (!d2.masterFingerprint.equals(root.fingerprint))
          return false;
        if (!root.derivePath(d2.path).publicKey.equals(d2.pubkey))
          return false;
        return true;
      };
    }
    function check32Bit(num) {
      if (typeof num !== "number" || num !== Math.floor(num) || num > 4294967295 || num < 0) {
        throw new Error("Invalid 32 bit integer");
      }
    }
    function checkFees(psbt, cache, opts) {
      const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
      const vsize = cache.__EXTRACTED_TX.virtualSize();
      const satoshis = feeRate * vsize;
      if (feeRate >= opts.maximumFeeRate) {
        throw new Error(`Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in fees, which is ${feeRate} satoshi per byte for a transaction with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`);
      }
    }
    function checkInputsForPartialSig(inputs, action) {
      inputs.forEach((input) => {
        let throws = false;
        let pSigs = [];
        if ((input.partialSig || []).length === 0) {
          if (!input.finalScriptSig && !input.finalScriptWitness)
            return;
          pSigs = getPsigsFromInputFinalScripts(input);
        } else {
          pSigs = input.partialSig;
        }
        pSigs.forEach((pSig) => {
          const { hashType } = bscript.signature.decode(pSig.signature);
          const whitelist = [];
          const isAnyoneCanPay = hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;
          if (isAnyoneCanPay)
            whitelist.push("addInput");
          const hashMod = hashType & 31;
          switch (hashMod) {
            case transaction_1.Transaction.SIGHASH_ALL:
              break;
            case transaction_1.Transaction.SIGHASH_SINGLE:
            case transaction_1.Transaction.SIGHASH_NONE:
              whitelist.push("addOutput");
              whitelist.push("setInputSequence");
              break;
          }
          if (whitelist.indexOf(action) === -1) {
            throws = true;
          }
        });
        if (throws) {
          throw new Error("Can not modify transaction, signatures exist.");
        }
      });
    }
    function checkPartialSigSighashes(input) {
      if (!input.sighashType || !input.partialSig)
        return;
      const { partialSig, sighashType } = input;
      partialSig.forEach((pSig) => {
        const { hashType } = bscript.signature.decode(pSig.signature);
        if ((sighashType & 255) !== hashType) {
          throw new Error("Signature sighash does not match input sighash type");
        }
      });
    }
    function checkScriptForPubkey(pubkey, script, action) {
      if (!pubkeyInScript(pubkey, script)) {
        throw new Error(`Can not ${action} for this input with the key ${pubkey.toString("hex")}`);
      }
    }
    function checkTxEmpty(tx) {
      const isEmpty = tx.ins.every((input) => input.script && input.script.length === 0 && input.witness && input.witness.length === 0);
      if (!isEmpty) {
        throw new Error("Format Error: Transaction ScriptSigs are not empty");
      }
    }
    function checkTxForDupeIns(tx, cache) {
      tx.ins.forEach((input) => {
        checkTxInputCache(cache, input);
      });
    }
    function checkTxInputCache(cache, input) {
      const key = bufferutils_1.reverseBuffer(Buffer.from(input.hash)).toString("hex") + ":" + input.index;
      if (cache.__TX_IN_CACHE[key])
        throw new Error("Duplicate input detected.");
      cache.__TX_IN_CACHE[key] = 1;
    }
    function scriptCheckerFactory(payment, paymentScriptName) {
      return (inputIndex, scriptPubKey, redeemScript, ioType) => {
        const redeemScriptOutput = payment({
          redeem: { output: redeemScript }
        }).output;
        if (!scriptPubKey.equals(redeemScriptOutput)) {
          throw new Error(`${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`);
        }
      };
    }
    var checkRedeemScript = scriptCheckerFactory(payments.p2sh, "Redeem script");
    var checkWitnessScript = scriptCheckerFactory(payments.p2wsh, "Witness script");
    function getTxCacheValue(key, name, inputs, c2) {
      if (!inputs.every(isFinalized))
        throw new Error(`PSBT must be finalized to calculate ${name}`);
      if (key === "__FEE_RATE" && c2.__FEE_RATE)
        return c2.__FEE_RATE;
      if (key === "__FEE" && c2.__FEE)
        return c2.__FEE;
      let tx;
      let mustFinalize = true;
      if (c2.__EXTRACTED_TX) {
        tx = c2.__EXTRACTED_TX;
        mustFinalize = false;
      } else {
        tx = c2.__TX.clone();
      }
      inputFinalizeGetAmts(inputs, tx, c2, mustFinalize);
      if (key === "__FEE_RATE")
        return c2.__FEE_RATE;
      else if (key === "__FEE")
        return c2.__FEE;
    }
    function getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {
      const scriptType = classifyScript(script);
      if (!canFinalize(input, script, scriptType))
        throw new Error(`Can not finalize input #${inputIndex}`);
      return prepareFinalScripts(script, scriptType, input.partialSig, isSegwit, isP2SH, isP2WSH);
    }
    function prepareFinalScripts(script, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {
      let finalScriptSig;
      let finalScriptWitness;
      const payment = getPayment(script, scriptType, partialSig);
      const p2wsh = !isP2WSH ? null : payments.p2wsh({ redeem: payment });
      const p2sh = !isP2SH ? null : payments.p2sh({ redeem: p2wsh || payment });
      if (isSegwit) {
        if (p2wsh) {
          finalScriptWitness = witnessStackToScriptWitness(p2wsh.witness);
        } else {
          finalScriptWitness = witnessStackToScriptWitness(payment.witness);
        }
        if (p2sh) {
          finalScriptSig = p2sh.input;
        }
      } else {
        if (p2sh) {
          finalScriptSig = p2sh.input;
        } else {
          finalScriptSig = payment.input;
        }
      }
      return {
        finalScriptSig,
        finalScriptWitness
      };
    }
    function getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes, forkCoin) {
      const input = utils_1.checkForInput(inputs, inputIndex);
      const { hash, sighashType, script } = getHashForSig(inputIndex, input, cache, false, forkCoin, sighashTypes);
      checkScriptForPubkey(pubkey, script, "sign");
      return {
        hash,
        sighashType
      };
    }
    function getDefaultSighash(forkCoin) {
      switch (forkCoin) {
        case "bch":
          return BCH_SIGHASH_ALL;
        case "btg":
          return BTG_SIGHASH_ALL;
        case "none":
          return transaction_1.Transaction.SIGHASH_ALL;
      }
    }
    function getHashForSig(inputIndex, input, cache, forValidate, forkCoin, sighashTypes) {
      const unsignedTx = cache.__TX;
      const sighashType = input.sighashType || getDefaultSighash(forkCoin);
      if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
        const str = sighashTypeToString(sighashType);
        throw new Error(`Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${str}`);
      }
      let hash;
      let prevout;
      const isForkId = (sighashType & transaction_1.Transaction.SIGHASH_BITCOINCASHBIP143) > 0;
      const isBTG = (sighashType & transaction_1.Transaction.FORKID_BTG << 8) > 0;
      if (input.nonWitnessUtxo) {
        const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
        const prevoutHash = unsignedTx.ins[inputIndex].hash;
        const utxoHash = nonWitnessUtxoTx.getHash();
        if (!prevoutHash.equals(utxoHash)) {
          throw new Error(`Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`);
        }
        const prevoutIndex = unsignedTx.ins[inputIndex].index;
        prevout = nonWitnessUtxoTx.outs[prevoutIndex];
      } else if (input.witnessUtxo) {
        prevout = input.witnessUtxo;
      } else {
        throw new Error("Need a Utxo input item for signing");
      }
      const { meaningfulScript, type } = getMeaningfulScript(prevout.script, inputIndex, "input", input.redeemScript, input.witnessScript);
      if (["p2sh-p2wsh", "p2wsh"].indexOf(type) >= 0) {
        if (isForkId && isBTG) {
          hash = unsignedTx.hashForGoldSignature(inputIndex, meaningfulScript, prevout.value, sighashType, true);
        } else {
          hash = unsignedTx.hashForWitnessV0(inputIndex, meaningfulScript, prevout.value, sighashType);
        }
      } else if (isP2WPKH(meaningfulScript)) {
        const signingScript = payments.p2pkh({ hash: meaningfulScript.slice(2) }).output;
        if (isForkId && isBTG) {
          hash = unsignedTx.hashForGoldSignature(inputIndex, signingScript, prevout.value, sighashType, true);
        } else {
          hash = unsignedTx.hashForWitnessV0(inputIndex, signingScript, prevout.value, sighashType);
        }
      } else {
        if (!isForkId && input.nonWitnessUtxo === void 0 && cache.__UNSAFE_SIGN_NONSEGWIT === false)
          throw new Error(`Input #${inputIndex} has witnessUtxo but non-segwit script: ${meaningfulScript.toString("hex")}`);
        if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)
          console.warn("Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as the old TransactionBuilder class when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n*********************");
        if (isForkId && isBTG) {
          hash = unsignedTx.hashForGoldSignature(inputIndex, meaningfulScript, prevout.value, sighashType, true);
        } else if (isForkId) {
          hash = unsignedTx.hashForCashSignature(inputIndex, meaningfulScript, prevout.value, sighashType);
        } else {
          hash = unsignedTx.hashForSignature(inputIndex, meaningfulScript, sighashType);
        }
      }
      return {
        script: meaningfulScript,
        sighashType,
        hash
      };
    }
    function getPayment(script, scriptType, partialSig) {
      let payment;
      switch (scriptType) {
        case "multisig":
          const sigs = getSortedSigs(script, partialSig);
          payment = payments.p2ms({
            output: script,
            signatures: sigs
          });
          break;
        case "pubkey":
          payment = payments.p2pk({
            output: script,
            signature: partialSig[0].signature
          });
          break;
        case "pubkeyhash":
          payment = payments.p2pkh({
            output: script,
            pubkey: partialSig[0].pubkey,
            signature: partialSig[0].signature
          });
          break;
        case "witnesspubkeyhash":
          payment = payments.p2wpkh({
            output: script,
            pubkey: partialSig[0].pubkey,
            signature: partialSig[0].signature
          });
          break;
      }
      return payment;
    }
    function getPsigsFromInputFinalScripts(input) {
      const scriptItems = !input.finalScriptSig ? [] : bscript.decompile(input.finalScriptSig) || [];
      const witnessItems = !input.finalScriptWitness ? [] : bscript.decompile(input.finalScriptWitness) || [];
      return scriptItems.concat(witnessItems).filter((item) => {
        return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);
      }).map((sig) => ({ signature: sig }));
    }
    function getScriptFromInput(inputIndex, input, cache) {
      const unsignedTx = cache.__TX;
      const res = {
        script: null,
        isSegwit: false,
        isP2SH: false,
        isP2WSH: false
      };
      res.isP2SH = !!input.redeemScript;
      res.isP2WSH = !!input.witnessScript;
      if (input.witnessScript) {
        res.script = input.witnessScript;
      } else if (input.redeemScript) {
        res.script = input.redeemScript;
      } else {
        if (input.nonWitnessUtxo) {
          const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
          const prevoutIndex = unsignedTx.ins[inputIndex].index;
          res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
        } else if (input.witnessUtxo) {
          res.script = input.witnessUtxo.script;
        }
      }
      if (input.witnessScript || isP2WPKH(res.script)) {
        res.isSegwit = true;
      }
      return res;
    }
    function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
      const input = utils_1.checkForInput(inputs, inputIndex);
      if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
        throw new Error("Need bip32Derivation to sign with HD");
      }
      const myDerivations = input.bip32Derivation.map((bipDv) => {
        if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
          return bipDv;
        } else {
          return;
        }
      }).filter((v) => !!v);
      if (myDerivations.length === 0) {
        throw new Error("Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint");
      }
      const signers = myDerivations.map((bipDv) => {
        const node = hdKeyPair.derivePath(bipDv.path);
        if (!bipDv.pubkey.equals(node.publicKey)) {
          throw new Error("pubkey did not match bip32Derivation");
        }
        return node;
      });
      return signers;
    }
    function getSortedSigs(script, partialSig) {
      const p2ms = payments.p2ms({ output: script });
      return p2ms.pubkeys.map((pk) => {
        return (partialSig.filter((ps) => {
          return ps.pubkey.equals(pk);
        })[0] || {}).signature;
      }).filter((v) => !!v);
    }
    function scriptWitnessToWitnessStack(buffer) {
      let offset = 0;
      function readSlice(n) {
        offset += n;
        return buffer.slice(offset - n, offset);
      }
      function readVarInt() {
        const vi = varuint.decode(buffer, offset);
        offset += varuint.decode.bytes;
        return vi;
      }
      function readVarSlice() {
        return readSlice(readVarInt());
      }
      function readVector() {
        const count = readVarInt();
        const vector = [];
        for (let i = 0; i < count; i++)
          vector.push(readVarSlice());
        return vector;
      }
      return readVector();
    }
    function sighashTypeToString(sighashType) {
      let text = sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
      if (sighashType & transaction_1.Transaction.SIGHASH_BITCOINCASHBIP143)
        text += "SIGHASH_BITCOINCASHBIP143 | ";
      if (sighashType & transaction_1.Transaction.FORKID_BTG << 8) {
        text += "FORKID_BTG | ";
      } else {
        text += "FORKID_BCH | ";
      }
      const sigMod = sighashType & 31;
      switch (sigMod) {
        case transaction_1.Transaction.SIGHASH_ALL:
          text += "SIGHASH_ALL";
          break;
        case transaction_1.Transaction.SIGHASH_SINGLE:
          text += "SIGHASH_SINGLE";
          break;
        case transaction_1.Transaction.SIGHASH_NONE:
          text += "SIGHASH_NONE";
          break;
      }
      return text;
    }
    function witnessStackToScriptWitness(witness) {
      let buffer = Buffer.allocUnsafe(0);
      function writeSlice(slice) {
        buffer = Buffer.concat([buffer, Buffer.from(slice)]);
      }
      function writeVarInt(i) {
        const currentLen = buffer.length;
        const varintLen = varuint.encodingLength(i);
        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);
        varuint.encode(i, buffer, currentLen);
      }
      function writeVarSlice(slice) {
        writeVarInt(slice.length);
        writeSlice(slice);
      }
      function writeVector(vector) {
        writeVarInt(vector.length);
        vector.forEach(writeVarSlice);
      }
      writeVector(witness);
      return buffer;
    }
    function addNonWitnessTxCache(cache, input, inputIndex) {
      cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
      const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);
      cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
      const self2 = cache;
      const selfIndex = inputIndex;
      delete input.nonWitnessUtxo;
      Object.defineProperty(input, "nonWitnessUtxo", {
        enumerable: true,
        get() {
          const buf = self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
          const txCache = self2.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
          if (buf !== void 0) {
            return buf;
          } else {
            const newBuf = txCache.toBuffer();
            self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
            return newBuf;
          }
        },
        set(data) {
          self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
        }
      });
    }
    function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
      let inputAmount = 0;
      inputs.forEach((input, idx) => {
        if (mustFinalize && input.finalScriptSig)
          tx.ins[idx].script = input.finalScriptSig;
        if (mustFinalize && input.finalScriptWitness) {
          tx.ins[idx].witness = scriptWitnessToWitnessStack(input.finalScriptWitness);
        }
        if (input.witnessUtxo) {
          inputAmount += input.witnessUtxo.value;
        } else if (input.nonWitnessUtxo) {
          const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
          const vout = tx.ins[idx].index;
          const out = nwTx.outs[vout];
          inputAmount += out.value;
        }
      });
      const outputAmount = tx.outs.reduce((total, o) => total + o.value, 0);
      const fee = inputAmount - outputAmount;
      if (fee < 0) {
        throw new Error("Outputs are spending more than Inputs");
      }
      const bytes = tx.virtualSize();
      cache.__FEE = fee;
      cache.__EXTRACTED_TX = tx;
      cache.__FEE_RATE = Math.floor(fee / bytes);
    }
    function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
      const c2 = cache.__NON_WITNESS_UTXO_TX_CACHE;
      if (!c2[inputIndex]) {
        addNonWitnessTxCache(cache, input, inputIndex);
      }
      return c2[inputIndex];
    }
    function getScriptFromUtxo(inputIndex, input, cache) {
      if (input.witnessUtxo !== void 0) {
        return input.witnessUtxo.script;
      } else if (input.nonWitnessUtxo !== void 0) {
        const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
        return nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index].script;
      } else {
        throw new Error("Can't find pubkey in input without Utxo data");
      }
    }
    function pubkeyInInput(pubkey, input, inputIndex, cache) {
      const script = getScriptFromUtxo(inputIndex, input, cache);
      const { meaningfulScript } = getMeaningfulScript(script, inputIndex, "input", input.redeemScript, input.witnessScript);
      return pubkeyInScript(pubkey, meaningfulScript);
    }
    function pubkeyInOutput(pubkey, output, outputIndex, cache) {
      const script = cache.__TX.outs[outputIndex].script;
      const { meaningfulScript } = getMeaningfulScript(script, outputIndex, "output", output.redeemScript, output.witnessScript);
      return pubkeyInScript(pubkey, meaningfulScript);
    }
    function redeemFromFinalScriptSig(finalScript) {
      if (!finalScript)
        return;
      const decomp = bscript.decompile(finalScript);
      if (!decomp)
        return;
      const lastItem = decomp[decomp.length - 1];
      if (!Buffer.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem))
        return;
      const sDecomp = bscript.decompile(lastItem);
      if (!sDecomp)
        return;
      return lastItem;
    }
    function redeemFromFinalWitnessScript(finalScript) {
      if (!finalScript)
        return;
      const decomp = scriptWitnessToWitnessStack(finalScript);
      const lastItem = decomp[decomp.length - 1];
      if (isPubkeyLike(lastItem))
        return;
      const sDecomp = bscript.decompile(lastItem);
      if (!sDecomp)
        return;
      return lastItem;
    }
    function isPubkeyLike(buf) {
      return buf.length === 33 && bscript.isCanonicalPubKey(buf);
    }
    function isSigLike(buf) {
      return bscript.isCanonicalScriptSignature(buf);
    }
    function getMeaningfulScript(script, index, ioType, redeemScript, witnessScript) {
      const isP2SH = isP2SHScript(script);
      const isP2SHP2WSH = isP2SH && redeemScript && isP2WSHScript(redeemScript);
      const isP2WSH = isP2WSHScript(script);
      if (isP2SH && redeemScript === void 0)
        throw new Error("scriptPubkey is P2SH but redeemScript missing");
      if ((isP2WSH || isP2SHP2WSH) && witnessScript === void 0)
        throw new Error("scriptPubkey or redeemScript is P2WSH but witnessScript missing");
      let meaningfulScript;
      if (isP2SHP2WSH) {
        meaningfulScript = witnessScript;
        checkRedeemScript(index, script, redeemScript, ioType);
        checkWitnessScript(index, redeemScript, witnessScript, ioType);
        checkInvalidP2WSH(meaningfulScript);
      } else if (isP2WSH) {
        meaningfulScript = witnessScript;
        checkWitnessScript(index, script, witnessScript, ioType);
        checkInvalidP2WSH(meaningfulScript);
      } else if (isP2SH) {
        meaningfulScript = redeemScript;
        checkRedeemScript(index, script, redeemScript, ioType);
      } else {
        meaningfulScript = script;
      }
      return {
        meaningfulScript,
        type: isP2SHP2WSH ? "p2sh-p2wsh" : isP2SH ? "p2sh" : isP2WSH ? "p2wsh" : "raw"
      };
    }
    function checkInvalidP2WSH(script) {
      if (isP2WPKH(script) || isP2SHScript(script)) {
        throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
      }
    }
    function pubkeyInScript(pubkey, script) {
      const pubkeyHash = crypto_1.hash160(pubkey);
      const decompiled = bscript.decompile(script);
      if (decompiled === null)
        throw new Error("Unknown script error");
      return decompiled.some((element) => {
        if (typeof element === "number")
          return false;
        return element.equals(pubkey) || element.equals(pubkeyHash);
      });
    }
    function classifyScript(script) {
      if (isP2WPKH(script))
        return "witnesspubkeyhash";
      if (isP2PKH(script))
        return "pubkeyhash";
      if (isP2MS(script))
        return "multisig";
      if (isP2PK(script))
        return "pubkey";
      return "nonstandard";
    }
    function range(n) {
      return [...Array(n).keys()];
    }
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/input.js
var require_input = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function partialSignature(value) {
      return value === script_1.OPS.OP_0 || bscript.isCanonicalScriptSignature(value);
    }
    function check(script, allowIncomplete) {
      const chunks = bscript.decompile(script);
      if (chunks.length < 2)
        return false;
      if (chunks[0] !== script_1.OPS.OP_0)
        return false;
      if (allowIncomplete) {
        return chunks.slice(1).every(partialSignature);
      }
      return chunks.slice(1).every(bscript.isCanonicalScriptSignature);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "multisig input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/output.js
var require_output = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    var types = require_types2();
    var OP_INT_BASE = script_1.OPS.OP_RESERVED;
    function check(script, allowIncomplete) {
      const chunks = bscript.decompile(script);
      if (chunks.length < 4)
        return false;
      if (chunks[chunks.length - 1] !== script_1.OPS.OP_CHECKMULTISIG)
        return false;
      if (!types.Number(chunks[0]))
        return false;
      if (!types.Number(chunks[chunks.length - 2]))
        return false;
      const m = chunks[0] - OP_INT_BASE;
      const n = chunks[chunks.length - 2] - OP_INT_BASE;
      if (m <= 0)
        return false;
      if (n > 16)
        return false;
      if (m > n)
        return false;
      if (n !== chunks.length - 3)
        return false;
      if (allowIncomplete)
        return true;
      const keys = chunks.slice(1, -2);
      return keys.every(bscript.isCanonicalPubKey);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "multi-sig output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/index.js
var require_multisig = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/multisig/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input();
    exports2.input = input;
    var output = require_output();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/nulldata.js
var require_nulldata = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/nulldata.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var OPS = bscript.OPS;
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length > 1 && buffer[0] === OPS.OP_RETURN;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "null data output";
    };
    var output = { check };
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/input.js
var require_input2 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    function check(script) {
      const chunks = bscript.decompile(script);
      return chunks.length === 1 && bscript.isCanonicalScriptSignature(chunks[0]);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "pubKey input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/output.js
var require_output2 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function check(script) {
      const chunks = bscript.decompile(script);
      return chunks.length === 2 && bscript.isCanonicalPubKey(chunks[0]) && chunks[1] === script_1.OPS.OP_CHECKSIG;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "pubKey output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/index.js
var require_pubkey = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkey/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input2();
    exports2.input = input;
    var output = require_output2();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/input.js
var require_input3 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    function check(script) {
      const chunks = bscript.decompile(script);
      return chunks.length === 2 && bscript.isCanonicalScriptSignature(chunks[0]) && bscript.isCanonicalPubKey(chunks[1]);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "pubKeyHash input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/output.js
var require_output3 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length === 25 && buffer[0] === script_1.OPS.OP_DUP && buffer[1] === script_1.OPS.OP_HASH160 && buffer[2] === 20 && buffer[23] === script_1.OPS.OP_EQUALVERIFY && buffer[24] === script_1.OPS.OP_CHECKSIG;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "pubKeyHash output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/index.js
var require_pubkeyhash = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/pubkeyhash/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input3();
    exports2.input = input;
    var output = require_output3();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/output.js
var require_output4 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length === 22 && buffer[0] === script_1.OPS.OP_0 && buffer[1] === 20;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "Witness pubKeyHash output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/output.js
var require_output5 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length === 34 && buffer[0] === script_1.OPS.OP_0 && buffer[1] === 32;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "Witness scriptHash output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/input.js
var require_input4 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var p2ms = require_multisig();
    var p2pk = require_pubkey();
    var p2pkh = require_pubkeyhash();
    var p2wpkho = require_output4();
    var p2wsho = require_output5();
    function check(script, allowIncomplete) {
      const chunks = bscript.decompile(script);
      if (chunks.length < 1)
        return false;
      const lastChunk = chunks[chunks.length - 1];
      if (!Buffer.isBuffer(lastChunk))
        return false;
      const scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));
      const redeemScriptChunks = bscript.decompile(lastChunk);
      if (!redeemScriptChunks)
        return false;
      if (!bscript.isPushOnly(scriptSigChunks))
        return false;
      if (chunks.length === 1) {
        return p2wsho.check(redeemScriptChunks) || p2wpkho.check(redeemScriptChunks);
      }
      if (p2pkh.input.check(scriptSigChunks) && p2pkh.output.check(redeemScriptChunks))
        return true;
      if (p2ms.input.check(scriptSigChunks, allowIncomplete) && p2ms.output.check(redeemScriptChunks))
        return true;
      if (p2pk.input.check(scriptSigChunks) && p2pk.output.check(redeemScriptChunks))
        return true;
      return false;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "scriptHash input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/output.js
var require_output6 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length === 23 && buffer[0] === script_1.OPS.OP_HASH160 && buffer[1] === 20 && buffer[22] === script_1.OPS.OP_EQUAL;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "scriptHash output";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/index.js
var require_scripthash = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/scripthash/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input4();
    exports2.input = input;
    var output = require_output6();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesscommitment/output.js
var require_output7 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesscommitment/output.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var script_1 = require_script();
    var types = require_types2();
    var typeforce = require_typeforce();
    var HEADER = Buffer.from("aa21a9ed", "hex");
    function check(script) {
      const buffer = bscript.compile(script);
      return buffer.length > 37 && buffer[0] === script_1.OPS.OP_RETURN && buffer[1] === 36 && buffer.slice(2, 6).equals(HEADER);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "Witness commitment output";
    };
    function encode(commitment) {
      typeforce(types.Hash256bit, commitment);
      const buffer = Buffer.allocUnsafe(36);
      HEADER.copy(buffer, 0);
      commitment.copy(buffer, 4);
      return bscript.compile([script_1.OPS.OP_RETURN, buffer]);
    }
    exports2.encode = encode;
    function decode(buffer) {
      typeforce(check, buffer);
      return bscript.decompile(buffer)[1].slice(4, 36);
    }
    exports2.decode = decode;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesscommitment/index.js
var require_witnesscommitment = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesscommitment/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var output = require_output7();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/input.js
var require_input5 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    function isCompressedCanonicalPubKey(pubKey) {
      return bscript.isCanonicalPubKey(pubKey) && pubKey.length === 33;
    }
    function check(script) {
      const chunks = bscript.decompile(script);
      return chunks.length === 2 && bscript.isCanonicalScriptSignature(chunks[0]) && isCompressedCanonicalPubKey(chunks[1]);
    }
    exports2.check = check;
    check.toJSON = () => {
      return "witnessPubKeyHash input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/index.js
var require_witnesspubkeyhash = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnesspubkeyhash/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input5();
    exports2.input = input;
    var output = require_output4();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/input.js
var require_input6 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/input.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bscript = require_script();
    var typeforce = require_typeforce();
    var p2ms = require_multisig();
    var p2pk = require_pubkey();
    var p2pkh = require_pubkeyhash();
    function check(chunks, allowIncomplete) {
      typeforce(typeforce.Array, chunks);
      if (chunks.length < 1)
        return false;
      const witnessScript = chunks[chunks.length - 1];
      if (!Buffer.isBuffer(witnessScript))
        return false;
      const witnessScriptChunks = bscript.decompile(witnessScript);
      if (!witnessScriptChunks || witnessScriptChunks.length === 0)
        return false;
      const witnessRawScriptSig = bscript.compile(chunks.slice(0, -1));
      if (p2pkh.input.check(witnessRawScriptSig) && p2pkh.output.check(witnessScriptChunks))
        return true;
      if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) && p2ms.output.check(witnessScriptChunks))
        return true;
      if (p2pk.input.check(witnessRawScriptSig) && p2pk.output.check(witnessScriptChunks))
        return true;
      return false;
    }
    exports2.check = check;
    check.toJSON = () => {
      return "witnessScriptHash input";
    };
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/index.js
var require_witnessscripthash = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/templates/witnessscripthash/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var input = require_input6();
    exports2.input = input;
    var output = require_output5();
    exports2.output = output;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/classify.js
var require_classify = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/classify.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var script_1 = require_script();
    var multisig = require_multisig();
    var nullData = require_nulldata();
    var pubKey = require_pubkey();
    var pubKeyHash = require_pubkeyhash();
    var scriptHash = require_scripthash();
    var witnessCommitment = require_witnesscommitment();
    var witnessPubKeyHash = require_witnesspubkeyhash();
    var witnessScriptHash = require_witnessscripthash();
    var types = {
      P2MS: "multisig",
      NONSTANDARD: "nonstandard",
      NULLDATA: "nulldata",
      P2PK: "pubkey",
      P2PKH: "pubkeyhash",
      P2SH: "scripthash",
      P2WPKH: "witnesspubkeyhash",
      P2WSH: "witnessscripthash",
      WITNESS_COMMITMENT: "witnesscommitment"
    };
    exports2.types = types;
    function classifyOutput(script) {
      if (witnessPubKeyHash.output.check(script))
        return types.P2WPKH;
      if (witnessScriptHash.output.check(script))
        return types.P2WSH;
      if (pubKeyHash.output.check(script))
        return types.P2PKH;
      if (scriptHash.output.check(script))
        return types.P2SH;
      const chunks = script_1.decompile(script);
      if (!chunks)
        throw new TypeError("Invalid script");
      if (multisig.output.check(chunks))
        return types.P2MS;
      if (pubKey.output.check(chunks))
        return types.P2PK;
      if (witnessCommitment.output.check(chunks))
        return types.WITNESS_COMMITMENT;
      if (nullData.output.check(chunks))
        return types.NULLDATA;
      return types.NONSTANDARD;
    }
    exports2.output = classifyOutput;
    function classifyInput(script, allowIncomplete) {
      const chunks = script_1.decompile(script);
      if (!chunks)
        throw new TypeError("Invalid script");
      if (pubKeyHash.input.check(chunks))
        return types.P2PKH;
      if (scriptHash.input.check(chunks, allowIncomplete))
        return types.P2SH;
      if (multisig.input.check(chunks, allowIncomplete))
        return types.P2MS;
      if (pubKey.input.check(chunks))
        return types.P2PK;
      return types.NONSTANDARD;
    }
    exports2.input = classifyInput;
    function classifyWitness(script, allowIncomplete) {
      const chunks = script_1.decompile(script);
      if (!chunks)
        throw new TypeError("Invalid script");
      if (witnessPubKeyHash.input.check(chunks))
        return types.P2WPKH;
      if (witnessScriptHash.input.check(chunks, allowIncomplete))
        return types.P2WSH;
      return types.NONSTANDARD;
    }
    exports2.witness = classifyWitness;
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/transaction_builder.js
var require_transaction_builder = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/transaction_builder.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var baddress = require_address();
    var bufferutils_1 = require_bufferutils();
    var classify = require_classify();
    var bcrypto = require_crypto3();
    var ECPair = require_ecpair();
    var networks = require_networks();
    var payments = require_payments();
    var bscript = require_script();
    var script_1 = require_script();
    var transaction_1 = require_transaction();
    var types = require_types2();
    var typeforce = require_typeforce();
    var SCRIPT_TYPES = classify.types;
    var PREVOUT_TYPES = /* @__PURE__ */ new Set([
      "p2pkh",
      "p2pk",
      "p2wpkh",
      "p2ms",
      "p2sh-p2pkh",
      "p2sh-p2pk",
      "p2sh-p2wpkh",
      "p2sh-p2ms",
      "p2wsh-p2pkh",
      "p2wsh-p2pk",
      "p2wsh-p2ms",
      "p2sh-p2wsh-p2pkh",
      "p2sh-p2wsh-p2pk",
      "p2sh-p2wsh-p2ms"
    ]);
    function tfMessage(type, value, message) {
      try {
        typeforce(type, value);
      } catch (err) {
        throw new Error(message);
      }
    }
    function txIsString(tx) {
      return typeof tx === "string" || tx instanceof String;
    }
    function txIsTransaction(tx) {
      return tx instanceof transaction_1.Transaction;
    }
    var TransactionBuilder = class {
      constructor(network = networks.bitcoin, maximumFeeRate = 2500) {
        this.network = network;
        this.maximumFeeRate = maximumFeeRate;
        this.__PREV_TX_SET = {};
        this.__INPUTS = [];
        this.__BITCOINCASH = false;
        this.__BITCOINGOLD = false;
        this.__TX = new transaction_1.Transaction();
        this.__TX.version = 2;
        this.__USE_LOW_R = false;
        console.warn("Deprecation Warning: TransactionBuilder will be removed in the future. (v6.x.x or later) Please use the Psbt class instead. Examples of usage are available in the transactions-psbt.js integration test file on our Github. A high level explanation is available in the psbt.ts and psbt.js files as well.");
      }
      static fromTransaction(transaction, network, forkId) {
        const txb = new TransactionBuilder(network);
        if (typeof forkId === "number") {
          if (forkId === transaction_1.Transaction.FORKID_BTG) {
            txb.enableBitcoinGold(true);
          } else if (forkId === transaction_1.Transaction.FORKID_BCH) {
            txb.enableBitcoinCash(true);
          }
        }
        txb.setVersion(transaction.version);
        txb.setLockTime(transaction.locktime);
        transaction.outs.forEach((txOut) => {
          txb.addOutput(txOut.script, txOut.value);
        });
        transaction.ins.forEach((txIn) => {
          txb.__addInputUnsafe(txIn.hash, txIn.index, {
            sequence: txIn.sequence,
            script: txIn.script,
            witness: txIn.witness,
            value: txIn.value
          });
        });
        txb.__INPUTS.forEach((input, i) => {
          fixMultisigOrder(input, transaction, i, input.value, forkId);
        });
        return txb;
      }
      enableBitcoinCash(enable) {
        if (typeof enable === "undefined") {
          enable = true;
        }
        this.__BITCOINCASH = enable;
      }
      enableBitcoinGold(enable) {
        if (typeof enable === "undefined") {
          enable = true;
        }
        this.__BITCOINGOLD = enable;
      }
      setLowR(setting) {
        typeforce(typeforce.maybe(typeforce.Boolean), setting);
        if (setting === void 0) {
          setting = true;
        }
        this.__USE_LOW_R = setting;
        return setting;
      }
      setLockTime(locktime) {
        typeforce(types.UInt32, locktime);
        if (this.__INPUTS.some((input) => {
          if (!input.signatures)
            return false;
          return input.signatures.some((s) => s !== void 0);
        })) {
          throw new Error("No, this would invalidate signatures");
        }
        this.__TX.locktime = locktime;
      }
      setVersion(version) {
        typeforce(types.UInt32, version);
        this.__TX.version = version;
      }
      addInput(txHash, vout, sequence, prevOutScript) {
        if (!this.__canModifyInputs()) {
          throw new Error("No, this would invalidate signatures");
        }
        let value;
        if (txIsString(txHash)) {
          txHash = bufferutils_1.reverseBuffer(Buffer.from(txHash, "hex"));
        } else if (txIsTransaction(txHash)) {
          const txOut = txHash.outs[vout];
          prevOutScript = txOut.script;
          value = txOut.value;
          txHash = txHash.getHash(false);
        }
        return this.__addInputUnsafe(txHash, vout, {
          sequence,
          prevOutScript,
          value
        });
      }
      addOutput(scriptPubKey, value) {
        if (!this.__canModifyOutputs()) {
          throw new Error("No, this would invalidate signatures");
        }
        if (typeof scriptPubKey === "string") {
          scriptPubKey = baddress.toOutputScript(scriptPubKey, this.network);
        }
        return this.__TX.addOutput(scriptPubKey, value);
      }
      build() {
        return this.__build(false);
      }
      buildIncomplete() {
        return this.__build(true);
      }
      sign(signParams, keyPair, redeemScript, hashType, witnessValue, witnessScript) {
        trySign(getSigningData(this.network, this.__INPUTS, this.__needsOutputs.bind(this), this.__TX, signParams, {
          btg: this.__BITCOINGOLD,
          bch: this.__BITCOINCASH
        }, keyPair, redeemScript, hashType, witnessValue, witnessScript, this.__USE_LOW_R));
      }
      __addInputUnsafe(txHash, vout, options) {
        if (transaction_1.Transaction.isCoinbaseHash(txHash)) {
          throw new Error("coinbase inputs not supported");
        }
        const prevTxOut = txHash.toString("hex") + ":" + vout;
        if (this.__PREV_TX_SET[prevTxOut] !== void 0)
          throw new Error("Duplicate TxOut: " + prevTxOut);
        let input = {};
        if (options.script !== void 0) {
          input = expandInput(options.script, options.witness || []);
        }
        if (options.value !== void 0) {
          input.value = options.value;
        }
        if (!input.prevOutScript && options.prevOutScript) {
          let prevOutType;
          if (!input.pubkeys && !input.signatures) {
            const expanded = expandOutput(options.prevOutScript);
            if (expanded.pubkeys) {
              input.pubkeys = expanded.pubkeys;
              input.signatures = expanded.signatures;
            }
            prevOutType = expanded.type;
          }
          input.prevOutScript = options.prevOutScript;
          input.prevOutType = prevOutType || classify.output(options.prevOutScript);
        }
        const vin = this.__TX.addInput(txHash, vout, options.sequence, options.scriptSig);
        this.__INPUTS[vin] = input;
        this.__PREV_TX_SET[prevTxOut] = true;
        return vin;
      }
      __build(allowIncomplete) {
        if (!allowIncomplete) {
          if (!this.__TX.ins.length)
            throw new Error("Transaction has no inputs");
          if (!this.__TX.outs.length)
            throw new Error("Transaction has no outputs");
        }
        const tx = this.__TX.clone();
        this.__INPUTS.forEach((input, i) => {
          if (!input.prevOutType && !allowIncomplete)
            throw new Error("Transaction is not complete");
          const result = build(input.prevOutType, input, allowIncomplete);
          if (!result) {
            if (!allowIncomplete && input.prevOutType === SCRIPT_TYPES.NONSTANDARD)
              throw new Error("Unknown input type");
            if (!allowIncomplete)
              throw new Error("Not enough information");
            return;
          }
          tx.setInputScript(i, result.input);
          tx.setWitness(i, result.witness);
        });
        if (!allowIncomplete) {
          if (this.__overMaximumFees(tx.virtualSize())) {
            throw new Error("Transaction has absurd fees");
          }
        }
        return tx;
      }
      __canModifyInputs() {
        return this.__INPUTS.every((input) => {
          if (!input.signatures)
            return true;
          return input.signatures.every((signature) => {
            if (!signature)
              return true;
            const hashType = signatureHashType(signature);
            return (hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY) !== 0;
          });
        });
      }
      __needsOutputs(signingHashType) {
        if (signingHashType === transaction_1.Transaction.SIGHASH_ALL) {
          return this.__TX.outs.length === 0;
        }
        return this.__TX.outs.length === 0 && this.__INPUTS.some((input) => {
          if (!input.signatures)
            return false;
          return input.signatures.some((signature) => {
            if (!signature)
              return false;
            const hashType = signatureHashType(signature);
            if (hashType & transaction_1.Transaction.SIGHASH_NONE)
              return false;
            return true;
          });
        });
      }
      __canModifyOutputs() {
        const nInputs = this.__TX.ins.length;
        const nOutputs = this.__TX.outs.length;
        return this.__INPUTS.every((input) => {
          if (input.signatures === void 0)
            return true;
          return input.signatures.every((signature) => {
            if (!signature)
              return true;
            const hashType = signatureHashType(signature);
            const hashTypeMod = hashType & 31;
            if (hashTypeMod === transaction_1.Transaction.SIGHASH_NONE)
              return true;
            if (hashTypeMod === transaction_1.Transaction.SIGHASH_SINGLE) {
              return nInputs <= nOutputs;
            }
            return false;
          });
        });
      }
      __overMaximumFees(bytes) {
        const incoming = this.__INPUTS.reduce((a2, x) => a2 + (x.value >>> 0), 0);
        const outgoing = this.__TX.outs.reduce((a2, x) => a2 + x.value, 0);
        const fee = incoming - outgoing;
        const feeRate = fee / bytes;
        return feeRate > this.maximumFeeRate;
      }
    };
    exports2.TransactionBuilder = TransactionBuilder;
    function expandInput(scriptSig, witnessStack, type, scriptPubKey) {
      if (scriptSig.length === 0 && witnessStack.length === 0)
        return {};
      if (!type) {
        let ssType = classify.input(scriptSig, true);
        let wsType = classify.witness(witnessStack, true);
        if (ssType === SCRIPT_TYPES.NONSTANDARD)
          ssType = void 0;
        if (wsType === SCRIPT_TYPES.NONSTANDARD)
          wsType = void 0;
        type = ssType || wsType;
      }
      switch (type) {
        case SCRIPT_TYPES.P2WPKH: {
          const { output, pubkey, signature } = payments.p2wpkh({
            witness: witnessStack
          });
          return {
            prevOutScript: output,
            prevOutType: SCRIPT_TYPES.P2WPKH,
            pubkeys: [pubkey],
            signatures: [signature]
          };
        }
        case SCRIPT_TYPES.P2PKH: {
          const { output, pubkey, signature } = payments.p2pkh({
            input: scriptSig
          });
          return {
            prevOutScript: output,
            prevOutType: SCRIPT_TYPES.P2PKH,
            pubkeys: [pubkey],
            signatures: [signature]
          };
        }
        case SCRIPT_TYPES.P2PK: {
          const { signature } = payments.p2pk({ input: scriptSig });
          return {
            prevOutType: SCRIPT_TYPES.P2PK,
            pubkeys: [void 0],
            signatures: [signature]
          };
        }
        case SCRIPT_TYPES.P2MS: {
          const { m, pubkeys, signatures } = payments.p2ms({
            input: scriptSig,
            output: scriptPubKey
          }, { allowIncomplete: true });
          return {
            prevOutType: SCRIPT_TYPES.P2MS,
            pubkeys,
            signatures,
            maxSignatures: m
          };
        }
      }
      if (type === SCRIPT_TYPES.P2SH) {
        const { output, redeem } = payments.p2sh({
          input: scriptSig,
          witness: witnessStack
        });
        const outputType = classify.output(redeem.output);
        const expanded = expandInput(redeem.input, redeem.witness, outputType, redeem.output);
        if (!expanded.prevOutType)
          return {};
        return {
          prevOutScript: output,
          prevOutType: SCRIPT_TYPES.P2SH,
          redeemScript: redeem.output,
          redeemScriptType: expanded.prevOutType,
          witnessScript: expanded.witnessScript,
          witnessScriptType: expanded.witnessScriptType,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures
        };
      }
      if (type === SCRIPT_TYPES.P2WSH) {
        const { output, redeem } = payments.p2wsh({
          input: scriptSig,
          witness: witnessStack
        });
        const outputType = classify.output(redeem.output);
        let expanded;
        if (outputType === SCRIPT_TYPES.P2WPKH) {
          expanded = expandInput(redeem.input, redeem.witness, outputType);
        } else {
          expanded = expandInput(bscript.compile(redeem.witness), [], outputType, redeem.output);
        }
        if (!expanded.prevOutType)
          return {};
        return {
          prevOutScript: output,
          prevOutType: SCRIPT_TYPES.P2WSH,
          witnessScript: redeem.output,
          witnessScriptType: expanded.prevOutType,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures
        };
      }
      return {
        prevOutType: SCRIPT_TYPES.NONSTANDARD,
        prevOutScript: scriptSig
      };
    }
    function fixMultisigOrder(input, transaction, vin, value, forkId) {
      if (input.redeemScriptType !== SCRIPT_TYPES.P2MS || !input.redeemScript)
        return;
      if (input.pubkeys.length === input.signatures.length)
        return;
      const unmatched = input.signatures.concat();
      input.signatures = input.pubkeys.map((pubKey) => {
        const keyPair = ECPair.fromPublicKey(pubKey);
        let match;
        unmatched.some((signature, i) => {
          if (!signature)
            return false;
          const parsed = bscript.signature.decode(signature);
          let hash;
          switch (forkId) {
            case transaction_1.Transaction.FORKID_BCH:
              hash = transaction.hashForCashSignature(vin, input.redeemScript, value, parsed.hashType);
              break;
            case transaction_1.Transaction.FORKID_BTG:
              hash = transaction.hashForGoldSignature(vin, input.redeemScript, value, parsed.hashType);
              break;
            default:
              if (input.witness) {
                hash = transaction.hashForWitnessV0(vin, input.redeemScript, value, parsed.hashType);
              } else {
                hash = transaction.hashForSignature(vin, input.redeemScript, parsed.hashType);
              }
              break;
          }
          if (!keyPair.verify(hash, parsed.signature))
            return false;
          unmatched[i] = void 0;
          match = signature;
          return true;
        });
        return match;
      });
    }
    function expandOutput(script, ourPubKey) {
      typeforce(types.Buffer, script);
      const type = classify.output(script);
      switch (type) {
        case SCRIPT_TYPES.P2PKH: {
          if (!ourPubKey)
            return { type };
          const pkh1 = payments.p2pkh({ output: script }).hash;
          const pkh2 = bcrypto.hash160(ourPubKey);
          if (!pkh1.equals(pkh2))
            return { type };
          return {
            type,
            pubkeys: [ourPubKey],
            signatures: [void 0]
          };
        }
        case SCRIPT_TYPES.P2WPKH: {
          if (!ourPubKey)
            return { type };
          const wpkh1 = payments.p2wpkh({ output: script }).hash;
          const wpkh2 = bcrypto.hash160(ourPubKey);
          if (!wpkh1.equals(wpkh2))
            return { type };
          return {
            type,
            pubkeys: [ourPubKey],
            signatures: [void 0]
          };
        }
        case SCRIPT_TYPES.P2PK: {
          const p2pk = payments.p2pk({ output: script });
          return {
            type,
            pubkeys: [p2pk.pubkey],
            signatures: [void 0]
          };
        }
        case SCRIPT_TYPES.P2MS: {
          const p2ms = payments.p2ms({ output: script });
          return {
            type,
            pubkeys: p2ms.pubkeys,
            signatures: p2ms.pubkeys.map(() => void 0),
            maxSignatures: p2ms.m
          };
        }
      }
      return { type };
    }
    function prepareInput(input, ourPubKey, redeemScript, witnessScript) {
      if (redeemScript && witnessScript) {
        const p2wsh = payments.p2wsh({
          redeem: { output: witnessScript }
        });
        const p2wshAlt = payments.p2wsh({ output: redeemScript });
        const p2sh = payments.p2sh({ redeem: { output: redeemScript } });
        const p2shAlt = payments.p2sh({ redeem: p2wsh });
        if (!p2wsh.hash.equals(p2wshAlt.hash))
          throw new Error("Witness script inconsistent with prevOutScript");
        if (!p2sh.hash.equals(p2shAlt.hash))
          throw new Error("Redeem script inconsistent with prevOutScript");
        const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);
        if (!expanded.pubkeys)
          throw new Error(expanded.type + " not supported as witnessScript (" + bscript.toASM(witnessScript) + ")");
        if (input.signatures && input.signatures.some((x) => x !== void 0)) {
          expanded.signatures = input.signatures;
        }
        const signScript = witnessScript;
        if (expanded.type === SCRIPT_TYPES.P2WPKH)
          throw new Error("P2SH(P2WSH(P2WPKH)) is a consensus failure");
        return {
          redeemScript,
          redeemScriptType: SCRIPT_TYPES.P2WSH,
          witnessScript,
          witnessScriptType: expanded.type,
          prevOutType: SCRIPT_TYPES.P2SH,
          prevOutScript: p2sh.output,
          hasWitness: true,
          signScript,
          signType: expanded.type,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures,
          maxSignatures: expanded.maxSignatures
        };
      }
      if (redeemScript) {
        const p2sh = payments.p2sh({ redeem: { output: redeemScript } });
        if (input.prevOutScript) {
          let p2shAlt;
          try {
            p2shAlt = payments.p2sh({ output: input.prevOutScript });
          } catch (e2) {
            throw new Error("PrevOutScript must be P2SH");
          }
          if (!p2sh.hash.equals(p2shAlt.hash))
            throw new Error("Redeem script inconsistent with prevOutScript");
        }
        const expanded = expandOutput(p2sh.redeem.output, ourPubKey);
        if (!expanded.pubkeys)
          throw new Error(expanded.type + " not supported as redeemScript (" + bscript.toASM(redeemScript) + ")");
        if (input.signatures && input.signatures.some((x) => x !== void 0)) {
          expanded.signatures = input.signatures;
        }
        let signScript = redeemScript;
        if (expanded.type === SCRIPT_TYPES.P2WPKH) {
          signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output;
        }
        return {
          redeemScript,
          redeemScriptType: expanded.type,
          prevOutType: SCRIPT_TYPES.P2SH,
          prevOutScript: p2sh.output,
          hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,
          signScript,
          signType: expanded.type,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures,
          maxSignatures: expanded.maxSignatures
        };
      }
      if (witnessScript) {
        const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } });
        if (input.prevOutScript) {
          const p2wshAlt = payments.p2wsh({ output: input.prevOutScript });
          if (!p2wsh.hash.equals(p2wshAlt.hash))
            throw new Error("Witness script inconsistent with prevOutScript");
        }
        const expanded = expandOutput(p2wsh.redeem.output, ourPubKey);
        if (!expanded.pubkeys)
          throw new Error(expanded.type + " not supported as witnessScript (" + bscript.toASM(witnessScript) + ")");
        if (input.signatures && input.signatures.some((x) => x !== void 0)) {
          expanded.signatures = input.signatures;
        }
        const signScript = witnessScript;
        if (expanded.type === SCRIPT_TYPES.P2WPKH)
          throw new Error("P2WSH(P2WPKH) is a consensus failure");
        return {
          witnessScript,
          witnessScriptType: expanded.type,
          prevOutType: SCRIPT_TYPES.P2WSH,
          prevOutScript: p2wsh.output,
          hasWitness: true,
          signScript,
          signType: expanded.type,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures,
          maxSignatures: expanded.maxSignatures
        };
      }
      if (input.prevOutType && input.prevOutScript) {
        if (input.prevOutType === SCRIPT_TYPES.P2SH)
          throw new Error("PrevOutScript is " + input.prevOutType + ", requires redeemScript");
        if (input.prevOutType === SCRIPT_TYPES.P2WSH)
          throw new Error("PrevOutScript is " + input.prevOutType + ", requires witnessScript");
        if (!input.prevOutScript)
          throw new Error("PrevOutScript is missing");
        const expanded = expandOutput(input.prevOutScript, ourPubKey);
        if (!expanded.pubkeys)
          throw new Error(expanded.type + " not supported (" + bscript.toASM(input.prevOutScript) + ")");
        if (input.signatures && input.signatures.some((x) => x !== void 0)) {
          expanded.signatures = input.signatures;
        }
        let signScript = input.prevOutScript;
        if (expanded.type === SCRIPT_TYPES.P2WPKH) {
          signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output;
        }
        return {
          prevOutType: expanded.type,
          prevOutScript: input.prevOutScript,
          hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,
          signScript,
          signType: expanded.type,
          pubkeys: expanded.pubkeys,
          signatures: expanded.signatures,
          maxSignatures: expanded.maxSignatures
        };
      }
      const prevOutScript = payments.p2pkh({ pubkey: ourPubKey }).output;
      return {
        prevOutType: SCRIPT_TYPES.P2PKH,
        prevOutScript,
        hasWitness: false,
        signScript: prevOutScript,
        signType: SCRIPT_TYPES.P2PKH,
        pubkeys: [ourPubKey],
        signatures: [void 0]
      };
    }
    function build(type, input, allowIncomplete) {
      const pubkeys = input.pubkeys || [];
      let signatures = input.signatures || [];
      switch (type) {
        case SCRIPT_TYPES.P2PKH: {
          if (pubkeys.length === 0)
            break;
          if (signatures.length === 0)
            break;
          return payments.p2pkh({ pubkey: pubkeys[0], signature: signatures[0] });
        }
        case SCRIPT_TYPES.P2WPKH: {
          if (pubkeys.length === 0)
            break;
          if (signatures.length === 0)
            break;
          return payments.p2wpkh({ pubkey: pubkeys[0], signature: signatures[0] });
        }
        case SCRIPT_TYPES.P2PK: {
          if (pubkeys.length === 0)
            break;
          if (signatures.length === 0)
            break;
          return payments.p2pk({ signature: signatures[0] });
        }
        case SCRIPT_TYPES.P2MS: {
          const m = input.maxSignatures;
          if (allowIncomplete) {
            signatures = signatures.map((x) => x || script_1.OPS.OP_0);
          } else {
            signatures = signatures.filter((x) => x);
          }
          const validate = !allowIncomplete || m === signatures.length;
          return payments.p2ms({ m, pubkeys, signatures }, { allowIncomplete, validate });
        }
        case SCRIPT_TYPES.P2SH: {
          const redeem = build(input.redeemScriptType, input, allowIncomplete);
          if (!redeem)
            return;
          return payments.p2sh({
            redeem: {
              output: redeem.output || input.redeemScript,
              input: redeem.input,
              witness: redeem.witness
            }
          });
        }
        case SCRIPT_TYPES.P2WSH: {
          const redeem = build(input.witnessScriptType, input, allowIncomplete);
          if (!redeem)
            return;
          return payments.p2wsh({
            redeem: {
              output: input.witnessScript,
              input: redeem.input,
              witness: redeem.witness
            }
          });
        }
      }
    }
    function canSign(input) {
      return input.signScript !== void 0 && input.signType !== void 0 && input.pubkeys !== void 0 && input.signatures !== void 0 && input.signatures.length === input.pubkeys.length && input.pubkeys.length > 0 && (input.hasWitness === false || input.value !== void 0);
    }
    function signatureHashType(buffer) {
      return buffer.readUInt8(buffer.length - 1);
    }
    function checkSignArgs(inputs, signParams) {
      if (!PREVOUT_TYPES.has(signParams.prevOutScriptType)) {
        throw new TypeError(`Unknown prevOutScriptType "${signParams.prevOutScriptType}"`);
      }
      tfMessage(typeforce.Number, signParams.vin, `sign must include vin parameter as Number (input index)`);
      tfMessage(types.Signer, signParams.keyPair, `sign must include keyPair parameter as Signer interface`);
      tfMessage(typeforce.maybe(typeforce.Number), signParams.hashType, `sign hashType parameter must be a number`);
      const prevOutType = (inputs[signParams.vin] || []).prevOutType;
      const posType = signParams.prevOutScriptType;
      switch (posType) {
        case "p2pkh":
          if (prevOutType && prevOutType !== "pubkeyhash") {
            throw new TypeError(`input #${signParams.vin} is not of type p2pkh: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.value(void 0), signParams.redeemScript, `${posType} requires NO redeemScript`);
          tfMessage(typeforce.value(void 0), signParams.witnessValue, `${posType} requires NO witnessValue`);
          break;
        case "p2pk":
          if (prevOutType && prevOutType !== "pubkey") {
            throw new TypeError(`input #${signParams.vin} is not of type p2pk: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.value(void 0), signParams.redeemScript, `${posType} requires NO redeemScript`);
          tfMessage(typeforce.value(void 0), signParams.witnessValue, `${posType} requires NO witnessValue`);
          break;
        case "p2wpkh":
          if (prevOutType && prevOutType !== "witnesspubkeyhash") {
            throw new TypeError(`input #${signParams.vin} is not of type p2wpkh: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.value(void 0), signParams.redeemScript, `${posType} requires NO redeemScript`);
          tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);
          break;
        case "p2ms":
          if (prevOutType && prevOutType !== "multisig") {
            throw new TypeError(`input #${signParams.vin} is not of type p2ms: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.value(void 0), signParams.redeemScript, `${posType} requires NO redeemScript`);
          tfMessage(typeforce.value(void 0), signParams.witnessValue, `${posType} requires NO witnessValue`);
          break;
        case "p2sh-p2wpkh":
          if (prevOutType && prevOutType !== "scripthash") {
            throw new TypeError(`input #${signParams.vin} is not of type p2sh-p2wpkh: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires redeemScript`);
          tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);
          break;
        case "p2sh-p2ms":
        case "p2sh-p2pk":
        case "p2sh-p2pkh":
          if (prevOutType && prevOutType !== "scripthash") {
            throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);
          }
          tfMessage(typeforce.value(void 0), signParams.witnessScript, `${posType} requires NO witnessScript`);
          tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires redeemScript`);
          tfMessage(typeforce.value(void 0), signParams.witnessValue, `${posType} requires NO witnessValue`);
          break;
        case "p2wsh-p2ms":
        case "p2wsh-p2pk":
        case "p2wsh-p2pkh":
          if (prevOutType && prevOutType !== "witnessscripthash") {
            throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);
          }
          tfMessage(typeforce.Buffer, signParams.witnessScript, `${posType} requires witnessScript`);
          tfMessage(typeforce.value(void 0), signParams.redeemScript, `${posType} requires NO redeemScript`);
          tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessValue`);
          break;
        case "p2sh-p2wsh-p2ms":
        case "p2sh-p2wsh-p2pk":
        case "p2sh-p2wsh-p2pkh":
          if (prevOutType && prevOutType !== "scripthash") {
            throw new TypeError(`input #${signParams.vin} is not of type ${posType}: ${prevOutType}`);
          }
          tfMessage(typeforce.Buffer, signParams.witnessScript, `${posType} requires witnessScript`);
          tfMessage(typeforce.Buffer, signParams.redeemScript, `${posType} requires witnessScript`);
          tfMessage(types.Satoshi, signParams.witnessValue, `${posType} requires witnessScript`);
          break;
      }
    }
    function trySign({
      input,
      ourPubKey,
      keyPair,
      signatureHash,
      hashType,
      useLowR
    }) {
      let signed = false;
      for (const [i, pubKey] of input.pubkeys.entries()) {
        if (!ourPubKey.equals(pubKey))
          continue;
        if (input.signatures[i])
          throw new Error("Signature already exists");
        if (ourPubKey.length !== 33 && input.hasWitness) {
          throw new Error("BIP143 rejects uncompressed public keys in P2WPKH or P2WSH");
        }
        const signature = keyPair.sign(signatureHash, useLowR);
        input.signatures[i] = bscript.signature.encode(signature, hashType);
        signed = true;
      }
      if (!signed)
        throw new Error("Key pair cannot sign for this input");
    }
    function getSigningData(network, inputs, needsOutputs, tx, signParams, forkBools, keyPair, redeemScript, hashType, witnessValue, witnessScript, useLowR) {
      let vin;
      if (typeof signParams === "number") {
        console.warn("DEPRECATED: TransactionBuilder sign method arguments will change in v6, please use the TxbSignArg interface");
        vin = signParams;
      } else if (typeof signParams === "object") {
        checkSignArgs(inputs, signParams);
        ({
          vin,
          keyPair,
          redeemScript,
          hashType,
          witnessValue,
          witnessScript
        } = signParams);
      } else {
        throw new TypeError("TransactionBuilder sign first arg must be TxbSignArg or number");
      }
      if (keyPair === void 0) {
        throw new Error("sign requires keypair");
      }
      if (keyPair.network && keyPair.network !== network)
        throw new TypeError("Inconsistent network");
      if (!inputs[vin])
        throw new Error("No input at index: " + vin);
      hashType = hashType || transaction_1.Transaction.SIGHASH_ALL;
      if (needsOutputs(hashType))
        throw new Error("Transaction needs outputs");
      const input = inputs[vin];
      if (input.redeemScript !== void 0 && redeemScript && !input.redeemScript.equals(redeemScript)) {
        throw new Error("Inconsistent redeemScript");
      }
      const ourPubKey = keyPair.publicKey || keyPair.getPublicKey && keyPair.getPublicKey();
      if (!canSign(input)) {
        if (witnessValue !== void 0) {
          if (input.value !== void 0 && input.value !== witnessValue)
            throw new Error("Input did not match witnessValue");
          typeforce(types.Satoshi, witnessValue);
          input.value = witnessValue;
        }
        if (!canSign(input)) {
          const prepared = prepareInput(input, ourPubKey, redeemScript, witnessScript);
          Object.assign(input, prepared);
        }
        if (!canSign(input))
          throw Error(input.prevOutType + " not supported");
      }
      let signatureHash;
      if (forkBools.btg) {
        signatureHash = tx.hashForGoldSignature(vin, input.signScript, input.value, hashType, !!input.witness);
      } else if (forkBools.bch) {
        signatureHash = tx.hashForCashSignature(vin, input.signScript, input.value, hashType);
      } else {
        if (input.hasWitness) {
          signatureHash = tx.hashForWitnessV0(vin, input.signScript, input.value, hashType);
        } else {
          signatureHash = tx.hashForSignature(vin, input.signScript, hashType);
        }
      }
      return {
        input,
        ourPubKey,
        keyPair,
        signatureHash,
        hashType,
        useLowR: !!useLowR
      };
    }
  }
});

// node_modules/@shapeshiftoss/bitcoinjs-lib/src/index.js
var require_src3 = __commonJS({
  "node_modules/@shapeshiftoss/bitcoinjs-lib/src/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bip32 = require_src();
    exports2.bip32 = bip32;
    var address = require_address();
    exports2.address = address;
    var crypto2 = require_crypto3();
    exports2.crypto = crypto2;
    var ECPair = require_ecpair();
    exports2.ECPair = ECPair;
    var networks = require_networks();
    exports2.networks = networks;
    var payments = require_payments();
    exports2.payments = payments;
    var script = require_script();
    exports2.script = script;
    var block_1 = require_block();
    exports2.Block = block_1.Block;
    var psbt_1 = require_psbt2();
    exports2.Psbt = psbt_1.Psbt;
    var script_1 = require_script();
    exports2.opcodes = script_1.OPS;
    var transaction_1 = require_transaction();
    exports2.Transaction = transaction_1.Transaction;
    var transaction_builder_1 = require_transaction_builder();
    exports2.TransactionBuilder = transaction_builder_1.TransactionBuilder;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/utils.js
var require_utils4 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.translateOutputScriptType = exports2.translateInputScriptType = exports2.toUTF8Array = exports2.protoFieldToSetMethod = exports2.SEGMENT_SIZE = void 0;
    var Types = __importStar(require_types_pb());
    var core = __importStar(require_dist3());
    exports2.SEGMENT_SIZE = 63;
    function protoFieldToSetMethod(fieldName) {
      return `set${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}`;
    }
    exports2.protoFieldToSetMethod = protoFieldToSetMethod;
    function toUTF8Array(str) {
      var utf8 = [];
      for (var i = 0; i < str.length; i++) {
        var charcode = str.charCodeAt(i);
        if (charcode < 128)
          utf8.push(charcode);
        else if (charcode < 2048) {
          utf8.push(192 | charcode >> 6, 128 | charcode & 63);
        } else if (charcode < 55296 || charcode >= 57344) {
          utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
        } else {
          i++;
          charcode = (charcode & 1023) << 10 | str.charCodeAt(i) & 1023;
          utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
        }
      }
      return new Uint8Array(utf8);
    }
    exports2.toUTF8Array = toUTF8Array;
    function translateInputScriptType(scriptType) {
      switch (scriptType) {
        case core.BTCInputScriptType.CashAddr:
        case core.BTCInputScriptType.SpendAddress:
          return Types.InputScriptType.SPENDADDRESS;
        case core.BTCInputScriptType.SpendMultisig:
          return Types.InputScriptType.SPENDMULTISIG;
        case core.BTCInputScriptType.SpendP2SHWitness:
          return Types.InputScriptType.SPENDP2SHWITNESS;
        case core.BTCInputScriptType.SpendWitness:
          return Types.InputScriptType.SPENDWITNESS;
      }
      throw new Error("unhandled InputSriptType enum: " + scriptType);
    }
    exports2.translateInputScriptType = translateInputScriptType;
    function translateOutputScriptType(scriptType) {
      switch (scriptType) {
        case core.BTCOutputScriptType.PayToAddress:
          return Types.OutputScriptType.PAYTOADDRESS;
        case core.BTCOutputScriptType.PayToMultisig:
          return Types.OutputScriptType.PAYTOMULTISIG;
        case core.BTCOutputScriptType.PayToP2SHWitness:
          return Types.OutputScriptType.PAYTOP2SHWITNESS;
        case core.BTCOutputScriptType.PayToWitness:
          return Types.OutputScriptType.PAYTOWITNESS;
      }
      throw new Error("unhandled OutputScriptType enum: " + scriptType);
    }
    exports2.translateOutputScriptType = translateOutputScriptType;
  }
});

// node_modules/icepick/icepick.js
var require_icepick = __commonJS({
  "node_modules/icepick/icepick.js"(exports2) {
    "use strict";
    init_define_process_env();
    var i = exports2;
    var weCareAbout = (val) => val !== null && (Array.isArray(val) || isObjectLike(val));
    var isObjectLike = (val) => typeof val === "object" && (val.constructor === Object || val.constructor == null) && (Object.getPrototypeOf(val) === Object.prototype || Object.getPrototypeOf(val) === null);
    var forKeys = (obj, iter) => {
      let idx, keys;
      if (Array.isArray(obj)) {
        idx = obj.length;
        while (idx--) {
          iter(idx);
        }
        return;
      }
      keys = Object.keys(obj);
      idx = keys.length;
      while (idx--) {
        iter(keys[idx]);
      }
    };
    var cloneObj = (obj) => {
      const newObj = obj.constructor == null ? /* @__PURE__ */ Object.create(null) : {};
      const keys = Object.keys(obj);
      let idx = keys.length;
      let key;
      while (idx--) {
        key = keys[idx];
        newObj[key] = obj[key];
      }
      return newObj;
    };
    var clone = (coll) => {
      if (Array.isArray(coll)) {
        return coll.slice();
      } else {
        return cloneObj(coll);
      }
    };
    var freezeIfNeeded = false ? identity : (coll) => {
      if (weCareAbout(coll) && !Object.isFrozen(coll)) {
        return baseFreeze(coll);
      }
      return coll;
    };
    var _freeze = false ? identity : (coll) => {
      if (typeof coll === "object") {
        return Object.freeze(coll);
      } else {
        return coll;
      }
    };
    var prevNodes = [];
    var baseFreeze = (coll) => {
      if (prevNodes.some((val) => val === coll)) {
        throw new Error("object has a reference cycle");
      }
      prevNodes.push(coll);
      forKeys(coll, (key) => {
        const prop = coll[key];
        if (weCareAbout(prop)) {
          baseFreeze(prop);
        }
      });
      prevNodes.pop();
      Object.freeze(coll);
      return coll;
    };
    exports2.freeze = false ? identity : baseFreeze;
    exports2.thaw = function thaw(coll) {
      if (!weCareAbout(coll) || !Object.isFrozen(coll))
        return coll;
      const newColl = Array.isArray(coll) ? new Array(coll.length) : {};
      forKeys(coll, (key) => {
        newColl[key] = thaw(coll[key]);
      });
      return newColl;
    };
    exports2.assoc = function assoc(coll, key, value) {
      if (coll[key] === value) {
        return _freeze(coll);
      }
      const newObj = clone(coll);
      newObj[key] = freezeIfNeeded(value);
      return _freeze(newObj);
    };
    exports2.set = exports2.assoc;
    exports2.dissoc = function dissoc(coll, key) {
      const newObj = clone(coll);
      delete newObj[key];
      return _freeze(newObj);
    };
    exports2.unset = exports2.dissoc;
    exports2.assocIn = function assocIn(coll, path, value) {
      const key0 = path[0];
      if (path.length === 1) {
        return i.assoc(coll, key0, value);
      } else {
        return i.assoc(coll, key0, assocIn(coll[key0] || {}, path.slice(1), value));
      }
    };
    exports2.setIn = exports2.assocIn;
    exports2.dissocIn = function dissocIn(coll, path) {
      const key0 = path[0];
      if (!coll.hasOwnProperty(key0)) {
        return coll;
      }
      if (path.length === 1) {
        return i.dissoc(coll, key0);
      } else {
        return i.assoc(coll, key0, dissocIn(coll[key0], path.slice(1)));
      }
    };
    exports2.unsetIn = exports2.dissocIn;
    function baseGet(coll, path) {
      return (path || []).reduce((curr, key) => {
        if (!curr) {
          return;
        }
        return curr[key];
      }, coll);
    }
    exports2.getIn = baseGet;
    exports2.updateIn = function updateIn(coll, path, callback) {
      const existingVal = baseGet(coll, path);
      return i.assocIn(coll, path, callback(existingVal));
    };
    ["push", "unshift", "pop", "shift", "reverse", "sort"].forEach((methodName) => {
      exports2[methodName] = function(arr, val) {
        const newArr = [...arr];
        newArr[methodName](freezeIfNeeded(val));
        return _freeze(newArr);
      };
      exports2[methodName].displayName = "icepick." + methodName;
    });
    exports2.splice = function splice(arr, ..._args) {
      const newArr = [...arr];
      const args = _args.map(freezeIfNeeded);
      newArr.splice.apply(newArr, args);
      return _freeze(newArr);
    };
    exports2.slice = function slice(arr, arg1, arg2) {
      const newArr = arr.slice(arg1, arg2);
      return _freeze(newArr);
    };
    ["map", "filter"].forEach((methodName) => {
      exports2[methodName] = function(fn, arr) {
        const newArr = arr[methodName](fn);
        return _freeze(newArr);
      };
      exports2[methodName].displayName = "icepick." + methodName;
    });
    exports2.extend = exports2.assign = function assign(obj, ...objs) {
      const newObj = objs.reduce(singleAssign, obj);
      return _freeze(newObj);
    };
    function singleAssign(obj1, obj2) {
      return Object.keys(obj2).reduce((obj, key) => {
        return i.assoc(obj, key, obj2[key]);
      }, obj1);
    }
    exports2.merge = merge;
    function merge(target, source, resolver) {
      if (target == null || source == null) {
        return target;
      }
      return Object.keys(source).reduce((obj, key) => {
        const sourceVal = source[key];
        const targetVal = obj[key];
        const resolvedSourceVal = resolver ? resolver(targetVal, sourceVal, key) : sourceVal;
        if (weCareAbout(sourceVal) && weCareAbout(targetVal)) {
          if (resolvedSourceVal === targetVal && (Object.isFrozen(resolvedSourceVal) && Object.isFrozen(targetVal))) {
            return obj;
          }
          if (Array.isArray(sourceVal)) {
            return i.assoc(obj, key, resolvedSourceVal);
          }
          return assocIfDifferent(obj, key, merge(targetVal, resolvedSourceVal, resolver));
        }
        return assocIfDifferent(obj, key, resolvedSourceVal);
      }, target);
    }
    function assocIfDifferent(target, key, value) {
      if (target[key] === value) {
        return target;
      }
      return i.assoc(target, key, value);
    }
    var chainProto = {
      value: function value() {
        return this.val;
      },
      thru: function thru(fn) {
        this.val = freezeIfNeeded(fn(this.val));
        return this;
      }
    };
    Object.keys(exports2).forEach((methodName) => {
      if (methodName.match(/^(map|filter)$/)) {
        chainProto[methodName] = function(fn) {
          this.val = exports2[methodName](fn, this.val);
          return this;
        };
        return;
      }
      chainProto[methodName] = function(...args) {
        this.val = exports2[methodName](this.val, ...args);
        return this;
      };
    });
    exports2.chain = function chain(val) {
      const wrapped = Object.create(chainProto);
      wrapped.val = val;
      return wrapped;
    };
    if (false) {
      exports2._weCareAbout = weCareAbout;
    }
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/bitcoin.js
var require_bitcoin = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/bitcoin.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.btcIsSameAccount = exports2.btcGetAccountPaths = exports2.btcVerifyMessage = exports2.btcSignMessage = exports2.btcSupportsNativeShapeShift = exports2.btcSupportsSecureTransfer = exports2.btcSignTx = exports2.btcGetAddress = exports2.btcSupportsScriptType = exports2.btcSupportsCoin = void 0;
    var Exchange = __importStar(require_exchange_pb());
    var Messages = __importStar(require_messages_pb());
    var Types = __importStar(require_types_pb());
    var core = __importStar(require_dist3());
    var bitcoinjs = __importStar(require_src3());
    var utils_1 = require_utils4();
    var icepick_1 = require_icepick();
    var supportedCoins = ["Bitcoin", "Testnet", "BitcoinCash", "BitcoinGold", "Litecoin", "Dash", "DigiByte", "Dogecoin"];
    var segwitCoins = ["Bitcoin", "Testnet", "BitcoinGold", "Litecoin"];
    function legacyAccount(coin, slip44, accountIdx) {
      return {
        coin,
        scriptType: core.BTCInputScriptType.SpendAddress,
        addressNList: [2147483648 + 44, 2147483648 + slip44, 2147483648 + accountIdx]
      };
    }
    function segwitAccount(coin, slip44, accountIdx) {
      return {
        coin,
        scriptType: core.BTCInputScriptType.SpendP2SHWitness,
        addressNList: [2147483648 + 49, 2147483648 + slip44, 2147483648 + accountIdx]
      };
    }
    function segwitNativeAccount(coin, slip44, accountIdx) {
      return {
        coin,
        scriptType: core.BTCInputScriptType.SpendWitness,
        addressNList: [2147483648 + 84, 2147483648 + slip44, 2147483648 + accountIdx]
      };
    }
    function packVarint(n) {
      if (n < 253)
        return n.toString(16).padStart(2, "0");
      else if (n < 65535)
        return "FD" + n.toString(16).padStart(4, "0");
      else if (n < 4294967295)
        return "FE" + n.toString(16).padStart(8, "0");
      else
        return "FF" + n.toString(16).padStart(16, "0");
    }
    function prepareSignTx(coin, inputs, outputs) {
      const unsignedTx = new Types.TransactionType();
      unsignedTx.setInputsCnt(inputs.length);
      unsignedTx.setOutputsCnt(outputs.length);
      inputs.forEach((input, i) => {
        const utxo = new Types.TxInputType();
        utxo.setPrevHash(core.fromHexString(input.txid));
        utxo.setPrevIndex(input.vout);
        if (input.sequence !== void 0)
          utxo.setSequence(input.sequence);
        utxo.setScriptType(utils_1.translateInputScriptType(input.scriptType));
        utxo.setAddressNList(input.addressNList);
        utxo.setAmount(Number(input.amount));
        unsignedTx.addInputs(utxo, i);
      });
      outputs.forEach((o, k) => {
        var _a, _b;
        const output = o;
        const newOutput = new Types.TxOutputType();
        newOutput.setAmount(Number(output.amount));
        if (output.exchangeType) {
          const signedHex = core.base64toHEX(output.exchangeType.signedExchangeResponse);
          const signedExchange = Exchange.SignedExchangeResponse.deserializeBinary(core.arrayify(signedHex));
          let depAmt = core.mustBeDefined(signedExchange.getResponsev2()).getDepositAmount_asU8();
          let val = 0;
          for (let jj = depAmt.length - 1; jj >= 0; jj--) {
            val += depAmt[jj] * Math.pow(2, 8 * (depAmt.length - jj - 1));
          }
          const outExchangeType = new Types.ExchangeType();
          outExchangeType.setSignedExchangeResponse(signedExchange);
          outExchangeType.setWithdrawalCoinName(output.exchangeType.withdrawalCoinName);
          outExchangeType.setWithdrawalAddressNList(output.exchangeType.withdrawalAddressNList);
          outExchangeType.setWithdrawalScriptType(utils_1.translateInputScriptType(output.exchangeType.withdrawalScriptType || core.BTCInputScriptType.SpendAddress));
          outExchangeType.setReturnAddressNList(output.exchangeType.returnAddressNList);
          outExchangeType.setReturnScriptType(utils_1.translateInputScriptType(output.exchangeType.returnScriptType || core.BTCInputScriptType.SpendAddress));
          newOutput.setAmount(val);
          newOutput.setAddress(core.mustBeDefined((_b = (_a = signedExchange.toObject().responsev2) === null || _a === void 0 ? void 0 : _a.depositAddress) === null || _b === void 0 ? void 0 : _b.address));
          newOutput.setScriptType(Types.OutputScriptType.PAYTOADDRESS);
          newOutput.setAddressType(Types.OutputAddressType.EXCHANGE);
          newOutput.setExchangeType(outExchangeType);
        } else if (output.isChange || output.addressType === core.BTCOutputAddressType.Transfer) {
          newOutput.setScriptType(utils_1.translateOutputScriptType(output.scriptType));
          newOutput.setAddressNList(output.addressNList);
          newOutput.setAddressType(output.isChange ? Types.OutputAddressType.CHANGE : Types.OutputAddressType.TRANSFER);
        } else if (output.opReturnData !== void 0 && output.opReturnData !== null) {
          newOutput.setScriptType(Types.OutputScriptType.PAYTOOPRETURN);
          newOutput.setAddressType(Types.OutputAddressType.SPEND);
          newOutput.setOpReturnData(output.opReturnData);
        } else {
          newOutput.setScriptType(Types.OutputScriptType.PAYTOADDRESS);
          newOutput.setAddress(output.address);
          newOutput.setAddressType(Types.OutputAddressType.SPEND);
        }
        unsignedTx.addOutputs(newOutput, k);
      });
      const txmap = {};
      txmap["unsigned"] = unsignedTx;
      const forceBip143Coins = ["BitcoinGold", "BitcoinCash", "BitcoinSV"];
      if (forceBip143Coins.includes(coin))
        return txmap;
      inputs.forEach((inputTx) => {
        if (inputTx.txid in txmap)
          return;
        if (inputTx.scriptType === core.BTCInputScriptType.SpendP2SHWitness || inputTx.scriptType === core.BTCInputScriptType.SpendWitness || inputTx.scriptType === core.BTCInputScriptType.External)
          return;
        const prevTx = (() => {
          if (inputTx.tx)
            return inputTx.tx;
          if (!inputTx.hex)
            throw new Error("non-segwit inputs must have the associated prev tx");
          const tx2 = bitcoinjs.Transaction.fromHex(inputTx.hex);
          return {
            version: tx2.version,
            locktime: tx2.locktime,
            vin: tx2.ins.map((input) => ({
              txid: Buffer.from(input.hash).reverse().toString("hex"),
              vout: input.index,
              scriptSig: {
                hex: input.script.toString("hex")
              },
              sequence: input.sequence
            })),
            vout: tx2.outs.map((output, i) => ({
              value: String(output.value),
              scriptPubKey: {
                hex: output.script.toString("hex")
              }
            }))
          };
        })();
        const tx = new Types.TransactionType();
        tx.setVersion(prevTx.version);
        tx.setLockTime(prevTx.locktime);
        tx.setInputsCnt(prevTx.vin.length);
        tx.setOutputsCnt(prevTx.vout.length);
        prevTx.vin.forEach((vin, i) => {
          const txInput = new Types.TxInputType();
          if ("coinbase" in vin) {
            txInput.setPrevHash(core.fromHexString("\0".repeat(64)));
            txInput.setPrevIndex(4294967295);
            txInput.setScriptSig(core.fromHexString(core.mustBeDefined(vin.coinbase)));
            txInput.setSequence(vin.sequence);
          } else {
            txInput.setPrevHash(core.fromHexString(vin.txid));
            txInput.setPrevIndex(vin.vout);
            txInput.setScriptSig(core.fromHexString(vin.scriptSig.hex));
            txInput.setSequence(vin.sequence);
          }
          tx.addInputs(txInput, i);
        });
        prevTx.vout.forEach((vout, i) => {
          const txOutput = new Types.TxOutputBinType();
          txOutput.setAmount(core.satsFromStr(vout.value));
          txOutput.setScriptPubkey(core.fromHexString(vout.scriptPubKey.hex));
          tx.addBinOutputs(txOutput, i);
        });
        if (coin === "Dash") {
          let dip2_type = prevTx.type || 0;
          if (prevTx.version === 3 && dip2_type !== 0) {
            if (!prevTx.extraPayload)
              throw new Error("Payload missing in DIP2 transaction");
            tx.setExtraData(core.fromHexString(packVarint(prevTx.extraPayload.length * 2) + prevTx.extraPayload));
          }
          tx.setVersion(prevTx.version | dip2_type << 16);
        }
        txmap[inputTx.txid] = tx;
      });
      return txmap;
    }
    function ensureCoinSupport(wallet, coin) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!supportedCoins.includes(coin))
          throw new Error(`'${coin}' not yet supported in HDWalletKeepKey`);
        if (!wallet.btcSupportsCoin(coin))
          throw new Error(`'${coin} is not supported in this firmware version`);
      });
    }
    function validateVoutOrdering(msg) {
      var _a;
      if (msg.outputs[0].address != msg.vaultAddress) {
        return false;
      }
      if (msg.outputs[1].addressType != core.BTCOutputAddressType.Change) {
        return false;
      }
      if (!(msg.outputs[2] && ((_a = msg.outputs[2]) === null || _a === void 0 ? void 0 : _a.opReturnData))) {
        return false;
      }
      return true;
    }
    function btcSupportsCoin(coin) {
      return __awaiter(this, void 0, void 0, function* () {
        return supportedCoins.includes(coin);
      });
    }
    exports2.btcSupportsCoin = btcSupportsCoin;
    function btcSupportsScriptType(coin, scriptType) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!supportedCoins.includes(coin))
          return false;
        if (!segwitCoins.includes(coin) && scriptType === core.BTCInputScriptType.SpendP2SHWitness)
          return false;
        if (!segwitCoins.includes(coin) && scriptType === core.BTCInputScriptType.SpendWitness)
          return false;
        return true;
      });
    }
    exports2.btcSupportsScriptType = btcSupportsScriptType;
    function btcGetAddress(wallet, transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        yield ensureCoinSupport(wallet, msg.coin);
        const addr = new Messages.GetAddress();
        addr.setAddressNList(msg.addressNList);
        addr.setCoinName(msg.coin);
        addr.setShowDisplay(msg.showDisplay || false);
        addr.setScriptType(utils_1.translateInputScriptType(msg.scriptType || core.BTCInputScriptType.SpendAddress));
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_GETADDRESS, addr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        if (response.message_type === core.Events.CANCEL)
          throw response;
        const btcAddress = response.proto;
        return core.mustBeDefined(btcAddress.getAddress());
      });
    }
    exports2.btcGetAddress = btcGetAddress;
    function btcSignTx(wallet, transport, msgIn) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          const msg = icepick_1.thaw(msgIn);
          msg.outputs = icepick_1.thaw(msgIn.outputs);
          yield ensureCoinSupport(wallet, msg.coin);
          if (msg.opReturnData) {
            if (msg.opReturnData.length > 80) {
              throw new Error("OP_RETURN output character count is too damn high.");
            }
            msg.outputs.push({
              addressType: core.BTCOutputAddressType.Spend,
              opReturnData: Buffer.from(msg.opReturnData).toString("base64"),
              amount: "0",
              isChange: false
            });
          }
          if (msg.vaultAddress && !validateVoutOrdering(msg)) {
            throw new Error("Improper vout ordering for BTC Thorchain transaction");
          }
          const txmap = prepareSignTx(msg.coin, msg.inputs, msg.outputs);
          const tx = new Messages.SignTx();
          tx.setInputsCount(msg.inputs.length);
          tx.setOutputsCount(msg.outputs.length);
          tx.setCoinName(msg.coin);
          if (msg.version !== void 0)
            tx.setVersion(msg.version);
          tx.setLockTime(msg.locktime || 0);
          let responseType;
          let response;
          const { message_enum, proto: proto2 } = yield transport.call(Messages.MessageType.MESSAGETYPE_SIGNTX, tx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          responseType = message_enum;
          response = proto2;
          const signatures = new Array(msg.inputs.length).fill(null);
          let serializedTx = "";
          try {
            while (true) {
              if (responseType !== Messages.MessageType.MESSAGETYPE_TXREQUEST) {
                throw new Error(`Unexpected message type: ${responseType}`);
              }
              let txRequest = response;
              if (txRequest.hasSerialized() && txRequest.getSerialized().hasSerializedTx()) {
                serializedTx += core.toHexString(txRequest.getSerialized().getSerializedTx_asU8());
              }
              if (txRequest.hasSerialized() && txRequest.getSerialized().hasSignatureIndex()) {
                const sigIdx = txRequest.getSerialized().getSignatureIndex();
                if (signatures[sigIdx] !== null) {
                  throw new Error(`Signature for index ${sigIdx} already filled`);
                }
                signatures[sigIdx] = core.toHexString(txRequest.getSerialized().getSignature_asU8());
              }
              if (txRequest.getRequestType() === Types.RequestType.TXFINISHED) {
                break;
              }
              let currentTx;
              let msg2;
              let txAck;
              if (!txRequest.hasDetails())
                throw new Error("expected details");
              const reqDetails = txRequest.getDetails();
              if (!reqDetails.hasTxHash()) {
                currentTx = txmap["unsigned"];
              } else {
                currentTx = txmap[core.toHexString(reqDetails.getTxHash_asU8())];
              }
              if (txRequest.getRequestType() === Types.RequestType.TXMETA) {
                msg2 = new Types.TransactionType();
                if (currentTx.hasVersion())
                  msg2.setVersion(currentTx.getVersion());
                if (currentTx.hasLockTime())
                  msg2.setLockTime(currentTx.getLockTime());
                if (currentTx.hasInputsCnt())
                  msg2.setInputsCnt(currentTx.getInputsCnt());
                if (reqDetails.hasTxHash()) {
                  msg2.setOutputsCnt(currentTx.getBinOutputsList().length);
                } else {
                  msg2.setOutputsCnt(currentTx.getOutputsList().length);
                }
                if (currentTx.hasExtraData()) {
                  msg2.setExtraDataLen(currentTx.getExtraData_asU8().length);
                } else {
                  msg2.setExtraDataLen(0);
                }
                txAck = new Messages.TxAck();
                txAck.setTx(msg2);
                const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {
                  msgTimeout: core.LONG_TIMEOUT,
                  omitLock: true
                });
                responseType = message.message_enum;
                response = message.proto;
                continue;
              }
              if (txRequest.getRequestType() === Types.RequestType.TXINPUT) {
                if (!reqDetails.hasRequestIndex())
                  throw new Error("expected request index");
                const reqIndex = reqDetails.getRequestIndex();
                msg2 = new Types.TransactionType();
                msg2.setInputsList([currentTx.getInputsList()[reqIndex]]);
                txAck = new Messages.TxAck();
                txAck.setTx(msg2);
                const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {
                  msgTimeout: core.LONG_TIMEOUT,
                  omitLock: true
                });
                responseType = message.message_enum;
                response = message.proto;
                continue;
              }
              if (txRequest.getRequestType() === Types.RequestType.TXOUTPUT) {
                if (!reqDetails.hasRequestIndex())
                  throw new Error("expected request index");
                const reqIndex = reqDetails.getRequestIndex();
                msg2 = new Types.TransactionType();
                if (reqDetails.hasTxHash()) {
                  msg2.setBinOutputsList([currentTx.getBinOutputsList()[reqIndex]]);
                } else {
                  msg2.setOutputsList([currentTx.getOutputsList()[reqIndex]]);
                  msg2.setOutputsCnt(1);
                }
                txAck = new Messages.TxAck();
                txAck.setTx(msg2);
                const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {
                  msgTimeout: core.LONG_TIMEOUT,
                  omitLock: true
                });
                responseType = message.message_enum;
                response = message.proto;
                continue;
              }
              if (txRequest.getRequestType() === Types.RequestType.TXEXTRADATA) {
                if (!reqDetails.hasExtraDataOffset() || !reqDetails.hasExtraDataLen())
                  throw new Error("missing extra data offset and length");
                let offset = reqDetails.getExtraDataOffset();
                let length = reqDetails.getExtraDataLen();
                msg2 = new Types.TransactionType();
                msg2.setExtraData(currentTx.getExtraData_asU8().slice(offset, offset + length));
                txAck = new Messages.TxAck();
                txAck.setTx(msg2);
                const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {
                  msgTimeout: core.LONG_TIMEOUT,
                  omitLock: true
                });
                responseType = message.message_enum;
                response = message.proto;
                continue;
              }
            }
          } catch (error) {
            console.error({ error });
            throw new Error("Failed to sign BTC transaction");
          }
          if (signatures.includes(null)) {
            throw new Error("Some signatures are missing!");
          }
          return {
            signatures,
            serializedTx
          };
        }));
      });
    }
    exports2.btcSignTx = btcSignTx;
    function btcSupportsSecureTransfer() {
      return __awaiter(this, void 0, void 0, function* () {
        return true;
      });
    }
    exports2.btcSupportsSecureTransfer = btcSupportsSecureTransfer;
    function btcSupportsNativeShapeShift() {
      return true;
    }
    exports2.btcSupportsNativeShapeShift = btcSupportsNativeShapeShift;
    function btcSignMessage(wallet, transport, msg) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        yield ensureCoinSupport(wallet, msg.coin);
        const sign = new Messages.SignMessage();
        sign.setAddressNList(msg.addressNList);
        sign.setMessage(utils_1.toUTF8Array(msg.message));
        sign.setCoinName(msg.coin || "Bitcoin");
        sign.setScriptType(utils_1.translateInputScriptType((_a = msg.scriptType) !== null && _a !== void 0 ? _a : core.BTCInputScriptType.SpendAddress));
        const event = yield transport.call(Messages.MessageType.MESSAGETYPE_SIGNMESSAGE, sign, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const messageSignature = event.proto;
        const address = messageSignature.getAddress();
        if (!address)
          throw new Error("btcSignMessage failed");
        return {
          address,
          signature: core.toHexString(messageSignature.getSignature_asU8())
        };
      });
    }
    exports2.btcSignMessage = btcSignMessage;
    function btcVerifyMessage(wallet, transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        yield ensureCoinSupport(wallet, msg.coin);
        const verify = new Messages.VerifyMessage();
        verify.setAddress(msg.address);
        verify.setSignature(core.arrayify("0x" + msg.signature));
        verify.setMessage(utils_1.toUTF8Array(msg.message));
        verify.setCoinName(msg.coin);
        let event;
        try {
          event = yield transport.call(Messages.MessageType.MESSAGETYPE_VERIFYMESSAGE, verify);
        } catch (e2) {
          if (core.isIndexable(e2) && e2.message_enum === Messages.MessageType.MESSAGETYPE_FAILURE) {
            return false;
          }
          throw e2;
        }
        const success = event.proto;
        return success.getMessage() === "Message verified";
      });
    }
    exports2.btcVerifyMessage = btcVerifyMessage;
    function btcGetAccountPaths(msg) {
      var _a;
      const slip44 = core.slip44ByCoin(msg.coin);
      if (slip44 === void 0)
        return [];
      const bip44 = legacyAccount(msg.coin, slip44, msg.accountIdx);
      const bip49 = segwitAccount(msg.coin, slip44, msg.accountIdx);
      const bip84 = segwitNativeAccount(msg.coin, slip44, msg.accountIdx);
      const btcLegacy = legacyAccount(msg.coin, core.slip44ByCoin("Bitcoin"), msg.accountIdx);
      const btcSegwit = segwitAccount(msg.coin, core.slip44ByCoin("Bitcoin"), msg.accountIdx);
      const btcSegwitNative = segwitNativeAccount(msg.coin, core.slip44ByCoin("Bitcoin"), msg.accountIdx);
      const bchLegacy = legacyAccount(msg.coin, core.slip44ByCoin("BitcoinCash"), msg.accountIdx);
      let paths = (_a = {
        Bitcoin: [bip44, bip49, bip84],
        Litecoin: [bip44, bip49, bip84],
        Dash: [bip44],
        DigiByte: [bip44, bip49, bip84],
        Dogecoin: [bip44],
        Testnet: [bip44, bip49, bip84],
        BitcoinCash: [bip44, btcLegacy],
        BitcoinSV: [bip44, bchLegacy, btcLegacy],
        BitcoinGold: [bip44, bip49, bip84, btcLegacy, btcSegwit, btcSegwitNative]
      }[msg.coin]) !== null && _a !== void 0 ? _a : [];
      if (msg.scriptType !== void 0)
        paths = paths.filter((path) => {
          return path.scriptType === msg.scriptType;
        });
      return paths;
    }
    exports2.btcGetAccountPaths = btcGetAccountPaths;
    function btcIsSameAccount(msg) {
      if (msg.length < 1)
        return false;
      if (msg.length > 3)
        return false;
      const account0 = msg[0];
      if (account0.addressNList.length != 3)
        return false;
      const purpose = account0.addressNList[0];
      const purposeForScriptType = {
        [core.BTCInputScriptType.SpendAddress]: 2147483648 + 44,
        [core.BTCInputScriptType.SpendP2SHWitness]: 2147483648 + 49,
        [core.BTCInputScriptType.SpendWitness]: 2147483648 + 84
      };
      if (purposeForScriptType[account0.scriptType] !== purpose)
        return false;
      const slip44 = account0.addressNList[1];
      if (slip44 < 2147483648)
        return false;
      const idx = account0.addressNList[2];
      if (idx < 2147483648)
        return false;
      if (msg.find((path) => {
        if (path.addressNList.length != 3)
          return true;
        if (![2147483648 + 44, 2147483648 + 49, 2147483648 + 84].includes(path.addressNList[0]))
          return true;
        if (purposeForScriptType[path.scriptType] !== path.addressNList[0])
          return true;
        if (path.addressNList[1] != slip44)
          return true;
        if (path.addressNList[2] != idx)
          return true;
      })) {
        return false;
      }
      return true;
    }
    exports2.btcIsSameAccount = btcIsSameAccount;
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-cosmos_pb.js
var require_messages_cosmos_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-cosmos_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var types_pb = require_types_pb();
    goog2.object.extend(proto, types_pb);
    goog2.exportSymbol("proto.CosmosAddress", null, global2);
    goog2.exportSymbol("proto.CosmosGetAddress", null, global2);
    goog2.exportSymbol("proto.CosmosMsgAck", null, global2);
    goog2.exportSymbol("proto.CosmosMsgRequest", null, global2);
    goog2.exportSymbol("proto.CosmosMsgSend", null, global2);
    goog2.exportSymbol("proto.CosmosSignTx", null, global2);
    goog2.exportSymbol("proto.CosmosSignedTx", null, global2);
    proto.CosmosGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.CosmosGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.CosmosGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosGetAddress.displayName = "proto.CosmosGetAddress";
    }
    proto.CosmosAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CosmosAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosAddress.displayName = "proto.CosmosAddress";
    }
    proto.CosmosSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.CosmosSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.CosmosSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosSignTx.displayName = "proto.CosmosSignTx";
    }
    proto.CosmosMsgRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CosmosMsgRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosMsgRequest.displayName = "proto.CosmosMsgRequest";
    }
    proto.CosmosMsgAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CosmosMsgAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosMsgAck.displayName = "proto.CosmosMsgAck";
    }
    proto.CosmosMsgSend = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CosmosMsgSend, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosMsgSend.displayName = "proto.CosmosMsgSend";
    }
    proto.CosmosSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.CosmosSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.CosmosSignedTx.displayName = "proto.CosmosSignedTx";
    }
    proto.CosmosGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosGetAddress.toObject(opt_includeInstance, this);
      };
      proto.CosmosGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosGetAddress();
      return proto.CosmosGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.CosmosGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.CosmosGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.CosmosGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.CosmosGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.CosmosGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.CosmosGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CosmosGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CosmosGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosAddress.toObject(opt_includeInstance, this);
      };
      proto.CosmosAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosAddress();
      return proto.CosmosAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.CosmosAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.CosmosAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CosmosAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CosmosAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.CosmosSignTx.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosSignTx.toObject(opt_includeInstance, this);
      };
      proto.CosmosSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          accountNumber: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          chainId: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          feeAmount: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          gas: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          memo: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          sequence: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          msgCount: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosSignTx();
      return proto.CosmosSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setAccountNumber(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setChainId(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setFeeAmount(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setGas(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setMemo(value);
            break;
          case 7:
            var value = reader.readUint64String();
            msg.setSequence(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setMsgCount(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeUint64String(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
    };
    proto.CosmosSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.CosmosSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.CosmosSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.CosmosSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.CosmosSignTx.prototype.getAccountNumber = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.CosmosSignTx.prototype.setAccountNumber = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CosmosSignTx.prototype.clearAccountNumber = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CosmosSignTx.prototype.hasAccountNumber = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.CosmosSignTx.prototype.getChainId = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.CosmosSignTx.prototype.setChainId = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.CosmosSignTx.prototype.clearChainId = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.CosmosSignTx.prototype.hasChainId = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.CosmosSignTx.prototype.getFeeAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.CosmosSignTx.prototype.setFeeAmount = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.CosmosSignTx.prototype.clearFeeAmount = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.CosmosSignTx.prototype.hasFeeAmount = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.CosmosSignTx.prototype.getGas = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.CosmosSignTx.prototype.setGas = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.CosmosSignTx.prototype.clearGas = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.CosmosSignTx.prototype.hasGas = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.CosmosSignTx.prototype.getMemo = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.CosmosSignTx.prototype.setMemo = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.CosmosSignTx.prototype.clearMemo = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.CosmosSignTx.prototype.hasMemo = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.CosmosSignTx.prototype.getSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "0");
    };
    proto.CosmosSignTx.prototype.setSequence = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.CosmosSignTx.prototype.clearSequence = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.CosmosSignTx.prototype.hasSequence = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.CosmosSignTx.prototype.getMsgCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.CosmosSignTx.prototype.setMsgCount = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.CosmosSignTx.prototype.clearMsgCount = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.CosmosSignTx.prototype.hasMsgCount = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosMsgRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosMsgRequest.toObject(opt_includeInstance, this);
      };
      proto.CosmosMsgRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosMsgRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosMsgRequest();
      return proto.CosmosMsgRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosMsgRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosMsgRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosMsgRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosMsgAck.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosMsgAck.toObject(opt_includeInstance, this);
      };
      proto.CosmosMsgAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          send: (f2 = msg.getSend()) && proto.CosmosMsgSend.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosMsgAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosMsgAck();
      return proto.CosmosMsgAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosMsgAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.CosmosMsgSend();
            reader.readMessage(value, proto.CosmosMsgSend.deserializeBinaryFromReader);
            msg.setSend(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosMsgAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosMsgAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosMsgAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getSend();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.CosmosMsgSend.serializeBinaryToWriter);
      }
    };
    proto.CosmosMsgAck.prototype.getSend = function() {
      return jspb2.Message.getWrapperField(this, proto.CosmosMsgSend, 1);
    };
    proto.CosmosMsgAck.prototype.setSend = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.CosmosMsgAck.prototype.clearSend = function() {
      return this.setSend(void 0);
    };
    proto.CosmosMsgAck.prototype.hasSend = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosMsgSend.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosMsgSend.toObject(opt_includeInstance, this);
      };
      proto.CosmosMsgSend.toObject = function(includeInstance, msg) {
        var f2, obj = {
          fromAddress: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          toAddress: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          amount: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          addressType: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          exchangeType: (f2 = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosMsgSend.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosMsgSend();
      return proto.CosmosMsgSend.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosMsgSend.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 6:
            var value = reader.readString();
            msg.setFromAddress(value);
            break;
          case 7:
            var value = reader.readString();
            msg.setToAddress(value);
            break;
          case 8:
            var value = reader.readUint64String();
            msg.setAmount(value);
            break;
          case 9:
            var value = reader.readEnum();
            msg.setAddressType(value);
            break;
          case 10:
            var value = new types_pb.ExchangeType();
            reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosMsgSend.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosMsgSend.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosMsgSend.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint64String(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeEnum(9, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(10, f2, types_pb.ExchangeType.serializeBinaryToWriter);
      }
    };
    proto.CosmosMsgSend.prototype.getFromAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.CosmosMsgSend.prototype.setFromAddress = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.CosmosMsgSend.prototype.clearFromAddress = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.CosmosMsgSend.prototype.hasFromAddress = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.CosmosMsgSend.prototype.getToAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.CosmosMsgSend.prototype.setToAddress = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.CosmosMsgSend.prototype.clearToAddress = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.CosmosMsgSend.prototype.hasToAddress = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.CosmosMsgSend.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "0");
    };
    proto.CosmosMsgSend.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.CosmosMsgSend.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.CosmosMsgSend.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.CosmosMsgSend.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.CosmosMsgSend.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.CosmosMsgSend.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.CosmosMsgSend.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.CosmosMsgSend.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, types_pb.ExchangeType, 10);
    };
    proto.CosmosMsgSend.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 10, value);
    };
    proto.CosmosMsgSend.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.CosmosMsgSend.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.CosmosSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.CosmosSignedTx.toObject(opt_includeInstance, this);
      };
      proto.CosmosSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          publicKey: msg.getPublicKey_asB64(),
          signature: msg.getSignature_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.CosmosSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.CosmosSignedTx();
      return proto.CosmosSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.CosmosSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.CosmosSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.CosmosSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.CosmosSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.CosmosSignedTx.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.CosmosSignedTx.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.CosmosSignedTx.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.CosmosSignedTx.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.CosmosSignedTx.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.CosmosSignedTx.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.CosmosSignedTx.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.CosmosSignedTx.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.CosmosSignedTx.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.CosmosSignedTx.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.CosmosSignedTx.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.CosmosSignedTx.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/cosmos.js
var require_cosmos = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/cosmos.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cosmosGetAddress = exports2.cosmosSignTx = exports2.cosmosGetAccountPaths = void 0;
    var CosmosMessages = __importStar(require_messages_cosmos_pb());
    var Messages = __importStar(require_messages_pb());
    var core = __importStar(require_dist3());
    var lodash_1 = __importDefault(require_lodash());
    function cosmosGetAccountPaths(msg) {
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + core.slip44ByCoin("Atom"), 2147483648 + msg.accountIdx, 0, 0]
        }
      ];
    }
    exports2.cosmosGetAccountPaths = cosmosGetAccountPaths;
    function cosmosSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          const signTx = new CosmosMessages.CosmosSignTx();
          signTx.setAddressNList(msg.addressNList);
          signTx.setAccountNumber(msg.account_number);
          signTx.setChainId(msg.chain_id);
          signTx.setFeeAmount(parseInt(msg.tx.fee.amount[0].amount));
          signTx.setGas(parseInt(msg.tx.fee.gas));
          signTx.setSequence(msg.sequence);
          if (msg.tx.memo !== void 0)
            signTx.setMemo(msg.tx.memo);
          signTx.setMsgCount(1);
          let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSSIGNTX, signTx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          for (let m of msg.tx.msg) {
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_COSMOSMSGREQUEST) {
              throw new Error(`cosmos: unexpected response ${resp.message_type}`);
            }
            let ack;
            if (m.type === "cosmos-sdk/MsgSend") {
              if (m.value.amount.length !== 1) {
                throw new Error("cosmos: Multiple amounts per msg not supported");
              }
              const denom = m.value.amount[0].denom;
              if (denom !== "uatom") {
                throw new Error("cosmos: Unsupported denomination: " + denom);
              }
              const send = new CosmosMessages.CosmosMsgSend();
              send.setFromAddress(m.value.from_address);
              send.setToAddress(m.value.to_address);
              send.setAmount(m.value.amount[0].amount);
              ack = new CosmosMessages.CosmosMsgAck();
              ack.setSend(send);
            } else {
              throw new Error(`cosmos: Message ${m.type} is not yet supported`);
            }
            resp = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSMSGACK, ack, {
              msgTimeout: core.LONG_TIMEOUT,
              omitLock: true
            });
          }
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_COSMOSSIGNEDTX) {
            throw new Error(`cosmos: unexpected response ${resp.message_type}`);
          }
          const signedTx = resp.proto;
          const signed = lodash_1.default.cloneDeep(msg.tx);
          signed.signatures = [
            {
              pub_key: {
                type: "tendermint/PubKeySecp256k1",
                value: signedTx.getPublicKey_asB64()
              },
              signature: signedTx.getSignature_asB64()
            }
          ];
          return signed;
        }));
      });
    }
    exports2.cosmosSignTx = cosmosSignTx;
    function cosmosGetAddress(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new CosmosMessages.CosmosGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSGETADDRESS, getAddr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const cosmosAddress = response.proto;
        return core.mustBeDefined(cosmosAddress.getAddress());
      });
    }
    exports2.cosmosGetAddress = cosmosGetAddress;
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-eos_pb.js
var require_messages_eos_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-eos_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    goog2.exportSymbol("proto.EosActionBuyRam", null, global2);
    goog2.exportSymbol("proto.EosActionBuyRamBytes", null, global2);
    goog2.exportSymbol("proto.EosActionCommon", null, global2);
    goog2.exportSymbol("proto.EosActionDelegate", null, global2);
    goog2.exportSymbol("proto.EosActionDeleteAuth", null, global2);
    goog2.exportSymbol("proto.EosActionLinkAuth", null, global2);
    goog2.exportSymbol("proto.EosActionNewAccount", null, global2);
    goog2.exportSymbol("proto.EosActionRefund", null, global2);
    goog2.exportSymbol("proto.EosActionSellRam", null, global2);
    goog2.exportSymbol("proto.EosActionTransfer", null, global2);
    goog2.exportSymbol("proto.EosActionUndelegate", null, global2);
    goog2.exportSymbol("proto.EosActionUnknown", null, global2);
    goog2.exportSymbol("proto.EosActionUnlinkAuth", null, global2);
    goog2.exportSymbol("proto.EosActionUpdateAuth", null, global2);
    goog2.exportSymbol("proto.EosActionVoteProducer", null, global2);
    goog2.exportSymbol("proto.EosAsset", null, global2);
    goog2.exportSymbol("proto.EosAuthorization", null, global2);
    goog2.exportSymbol("proto.EosAuthorizationAccount", null, global2);
    goog2.exportSymbol("proto.EosAuthorizationKey", null, global2);
    goog2.exportSymbol("proto.EosAuthorizationWait", null, global2);
    goog2.exportSymbol("proto.EosGetPublicKey", null, global2);
    goog2.exportSymbol("proto.EosPermissionLevel", null, global2);
    goog2.exportSymbol("proto.EosPublicKey", null, global2);
    goog2.exportSymbol("proto.EosPublicKeyKind", null, global2);
    goog2.exportSymbol("proto.EosSignTx", null, global2);
    goog2.exportSymbol("proto.EosSignedTx", null, global2);
    goog2.exportSymbol("proto.EosTxActionAck", null, global2);
    goog2.exportSymbol("proto.EosTxActionRequest", null, global2);
    goog2.exportSymbol("proto.EosTxHeader", null, global2);
    proto.EosGetPublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosGetPublicKey.repeatedFields_, null);
    };
    goog2.inherits(proto.EosGetPublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosGetPublicKey.displayName = "proto.EosGetPublicKey";
    }
    proto.EosPublicKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosPublicKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosPublicKey.displayName = "proto.EosPublicKey";
    }
    proto.EosSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.EosSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosSignTx.displayName = "proto.EosSignTx";
    }
    proto.EosTxHeader = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosTxHeader, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosTxHeader.displayName = "proto.EosTxHeader";
    }
    proto.EosTxActionRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosTxActionRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosTxActionRequest.displayName = "proto.EosTxActionRequest";
    }
    proto.EosTxActionAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosTxActionAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosTxActionAck.displayName = "proto.EosTxActionAck";
    }
    proto.EosAsset = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosAsset, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosAsset.displayName = "proto.EosAsset";
    }
    proto.EosPermissionLevel = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosPermissionLevel, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosPermissionLevel.displayName = "proto.EosPermissionLevel";
    }
    proto.EosAuthorizationKey = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosAuthorizationKey.repeatedFields_, null);
    };
    goog2.inherits(proto.EosAuthorizationKey, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosAuthorizationKey.displayName = "proto.EosAuthorizationKey";
    }
    proto.EosAuthorizationAccount = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosAuthorizationAccount, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosAuthorizationAccount.displayName = "proto.EosAuthorizationAccount";
    }
    proto.EosAuthorizationWait = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosAuthorizationWait, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosAuthorizationWait.displayName = "proto.EosAuthorizationWait";
    }
    proto.EosAuthorization = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosAuthorization.repeatedFields_, null);
    };
    goog2.inherits(proto.EosAuthorization, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosAuthorization.displayName = "proto.EosAuthorization";
    }
    proto.EosActionCommon = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosActionCommon.repeatedFields_, null);
    };
    goog2.inherits(proto.EosActionCommon, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionCommon.displayName = "proto.EosActionCommon";
    }
    proto.EosActionTransfer = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionTransfer, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionTransfer.displayName = "proto.EosActionTransfer";
    }
    proto.EosActionDelegate = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionDelegate, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionDelegate.displayName = "proto.EosActionDelegate";
    }
    proto.EosActionUndelegate = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionUndelegate, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionUndelegate.displayName = "proto.EosActionUndelegate";
    }
    proto.EosActionRefund = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionRefund, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionRefund.displayName = "proto.EosActionRefund";
    }
    proto.EosActionBuyRam = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionBuyRam, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionBuyRam.displayName = "proto.EosActionBuyRam";
    }
    proto.EosActionBuyRamBytes = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionBuyRamBytes, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionBuyRamBytes.displayName = "proto.EosActionBuyRamBytes";
    }
    proto.EosActionSellRam = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionSellRam, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionSellRam.displayName = "proto.EosActionSellRam";
    }
    proto.EosActionVoteProducer = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.EosActionVoteProducer.repeatedFields_, null);
    };
    goog2.inherits(proto.EosActionVoteProducer, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionVoteProducer.displayName = "proto.EosActionVoteProducer";
    }
    proto.EosActionUpdateAuth = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionUpdateAuth, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionUpdateAuth.displayName = "proto.EosActionUpdateAuth";
    }
    proto.EosActionDeleteAuth = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionDeleteAuth, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionDeleteAuth.displayName = "proto.EosActionDeleteAuth";
    }
    proto.EosActionLinkAuth = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionLinkAuth, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionLinkAuth.displayName = "proto.EosActionLinkAuth";
    }
    proto.EosActionUnlinkAuth = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionUnlinkAuth, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionUnlinkAuth.displayName = "proto.EosActionUnlinkAuth";
    }
    proto.EosActionNewAccount = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionNewAccount, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionNewAccount.displayName = "proto.EosActionNewAccount";
    }
    proto.EosActionUnknown = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosActionUnknown, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosActionUnknown.displayName = "proto.EosActionUnknown";
    }
    proto.EosSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.EosSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.EosSignedTx.displayName = "proto.EosSignedTx";
    }
    proto.EosGetPublicKey.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosGetPublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.EosGetPublicKey.toObject(opt_includeInstance, this);
      };
      proto.EosGetPublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          kind: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosGetPublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosGetPublicKey();
      return proto.EosGetPublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosGetPublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          case 3:
            var value = reader.readEnum();
            msg.setKind(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosGetPublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosGetPublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosGetPublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeEnum(3, f2);
      }
    };
    proto.EosGetPublicKey.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.EosGetPublicKey.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.EosGetPublicKey.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.EosGetPublicKey.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EosGetPublicKey.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.EosGetPublicKey.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosGetPublicKey.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosGetPublicKey.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosGetPublicKey.prototype.getKind = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.EosGetPublicKey.prototype.setKind = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosGetPublicKey.prototype.clearKind = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosGetPublicKey.prototype.hasKind = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosPublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.EosPublicKey.toObject(opt_includeInstance, this);
      };
      proto.EosPublicKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          wifPublicKey: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          rawPublicKey: msg.getRawPublicKey_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosPublicKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosPublicKey();
      return proto.EosPublicKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosPublicKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setWifPublicKey(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setRawPublicKey(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosPublicKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosPublicKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosPublicKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.EosPublicKey.prototype.getWifPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.EosPublicKey.prototype.setWifPublicKey = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosPublicKey.prototype.clearWifPublicKey = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosPublicKey.prototype.hasWifPublicKey = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosPublicKey.prototype.getRawPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EosPublicKey.prototype.getRawPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getRawPublicKey());
    };
    proto.EosPublicKey.prototype.getRawPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getRawPublicKey());
    };
    proto.EosPublicKey.prototype.setRawPublicKey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosPublicKey.prototype.clearRawPublicKey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosPublicKey.prototype.hasRawPublicKey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosSignTx.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.EosSignTx.toObject(opt_includeInstance, this);
      };
      proto.EosSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          chainId: msg.getChainId_asB64(),
          header: (f2 = msg.getHeader()) && proto.EosTxHeader.toObject(includeInstance, f2),
          numActions: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosSignTx();
      return proto.EosSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBytes();
            msg.setChainId(value);
            break;
          case 3:
            var value = new proto.EosTxHeader();
            reader.readMessage(value, proto.EosTxHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setNumActions(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = message.getHeader();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosTxHeader.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
    };
    proto.EosSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.EosSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.EosSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.EosSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.EosSignTx.prototype.getChainId = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EosSignTx.prototype.getChainId_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getChainId());
    };
    proto.EosSignTx.prototype.getChainId_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getChainId());
    };
    proto.EosSignTx.prototype.setChainId = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosSignTx.prototype.clearChainId = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosSignTx.prototype.hasChainId = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosSignTx.prototype.getHeader = function() {
      return jspb2.Message.getWrapperField(this, proto.EosTxHeader, 3);
    };
    proto.EosSignTx.prototype.setHeader = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosSignTx.prototype.clearHeader = function() {
      return this.setHeader(void 0);
    };
    proto.EosSignTx.prototype.hasHeader = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosSignTx.prototype.getNumActions = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.EosSignTx.prototype.setNumActions = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EosSignTx.prototype.clearNumActions = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EosSignTx.prototype.hasNumActions = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosTxHeader.prototype.toObject = function(opt_includeInstance) {
        return proto.EosTxHeader.toObject(opt_includeInstance, this);
      };
      proto.EosTxHeader.toObject = function(includeInstance, msg) {
        var f2, obj = {
          expiration: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          refBlockNum: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          refBlockPrefix: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          maxNetUsageWords: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          maxCpuUsageMs: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          delaySec: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosTxHeader.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosTxHeader();
      return proto.EosTxHeader.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosTxHeader.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setExpiration(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setRefBlockNum(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setRefBlockPrefix(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setMaxNetUsageWords(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setMaxCpuUsageMs(value);
            break;
          case 6:
            var value = reader.readUint32();
            msg.setDelaySec(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosTxHeader.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosTxHeader.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosTxHeader.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeUint32(6, f2);
      }
    };
    proto.EosTxHeader.prototype.getExpiration = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosTxHeader.prototype.setExpiration = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosTxHeader.prototype.clearExpiration = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosTxHeader.prototype.hasExpiration = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosTxHeader.prototype.getRefBlockNum = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.EosTxHeader.prototype.setRefBlockNum = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosTxHeader.prototype.clearRefBlockNum = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosTxHeader.prototype.hasRefBlockNum = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosTxHeader.prototype.getRefBlockPrefix = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.EosTxHeader.prototype.setRefBlockPrefix = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosTxHeader.prototype.clearRefBlockPrefix = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosTxHeader.prototype.hasRefBlockPrefix = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosTxHeader.prototype.getMaxNetUsageWords = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.EosTxHeader.prototype.setMaxNetUsageWords = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EosTxHeader.prototype.clearMaxNetUsageWords = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EosTxHeader.prototype.hasMaxNetUsageWords = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EosTxHeader.prototype.getMaxCpuUsageMs = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.EosTxHeader.prototype.setMaxCpuUsageMs = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.EosTxHeader.prototype.clearMaxCpuUsageMs = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.EosTxHeader.prototype.hasMaxCpuUsageMs = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.EosTxHeader.prototype.getDelaySec = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, 0);
    };
    proto.EosTxHeader.prototype.setDelaySec = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.EosTxHeader.prototype.clearDelaySec = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.EosTxHeader.prototype.hasDelaySec = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosTxActionRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.EosTxActionRequest.toObject(opt_includeInstance, this);
      };
      proto.EosTxActionRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosTxActionRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosTxActionRequest();
      return proto.EosTxActionRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosTxActionRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosTxActionRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosTxActionRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosTxActionRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosTxActionAck.prototype.toObject = function(opt_includeInstance) {
        return proto.EosTxActionAck.toObject(opt_includeInstance, this);
      };
      proto.EosTxActionAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          common: (f2 = msg.getCommon()) && proto.EosActionCommon.toObject(includeInstance, f2),
          transfer: (f2 = msg.getTransfer()) && proto.EosActionTransfer.toObject(includeInstance, f2),
          delegate: (f2 = msg.getDelegate()) && proto.EosActionDelegate.toObject(includeInstance, f2),
          undelegate: (f2 = msg.getUndelegate()) && proto.EosActionUndelegate.toObject(includeInstance, f2),
          refund: (f2 = msg.getRefund()) && proto.EosActionRefund.toObject(includeInstance, f2),
          buyRam: (f2 = msg.getBuyRam()) && proto.EosActionBuyRam.toObject(includeInstance, f2),
          buyRamBytes: (f2 = msg.getBuyRamBytes()) && proto.EosActionBuyRamBytes.toObject(includeInstance, f2),
          sellRam: (f2 = msg.getSellRam()) && proto.EosActionSellRam.toObject(includeInstance, f2),
          voteProducer: (f2 = msg.getVoteProducer()) && proto.EosActionVoteProducer.toObject(includeInstance, f2),
          updateAuth: (f2 = msg.getUpdateAuth()) && proto.EosActionUpdateAuth.toObject(includeInstance, f2),
          deleteAuth: (f2 = msg.getDeleteAuth()) && proto.EosActionDeleteAuth.toObject(includeInstance, f2),
          linkAuth: (f2 = msg.getLinkAuth()) && proto.EosActionLinkAuth.toObject(includeInstance, f2),
          unlinkAuth: (f2 = msg.getUnlinkAuth()) && proto.EosActionUnlinkAuth.toObject(includeInstance, f2),
          newAccount: (f2 = msg.getNewAccount()) && proto.EosActionNewAccount.toObject(includeInstance, f2),
          unknown: (f2 = msg.getUnknown()) && proto.EosActionUnknown.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosTxActionAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosTxActionAck();
      return proto.EosTxActionAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosTxActionAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.EosActionCommon();
            reader.readMessage(value, proto.EosActionCommon.deserializeBinaryFromReader);
            msg.setCommon(value);
            break;
          case 2:
            var value = new proto.EosActionTransfer();
            reader.readMessage(value, proto.EosActionTransfer.deserializeBinaryFromReader);
            msg.setTransfer(value);
            break;
          case 3:
            var value = new proto.EosActionDelegate();
            reader.readMessage(value, proto.EosActionDelegate.deserializeBinaryFromReader);
            msg.setDelegate(value);
            break;
          case 4:
            var value = new proto.EosActionUndelegate();
            reader.readMessage(value, proto.EosActionUndelegate.deserializeBinaryFromReader);
            msg.setUndelegate(value);
            break;
          case 5:
            var value = new proto.EosActionRefund();
            reader.readMessage(value, proto.EosActionRefund.deserializeBinaryFromReader);
            msg.setRefund(value);
            break;
          case 6:
            var value = new proto.EosActionBuyRam();
            reader.readMessage(value, proto.EosActionBuyRam.deserializeBinaryFromReader);
            msg.setBuyRam(value);
            break;
          case 7:
            var value = new proto.EosActionBuyRamBytes();
            reader.readMessage(value, proto.EosActionBuyRamBytes.deserializeBinaryFromReader);
            msg.setBuyRamBytes(value);
            break;
          case 8:
            var value = new proto.EosActionSellRam();
            reader.readMessage(value, proto.EosActionSellRam.deserializeBinaryFromReader);
            msg.setSellRam(value);
            break;
          case 9:
            var value = new proto.EosActionVoteProducer();
            reader.readMessage(value, proto.EosActionVoteProducer.deserializeBinaryFromReader);
            msg.setVoteProducer(value);
            break;
          case 10:
            var value = new proto.EosActionUpdateAuth();
            reader.readMessage(value, proto.EosActionUpdateAuth.deserializeBinaryFromReader);
            msg.setUpdateAuth(value);
            break;
          case 11:
            var value = new proto.EosActionDeleteAuth();
            reader.readMessage(value, proto.EosActionDeleteAuth.deserializeBinaryFromReader);
            msg.setDeleteAuth(value);
            break;
          case 12:
            var value = new proto.EosActionLinkAuth();
            reader.readMessage(value, proto.EosActionLinkAuth.deserializeBinaryFromReader);
            msg.setLinkAuth(value);
            break;
          case 13:
            var value = new proto.EosActionUnlinkAuth();
            reader.readMessage(value, proto.EosActionUnlinkAuth.deserializeBinaryFromReader);
            msg.setUnlinkAuth(value);
            break;
          case 14:
            var value = new proto.EosActionNewAccount();
            reader.readMessage(value, proto.EosActionNewAccount.deserializeBinaryFromReader);
            msg.setNewAccount(value);
            break;
          case 15:
            var value = new proto.EosActionUnknown();
            reader.readMessage(value, proto.EosActionUnknown.deserializeBinaryFromReader);
            msg.setUnknown(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosTxActionAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosTxActionAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosTxActionAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getCommon();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.EosActionCommon.serializeBinaryToWriter);
      }
      f2 = message.getTransfer();
      if (f2 != null) {
        writer.writeMessage(2, f2, proto.EosActionTransfer.serializeBinaryToWriter);
      }
      f2 = message.getDelegate();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosActionDelegate.serializeBinaryToWriter);
      }
      f2 = message.getUndelegate();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.EosActionUndelegate.serializeBinaryToWriter);
      }
      f2 = message.getRefund();
      if (f2 != null) {
        writer.writeMessage(5, f2, proto.EosActionRefund.serializeBinaryToWriter);
      }
      f2 = message.getBuyRam();
      if (f2 != null) {
        writer.writeMessage(6, f2, proto.EosActionBuyRam.serializeBinaryToWriter);
      }
      f2 = message.getBuyRamBytes();
      if (f2 != null) {
        writer.writeMessage(7, f2, proto.EosActionBuyRamBytes.serializeBinaryToWriter);
      }
      f2 = message.getSellRam();
      if (f2 != null) {
        writer.writeMessage(8, f2, proto.EosActionSellRam.serializeBinaryToWriter);
      }
      f2 = message.getVoteProducer();
      if (f2 != null) {
        writer.writeMessage(9, f2, proto.EosActionVoteProducer.serializeBinaryToWriter);
      }
      f2 = message.getUpdateAuth();
      if (f2 != null) {
        writer.writeMessage(10, f2, proto.EosActionUpdateAuth.serializeBinaryToWriter);
      }
      f2 = message.getDeleteAuth();
      if (f2 != null) {
        writer.writeMessage(11, f2, proto.EosActionDeleteAuth.serializeBinaryToWriter);
      }
      f2 = message.getLinkAuth();
      if (f2 != null) {
        writer.writeMessage(12, f2, proto.EosActionLinkAuth.serializeBinaryToWriter);
      }
      f2 = message.getUnlinkAuth();
      if (f2 != null) {
        writer.writeMessage(13, f2, proto.EosActionUnlinkAuth.serializeBinaryToWriter);
      }
      f2 = message.getNewAccount();
      if (f2 != null) {
        writer.writeMessage(14, f2, proto.EosActionNewAccount.serializeBinaryToWriter);
      }
      f2 = message.getUnknown();
      if (f2 != null) {
        writer.writeMessage(15, f2, proto.EosActionUnknown.serializeBinaryToWriter);
      }
    };
    proto.EosTxActionAck.prototype.getCommon = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionCommon, 1);
    };
    proto.EosTxActionAck.prototype.setCommon = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.EosTxActionAck.prototype.clearCommon = function() {
      return this.setCommon(void 0);
    };
    proto.EosTxActionAck.prototype.hasCommon = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosTxActionAck.prototype.getTransfer = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionTransfer, 2);
    };
    proto.EosTxActionAck.prototype.setTransfer = function(value) {
      return jspb2.Message.setWrapperField(this, 2, value);
    };
    proto.EosTxActionAck.prototype.clearTransfer = function() {
      return this.setTransfer(void 0);
    };
    proto.EosTxActionAck.prototype.hasTransfer = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosTxActionAck.prototype.getDelegate = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionDelegate, 3);
    };
    proto.EosTxActionAck.prototype.setDelegate = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosTxActionAck.prototype.clearDelegate = function() {
      return this.setDelegate(void 0);
    };
    proto.EosTxActionAck.prototype.hasDelegate = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosTxActionAck.prototype.getUndelegate = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionUndelegate, 4);
    };
    proto.EosTxActionAck.prototype.setUndelegate = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.EosTxActionAck.prototype.clearUndelegate = function() {
      return this.setUndelegate(void 0);
    };
    proto.EosTxActionAck.prototype.hasUndelegate = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EosTxActionAck.prototype.getRefund = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionRefund, 5);
    };
    proto.EosTxActionAck.prototype.setRefund = function(value) {
      return jspb2.Message.setWrapperField(this, 5, value);
    };
    proto.EosTxActionAck.prototype.clearRefund = function() {
      return this.setRefund(void 0);
    };
    proto.EosTxActionAck.prototype.hasRefund = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.EosTxActionAck.prototype.getBuyRam = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionBuyRam, 6);
    };
    proto.EosTxActionAck.prototype.setBuyRam = function(value) {
      return jspb2.Message.setWrapperField(this, 6, value);
    };
    proto.EosTxActionAck.prototype.clearBuyRam = function() {
      return this.setBuyRam(void 0);
    };
    proto.EosTxActionAck.prototype.hasBuyRam = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.EosTxActionAck.prototype.getBuyRamBytes = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionBuyRamBytes, 7);
    };
    proto.EosTxActionAck.prototype.setBuyRamBytes = function(value) {
      return jspb2.Message.setWrapperField(this, 7, value);
    };
    proto.EosTxActionAck.prototype.clearBuyRamBytes = function() {
      return this.setBuyRamBytes(void 0);
    };
    proto.EosTxActionAck.prototype.hasBuyRamBytes = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.EosTxActionAck.prototype.getSellRam = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionSellRam, 8);
    };
    proto.EosTxActionAck.prototype.setSellRam = function(value) {
      return jspb2.Message.setWrapperField(this, 8, value);
    };
    proto.EosTxActionAck.prototype.clearSellRam = function() {
      return this.setSellRam(void 0);
    };
    proto.EosTxActionAck.prototype.hasSellRam = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.EosTxActionAck.prototype.getVoteProducer = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionVoteProducer, 9);
    };
    proto.EosTxActionAck.prototype.setVoteProducer = function(value) {
      return jspb2.Message.setWrapperField(this, 9, value);
    };
    proto.EosTxActionAck.prototype.clearVoteProducer = function() {
      return this.setVoteProducer(void 0);
    };
    proto.EosTxActionAck.prototype.hasVoteProducer = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.EosTxActionAck.prototype.getUpdateAuth = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionUpdateAuth, 10);
    };
    proto.EosTxActionAck.prototype.setUpdateAuth = function(value) {
      return jspb2.Message.setWrapperField(this, 10, value);
    };
    proto.EosTxActionAck.prototype.clearUpdateAuth = function() {
      return this.setUpdateAuth(void 0);
    };
    proto.EosTxActionAck.prototype.hasUpdateAuth = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    proto.EosTxActionAck.prototype.getDeleteAuth = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionDeleteAuth, 11);
    };
    proto.EosTxActionAck.prototype.setDeleteAuth = function(value) {
      return jspb2.Message.setWrapperField(this, 11, value);
    };
    proto.EosTxActionAck.prototype.clearDeleteAuth = function() {
      return this.setDeleteAuth(void 0);
    };
    proto.EosTxActionAck.prototype.hasDeleteAuth = function() {
      return jspb2.Message.getField(this, 11) != null;
    };
    proto.EosTxActionAck.prototype.getLinkAuth = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionLinkAuth, 12);
    };
    proto.EosTxActionAck.prototype.setLinkAuth = function(value) {
      return jspb2.Message.setWrapperField(this, 12, value);
    };
    proto.EosTxActionAck.prototype.clearLinkAuth = function() {
      return this.setLinkAuth(void 0);
    };
    proto.EosTxActionAck.prototype.hasLinkAuth = function() {
      return jspb2.Message.getField(this, 12) != null;
    };
    proto.EosTxActionAck.prototype.getUnlinkAuth = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionUnlinkAuth, 13);
    };
    proto.EosTxActionAck.prototype.setUnlinkAuth = function(value) {
      return jspb2.Message.setWrapperField(this, 13, value);
    };
    proto.EosTxActionAck.prototype.clearUnlinkAuth = function() {
      return this.setUnlinkAuth(void 0);
    };
    proto.EosTxActionAck.prototype.hasUnlinkAuth = function() {
      return jspb2.Message.getField(this, 13) != null;
    };
    proto.EosTxActionAck.prototype.getNewAccount = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionNewAccount, 14);
    };
    proto.EosTxActionAck.prototype.setNewAccount = function(value) {
      return jspb2.Message.setWrapperField(this, 14, value);
    };
    proto.EosTxActionAck.prototype.clearNewAccount = function() {
      return this.setNewAccount(void 0);
    };
    proto.EosTxActionAck.prototype.hasNewAccount = function() {
      return jspb2.Message.getField(this, 14) != null;
    };
    proto.EosTxActionAck.prototype.getUnknown = function() {
      return jspb2.Message.getWrapperField(this, proto.EosActionUnknown, 15);
    };
    proto.EosTxActionAck.prototype.setUnknown = function(value) {
      return jspb2.Message.setWrapperField(this, 15, value);
    };
    proto.EosTxActionAck.prototype.clearUnknown = function() {
      return this.setUnknown(void 0);
    };
    proto.EosTxActionAck.prototype.hasUnknown = function() {
      return jspb2.Message.getField(this, 15) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosAsset.prototype.toObject = function(opt_includeInstance) {
        return proto.EosAsset.toObject(opt_includeInstance, this);
      };
      proto.EosAsset.toObject = function(includeInstance, msg) {
        var f2, obj = {
          amount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          symbol: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosAsset.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosAsset();
      return proto.EosAsset.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosAsset.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readSint64String();
            msg.setAmount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setSymbol(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosAsset.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosAsset.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosAsset.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeSint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
    };
    proto.EosAsset.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosAsset.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosAsset.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosAsset.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosAsset.prototype.getSymbol = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosAsset.prototype.setSymbol = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosAsset.prototype.clearSymbol = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosAsset.prototype.hasSymbol = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosPermissionLevel.prototype.toObject = function(opt_includeInstance) {
        return proto.EosPermissionLevel.toObject(opt_includeInstance, this);
      };
      proto.EosPermissionLevel.toObject = function(includeInstance, msg) {
        var f2, obj = {
          actor: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          permission: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosPermissionLevel.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosPermissionLevel();
      return proto.EosPermissionLevel.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosPermissionLevel.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setActor(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setPermission(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosPermissionLevel.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosPermissionLevel.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosPermissionLevel.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
    };
    proto.EosPermissionLevel.prototype.getActor = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosPermissionLevel.prototype.setActor = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosPermissionLevel.prototype.clearActor = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosPermissionLevel.prototype.hasActor = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosPermissionLevel.prototype.getPermission = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosPermissionLevel.prototype.setPermission = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosPermissionLevel.prototype.clearPermission = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosPermissionLevel.prototype.hasPermission = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosAuthorizationKey.repeatedFields_ = [4];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosAuthorizationKey.prototype.toObject = function(opt_includeInstance) {
        return proto.EosAuthorizationKey.toObject(opt_includeInstance, this);
      };
      proto.EosAuthorizationKey.toObject = function(includeInstance, msg) {
        var f2, obj = {
          type: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          key: msg.getKey_asB64(),
          weight: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosAuthorizationKey.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosAuthorizationKey();
      return proto.EosAuthorizationKey.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosAuthorizationKey.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setType(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setKey(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setWeight(value);
            break;
          case 4:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosAuthorizationKey.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosAuthorizationKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosAuthorizationKey.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(4, f2);
      }
    };
    proto.EosAuthorizationKey.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosAuthorizationKey.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosAuthorizationKey.prototype.clearType = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosAuthorizationKey.prototype.hasType = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosAuthorizationKey.prototype.getKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EosAuthorizationKey.prototype.getKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getKey());
    };
    proto.EosAuthorizationKey.prototype.getKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getKey());
    };
    proto.EosAuthorizationKey.prototype.setKey = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosAuthorizationKey.prototype.clearKey = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosAuthorizationKey.prototype.hasKey = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosAuthorizationKey.prototype.getWeight = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.EosAuthorizationKey.prototype.setWeight = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosAuthorizationKey.prototype.clearWeight = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosAuthorizationKey.prototype.hasWeight = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosAuthorizationKey.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 4);
    };
    proto.EosAuthorizationKey.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 4, value || []);
    };
    proto.EosAuthorizationKey.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 4, value, opt_index);
    };
    proto.EosAuthorizationKey.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosAuthorizationAccount.prototype.toObject = function(opt_includeInstance) {
        return proto.EosAuthorizationAccount.toObject(opt_includeInstance, this);
      };
      proto.EosAuthorizationAccount.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = msg.getAccount()) && proto.EosPermissionLevel.toObject(includeInstance, f2),
          weight: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosAuthorizationAccount.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosAuthorizationAccount();
      return proto.EosAuthorizationAccount.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosAuthorizationAccount.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.EosPermissionLevel();
            reader.readMessage(value, proto.EosPermissionLevel.deserializeBinaryFromReader);
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setWeight(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosAuthorizationAccount.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosAuthorizationAccount.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosAuthorizationAccount.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAccount();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.EosPermissionLevel.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
    };
    proto.EosAuthorizationAccount.prototype.getAccount = function() {
      return jspb2.Message.getWrapperField(this, proto.EosPermissionLevel, 1);
    };
    proto.EosAuthorizationAccount.prototype.setAccount = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.EosAuthorizationAccount.prototype.clearAccount = function() {
      return this.setAccount(void 0);
    };
    proto.EosAuthorizationAccount.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosAuthorizationAccount.prototype.getWeight = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.EosAuthorizationAccount.prototype.setWeight = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosAuthorizationAccount.prototype.clearWeight = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosAuthorizationAccount.prototype.hasWeight = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosAuthorizationWait.prototype.toObject = function(opt_includeInstance) {
        return proto.EosAuthorizationWait.toObject(opt_includeInstance, this);
      };
      proto.EosAuthorizationWait.toObject = function(includeInstance, msg) {
        var f2, obj = {
          waitSec: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          weight: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosAuthorizationWait.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosAuthorizationWait();
      return proto.EosAuthorizationWait.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosAuthorizationWait.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setWaitSec(value);
            break;
          case 2:
            var value = reader.readUint32();
            msg.setWeight(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosAuthorizationWait.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosAuthorizationWait.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosAuthorizationWait.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint32(2, f2);
      }
    };
    proto.EosAuthorizationWait.prototype.getWaitSec = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosAuthorizationWait.prototype.setWaitSec = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosAuthorizationWait.prototype.clearWaitSec = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosAuthorizationWait.prototype.hasWaitSec = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosAuthorizationWait.prototype.getWeight = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.EosAuthorizationWait.prototype.setWeight = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosAuthorizationWait.prototype.clearWeight = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosAuthorizationWait.prototype.hasWeight = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosAuthorization.repeatedFields_ = [2, 3, 4];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosAuthorization.prototype.toObject = function(opt_includeInstance) {
        return proto.EosAuthorization.toObject(opt_includeInstance, this);
      };
      proto.EosAuthorization.toObject = function(includeInstance, msg) {
        var f2, obj = {
          threshold: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          keysList: jspb2.Message.toObjectList(msg.getKeysList(), proto.EosAuthorizationKey.toObject, includeInstance),
          accountsList: jspb2.Message.toObjectList(msg.getAccountsList(), proto.EosAuthorizationAccount.toObject, includeInstance),
          waitsList: jspb2.Message.toObjectList(msg.getWaitsList(), proto.EosAuthorizationWait.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosAuthorization.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosAuthorization();
      return proto.EosAuthorization.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosAuthorization.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setThreshold(value);
            break;
          case 2:
            var value = new proto.EosAuthorizationKey();
            reader.readMessage(value, proto.EosAuthorizationKey.deserializeBinaryFromReader);
            msg.addKeys(value);
            break;
          case 3:
            var value = new proto.EosAuthorizationAccount();
            reader.readMessage(value, proto.EosAuthorizationAccount.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;
          case 4:
            var value = new proto.EosAuthorizationWait();
            reader.readMessage(value, proto.EosAuthorizationWait.deserializeBinaryFromReader);
            msg.addWaits(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosAuthorization.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosAuthorization.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosAuthorization.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = message.getKeysList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(2, f2, proto.EosAuthorizationKey.serializeBinaryToWriter);
      }
      f2 = message.getAccountsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(3, f2, proto.EosAuthorizationAccount.serializeBinaryToWriter);
      }
      f2 = message.getWaitsList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(4, f2, proto.EosAuthorizationWait.serializeBinaryToWriter);
      }
    };
    proto.EosAuthorization.prototype.getThreshold = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosAuthorization.prototype.setThreshold = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosAuthorization.prototype.clearThreshold = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosAuthorization.prototype.hasThreshold = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosAuthorization.prototype.getKeysList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.EosAuthorizationKey, 2);
    };
    proto.EosAuthorization.prototype.setKeysList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 2, value);
    };
    proto.EosAuthorization.prototype.addKeys = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.EosAuthorizationKey, opt_index);
    };
    proto.EosAuthorization.prototype.clearKeysList = function() {
      return this.setKeysList([]);
    };
    proto.EosAuthorization.prototype.getAccountsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.EosAuthorizationAccount, 3);
    };
    proto.EosAuthorization.prototype.setAccountsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.EosAuthorization.prototype.addAccounts = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EosAuthorizationAccount, opt_index);
    };
    proto.EosAuthorization.prototype.clearAccountsList = function() {
      return this.setAccountsList([]);
    };
    proto.EosAuthorization.prototype.getWaitsList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.EosAuthorizationWait, 4);
    };
    proto.EosAuthorization.prototype.setWaitsList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 4, value);
    };
    proto.EosAuthorization.prototype.addWaits = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.EosAuthorizationWait, opt_index);
    };
    proto.EosAuthorization.prototype.clearWaitsList = function() {
      return this.setWaitsList([]);
    };
    proto.EosActionCommon.repeatedFields_ = [3];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionCommon.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionCommon.toObject(opt_includeInstance, this);
      };
      proto.EosActionCommon.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          name: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          authorizationList: jspb2.Message.toObjectList(msg.getAuthorizationList(), proto.EosPermissionLevel.toObject, includeInstance)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionCommon.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionCommon();
      return proto.EosActionCommon.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionCommon.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setName(value);
            break;
          case 3:
            var value = new proto.EosPermissionLevel();
            reader.readMessage(value, proto.EosPermissionLevel.deserializeBinaryFromReader);
            msg.addAuthorization(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionCommon.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionCommon.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionCommon.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getAuthorizationList();
      if (f2.length > 0) {
        writer.writeRepeatedMessage(3, f2, proto.EosPermissionLevel.serializeBinaryToWriter);
      }
    };
    proto.EosActionCommon.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionCommon.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionCommon.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionCommon.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionCommon.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionCommon.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionCommon.prototype.clearName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionCommon.prototype.hasName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionCommon.prototype.getAuthorizationList = function() {
      return jspb2.Message.getRepeatedWrapperField(this, proto.EosPermissionLevel, 3);
    };
    proto.EosActionCommon.prototype.setAuthorizationList = function(value) {
      return jspb2.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.EosActionCommon.prototype.addAuthorization = function(opt_value, opt_index) {
      return jspb2.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EosPermissionLevel, opt_index);
    };
    proto.EosActionCommon.prototype.clearAuthorizationList = function() {
      return this.setAuthorizationList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionTransfer.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionTransfer.toObject(opt_includeInstance, this);
      };
      proto.EosActionTransfer.toObject = function(includeInstance, msg) {
        var f2, obj = {
          sender: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          receiver: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          quantity: (f2 = msg.getQuantity()) && proto.EosAsset.toObject(includeInstance, f2),
          memo: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionTransfer.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionTransfer();
      return proto.EosActionTransfer.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionTransfer.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setSender(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setReceiver(value);
            break;
          case 3:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setQuantity(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setMemo(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionTransfer.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionTransfer.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionTransfer.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getQuantity();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosAsset.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
    };
    proto.EosActionTransfer.prototype.getSender = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionTransfer.prototype.setSender = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionTransfer.prototype.clearSender = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionTransfer.prototype.hasSender = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionTransfer.prototype.getReceiver = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionTransfer.prototype.setReceiver = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionTransfer.prototype.clearReceiver = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionTransfer.prototype.hasReceiver = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionTransfer.prototype.getQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 3);
    };
    proto.EosActionTransfer.prototype.setQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosActionTransfer.prototype.clearQuantity = function() {
      return this.setQuantity(void 0);
    };
    proto.EosActionTransfer.prototype.hasQuantity = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionTransfer.prototype.getMemo = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.EosActionTransfer.prototype.setMemo = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EosActionTransfer.prototype.clearMemo = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EosActionTransfer.prototype.hasMemo = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionDelegate.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionDelegate.toObject(opt_includeInstance, this);
      };
      proto.EosActionDelegate.toObject = function(includeInstance, msg) {
        var f2, obj = {
          sender: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          receiver: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          netQuantity: (f2 = msg.getNetQuantity()) && proto.EosAsset.toObject(includeInstance, f2),
          cpuQuantity: (f2 = msg.getCpuQuantity()) && proto.EosAsset.toObject(includeInstance, f2),
          transfer: (f2 = jspb2.Message.getBooleanField(msg, 5)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionDelegate.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionDelegate();
      return proto.EosActionDelegate.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionDelegate.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setSender(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setReceiver(value);
            break;
          case 3:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setNetQuantity(value);
            break;
          case 4:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setCpuQuantity(value);
            break;
          case 5:
            var value = reader.readBool();
            msg.setTransfer(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionDelegate.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionDelegate.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionDelegate.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getNetQuantity();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosAsset.serializeBinaryToWriter);
      }
      f2 = message.getCpuQuantity();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.EosAsset.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBool(5, f2);
      }
    };
    proto.EosActionDelegate.prototype.getSender = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionDelegate.prototype.setSender = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionDelegate.prototype.clearSender = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionDelegate.prototype.hasSender = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionDelegate.prototype.getReceiver = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionDelegate.prototype.setReceiver = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionDelegate.prototype.clearReceiver = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionDelegate.prototype.hasReceiver = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionDelegate.prototype.getNetQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 3);
    };
    proto.EosActionDelegate.prototype.setNetQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosActionDelegate.prototype.clearNetQuantity = function() {
      return this.setNetQuantity(void 0);
    };
    proto.EosActionDelegate.prototype.hasNetQuantity = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionDelegate.prototype.getCpuQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 4);
    };
    proto.EosActionDelegate.prototype.setCpuQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.EosActionDelegate.prototype.clearCpuQuantity = function() {
      return this.setCpuQuantity(void 0);
    };
    proto.EosActionDelegate.prototype.hasCpuQuantity = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EosActionDelegate.prototype.getTransfer = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 5, false);
    };
    proto.EosActionDelegate.prototype.setTransfer = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.EosActionDelegate.prototype.clearTransfer = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.EosActionDelegate.prototype.hasTransfer = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionUndelegate.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionUndelegate.toObject(opt_includeInstance, this);
      };
      proto.EosActionUndelegate.toObject = function(includeInstance, msg) {
        var f2, obj = {
          sender: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          receiver: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          netQuantity: (f2 = msg.getNetQuantity()) && proto.EosAsset.toObject(includeInstance, f2),
          cpuQuantity: (f2 = msg.getCpuQuantity()) && proto.EosAsset.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionUndelegate.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionUndelegate();
      return proto.EosActionUndelegate.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionUndelegate.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setSender(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setReceiver(value);
            break;
          case 3:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setNetQuantity(value);
            break;
          case 4:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setCpuQuantity(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionUndelegate.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionUndelegate.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionUndelegate.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getNetQuantity();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosAsset.serializeBinaryToWriter);
      }
      f2 = message.getCpuQuantity();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.EosAsset.serializeBinaryToWriter);
      }
    };
    proto.EosActionUndelegate.prototype.getSender = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionUndelegate.prototype.setSender = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionUndelegate.prototype.clearSender = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionUndelegate.prototype.hasSender = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionUndelegate.prototype.getReceiver = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionUndelegate.prototype.setReceiver = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionUndelegate.prototype.clearReceiver = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionUndelegate.prototype.hasReceiver = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionUndelegate.prototype.getNetQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 3);
    };
    proto.EosActionUndelegate.prototype.setNetQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosActionUndelegate.prototype.clearNetQuantity = function() {
      return this.setNetQuantity(void 0);
    };
    proto.EosActionUndelegate.prototype.hasNetQuantity = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionUndelegate.prototype.getCpuQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 4);
    };
    proto.EosActionUndelegate.prototype.setCpuQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.EosActionUndelegate.prototype.clearCpuQuantity = function() {
      return this.setCpuQuantity(void 0);
    };
    proto.EosActionUndelegate.prototype.hasCpuQuantity = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionRefund.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionRefund.toObject(opt_includeInstance, this);
      };
      proto.EosActionRefund.toObject = function(includeInstance, msg) {
        var f2, obj = {
          owner: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionRefund.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionRefund();
      return proto.EosActionRefund.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionRefund.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setOwner(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionRefund.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionRefund.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionRefund.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
    };
    proto.EosActionRefund.prototype.getOwner = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionRefund.prototype.setOwner = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionRefund.prototype.clearOwner = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionRefund.prototype.hasOwner = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionBuyRam.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionBuyRam.toObject(opt_includeInstance, this);
      };
      proto.EosActionBuyRam.toObject = function(includeInstance, msg) {
        var f2, obj = {
          payer: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          receiver: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          quantity: (f2 = msg.getQuantity()) && proto.EosAsset.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionBuyRam.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionBuyRam();
      return proto.EosActionBuyRam.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionBuyRam.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setPayer(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setReceiver(value);
            break;
          case 3:
            var value = new proto.EosAsset();
            reader.readMessage(value, proto.EosAsset.deserializeBinaryFromReader);
            msg.setQuantity(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionBuyRam.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionBuyRam.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionBuyRam.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getQuantity();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosAsset.serializeBinaryToWriter);
      }
    };
    proto.EosActionBuyRam.prototype.getPayer = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionBuyRam.prototype.setPayer = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionBuyRam.prototype.clearPayer = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionBuyRam.prototype.hasPayer = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionBuyRam.prototype.getReceiver = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionBuyRam.prototype.setReceiver = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionBuyRam.prototype.clearReceiver = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionBuyRam.prototype.hasReceiver = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionBuyRam.prototype.getQuantity = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAsset, 3);
    };
    proto.EosActionBuyRam.prototype.setQuantity = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosActionBuyRam.prototype.clearQuantity = function() {
      return this.setQuantity(void 0);
    };
    proto.EosActionBuyRam.prototype.hasQuantity = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionBuyRamBytes.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionBuyRamBytes.toObject(opt_includeInstance, this);
      };
      proto.EosActionBuyRamBytes.toObject = function(includeInstance, msg) {
        var f2, obj = {
          payer: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          receiver: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          bytes: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionBuyRamBytes.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionBuyRamBytes();
      return proto.EosActionBuyRamBytes.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionBuyRamBytes.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setPayer(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setReceiver(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setBytes(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionBuyRamBytes.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionBuyRamBytes.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionBuyRamBytes.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
    };
    proto.EosActionBuyRamBytes.prototype.getPayer = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionBuyRamBytes.prototype.setPayer = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionBuyRamBytes.prototype.clearPayer = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionBuyRamBytes.prototype.hasPayer = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionBuyRamBytes.prototype.getReceiver = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionBuyRamBytes.prototype.setReceiver = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionBuyRamBytes.prototype.clearReceiver = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionBuyRamBytes.prototype.hasReceiver = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionBuyRamBytes.prototype.getBytes = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.EosActionBuyRamBytes.prototype.setBytes = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosActionBuyRamBytes.prototype.clearBytes = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosActionBuyRamBytes.prototype.hasBytes = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionSellRam.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionSellRam.toObject(opt_includeInstance, this);
      };
      proto.EosActionSellRam.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          bytes: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionSellRam.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionSellRam();
      return proto.EosActionSellRam.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionSellRam.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readSint64String();
            msg.setBytes(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionSellRam.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionSellRam.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionSellRam.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeSint64String(2, f2);
      }
    };
    proto.EosActionSellRam.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionSellRam.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionSellRam.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionSellRam.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionSellRam.prototype.getBytes = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionSellRam.prototype.setBytes = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionSellRam.prototype.clearBytes = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionSellRam.prototype.hasBytes = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionVoteProducer.repeatedFields_ = [3];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionVoteProducer.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionVoteProducer.toObject(opt_includeInstance, this);
      };
      proto.EosActionVoteProducer.toObject = function(includeInstance, msg) {
        var f2, obj = {
          voter: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          proxy: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          producersList: (f2 = jspb2.Message.getRepeatedField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionVoteProducer.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionVoteProducer();
      return proto.EosActionVoteProducer.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionVoteProducer.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setVoter(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setProxy(value);
            break;
          case 3:
            var values = reader.isDelimited() ? reader.readPackedUint64String() : [reader.readUint64String()];
            for (var i = 0; i < values.length; i++) {
              msg.addProducers(values[i]);
            }
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionVoteProducer.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionVoteProducer.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionVoteProducer.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getProducersList();
      if (f2.length > 0) {
        writer.writeRepeatedUint64String(3, f2);
      }
    };
    proto.EosActionVoteProducer.prototype.getVoter = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionVoteProducer.prototype.setVoter = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionVoteProducer.prototype.clearVoter = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionVoteProducer.prototype.hasVoter = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionVoteProducer.prototype.getProxy = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionVoteProducer.prototype.setProxy = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionVoteProducer.prototype.clearProxy = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionVoteProducer.prototype.hasProxy = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionVoteProducer.prototype.getProducersList = function() {
      return jspb2.Message.getRepeatedField(this, 3);
    };
    proto.EosActionVoteProducer.prototype.setProducersList = function(value) {
      return jspb2.Message.setField(this, 3, value || []);
    };
    proto.EosActionVoteProducer.prototype.addProducers = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 3, value, opt_index);
    };
    proto.EosActionVoteProducer.prototype.clearProducersList = function() {
      return this.setProducersList([]);
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionUpdateAuth.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionUpdateAuth.toObject(opt_includeInstance, this);
      };
      proto.EosActionUpdateAuth.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          permission: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          parent: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          auth: (f2 = msg.getAuth()) && proto.EosAuthorization.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionUpdateAuth.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionUpdateAuth();
      return proto.EosActionUpdateAuth.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionUpdateAuth.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setPermission(value);
            break;
          case 3:
            var value = reader.readUint64String();
            msg.setParent(value);
            break;
          case 4:
            var value = new proto.EosAuthorization();
            reader.readMessage(value, proto.EosAuthorization.deserializeBinaryFromReader);
            msg.setAuth(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionUpdateAuth.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionUpdateAuth.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionUpdateAuth.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint64String(3, f2);
      }
      f2 = message.getAuth();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.EosAuthorization.serializeBinaryToWriter);
      }
    };
    proto.EosActionUpdateAuth.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionUpdateAuth.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionUpdateAuth.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionUpdateAuth.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionUpdateAuth.prototype.getPermission = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionUpdateAuth.prototype.setPermission = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionUpdateAuth.prototype.clearPermission = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionUpdateAuth.prototype.hasPermission = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionUpdateAuth.prototype.getParent = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "0");
    };
    proto.EosActionUpdateAuth.prototype.setParent = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosActionUpdateAuth.prototype.clearParent = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosActionUpdateAuth.prototype.hasParent = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionUpdateAuth.prototype.getAuth = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAuthorization, 4);
    };
    proto.EosActionUpdateAuth.prototype.setAuth = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.EosActionUpdateAuth.prototype.clearAuth = function() {
      return this.setAuth(void 0);
    };
    proto.EosActionUpdateAuth.prototype.hasAuth = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionDeleteAuth.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionDeleteAuth.toObject(opt_includeInstance, this);
      };
      proto.EosActionDeleteAuth.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          permission: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionDeleteAuth.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionDeleteAuth();
      return proto.EosActionDeleteAuth.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionDeleteAuth.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setPermission(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionDeleteAuth.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionDeleteAuth.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionDeleteAuth.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
    };
    proto.EosActionDeleteAuth.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionDeleteAuth.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionDeleteAuth.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionDeleteAuth.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionDeleteAuth.prototype.getPermission = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionDeleteAuth.prototype.setPermission = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionDeleteAuth.prototype.clearPermission = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionDeleteAuth.prototype.hasPermission = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionLinkAuth.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionLinkAuth.toObject(opt_includeInstance, this);
      };
      proto.EosActionLinkAuth.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          code: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          type: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          requirement: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionLinkAuth.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionLinkAuth();
      return proto.EosActionLinkAuth.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionLinkAuth.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setCode(value);
            break;
          case 3:
            var value = reader.readUint64String();
            msg.setType(value);
            break;
          case 4:
            var value = reader.readUint64String();
            msg.setRequirement(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionLinkAuth.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionLinkAuth.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionLinkAuth.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint64String(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint64String(4, f2);
      }
    };
    proto.EosActionLinkAuth.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionLinkAuth.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionLinkAuth.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionLinkAuth.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionLinkAuth.prototype.getCode = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionLinkAuth.prototype.setCode = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionLinkAuth.prototype.clearCode = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionLinkAuth.prototype.hasCode = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionLinkAuth.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "0");
    };
    proto.EosActionLinkAuth.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosActionLinkAuth.prototype.clearType = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosActionLinkAuth.prototype.hasType = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionLinkAuth.prototype.getRequirement = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "0");
    };
    proto.EosActionLinkAuth.prototype.setRequirement = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EosActionLinkAuth.prototype.clearRequirement = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EosActionLinkAuth.prototype.hasRequirement = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionUnlinkAuth.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionUnlinkAuth.toObject(opt_includeInstance, this);
      };
      proto.EosActionUnlinkAuth.toObject = function(includeInstance, msg) {
        var f2, obj = {
          account: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          code: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          type: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionUnlinkAuth.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionUnlinkAuth();
      return proto.EosActionUnlinkAuth.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionUnlinkAuth.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setAccount(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setCode(value);
            break;
          case 3:
            var value = reader.readUint64String();
            msg.setType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionUnlinkAuth.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionUnlinkAuth.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionUnlinkAuth.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint64String(3, f2);
      }
    };
    proto.EosActionUnlinkAuth.prototype.getAccount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionUnlinkAuth.prototype.setAccount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionUnlinkAuth.prototype.clearAccount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionUnlinkAuth.prototype.hasAccount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionUnlinkAuth.prototype.getCode = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionUnlinkAuth.prototype.setCode = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionUnlinkAuth.prototype.clearCode = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionUnlinkAuth.prototype.hasCode = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionUnlinkAuth.prototype.getType = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "0");
    };
    proto.EosActionUnlinkAuth.prototype.setType = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosActionUnlinkAuth.prototype.clearType = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosActionUnlinkAuth.prototype.hasType = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionNewAccount.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionNewAccount.toObject(opt_includeInstance, this);
      };
      proto.EosActionNewAccount.toObject = function(includeInstance, msg) {
        var f2, obj = {
          creator: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          name: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          owner: (f2 = msg.getOwner()) && proto.EosAuthorization.toObject(includeInstance, f2),
          active: (f2 = msg.getActive()) && proto.EosAuthorization.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionNewAccount.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionNewAccount();
      return proto.EosActionNewAccount.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionNewAccount.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64String();
            msg.setCreator(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setName(value);
            break;
          case 3:
            var value = new proto.EosAuthorization();
            reader.readMessage(value, proto.EosAuthorization.deserializeBinaryFromReader);
            msg.setOwner(value);
            break;
          case 4:
            var value = new proto.EosAuthorization();
            reader.readMessage(value, proto.EosAuthorization.deserializeBinaryFromReader);
            msg.setActive(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionNewAccount.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionNewAccount.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionNewAccount.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64String(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = message.getOwner();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.EosAuthorization.serializeBinaryToWriter);
      }
      f2 = message.getActive();
      if (f2 != null) {
        writer.writeMessage(4, f2, proto.EosAuthorization.serializeBinaryToWriter);
      }
    };
    proto.EosActionNewAccount.prototype.getCreator = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "0");
    };
    proto.EosActionNewAccount.prototype.setCreator = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionNewAccount.prototype.clearCreator = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionNewAccount.prototype.hasCreator = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionNewAccount.prototype.getName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.EosActionNewAccount.prototype.setName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionNewAccount.prototype.clearName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionNewAccount.prototype.hasName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosActionNewAccount.prototype.getOwner = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAuthorization, 3);
    };
    proto.EosActionNewAccount.prototype.setOwner = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.EosActionNewAccount.prototype.clearOwner = function() {
      return this.setOwner(void 0);
    };
    proto.EosActionNewAccount.prototype.hasOwner = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosActionNewAccount.prototype.getActive = function() {
      return jspb2.Message.getWrapperField(this, proto.EosAuthorization, 4);
    };
    proto.EosActionNewAccount.prototype.setActive = function(value) {
      return jspb2.Message.setWrapperField(this, 4, value);
    };
    proto.EosActionNewAccount.prototype.clearActive = function() {
      return this.setActive(void 0);
    };
    proto.EosActionNewAccount.prototype.hasActive = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosActionUnknown.prototype.toObject = function(opt_includeInstance) {
        return proto.EosActionUnknown.toObject(opt_includeInstance, this);
      };
      proto.EosActionUnknown.toObject = function(includeInstance, msg) {
        var f2, obj = {
          dataSize: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          dataChunk: msg.getDataChunk_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosActionUnknown.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosActionUnknown();
      return proto.EosActionUnknown.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosActionUnknown.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setDataSize(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setDataChunk(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosActionUnknown.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosActionUnknown.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosActionUnknown.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.EosActionUnknown.prototype.getDataSize = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosActionUnknown.prototype.setDataSize = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosActionUnknown.prototype.clearDataSize = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosActionUnknown.prototype.hasDataSize = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosActionUnknown.prototype.getDataChunk = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EosActionUnknown.prototype.getDataChunk_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getDataChunk());
    };
    proto.EosActionUnknown.prototype.getDataChunk_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getDataChunk());
    };
    proto.EosActionUnknown.prototype.setDataChunk = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosActionUnknown.prototype.clearDataChunk = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosActionUnknown.prototype.hasDataChunk = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.EosSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.EosSignedTx.toObject(opt_includeInstance, this);
      };
      proto.EosSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signatureV: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          signatureR: msg.getSignatureR_asB64(),
          signatureS: msg.getSignatureS_asB64(),
          hash: msg.getHash_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.EosSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.EosSignedTx();
      return proto.EosSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.EosSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint32();
            msg.setSignatureV(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignatureR(value);
            break;
          case 3:
            var value = reader.readBytes();
            msg.setSignatureS(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setHash(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.EosSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.EosSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.EosSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBytes(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
    };
    proto.EosSignedTx.prototype.getSignatureV = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.EosSignedTx.prototype.setSignatureV = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.EosSignedTx.prototype.clearSignatureV = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.EosSignedTx.prototype.hasSignatureV = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.EosSignedTx.prototype.getSignatureR = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.EosSignedTx.prototype.getSignatureR_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignatureR());
    };
    proto.EosSignedTx.prototype.getSignatureR_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignatureR());
    };
    proto.EosSignedTx.prototype.setSignatureR = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.EosSignedTx.prototype.clearSignatureR = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.EosSignedTx.prototype.hasSignatureR = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.EosSignedTx.prototype.getSignatureS = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.EosSignedTx.prototype.getSignatureS_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignatureS());
    };
    proto.EosSignedTx.prototype.getSignatureS_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignatureS());
    };
    proto.EosSignedTx.prototype.setSignatureS = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.EosSignedTx.prototype.clearSignatureS = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.EosSignedTx.prototype.hasSignatureS = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.EosSignedTx.prototype.getHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.EosSignedTx.prototype.getHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getHash());
    };
    proto.EosSignedTx.prototype.getHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getHash());
    };
    proto.EosSignedTx.prototype.setHash = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.EosSignedTx.prototype.clearHash = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.EosSignedTx.prototype.hasHash = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.EosPublicKeyKind = {
      EOS: 0,
      EOS_K1: 1,
      EOS_R1: 2
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/long/dist/long.js
var require_long = __commonJS({
  "node_modules/long/dist/long.js"(exports2, module2) {
    init_define_process_env();
    (function(global2, factory) {
      if (typeof define === "function" && define["amd"])
        define([], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2["exports"])
        module2["exports"] = factory();
      else
        (global2["dcodeIO"] = global2["dcodeIO"] || {})["Long"] = factory();
    })(exports2, function() {
      "use strict";
      function Long(low, high, unsigned) {
        this.low = low | 0;
        this.high = high | 0;
        this.unsigned = !!unsigned;
      }
      Long.prototype.__isLong__;
      Object.defineProperty(Long.prototype, "__isLong__", {
        value: true,
        enumerable: false,
        configurable: false
      });
      function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
      }
      Long.isLong = isLong;
      var INT_CACHE = {};
      var UINT_CACHE = {};
      function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
          if (cache)
            UINT_CACHE[value] = obj;
          return obj;
        } else {
          value |= 0;
          if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, value < 0 ? -1 : 0, false);
          if (cache)
            INT_CACHE[value] = obj;
          return obj;
        }
      }
      Long.fromInt = fromInt;
      function fromNumber(value, unsigned) {
        if (isNaN(value) || !isFinite(value))
          return unsigned ? UZERO : ZERO;
        if (unsigned) {
          if (value < 0)
            return UZERO;
          if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
        }
        if (value < 0)
          return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      Long.fromNumber = fromNumber;
      function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
      }
      Long.fromBits = fromBits;
      var pow_dbl = Math.pow;
      function fromString(str, unsigned, radix) {
        if (str.length === 0)
          throw Error("empty string");
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
          return ZERO;
        if (typeof unsigned === "number") {
          radix = unsigned, unsigned = false;
        } else {
          unsigned = !!unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0)
          throw Error("interior hyphen");
        else if (p === 0) {
          return fromString(str.substring(1), unsigned, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
          var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      }
      Long.fromString = fromString;
      function fromValue(val) {
        if (val instanceof Long)
          return val;
        if (typeof val === "number")
          return fromNumber(val);
        if (typeof val === "string")
          return fromString(val);
        return fromBits(val.low, val.high, val.unsigned);
      }
      Long.fromValue = fromValue;
      var TWO_PWR_16_DBL = 1 << 16;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
      var ZERO = fromInt(0);
      Long.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long.UZERO = UZERO;
      var ONE = fromInt(1);
      Long.ONE = ONE;
      var UONE = fromInt(1, true);
      Long.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
      Long.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
      Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
      Long.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long.prototype;
      LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
          return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        if (this.isZero())
          return "0";
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          } else
            return "-" + this.neg().toString(radix);
        }
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero())
            return digits + result;
          else {
            while (digits.length < 6)
              digits = "0" + digits;
            result = "" + digits + result;
          }
        }
      };
      LongPrototype.getHighBits = function getHighBits() {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function getLowBits() {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative())
          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
          if ((val & 1 << bit) != 0)
            break;
        return this.high != 0 ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
      };
      LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
      };
      LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
      };
      LongPrototype.equals = function equals(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
          return false;
        return this.high === other.high && this.low === other.low;
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(other);
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.lessThan = function lessThan(other) {
        return this.comp(other) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(other) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(other) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(other) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function compare(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.eq(other))
          return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
          return -1;
        if (!thisNeg && otherNeg)
          return 1;
        if (!this.unsigned)
          return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
          return MIN_VALUE;
        return this.not().add(ONE);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function add(addend) {
        if (!isLong(addend))
          addend = fromValue(addend);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
          subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
          return ZERO;
        if (!isLong(multiplier))
          multiplier = fromValue(multiplier);
        if (multiplier.isZero())
          return ZERO;
        if (this.eq(MIN_VALUE))
          return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
          return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) {
          if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
          else
            return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
          return this.mul(multiplier.neg()).neg();
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
          return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (divisor.isZero())
          throw Error("division by zero");
        if (this.isZero())
          return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
          if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
              return MIN_VALUE;
            else if (divisor.eq(MIN_VALUE))
              return ONE;
            else {
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);
              if (approx.eq(ZERO)) {
                return divisor.isNegative() ? ONE : NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res = approx.add(rem.div(divisor));
                return res;
              }
            }
          } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative())
              return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
          res = ZERO;
        } else {
          if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
          if (divisor.gt(this))
            return UZERO;
          if (divisor.gt(this.shru(1)))
            return UONE;
          res = UZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          if (approxRes.isZero())
            approxRes = ONE;
          res = res.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        return this.sub(this.div(divisor).mul(divisor));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.and = function and(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function or(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function xor(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else
          return fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else
          return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
          return this;
        else {
          var high = this.high;
          if (numBits < 32) {
            var low = this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
          } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
          else
            return fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
          return this;
        return fromBits(this.low, this.high, false);
      };
      LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
          return this;
        return fromBits(this.low, this.high, true);
      };
      LongPrototype.toBytes = function(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      LongPrototype.toBytesLE = function() {
        var hi = this.high, lo = this.low;
        return [
          lo & 255,
          lo >>> 8 & 255,
          lo >>> 16 & 255,
          lo >>> 24 & 255,
          hi & 255,
          hi >>> 8 & 255,
          hi >>> 16 & 255,
          hi >>> 24 & 255
        ];
      };
      LongPrototype.toBytesBE = function() {
        var hi = this.high, lo = this.low;
        return [
          hi >>> 24 & 255,
          hi >>> 16 & 255,
          hi >>> 8 & 255,
          hi & 255,
          lo >>> 24 & 255,
          lo >>> 16 & 255,
          lo >>> 8 & 255,
          lo & 255
        ];
      };
      return Long;
    });
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/eos.js
var require_eos = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/eos.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eosSignTx = exports2.eosGetPublicKey = exports2.eosGetAccountPaths = void 0;
    var EosMessages = __importStar(require_messages_eos_pb());
    var Messages = __importStar(require_messages_pb());
    var core = __importStar(require_dist3());
    var createHash = require_browser3();
    function eosSigFormatter(r, s, v) {
      const base58 = require_bs58();
      var recoverId = 31;
      var signature = "SIG_K1_";
      console.log("formatter logs");
      var keyBuffer = Buffer.alloc(65);
      var rbuf = Buffer.from(r);
      var sbuf = Buffer.from(s);
      keyBuffer.writeUInt8(recoverId, 0);
      rbuf.copy(keyBuffer, 1);
      sbuf.copy(keyBuffer, 33);
      console.log(keyBuffer);
      const check = [keyBuffer];
      var keyType = "K1";
      check.push(Buffer.from(keyType));
      console.log(check);
      console.log("hash");
      console.log(createHash("ripemd160").update(core.compatibleBufferConcat(check)).digest());
      const chksum = createHash("ripemd160").update(core.compatibleBufferConcat(check)).digest().slice(0, 4);
      console.log(chksum);
      signature = signature.concat(base58.encode(core.compatibleBufferConcat([keyBuffer, chksum])));
      console.log(signature);
      return signature;
    }
    function charToSymbol(c2) {
      if (c2.charCodeAt(0) >= "a".charCodeAt(0) && c2.charCodeAt(0) <= "z".charCodeAt(0)) {
        return c2.charCodeAt(0) - "a".charCodeAt(0) + 6;
      }
      if (c2.charCodeAt(0) >= "1".charCodeAt(0) && c2.charCodeAt(0) <= "5".charCodeAt(0)) {
        return c2.charCodeAt(0) - "1".charCodeAt(0) + 1;
      }
      return 0;
    }
    function nameToNumber(name) {
      var Long = require_long();
      let value = new Long(0, 0, true);
      let c2 = new Long(0, 0, true);
      for (let i = 0; i < 13; i++) {
        if (i < name.length && i < 13) {
          c2 = Long.fromNumber(charToSymbol(name[i]), true);
        }
        if (i < 12) {
          c2 = c2.and(Long.fromString("1f", true, 16));
          c2 = c2.shl(64 - 5 * (i + 1));
        } else {
          c2 = c2.and(Long.fromString("0f", true, 16));
        }
        value = value.or(c2);
      }
      return value.toString();
    }
    function assetToNumber(asset) {
      let assetSplit = asset.split(" ");
      let dot_pos = assetSplit[0].indexOf(".");
      let fract_part = 0;
      let int_part = 0;
      let precision_digit = 0;
      if (dot_pos != -1) {
        precision_digit = assetSplit[0].length - dot_pos - 1;
      } else {
        precision_digit = 0;
      }
      let sym = symbolFromString(precision_digit, assetSplit[1]);
      if (dot_pos != -1) {
        int_part = parseInt(assetSplit[0].slice(0, dot_pos));
        fract_part = parseInt(assetSplit[0].slice(dot_pos + 1));
        if (int_part < 0) {
          fract_part *= -1;
        }
      } else {
        int_part = parseInt(assetSplit[0]);
      }
      let amount = int_part;
      amount *= Math.pow(10, sym & 255);
      amount += fract_part;
      return [amount, sym];
    }
    function symbolFromString(p, name) {
      let result = 0;
      for (var i = 0; i < name.length; i++) {
        result |= name.charCodeAt(i) << 8 * (i + 1);
      }
      result |= p;
      return result;
    }
    function eosGetAccountPaths(msg) {
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + core.slip44ByCoin("Eos"), 2147483648 + msg.accountIdx, 0, 0]
        }
      ];
    }
    exports2.eosGetAccountPaths = eosGetAccountPaths;
    function eosGetPublicKey(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getPubkey = new EosMessages.EosGetPublicKey();
        getPubkey.setAddressNList(msg.addressNList);
        getPubkey.setShowDisplay(msg.showDisplay !== false);
        getPubkey.setKind(msg.kind);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_EOSGETPUBLICKEY, getPubkey, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const eosPubkey = response.proto;
        return core.mustBeDefined(eosPubkey.getWifPublicKey());
      });
    }
    exports2.eosGetPublicKey = eosGetPublicKey;
    function eosSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          let resp;
          if (msg.tx.actions.length > 1) {
            throw new Error(`Too many actions in Eos transaction: Keepkey only supports one!`);
          }
          const signTx = new EosMessages.EosSignTx();
          signTx.setAddressNList(msg.addressNList);
          signTx.setChainId(core.fromHexString(msg.chain_id));
          const txHeader = new EosMessages.EosTxHeader();
          txHeader.setExpiration((Date.parse(msg.tx.expiration) - Date.parse("01 Jan 1970 00:00:00Z") - new Date().getTimezoneOffset() * 60 * 1e3) / 1e3);
          txHeader.setRefBlockNum(msg.tx.ref_block_num);
          txHeader.setRefBlockPrefix(msg.tx.ref_block_prefix);
          txHeader.setMaxNetUsageWords(msg.tx.max_net_usage_words);
          txHeader.setMaxCpuUsageMs(msg.tx.max_cpu_usage_ms);
          txHeader.setDelaySec(msg.tx.delay_sec);
          signTx.setHeader(txHeader);
          signTx.setNumActions(msg.tx.actions.length);
          console.log("tx header");
          console.log(txHeader);
          resp = yield transport.call(Messages.MessageType.MESSAGETYPE_EOSSIGNTX, signTx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_EOSTXACTIONREQUEST) {
            throw new Error(`eos: unexpected response ${resp.message_type}`);
          }
          let actCommon = new EosMessages.EosActionCommon();
          actCommon.setAccount(nameToNumber(msg.tx.actions[0].account).toString());
          actCommon.setName(nameToNumber(msg.tx.actions[0].name).toString());
          for (let n = 0; n < msg.tx.actions[0].authorization.length; n++) {
            let actPerm = new EosMessages.EosPermissionLevel();
            actPerm.setActor(nameToNumber(msg.tx.actions[0].authorization[n].actor).toString());
            actPerm.setPermission(nameToNumber(msg.tx.actions[0].authorization[n].permission).toString());
            actCommon.addAuthorization(actPerm);
          }
          let actAck = new EosMessages.EosTxActionAck();
          actAck.setCommon(actCommon);
          switch (msg.tx.actions[0].name) {
            case "transfer": {
              let actType = new EosMessages.EosActionTransfer();
              actType.setSender(nameToNumber(msg.tx.actions[0].data.from).toString());
              actType.setReceiver(nameToNumber(msg.tx.actions[0].data.to).toString());
              let actAsset = new EosMessages.EosAsset();
              let assetParse = assetToNumber(msg.tx.actions[0].data.quantity);
              actAsset.setAmount(assetParse[0].toString());
              actAsset.setSymbol(assetParse[1].toString());
              actType.setQuantity(actAsset);
              actType.setMemo(msg.tx.actions[0].data.memo);
              actAck.setTransfer(actType);
              break;
            }
            default: {
            }
          }
          console.log("action data");
          console.log(actAck);
          resp = yield transport.call(Messages.MessageType.MESSAGETYPE_EOSTXACTIONACK, actAck, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_EOSSIGNEDTX) {
            throw new Error(`eos: unexpected response ${resp.message_type}`);
          }
          const signedTx = resp.proto;
          const signatureR = signedTx.getSignatureR_asU8();
          const signatureS = signedTx.getSignatureS_asU8();
          const signatureV = signedTx.getSignatureV();
          if (signatureV === void 0)
            throw new Error("missing signatureV");
          var sig = {
            signatureV,
            signatureR,
            signatureS,
            hash: signedTx.getHash(),
            eosFormSig: eosSigFormatter(signatureR, signatureS, signatureV)
          };
          return sig;
        }));
      });
    }
    exports2.eosSignTx = eosSignTx;
  }
});

// node_modules/eip55/node_modules/keccak/lib/api/keccak.js
var require_keccak = __commonJS({
  "node_modules/eip55/node_modules/keccak/lib/api/keccak.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = (init_stream(), __toCommonJS(stream_exports)).Transform;
    var inherits = require_inherits_browser();
    module2.exports = function(KeccakState) {
      function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
        Transform.call(this, options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      inherits(Keccak, Transform);
      Keccak.prototype._transform = function(chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      Keccak.prototype._flush = function(callback) {
        var error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      Keccak.prototype.update = function(data, encoding) {
        if (!Buffer2.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Digest already called");
        if (!Buffer2.isBuffer(data))
          data = Buffer2.from(data, encoding);
        this._state.absorb(data);
        return this;
      };
      Keccak.prototype.digest = function(encoding) {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true;
        if (this._delimitedSuffix)
          this._state.absorbLastFewBits(this._delimitedSuffix);
        var digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== void 0)
          digest = digest.toString(encoding);
        this._resetState();
        return digest;
      };
      Keccak.prototype._resetState = function() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      };
      Keccak.prototype._clone = function() {
        var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      };
      return Keccak;
    };
  }
});

// node_modules/eip55/node_modules/keccak/lib/api/shake.js
var require_shake = __commonJS({
  "node_modules/eip55/node_modules/keccak/lib/api/shake.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = (init_stream(), __toCommonJS(stream_exports)).Transform;
    var inherits = require_inherits_browser();
    module2.exports = function(KeccakState) {
      function Shake(rate, capacity, delimitedSuffix, options) {
        Transform.call(this, options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      inherits(Shake, Transform);
      Shake.prototype._transform = function(chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      Shake.prototype._flush = function() {
      };
      Shake.prototype._read = function(size) {
        this.push(this.squeeze(size));
      };
      Shake.prototype.update = function(data, encoding) {
        if (!Buffer2.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Squeeze already called");
        if (!Buffer2.isBuffer(data))
          data = Buffer2.from(data, encoding);
        this._state.absorb(data);
        return this;
      };
      Shake.prototype.squeeze = function(dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }
        var data = this._state.squeeze(dataByteLength);
        if (encoding !== void 0)
          data = data.toString(encoding);
        return data;
      };
      Shake.prototype._resetState = function() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      };
      Shake.prototype._clone = function() {
        var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      };
      return Shake;
    };
  }
});

// node_modules/eip55/node_modules/keccak/lib/api/index.js
var require_api = __commonJS({
  "node_modules/eip55/node_modules/keccak/lib/api/index.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var createKeccak = require_keccak();
    var createShake = require_shake();
    module2.exports = function(KeccakState) {
      var Keccak = createKeccak(KeccakState);
      var Shake = createShake(KeccakState);
      return function(algorithm, options) {
        var hash = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
        switch (hash) {
          case "keccak224":
            return new Keccak(1152, 448, null, 224, options);
          case "keccak256":
            return new Keccak(1088, 512, null, 256, options);
          case "keccak384":
            return new Keccak(832, 768, null, 384, options);
          case "keccak512":
            return new Keccak(576, 1024, null, 512, options);
          case "sha3-224":
            return new Keccak(1152, 448, 6, 224, options);
          case "sha3-256":
            return new Keccak(1088, 512, 6, 256, options);
          case "sha3-384":
            return new Keccak(832, 768, 6, 384, options);
          case "sha3-512":
            return new Keccak(576, 1024, 6, 512, options);
          case "shake128":
            return new Shake(1344, 256, 31, options);
          case "shake256":
            return new Shake(1088, 512, 31, options);
          default:
            throw new Error("Invald algorithm: " + algorithm);
        }
      };
    };
  }
});

// node_modules/eip55/node_modules/keccak/lib/keccak-state-unroll.js
var require_keccak_state_unroll = __commonJS({
  "node_modules/eip55/node_modules/keccak/lib/keccak-state-unroll.js"(exports2) {
    "use strict";
    init_define_process_env();
    var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    exports2.p1600 = function(s) {
      for (var round2 = 0; round2 < 24; ++round2) {
        var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        var t1slo0 = s[0] ^ lo;
        var t1shi0 = s[1] ^ hi;
        var t1slo5 = s[10] ^ lo;
        var t1shi5 = s[11] ^ hi;
        var t1slo10 = s[20] ^ lo;
        var t1shi10 = s[21] ^ hi;
        var t1slo15 = s[30] ^ lo;
        var t1shi15 = s[31] ^ hi;
        var t1slo20 = s[40] ^ lo;
        var t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        var t1slo1 = s[2] ^ lo;
        var t1shi1 = s[3] ^ hi;
        var t1slo6 = s[12] ^ lo;
        var t1shi6 = s[13] ^ hi;
        var t1slo11 = s[22] ^ lo;
        var t1shi11 = s[23] ^ hi;
        var t1slo16 = s[32] ^ lo;
        var t1shi16 = s[33] ^ hi;
        var t1slo21 = s[42] ^ lo;
        var t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        var t1slo2 = s[4] ^ lo;
        var t1shi2 = s[5] ^ hi;
        var t1slo7 = s[14] ^ lo;
        var t1shi7 = s[15] ^ hi;
        var t1slo12 = s[24] ^ lo;
        var t1shi12 = s[25] ^ hi;
        var t1slo17 = s[34] ^ lo;
        var t1shi17 = s[35] ^ hi;
        var t1slo22 = s[44] ^ lo;
        var t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        var t1slo3 = s[6] ^ lo;
        var t1shi3 = s[7] ^ hi;
        var t1slo8 = s[16] ^ lo;
        var t1shi8 = s[17] ^ hi;
        var t1slo13 = s[26] ^ lo;
        var t1shi13 = s[27] ^ hi;
        var t1slo18 = s[36] ^ lo;
        var t1shi18 = s[37] ^ hi;
        var t1slo23 = s[46] ^ lo;
        var t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        var t1slo4 = s[8] ^ lo;
        var t1shi4 = s[9] ^ hi;
        var t1slo9 = s[18] ^ lo;
        var t1shi9 = s[19] ^ hi;
        var t1slo14 = s[28] ^ lo;
        var t1shi14 = s[29] ^ hi;
        var t1slo19 = s[38] ^ lo;
        var t1shi19 = s[39] ^ hi;
        var t1slo24 = s[48] ^ lo;
        var t1shi24 = s[49] ^ hi;
        var t2slo0 = t1slo0;
        var t2shi0 = t1shi0;
        var t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
        var t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
        var t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
        var t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
        var t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
        var t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
        var t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
        var t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
        var t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
        var t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
        var t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
        var t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
        var t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
        var t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
        var t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
        var t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
        var t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
        var t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
        var t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
        var t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
        var t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
        var t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
        var t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
        var t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
        var t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
        var t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
        var t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
        var t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
        var t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
        var t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
        var t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
        var t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
        var t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
        var t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
        var t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
        var t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
        var t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
        var t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
        var t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
        var t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
        var t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
        var t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
        var t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
        var t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
        var t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
        var t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
        var t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
        var t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
        s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
        s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
        s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
        s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
        s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
        s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
        s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
        s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
        s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
        s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
        s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
        s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
        s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
        s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
        s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
        s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
        s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
        s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
        s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
        s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
        s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
        s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
        s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
        s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
        s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
        s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
        s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
        s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
        s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
        s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
        s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
        s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
        s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
        s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
        s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
        s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
        s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
        s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
        s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
        s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
        s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
        s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
        s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
        s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
        s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
        s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
        s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
        s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
        s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
        s[49] = t2shi24 ^ ~t2shi20 & t2shi21;
        s[0] ^= P1600_ROUND_CONSTANTS[round2 * 2];
        s[1] ^= P1600_ROUND_CONSTANTS[round2 * 2 + 1];
      }
    };
  }
});

// node_modules/eip55/node_modules/keccak/lib/keccak.js
var require_keccak2 = __commonJS({
  "node_modules/eip55/node_modules/keccak/lib/keccak.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    var Buffer2 = require_safe_buffer().Buffer;
    var keccakState = require_keccak_state_unroll();
    function Keccak() {
      this.state = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }
    Keccak.prototype.initialize = function(rate, capacity) {
      for (var i = 0; i < 50; ++i)
        this.state[i] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };
    Keccak.prototype.absorb = function(data) {
      for (var i = 0; i < data.length; ++i) {
        this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
    };
    Keccak.prototype.absorbLastFewBits = function(bits) {
      this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
      if ((bits & 128) !== 0 && this.count === this.blockSize - 1)
        keccakState.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
      keccakState.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };
    Keccak.prototype.squeeze = function(length) {
      if (!this.squeezing)
        this.absorbLastFewBits(1);
      var output = Buffer2.alloc(length);
      for (var i = 0; i < length; ++i) {
        output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
      return output;
    };
    Keccak.prototype.copy = function(dest) {
      for (var i = 0; i < 50; ++i)
        dest.state[i] = this.state[i];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };
    module2.exports = Keccak;
  }
});

// node_modules/eip55/node_modules/keccak/js.js
var require_js2 = __commonJS({
  "node_modules/eip55/node_modules/keccak/js.js"(exports2, module2) {
    "use strict";
    init_define_process_env();
    module2.exports = require_api()(require_keccak2());
  }
});

// node_modules/eip55/index.js
var require_eip55 = __commonJS({
  "node_modules/eip55/index.js"(exports2, module2) {
    init_define_process_env();
    var createKeccakHash = require_js2();
    function encodeInternal(address, parsed, chainId) {
      checkChainId(chainId);
      parsed = parsed === void 0 ? getHex(address) : parsed;
      if (parsed === null)
        throw new TypeError("Bad address");
      var addressHex = parsed[1].toLowerCase();
      var forHash = chainId !== void 0 ? chainId.toString(10) + "0x" + addressHex : addressHex;
      var checksum = createKeccakHash("keccak256").update(forHash).digest();
      var ret = "0x";
      for (var i = 0; i < 20; ++i) {
        var byte = checksum[i];
        var ha = addressHex.charAt(i * 2);
        var hb = addressHex.charAt(i * 2 + 1);
        ret += (byte & 240) >= 128 ? ha.toUpperCase() : ha;
        ret += (byte & 15) >= 8 ? hb.toUpperCase() : hb;
      }
      return ret;
    }
    function encode(address, chainId) {
      return encodeInternal(address, void 0, chainId);
    }
    function verify(address, allowOneCase, chainId) {
      checkChainId(chainId);
      var parsed = getHex(address);
      if (parsed !== null) {
        if (address.indexOf("0x") !== 0)
          return false;
        if (allowOneCase && isOneCase(parsed[1]))
          return true;
        return encodeInternal(address, parsed, chainId) === address;
      }
      return false;
    }
    function checkChainId(n) {
      if (n !== void 0 && !isPositiveInteger(n)) {
        throw new TypeError("Bad chainId");
      }
    }
    function isPositiveInteger(n) {
      return (typeof n === "number" || n instanceof Number) && n > 0 && n + 0 === Math.floor(n);
    }
    function isOneCase(s) {
      return s === s.toLowerCase() || s === s.toUpperCase();
    }
    function isString(data) {
      return typeof data === "string" || data instanceof String;
    }
    function getHex(data) {
      return isString(data) ? data.match(/^(?:0x)?([0-9a-fA-F]{40})$/) : null;
    }
    module2.exports = { encode, verify };
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/ethereum.js
var require_ethereum = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/ethereum.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ethVerifyMessage = exports2.ethSignMessage = exports2.ethGetAddress = exports2.ethSignTx = exports2.ethGetAccountPaths = exports2.ethSupportsNativeShapeShift = exports2.ethSupportsSecureTransfer = exports2.ethSupportsNetwork = void 0;
    var Exchange = __importStar(require_exchange_pb());
    var Messages = __importStar(require_messages_pb());
    var Types = __importStar(require_types_pb());
    var core = __importStar(require_dist3());
    var common_1 = __importDefault(require_dist());
    var tx_1 = require_dist2();
    var eip55 = __importStar(require_eip55());
    var utils_1 = require_utils4();
    function ethSupportsNetwork(chain_id) {
      return __awaiter(this, void 0, void 0, function* () {
        return true;
      });
    }
    exports2.ethSupportsNetwork = ethSupportsNetwork;
    function ethSupportsSecureTransfer() {
      return __awaiter(this, void 0, void 0, function* () {
        return true;
      });
    }
    exports2.ethSupportsSecureTransfer = ethSupportsSecureTransfer;
    function ethSupportsNativeShapeShift() {
      return true;
    }
    exports2.ethSupportsNativeShapeShift = ethSupportsNativeShapeShift;
    function ethGetAccountPaths(msg) {
      const slip44 = core.slip44ByCoin(msg.coin);
      if (slip44 === void 0)
        return [];
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + slip44, 2147483648 + msg.accountIdx, 0, 0],
          hardenedPath: [2147483648 + 44, 2147483648 + slip44, 2147483648 + msg.accountIdx],
          relPath: [0, 0],
          description: "KeepKey"
        }
      ];
    }
    exports2.ethGetAccountPaths = ethGetAccountPaths;
    function stripLeadingZeroes(buf) {
      const firstZeroIndex = buf.findIndex((x) => x !== 0);
      return buf.slice(firstZeroIndex !== -1 ? firstZeroIndex : buf.length);
    }
    function ethSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          const est = new Messages.EthereumSignTx();
          est.setAddressNList(msg.addressNList);
          est.setNonce(stripLeadingZeroes(core.arrayify(msg.nonce)));
          est.setGasLimit(core.arrayify(msg.gasLimit));
          if (msg.gasPrice) {
            est.setGasPrice(core.arrayify(msg.gasPrice));
          }
          if (msg.maxFeePerGas) {
            est.setMaxFeePerGas(core.arrayify(msg.maxFeePerGas));
            est.setType(core.ETHTransactionType.ETH_TX_TYPE_EIP_1559);
            if (msg.maxPriorityFeePerGas) {
              est.setMaxPriorityFeePerGas(core.arrayify(msg.maxPriorityFeePerGas));
            }
          }
          if (msg.value.match("^0x0*$") === null) {
            est.setValue(core.arrayify(msg.value));
          }
          if (msg.toAddressNList) {
            est.setAddressType(Types.OutputAddressType.SPEND);
            est.setToAddressNList(msg.toAddressNList);
          } else if (msg.exchangeType) {
            est.setAddressType(Types.OutputAddressType.EXCHANGE);
            const signedHex = core.base64toHEX(msg.exchangeType.signedExchangeResponse);
            const signedExchangeOut = Exchange.SignedExchangeResponse.deserializeBinary(core.arrayify(signedHex));
            const exchangeType = new Types.ExchangeType();
            exchangeType.setSignedExchangeResponse(signedExchangeOut);
            exchangeType.setWithdrawalCoinName(msg.exchangeType.withdrawalCoinName);
            exchangeType.setWithdrawalAddressNList(msg.exchangeType.withdrawalAddressNList);
            exchangeType.setWithdrawalScriptType(utils_1.translateInputScriptType(msg.exchangeType.withdrawalScriptType || core.BTCInputScriptType.SpendAddress));
            exchangeType.setReturnAddressNList(msg.exchangeType.returnAddressNList);
            exchangeType.setReturnScriptType(utils_1.translateInputScriptType(msg.exchangeType.returnScriptType || core.BTCInputScriptType.SpendAddress));
            est.setExchangeType(exchangeType);
          } else {
            est.setAddressType(Types.OutputAddressType.SPEND);
          }
          if (msg.to) {
            est.setTo(core.arrayify(msg.to));
          }
          let dataChunk = null;
          let dataRemaining = void 0;
          if (msg.data) {
            dataRemaining = core.arrayify(msg.data);
            est.setDataLength(dataRemaining.length);
            dataChunk = dataRemaining.slice(0, 1024);
            dataRemaining = dataRemaining.slice(dataChunk.length);
            est.setDataInitialChunk(dataChunk);
          }
          if (msg.chainId !== void 0) {
            est.setChainId(msg.chainId);
          }
          let response;
          let nextResponse = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMSIGNTX, est, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          response = nextResponse.proto;
          try {
            const esa = new Messages.EthereumTxAck();
            while (response.hasDataLength()) {
              const dataLength = response.getDataLength();
              dataRemaining = core.mustBeDefined(dataRemaining);
              dataChunk = dataRemaining.slice(0, dataLength);
              dataRemaining = dataRemaining.slice(dataLength, dataRemaining.length);
              esa.setDataChunk(dataChunk);
              nextResponse = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMTXACK, esa, {
                msgTimeout: core.LONG_TIMEOUT,
                omitLock: true
              });
              response = nextResponse.proto;
            }
          } catch (error) {
            console.error({ error });
            throw new Error("Failed to sign ETH transaction");
          }
          const utxBase = {
            to: msg.to,
            value: msg.value,
            data: msg.data,
            chainId: msg.chainId,
            nonce: msg.nonce,
            gasLimit: msg.gasLimit,
            maxFeePerGas: msg.maxFeePerGas,
            maxPriorityFeePerGas: msg.maxPriorityFeePerGas
          };
          const r = "0x" + core.toHexString(response.getSignatureR_asU8());
          const s = "0x" + core.toHexString(response.getSignatureS_asU8());
          if (!response.hasSignatureV())
            throw new Error("could not get v");
          const v = core.mustBeDefined(response.getSignatureV());
          const v2 = "0x" + v.toString(16);
          const common = new common_1.default({ chain: "mainnet", hardfork: "london" });
          const tx = msg.maxFeePerGas ? tx_1.FeeMarketEIP1559Transaction.fromTxData(Object.assign(Object.assign({}, utxBase), { maxFeePerGas: msg.maxFeePerGas, maxPriorityFeePerGas: msg.maxPriorityFeePerGas, r, s, v: v2 })) : tx_1.Transaction.fromTxData(Object.assign(Object.assign({}, utxBase), { gasPrice: msg.gasPrice, r, s, v: v2 }), { common });
          return {
            r,
            s,
            v,
            serialized: "0x" + core.toHexString(tx.serialize())
          };
        }));
      });
    }
    exports2.ethSignTx = ethSignTx;
    function ethGetAddress(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new Messages.EthereumGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMGETADDRESS, getAddr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const ethAddress = response.proto;
        let address;
        if (ethAddress.hasAddressStr())
          address = ethAddress.getAddressStr();
        else if (ethAddress.hasAddress())
          address = "0x" + core.toHexString(ethAddress.getAddress_asU8());
        else
          throw new Error("Unable to obtain ETH address from device.");
        return address;
      });
    }
    exports2.ethGetAddress = ethGetAddress;
    function ethSignMessage(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const m = new Messages.EthereumSignMessage();
        m.setAddressNList(msg.addressNList);
        m.setMessage(utils_1.toUTF8Array(msg.message));
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMSIGNMESSAGE, m, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const sig = response.proto;
        return {
          address: eip55.encode("0x" + core.toHexString(sig.getAddress_asU8())),
          signature: "0x" + core.toHexString(sig.getSignature_asU8())
        };
      });
    }
    exports2.ethSignMessage = ethSignMessage;
    function ethVerifyMessage(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const m = new Messages.EthereumVerifyMessage();
        m.setAddress(core.arrayify(msg.address));
        m.setSignature(core.arrayify(msg.signature));
        m.setMessage(utils_1.toUTF8Array(msg.message));
        let event;
        try {
          event = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMVERIFYMESSAGE, m, {
            msgTimeout: core.LONG_TIMEOUT
          });
        } catch (e2) {
          if (core.isIndexable(e2) && e2.message_enum === Messages.MessageType.MESSAGETYPE_FAILURE) {
            return false;
          }
          throw e2;
        }
        const success = event.proto;
        return success.getMessage() === "Message verified";
      });
    }
    exports2.ethVerifyMessage = ethVerifyMessage;
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-ripple_pb.js
var require_messages_ripple_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-ripple_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    goog2.exportSymbol("proto.RippleAddress", null, global2);
    goog2.exportSymbol("proto.RippleGetAddress", null, global2);
    goog2.exportSymbol("proto.RipplePayment", null, global2);
    goog2.exportSymbol("proto.RippleSignTx", null, global2);
    goog2.exportSymbol("proto.RippleSignedTx", null, global2);
    proto.RippleGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.RippleGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.RippleGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RippleGetAddress.displayName = "proto.RippleGetAddress";
    }
    proto.RippleAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RippleAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RippleAddress.displayName = "proto.RippleAddress";
    }
    proto.RippleSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.RippleSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.RippleSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RippleSignTx.displayName = "proto.RippleSignTx";
    }
    proto.RipplePayment = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RipplePayment, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RipplePayment.displayName = "proto.RipplePayment";
    }
    proto.RippleSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.RippleSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.RippleSignedTx.displayName = "proto.RippleSignedTx";
    }
    proto.RippleGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RippleGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.RippleGetAddress.toObject(opt_includeInstance, this);
      };
      proto.RippleGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RippleGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RippleGetAddress();
      return proto.RippleGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.RippleGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RippleGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RippleGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RippleGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
    };
    proto.RippleGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.RippleGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.RippleGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.RippleGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.RippleGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.RippleGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.RippleGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.RippleGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RippleAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.RippleAddress.toObject(opt_includeInstance, this);
      };
      proto.RippleAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RippleAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RippleAddress();
      return proto.RippleAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.RippleAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RippleAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RippleAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RippleAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.RippleAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.RippleAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.RippleAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.RippleAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.RippleSignTx.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RippleSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.RippleSignTx.toObject(opt_includeInstance, this);
      };
      proto.RippleSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          fee: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          flags: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          sequence: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          lastLedgerSequence: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          payment: (f2 = msg.getPayment()) && proto.RipplePayment.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RippleSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RippleSignTx();
      return proto.RippleSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.RippleSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readUint64();
            msg.setFee(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setFlags(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setSequence(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setLastLedgerSequence(value);
            break;
          case 6:
            var value = new proto.RipplePayment();
            reader.readMessage(value, proto.RipplePayment.deserializeBinaryFromReader);
            msg.setPayment(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RippleSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RippleSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RippleSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = message.getPayment();
      if (f2 != null) {
        writer.writeMessage(6, f2, proto.RipplePayment.serializeBinaryToWriter);
      }
    };
    proto.RippleSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.RippleSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.RippleSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.RippleSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.RippleSignTx.prototype.getFee = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, 0);
    };
    proto.RippleSignTx.prototype.setFee = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.RippleSignTx.prototype.clearFee = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.RippleSignTx.prototype.hasFee = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.RippleSignTx.prototype.getFlags = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.RippleSignTx.prototype.setFlags = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.RippleSignTx.prototype.clearFlags = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.RippleSignTx.prototype.hasFlags = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.RippleSignTx.prototype.getSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.RippleSignTx.prototype.setSequence = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.RippleSignTx.prototype.clearSequence = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.RippleSignTx.prototype.hasSequence = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.RippleSignTx.prototype.getLastLedgerSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.RippleSignTx.prototype.setLastLedgerSequence = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.RippleSignTx.prototype.clearLastLedgerSequence = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.RippleSignTx.prototype.hasLastLedgerSequence = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.RippleSignTx.prototype.getPayment = function() {
      return jspb2.Message.getWrapperField(this, proto.RipplePayment, 6);
    };
    proto.RippleSignTx.prototype.setPayment = function(value) {
      return jspb2.Message.setWrapperField(this, 6, value);
    };
    proto.RippleSignTx.prototype.clearPayment = function() {
      return this.setPayment(void 0);
    };
    proto.RippleSignTx.prototype.hasPayment = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RipplePayment.prototype.toObject = function(opt_includeInstance) {
        return proto.RipplePayment.toObject(opt_includeInstance, this);
      };
      proto.RipplePayment.toObject = function(includeInstance, msg) {
        var f2, obj = {
          amount: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          destination: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          destinationTag: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RipplePayment.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RipplePayment();
      return proto.RipplePayment.deserializeBinaryFromReader(msg, reader);
    };
    proto.RipplePayment.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readUint64();
            msg.setAmount(value);
            break;
          case 2:
            var value = reader.readString();
            msg.setDestination(value);
            break;
          case 3:
            var value = reader.readUint32();
            msg.setDestinationTag(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RipplePayment.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RipplePayment.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RipplePayment.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeUint64(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeUint32(3, f2);
      }
    };
    proto.RipplePayment.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, 0);
    };
    proto.RipplePayment.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.RipplePayment.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.RipplePayment.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.RipplePayment.prototype.getDestination = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.RipplePayment.prototype.setDestination = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.RipplePayment.prototype.clearDestination = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.RipplePayment.prototype.hasDestination = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.RipplePayment.prototype.getDestinationTag = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, 0);
    };
    proto.RipplePayment.prototype.setDestinationTag = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.RipplePayment.prototype.clearDestinationTag = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.RipplePayment.prototype.hasDestinationTag = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.RippleSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.RippleSignedTx.toObject(opt_includeInstance, this);
      };
      proto.RippleSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signature: msg.getSignature_asB64(),
          serializedTx: msg.getSerializedTx_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.RippleSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.RippleSignedTx();
      return proto.RippleSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.RippleSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSerializedTx(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.RippleSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.RippleSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.RippleSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.RippleSignedTx.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.RippleSignedTx.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.RippleSignedTx.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.RippleSignedTx.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.RippleSignedTx.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.RippleSignedTx.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.RippleSignedTx.prototype.getSerializedTx = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.RippleSignedTx.prototype.getSerializedTx_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSerializedTx());
    };
    proto.RippleSignedTx.prototype.getSerializedTx_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSerializedTx());
    };
    proto.RippleSignedTx.prototype.setSerializedTx = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.RippleSignedTx.prototype.clearSerializedTx = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.RippleSignedTx.prototype.hasSerializedTx = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/ripple.js
var require_ripple = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/ripple.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rippleGetAddress = exports2.rippleSignTx = exports2.rippleGetAccountPaths = void 0;
    var RippleMessages = __importStar(require_messages_ripple_pb());
    var Messages = __importStar(require_messages_pb());
    var core = __importStar(require_dist3());
    var lodash_1 = __importDefault(require_lodash());
    function rippleGetAccountPaths(msg) {
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + core.slip44ByCoin("Ripple"), 2147483648 + msg.accountIdx, 0, 0]
        }
      ];
    }
    exports2.rippleGetAccountPaths = rippleGetAccountPaths;
    function rippleSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          const signTx = new RippleMessages.RippleSignTx();
          signTx.setAddressNList(msg.addressNList);
          signTx.setFee(parseInt(msg.tx.value.fee.amount[0].amount));
          signTx.setSequence(parseInt(msg.sequence));
          signTx.setLastLedgerSequence(parseInt(msg.lastLedgerSequence));
          const payment = new RippleMessages.RipplePayment();
          payment.setAmount(parseInt(msg.payment.amount));
          payment.setDestination(msg.payment.destination);
          if (msg.payment.destinationTag !== void 0)
            payment.setDestinationTag(parseInt(msg.payment.destinationTag));
          signTx.setPayment(payment);
          let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_RIPPLESIGNTX, signTx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          for (let m of msg.tx.value.msg) {
            let ack;
            if (m.type === "ripple-sdk/MsgSend") {
              if (m.value.amount.length !== 1) {
                throw new Error("ripple: Multiple amounts per msg not supported");
              }
              const denom = m.value.amount[0].denom;
              if (denom !== "drop") {
                throw new Error("ripple: Unsupported denomination: " + denom);
              }
            } else {
              throw new Error(`ripple: Message ${m.type} is not yet supported`);
            }
          }
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_RIPPLESIGNEDTX) {
            throw new Error(`ripple: unexpected response ${resp.message_type}`);
          }
          const signedTx = resp.proto;
          const signed = lodash_1.default.cloneDeep(msg.tx);
          signed.value.signatures = [
            {
              serializedTx: signedTx.getSerializedTx_asB64(),
              signature: signedTx.getSignature_asB64()
            }
          ];
          return signed;
        }));
      });
    }
    exports2.rippleSignTx = rippleSignTx;
    function rippleGetAddress(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new RippleMessages.RippleGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_RIPPLEGETADDRESS, getAddr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const rippleAddress = response.proto;
        return core.mustBeDefined(rippleAddress.getAddress());
      });
    }
    exports2.rippleGetAddress = rippleGetAddress;
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-thorchain_pb.js
var require_messages_thorchain_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-thorchain_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var types_pb = require_types_pb();
    goog2.object.extend(proto, types_pb);
    goog2.exportSymbol("proto.ThorchainAddress", null, global2);
    goog2.exportSymbol("proto.ThorchainGetAddress", null, global2);
    goog2.exportSymbol("proto.ThorchainMsgAck", null, global2);
    goog2.exportSymbol("proto.ThorchainMsgDeposit", null, global2);
    goog2.exportSymbol("proto.ThorchainMsgRequest", null, global2);
    goog2.exportSymbol("proto.ThorchainMsgSend", null, global2);
    goog2.exportSymbol("proto.ThorchainSignTx", null, global2);
    goog2.exportSymbol("proto.ThorchainSignedTx", null, global2);
    proto.ThorchainGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.ThorchainGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.ThorchainGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainGetAddress.displayName = "proto.ThorchainGetAddress";
    }
    proto.ThorchainAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainAddress.displayName = "proto.ThorchainAddress";
    }
    proto.ThorchainSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.ThorchainSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.ThorchainSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainSignTx.displayName = "proto.ThorchainSignTx";
    }
    proto.ThorchainMsgRequest = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainMsgRequest, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainMsgRequest.displayName = "proto.ThorchainMsgRequest";
    }
    proto.ThorchainMsgAck = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainMsgAck, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainMsgAck.displayName = "proto.ThorchainMsgAck";
    }
    proto.ThorchainMsgSend = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainMsgSend, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainMsgSend.displayName = "proto.ThorchainMsgSend";
    }
    proto.ThorchainMsgDeposit = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainMsgDeposit, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainMsgDeposit.displayName = "proto.ThorchainMsgDeposit";
    }
    proto.ThorchainSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.ThorchainSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.ThorchainSignedTx.displayName = "proto.ThorchainSignedTx";
    }
    proto.ThorchainGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainGetAddress.toObject(opt_includeInstance, this);
      };
      proto.ThorchainGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 2)) == null ? void 0 : f2,
          testnet: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainGetAddress();
      return proto.ThorchainGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setTestnet(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBool(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
    };
    proto.ThorchainGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.ThorchainGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.ThorchainGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.ThorchainGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.ThorchainGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 2, false);
    };
    proto.ThorchainGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ThorchainGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ThorchainGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ThorchainGetAddress.prototype.getTestnet = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.ThorchainGetAddress.prototype.setTestnet = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ThorchainGetAddress.prototype.clearTestnet = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ThorchainGetAddress.prototype.hasTestnet = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainAddress.toObject(opt_includeInstance, this);
      };
      proto.ThorchainAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainAddress();
      return proto.ThorchainAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.ThorchainAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.ThorchainAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ThorchainAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ThorchainAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ThorchainSignTx.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainSignTx.toObject(opt_includeInstance, this);
      };
      proto.ThorchainSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          accountNumber: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          chainId: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          feeAmount: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          gas: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          memo: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          sequence: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          msgCount: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          testnet: (f2 = jspb2.Message.getBooleanField(msg, 9)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainSignTx();
      return proto.ThorchainSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setAccountNumber(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setChainId(value);
            break;
          case 4:
            var value = reader.readUint32();
            msg.setFeeAmount(value);
            break;
          case 5:
            var value = reader.readUint32();
            msg.setGas(value);
            break;
          case 6:
            var value = reader.readString();
            msg.setMemo(value);
            break;
          case 7:
            var value = reader.readUint64String();
            msg.setSequence(value);
            break;
          case 8:
            var value = reader.readUint32();
            msg.setMsgCount(value);
            break;
          case 9:
            var value = reader.readBool();
            msg.setTestnet(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeUint32(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeUint32(5, f2);
      }
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeUint64String(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint32(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeBool(9, f2);
      }
    };
    proto.ThorchainSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.ThorchainSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.ThorchainSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.ThorchainSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.ThorchainSignTx.prototype.getAccountNumber = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.ThorchainSignTx.prototype.setAccountNumber = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ThorchainSignTx.prototype.clearAccountNumber = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ThorchainSignTx.prototype.hasAccountNumber = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ThorchainSignTx.prototype.getChainId = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.ThorchainSignTx.prototype.setChainId = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ThorchainSignTx.prototype.clearChainId = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ThorchainSignTx.prototype.hasChainId = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ThorchainSignTx.prototype.getFeeAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, 0);
    };
    proto.ThorchainSignTx.prototype.setFeeAmount = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.ThorchainSignTx.prototype.clearFeeAmount = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.ThorchainSignTx.prototype.hasFeeAmount = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.ThorchainSignTx.prototype.getGas = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, 0);
    };
    proto.ThorchainSignTx.prototype.setGas = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.ThorchainSignTx.prototype.clearGas = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.ThorchainSignTx.prototype.hasGas = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.ThorchainSignTx.prototype.getMemo = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.ThorchainSignTx.prototype.setMemo = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.ThorchainSignTx.prototype.clearMemo = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.ThorchainSignTx.prototype.hasMemo = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.ThorchainSignTx.prototype.getSequence = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "0");
    };
    proto.ThorchainSignTx.prototype.setSequence = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.ThorchainSignTx.prototype.clearSequence = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.ThorchainSignTx.prototype.hasSequence = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.ThorchainSignTx.prototype.getMsgCount = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, 0);
    };
    proto.ThorchainSignTx.prototype.setMsgCount = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.ThorchainSignTx.prototype.clearMsgCount = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.ThorchainSignTx.prototype.hasMsgCount = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.ThorchainSignTx.prototype.getTestnet = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 9, false);
    };
    proto.ThorchainSignTx.prototype.setTestnet = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.ThorchainSignTx.prototype.clearTestnet = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.ThorchainSignTx.prototype.hasTestnet = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainMsgRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainMsgRequest.toObject(opt_includeInstance, this);
      };
      proto.ThorchainMsgRequest.toObject = function(includeInstance, msg) {
        var f2, obj = {};
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainMsgRequest.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainMsgRequest();
      return proto.ThorchainMsgRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainMsgRequest.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainMsgRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainMsgRequest.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainMsgAck.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainMsgAck.toObject(opt_includeInstance, this);
      };
      proto.ThorchainMsgAck.toObject = function(includeInstance, msg) {
        var f2, obj = {
          send: (f2 = msg.getSend()) && proto.ThorchainMsgSend.toObject(includeInstance, f2),
          deposit: (f2 = msg.getDeposit()) && proto.ThorchainMsgDeposit.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainMsgAck.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainMsgAck();
      return proto.ThorchainMsgAck.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainMsgAck.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = new proto.ThorchainMsgSend();
            reader.readMessage(value, proto.ThorchainMsgSend.deserializeBinaryFromReader);
            msg.setSend(value);
            break;
          case 2:
            var value = new proto.ThorchainMsgDeposit();
            reader.readMessage(value, proto.ThorchainMsgDeposit.deserializeBinaryFromReader);
            msg.setDeposit(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainMsgAck.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainMsgAck.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainMsgAck.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getSend();
      if (f2 != null) {
        writer.writeMessage(1, f2, proto.ThorchainMsgSend.serializeBinaryToWriter);
      }
      f2 = message.getDeposit();
      if (f2 != null) {
        writer.writeMessage(2, f2, proto.ThorchainMsgDeposit.serializeBinaryToWriter);
      }
    };
    proto.ThorchainMsgAck.prototype.getSend = function() {
      return jspb2.Message.getWrapperField(this, proto.ThorchainMsgSend, 1);
    };
    proto.ThorchainMsgAck.prototype.setSend = function(value) {
      return jspb2.Message.setWrapperField(this, 1, value);
    };
    proto.ThorchainMsgAck.prototype.clearSend = function() {
      return this.setSend(void 0);
    };
    proto.ThorchainMsgAck.prototype.hasSend = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ThorchainMsgAck.prototype.getDeposit = function() {
      return jspb2.Message.getWrapperField(this, proto.ThorchainMsgDeposit, 2);
    };
    proto.ThorchainMsgAck.prototype.setDeposit = function(value) {
      return jspb2.Message.setWrapperField(this, 2, value);
    };
    proto.ThorchainMsgAck.prototype.clearDeposit = function() {
      return this.setDeposit(void 0);
    };
    proto.ThorchainMsgAck.prototype.hasDeposit = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainMsgSend.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainMsgSend.toObject(opt_includeInstance, this);
      };
      proto.ThorchainMsgSend.toObject = function(includeInstance, msg) {
        var f2, obj = {
          fromAddress: (f2 = jspb2.Message.getField(msg, 6)) == null ? void 0 : f2,
          toAddress: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          amount: (f2 = jspb2.Message.getField(msg, 8)) == null ? void 0 : f2,
          addressType: (f2 = jspb2.Message.getField(msg, 9)) == null ? void 0 : f2,
          exchangeType: (f2 = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainMsgSend.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainMsgSend();
      return proto.ThorchainMsgSend.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainMsgSend.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 6:
            var value = reader.readString();
            msg.setFromAddress(value);
            break;
          case 7:
            var value = reader.readString();
            msg.setToAddress(value);
            break;
          case 8:
            var value = reader.readUint64String();
            msg.setAmount(value);
            break;
          case 9:
            var value = reader.readEnum();
            msg.setAddressType(value);
            break;
          case 10:
            var value = new types_pb.ExchangeType();
            reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainMsgSend.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainMsgSend.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainMsgSend.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 6);
      if (f2 != null) {
        writer.writeString(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeUint64String(8, f2);
      }
      f2 = jspb2.Message.getField(message, 9);
      if (f2 != null) {
        writer.writeEnum(9, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(10, f2, types_pb.ExchangeType.serializeBinaryToWriter);
      }
    };
    proto.ThorchainMsgSend.prototype.getFromAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 6, "");
    };
    proto.ThorchainMsgSend.prototype.setFromAddress = function(value) {
      return jspb2.Message.setField(this, 6, value);
    };
    proto.ThorchainMsgSend.prototype.clearFromAddress = function() {
      return jspb2.Message.setField(this, 6, void 0);
    };
    proto.ThorchainMsgSend.prototype.hasFromAddress = function() {
      return jspb2.Message.getField(this, 6) != null;
    };
    proto.ThorchainMsgSend.prototype.getToAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.ThorchainMsgSend.prototype.setToAddress = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.ThorchainMsgSend.prototype.clearToAddress = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.ThorchainMsgSend.prototype.hasToAddress = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.ThorchainMsgSend.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "0");
    };
    proto.ThorchainMsgSend.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.ThorchainMsgSend.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.ThorchainMsgSend.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.ThorchainMsgSend.prototype.getAddressType = function() {
      return jspb2.Message.getFieldWithDefault(this, 9, 0);
    };
    proto.ThorchainMsgSend.prototype.setAddressType = function(value) {
      return jspb2.Message.setField(this, 9, value);
    };
    proto.ThorchainMsgSend.prototype.clearAddressType = function() {
      return jspb2.Message.setField(this, 9, void 0);
    };
    proto.ThorchainMsgSend.prototype.hasAddressType = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    proto.ThorchainMsgSend.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, types_pb.ExchangeType, 10);
    };
    proto.ThorchainMsgSend.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 10, value);
    };
    proto.ThorchainMsgSend.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.ThorchainMsgSend.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 10) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainMsgDeposit.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainMsgDeposit.toObject(opt_includeInstance, this);
      };
      proto.ThorchainMsgDeposit.toObject = function(includeInstance, msg) {
        var f2, obj = {
          asset: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2,
          amount: (f2 = jspb2.Message.getField(msg, 2)) == null ? void 0 : f2,
          memo: (f2 = jspb2.Message.getField(msg, 3)) == null ? void 0 : f2,
          signer: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainMsgDeposit.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainMsgDeposit();
      return proto.ThorchainMsgDeposit.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainMsgDeposit.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAsset(value);
            break;
          case 2:
            var value = reader.readUint64String();
            msg.setAmount(value);
            break;
          case 3:
            var value = reader.readString();
            msg.setMemo(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setSigner(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainMsgDeposit.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainMsgDeposit.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainMsgDeposit.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeUint64String(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeString(3, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
    };
    proto.ThorchainMsgDeposit.prototype.getAsset = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.ThorchainMsgDeposit.prototype.setAsset = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ThorchainMsgDeposit.prototype.clearAsset = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ThorchainMsgDeposit.prototype.hasAsset = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ThorchainMsgDeposit.prototype.getAmount = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "0");
    };
    proto.ThorchainMsgDeposit.prototype.setAmount = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ThorchainMsgDeposit.prototype.clearAmount = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ThorchainMsgDeposit.prototype.hasAmount = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.ThorchainMsgDeposit.prototype.getMemo = function() {
      return jspb2.Message.getFieldWithDefault(this, 3, "");
    };
    proto.ThorchainMsgDeposit.prototype.setMemo = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.ThorchainMsgDeposit.prototype.clearMemo = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.ThorchainMsgDeposit.prototype.hasMemo = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.ThorchainMsgDeposit.prototype.getSigner = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.ThorchainMsgDeposit.prototype.setSigner = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.ThorchainMsgDeposit.prototype.clearSigner = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.ThorchainMsgDeposit.prototype.hasSigner = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.ThorchainSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.ThorchainSignedTx.toObject(opt_includeInstance, this);
      };
      proto.ThorchainSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          publicKey: msg.getPublicKey_asB64(),
          signature: msg.getSignature_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.ThorchainSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.ThorchainSignedTx();
      return proto.ThorchainSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.ThorchainSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setPublicKey(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.ThorchainSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.ThorchainSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.ThorchainSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.ThorchainSignedTx.prototype.getPublicKey = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.ThorchainSignedTx.prototype.getPublicKey_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getPublicKey());
    };
    proto.ThorchainSignedTx.prototype.getPublicKey_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getPublicKey());
    };
    proto.ThorchainSignedTx.prototype.setPublicKey = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.ThorchainSignedTx.prototype.clearPublicKey = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.ThorchainSignedTx.prototype.hasPublicKey = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.ThorchainSignedTx.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.ThorchainSignedTx.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.ThorchainSignedTx.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.ThorchainSignedTx.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.ThorchainSignedTx.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.ThorchainSignedTx.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/thorchain.js
var require_thorchain = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/thorchain.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.thorchainGetAddress = exports2.thorchainSignTx = exports2.thorchainGetAccountPaths = void 0;
    var ThorchainMessages = __importStar(require_messages_thorchain_pb());
    var Messages = __importStar(require_messages_pb());
    var core = __importStar(require_dist3());
    var lodash_1 = __importDefault(require_lodash());
    function thorchainGetAccountPaths(msg) {
      return [
        {
          addressNList: [2147483648 + 44, 2147483648 + core.slip44ByCoin("Thorchain"), 2147483648 + msg.accountIdx, 0, 0]
        }
      ];
    }
    exports2.thorchainGetAccountPaths = thorchainGetAccountPaths;
    function thorchainSignTx(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
          const signTx = new ThorchainMessages.ThorchainSignTx();
          signTx.setAddressNList(msg.addressNList);
          signTx.setAccountNumber(msg.account_number);
          signTx.setChainId(msg.chain_id);
          signTx.setFeeAmount(parseInt(msg.tx.fee.amount[0].amount));
          signTx.setGas(parseInt(msg.tx.fee.gas));
          signTx.setSequence(msg.sequence);
          if (msg.tx.memo !== void 0)
            signTx.setMemo(msg.tx.memo);
          signTx.setMsgCount(1);
          let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINSIGNTX, signTx, {
            msgTimeout: core.LONG_TIMEOUT,
            omitLock: true
          });
          for (let m of msg.tx.msg) {
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_THORCHAINMSGREQUEST) {
              throw new Error(`THORChain: unexpected response ${resp.message_type}`);
            }
            let ack;
            if (m.type === "thorchain/MsgSend") {
              if (m.value.amount.length !== 1) {
                throw new Error("THORChain: Multiple amounts per MsgSend not supported");
              }
              const denom = m.value.amount[0].denom;
              if (denom !== "rune") {
                throw new Error("THORChain: Unsupported denomination: " + denom);
              }
              const send = new ThorchainMessages.ThorchainMsgSend();
              send.setFromAddress(m.value.from_address);
              send.setToAddress(m.value.to_address);
              send.setAmount(m.value.amount[0].amount);
              ack = new ThorchainMessages.ThorchainMsgAck();
              ack.setSend(send);
            } else if (m.type === "thorchain/MsgDeposit") {
              if (m.value.coins.length !== 1) {
                throw new Error("THORChain: Multiple amounts per MsgDeposit not supported");
              }
              const coinAsset = m.value.coins[0].asset;
              if (coinAsset !== "THOR.RUNE") {
                throw new Error("THORChain: Unsupported coin asset: " + coinAsset);
              }
              const deposit = new ThorchainMessages.ThorchainMsgDeposit();
              deposit.setAsset(m.value.coins[0].asset);
              deposit.setAmount(m.value.coins[0].amount);
              deposit.setMemo(m.value.memo);
              deposit.setSigner(m.value.signer);
              ack = new ThorchainMessages.ThorchainMsgAck();
              ack.setDeposit(deposit);
            } else {
              throw new Error(`THORChain: Message ${m.type} is not yet supported`);
            }
            resp = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINMSGACK, ack, {
              msgTimeout: core.LONG_TIMEOUT,
              omitLock: true
            });
          }
          if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_THORCHAINSIGNEDTX) {
            throw new Error(`THORChain: unexpected response ${resp.message_type}`);
          }
          const signedTx = resp.proto;
          const signed = lodash_1.default.cloneDeep(msg.tx);
          signed.signatures = [
            {
              signature: signedTx.getSignature_asB64(),
              pub_key: {
                type: "tendermint/PubKeySecp256k1",
                value: signedTx.getPublicKey_asB64()
              }
            }
          ];
          return signed;
        }));
      });
    }
    exports2.thorchainSignTx = thorchainSignTx;
    function thorchainGetAddress(transport, msg) {
      return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new ThorchainMessages.ThorchainGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        if (msg.testnet !== void 0)
          getAddr.setTestnet(msg.testnet);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINGETADDRESS, getAddr, {
          msgTimeout: core.LONG_TIMEOUT
        });
        const thorchainAddress = response.proto;
        return core.mustBeDefined(thorchainAddress.getAddress());
      });
    }
    exports2.thorchainGetAddress = thorchainGetAddress;
  }
});

// node_modules/@keepkey/device-protocol/lib/messages-nano_pb.js
var require_messages_nano_pb = __commonJS({
  "node_modules/@keepkey/device-protocol/lib/messages-nano_pb.js"(exports2) {
    init_define_process_env();
    var jspb2 = require_google_protobuf();
    var goog2 = jspb2;
    var global2 = function() {
      return this;
    }.call(null);
    var types_pb = require_types_pb();
    goog2.object.extend(proto, types_pb);
    goog2.exportSymbol("proto.NanoAddress", null, global2);
    goog2.exportSymbol("proto.NanoGetAddress", null, global2);
    goog2.exportSymbol("proto.NanoSignTx", null, global2);
    goog2.exportSymbol("proto.NanoSignTx.ParentBlock", null, global2);
    goog2.exportSymbol("proto.NanoSignedTx", null, global2);
    proto.NanoGetAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.NanoGetAddress.repeatedFields_, null);
    };
    goog2.inherits(proto.NanoGetAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.NanoGetAddress.displayName = "proto.NanoGetAddress";
    }
    proto.NanoAddress = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.NanoAddress, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.NanoAddress.displayName = "proto.NanoAddress";
    }
    proto.NanoSignTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, proto.NanoSignTx.repeatedFields_, null);
    };
    goog2.inherits(proto.NanoSignTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.NanoSignTx.displayName = "proto.NanoSignTx";
    }
    proto.NanoSignTx.ParentBlock = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.NanoSignTx.ParentBlock, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.NanoSignTx.ParentBlock.displayName = "proto.NanoSignTx.ParentBlock";
    }
    proto.NanoSignedTx = function(opt_data) {
      jspb2.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog2.inherits(proto.NanoSignedTx, jspb2.Message);
    if (goog2.DEBUG && !COMPILED) {
      proto.NanoSignedTx.displayName = "proto.NanoSignedTx";
    }
    proto.NanoGetAddress.repeatedFields_ = [1];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.NanoGetAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.NanoGetAddress.toObject(opt_includeInstance, this);
      };
      proto.NanoGetAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 2, "Nano"),
          showDisplay: (f2 = jspb2.Message.getBooleanField(msg, 3)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.NanoGetAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.NanoGetAddress();
      return proto.NanoGetAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.NanoGetAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 3:
            var value = reader.readBool();
            msg.setShowDisplay(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.NanoGetAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.NanoGetAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.NanoGetAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = jspb2.Message.getField(message, 3);
      if (f2 != null) {
        writer.writeBool(3, f2);
      }
    };
    proto.NanoGetAddress.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.NanoGetAddress.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.NanoGetAddress.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.NanoGetAddress.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.NanoGetAddress.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "Nano");
    };
    proto.NanoGetAddress.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.NanoGetAddress.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.NanoGetAddress.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.NanoGetAddress.prototype.getShowDisplay = function() {
      return jspb2.Message.getBooleanFieldWithDefault(this, 3, false);
    };
    proto.NanoGetAddress.prototype.setShowDisplay = function(value) {
      return jspb2.Message.setField(this, 3, value);
    };
    proto.NanoGetAddress.prototype.clearShowDisplay = function() {
      return jspb2.Message.setField(this, 3, void 0);
    };
    proto.NanoGetAddress.prototype.hasShowDisplay = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.NanoAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.NanoAddress.toObject(opt_includeInstance, this);
      };
      proto.NanoAddress.toObject = function(includeInstance, msg) {
        var f2, obj = {
          address: (f2 = jspb2.Message.getField(msg, 1)) == null ? void 0 : f2
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.NanoAddress.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.NanoAddress();
      return proto.NanoAddress.deserializeBinaryFromReader(msg, reader);
    };
    proto.NanoAddress.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readString();
            msg.setAddress(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.NanoAddress.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.NanoAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.NanoAddress.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeString(1, f2);
      }
    };
    proto.NanoAddress.prototype.getAddress = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.NanoAddress.prototype.setAddress = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.NanoAddress.prototype.clearAddress = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.NanoAddress.prototype.hasAddress = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.NanoSignTx.repeatedFields_ = [1, 6];
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.NanoSignTx.prototype.toObject = function(opt_includeInstance) {
        return proto.NanoSignTx.toObject(opt_includeInstance, this);
      };
      proto.NanoSignTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          addressNList: (f2 = jspb2.Message.getRepeatedField(msg, 1)) == null ? void 0 : f2,
          coinName: jspb2.Message.getFieldWithDefault(msg, 2, "Nano"),
          parentBlock: (f2 = msg.getParentBlock()) && proto.NanoSignTx.ParentBlock.toObject(includeInstance, f2),
          linkHash: msg.getLinkHash_asB64(),
          linkRecipient: (f2 = jspb2.Message.getField(msg, 5)) == null ? void 0 : f2,
          linkRecipientNList: (f2 = jspb2.Message.getRepeatedField(msg, 6)) == null ? void 0 : f2,
          representative: (f2 = jspb2.Message.getField(msg, 7)) == null ? void 0 : f2,
          balance: msg.getBalance_asB64(),
          exchangeType: (f2 = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f2)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.NanoSignTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.NanoSignTx();
      return proto.NanoSignTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.NanoSignTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addAddressN(values[i]);
            }
            break;
          case 2:
            var value = reader.readString();
            msg.setCoinName(value);
            break;
          case 3:
            var value = new proto.NanoSignTx.ParentBlock();
            reader.readMessage(value, proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader);
            msg.setParentBlock(value);
            break;
          case 4:
            var value = reader.readBytes();
            msg.setLinkHash(value);
            break;
          case 5:
            var value = reader.readString();
            msg.setLinkRecipient(value);
            break;
          case 6:
            var values = reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()];
            for (var i = 0; i < values.length; i++) {
              msg.addLinkRecipientN(values[i]);
            }
            break;
          case 7:
            var value = reader.readString();
            msg.setRepresentative(value);
            break;
          case 8:
            var value = reader.readBytes();
            msg.setBalance(value);
            break;
          case 9:
            var value = new types_pb.ExchangeType();
            reader.readMessage(value, types_pb.ExchangeType.deserializeBinaryFromReader);
            msg.setExchangeType(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.NanoSignTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.NanoSignTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.NanoSignTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = message.getAddressNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeString(2, f2);
      }
      f2 = message.getParentBlock();
      if (f2 != null) {
        writer.writeMessage(3, f2, proto.NanoSignTx.ParentBlock.serializeBinaryToWriter);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeBytes(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeString(5, f2);
      }
      f2 = message.getLinkRecipientNList();
      if (f2.length > 0) {
        writer.writeRepeatedUint32(6, f2);
      }
      f2 = jspb2.Message.getField(message, 7);
      if (f2 != null) {
        writer.writeString(7, f2);
      }
      f2 = jspb2.Message.getField(message, 8);
      if (f2 != null) {
        writer.writeBytes(8, f2);
      }
      f2 = message.getExchangeType();
      if (f2 != null) {
        writer.writeMessage(9, f2, types_pb.ExchangeType.serializeBinaryToWriter);
      }
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.NanoSignTx.ParentBlock.prototype.toObject = function(opt_includeInstance) {
        return proto.NanoSignTx.ParentBlock.toObject(opt_includeInstance, this);
      };
      proto.NanoSignTx.ParentBlock.toObject = function(includeInstance, msg) {
        var f2, obj = {
          parentHash: msg.getParentHash_asB64(),
          link: msg.getLink_asB64(),
          representative: (f2 = jspb2.Message.getField(msg, 4)) == null ? void 0 : f2,
          balance: msg.getBalance_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.NanoSignTx.ParentBlock.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.NanoSignTx.ParentBlock();
      return proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader(msg, reader);
    };
    proto.NanoSignTx.ParentBlock.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setParentHash(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setLink(value);
            break;
          case 4:
            var value = reader.readString();
            msg.setRepresentative(value);
            break;
          case 5:
            var value = reader.readBytes();
            msg.setBalance(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.NanoSignTx.ParentBlock.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.NanoSignTx.ParentBlock.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.NanoSignTx.ParentBlock.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
      f2 = jspb2.Message.getField(message, 4);
      if (f2 != null) {
        writer.writeString(4, f2);
      }
      f2 = jspb2.Message.getField(message, 5);
      if (f2 != null) {
        writer.writeBytes(5, f2);
      }
    };
    proto.NanoSignTx.ParentBlock.prototype.getParentHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.NanoSignTx.ParentBlock.prototype.getParentHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getParentHash());
    };
    proto.NanoSignTx.ParentBlock.prototype.getParentHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getParentHash());
    };
    proto.NanoSignTx.ParentBlock.prototype.setParentHash = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.NanoSignTx.ParentBlock.prototype.clearParentHash = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.NanoSignTx.ParentBlock.prototype.hasParentHash = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.NanoSignTx.ParentBlock.prototype.getLink = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.NanoSignTx.ParentBlock.prototype.getLink_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getLink());
    };
    proto.NanoSignTx.ParentBlock.prototype.getLink_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getLink());
    };
    proto.NanoSignTx.ParentBlock.prototype.setLink = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.NanoSignTx.ParentBlock.prototype.clearLink = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.NanoSignTx.ParentBlock.prototype.hasLink = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.NanoSignTx.ParentBlock.prototype.getRepresentative = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.NanoSignTx.ParentBlock.prototype.setRepresentative = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.NanoSignTx.ParentBlock.prototype.clearRepresentative = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.NanoSignTx.ParentBlock.prototype.hasRepresentative = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.NanoSignTx.ParentBlock.prototype.getBalance = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.NanoSignTx.ParentBlock.prototype.getBalance_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getBalance());
    };
    proto.NanoSignTx.ParentBlock.prototype.getBalance_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getBalance());
    };
    proto.NanoSignTx.ParentBlock.prototype.setBalance = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.NanoSignTx.ParentBlock.prototype.clearBalance = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.NanoSignTx.ParentBlock.prototype.hasBalance = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.NanoSignTx.prototype.getAddressNList = function() {
      return jspb2.Message.getRepeatedField(this, 1);
    };
    proto.NanoSignTx.prototype.setAddressNList = function(value) {
      return jspb2.Message.setField(this, 1, value || []);
    };
    proto.NanoSignTx.prototype.addAddressN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 1, value, opt_index);
    };
    proto.NanoSignTx.prototype.clearAddressNList = function() {
      return this.setAddressNList([]);
    };
    proto.NanoSignTx.prototype.getCoinName = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "Nano");
    };
    proto.NanoSignTx.prototype.setCoinName = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.NanoSignTx.prototype.clearCoinName = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.NanoSignTx.prototype.hasCoinName = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    proto.NanoSignTx.prototype.getParentBlock = function() {
      return jspb2.Message.getWrapperField(this, proto.NanoSignTx.ParentBlock, 3);
    };
    proto.NanoSignTx.prototype.setParentBlock = function(value) {
      return jspb2.Message.setWrapperField(this, 3, value);
    };
    proto.NanoSignTx.prototype.clearParentBlock = function() {
      return this.setParentBlock(void 0);
    };
    proto.NanoSignTx.prototype.hasParentBlock = function() {
      return jspb2.Message.getField(this, 3) != null;
    };
    proto.NanoSignTx.prototype.getLinkHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 4, "");
    };
    proto.NanoSignTx.prototype.getLinkHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getLinkHash());
    };
    proto.NanoSignTx.prototype.getLinkHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getLinkHash());
    };
    proto.NanoSignTx.prototype.setLinkHash = function(value) {
      return jspb2.Message.setField(this, 4, value);
    };
    proto.NanoSignTx.prototype.clearLinkHash = function() {
      return jspb2.Message.setField(this, 4, void 0);
    };
    proto.NanoSignTx.prototype.hasLinkHash = function() {
      return jspb2.Message.getField(this, 4) != null;
    };
    proto.NanoSignTx.prototype.getLinkRecipient = function() {
      return jspb2.Message.getFieldWithDefault(this, 5, "");
    };
    proto.NanoSignTx.prototype.setLinkRecipient = function(value) {
      return jspb2.Message.setField(this, 5, value);
    };
    proto.NanoSignTx.prototype.clearLinkRecipient = function() {
      return jspb2.Message.setField(this, 5, void 0);
    };
    proto.NanoSignTx.prototype.hasLinkRecipient = function() {
      return jspb2.Message.getField(this, 5) != null;
    };
    proto.NanoSignTx.prototype.getLinkRecipientNList = function() {
      return jspb2.Message.getRepeatedField(this, 6);
    };
    proto.NanoSignTx.prototype.setLinkRecipientNList = function(value) {
      return jspb2.Message.setField(this, 6, value || []);
    };
    proto.NanoSignTx.prototype.addLinkRecipientN = function(value, opt_index) {
      return jspb2.Message.addToRepeatedField(this, 6, value, opt_index);
    };
    proto.NanoSignTx.prototype.clearLinkRecipientNList = function() {
      return this.setLinkRecipientNList([]);
    };
    proto.NanoSignTx.prototype.getRepresentative = function() {
      return jspb2.Message.getFieldWithDefault(this, 7, "");
    };
    proto.NanoSignTx.prototype.setRepresentative = function(value) {
      return jspb2.Message.setField(this, 7, value);
    };
    proto.NanoSignTx.prototype.clearRepresentative = function() {
      return jspb2.Message.setField(this, 7, void 0);
    };
    proto.NanoSignTx.prototype.hasRepresentative = function() {
      return jspb2.Message.getField(this, 7) != null;
    };
    proto.NanoSignTx.prototype.getBalance = function() {
      return jspb2.Message.getFieldWithDefault(this, 8, "");
    };
    proto.NanoSignTx.prototype.getBalance_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getBalance());
    };
    proto.NanoSignTx.prototype.getBalance_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getBalance());
    };
    proto.NanoSignTx.prototype.setBalance = function(value) {
      return jspb2.Message.setField(this, 8, value);
    };
    proto.NanoSignTx.prototype.clearBalance = function() {
      return jspb2.Message.setField(this, 8, void 0);
    };
    proto.NanoSignTx.prototype.hasBalance = function() {
      return jspb2.Message.getField(this, 8) != null;
    };
    proto.NanoSignTx.prototype.getExchangeType = function() {
      return jspb2.Message.getWrapperField(this, types_pb.ExchangeType, 9);
    };
    proto.NanoSignTx.prototype.setExchangeType = function(value) {
      return jspb2.Message.setWrapperField(this, 9, value);
    };
    proto.NanoSignTx.prototype.clearExchangeType = function() {
      return this.setExchangeType(void 0);
    };
    proto.NanoSignTx.prototype.hasExchangeType = function() {
      return jspb2.Message.getField(this, 9) != null;
    };
    if (jspb2.Message.GENERATE_TO_OBJECT) {
      proto.NanoSignedTx.prototype.toObject = function(opt_includeInstance) {
        return proto.NanoSignedTx.toObject(opt_includeInstance, this);
      };
      proto.NanoSignedTx.toObject = function(includeInstance, msg) {
        var f2, obj = {
          signature: msg.getSignature_asB64(),
          blockHash: msg.getBlockHash_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.NanoSignedTx.deserializeBinary = function(bytes) {
      var reader = new jspb2.BinaryReader(bytes);
      var msg = new proto.NanoSignedTx();
      return proto.NanoSignedTx.deserializeBinaryFromReader(msg, reader);
    };
    proto.NanoSignedTx.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = reader.readBytes();
            msg.setSignature(value);
            break;
          case 2:
            var value = reader.readBytes();
            msg.setBlockHash(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.NanoSignedTx.prototype.serializeBinary = function() {
      var writer = new jspb2.BinaryWriter();
      proto.NanoSignedTx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.NanoSignedTx.serializeBinaryToWriter = function(message, writer) {
      var f2 = void 0;
      f2 = jspb2.Message.getField(message, 1);
      if (f2 != null) {
        writer.writeBytes(1, f2);
      }
      f2 = jspb2.Message.getField(message, 2);
      if (f2 != null) {
        writer.writeBytes(2, f2);
      }
    };
    proto.NanoSignedTx.prototype.getSignature = function() {
      return jspb2.Message.getFieldWithDefault(this, 1, "");
    };
    proto.NanoSignedTx.prototype.getSignature_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getSignature());
    };
    proto.NanoSignedTx.prototype.getSignature_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getSignature());
    };
    proto.NanoSignedTx.prototype.setSignature = function(value) {
      return jspb2.Message.setField(this, 1, value);
    };
    proto.NanoSignedTx.prototype.clearSignature = function() {
      return jspb2.Message.setField(this, 1, void 0);
    };
    proto.NanoSignedTx.prototype.hasSignature = function() {
      return jspb2.Message.getField(this, 1) != null;
    };
    proto.NanoSignedTx.prototype.getBlockHash = function() {
      return jspb2.Message.getFieldWithDefault(this, 2, "");
    };
    proto.NanoSignedTx.prototype.getBlockHash_asB64 = function() {
      return jspb2.Message.bytesAsB64(this.getBlockHash());
    };
    proto.NanoSignedTx.prototype.getBlockHash_asU8 = function() {
      return jspb2.Message.bytesAsU8(this.getBlockHash());
    };
    proto.NanoSignedTx.prototype.setBlockHash = function(value) {
      return jspb2.Message.setField(this, 2, value);
    };
    proto.NanoSignedTx.prototype.clearBlockHash = function() {
      return jspb2.Message.setField(this, 2, void 0);
    };
    proto.NanoSignedTx.prototype.hasBlockHash = function() {
      return jspb2.Message.getField(this, 2) != null;
    };
    goog2.object.extend(exports2, proto);
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/typeRegistry.js
var require_typeRegistry = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/typeRegistry.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.messageTypeRegistry = exports2.messageNameRegistry = void 0;
    var BinanceMessages = __importStar(require_messages_binance_pb());
    var CosmosMessages = __importStar(require_messages_cosmos_pb());
    var EosMessages = __importStar(require_messages_eos_pb());
    var NanoMessages = __importStar(require_messages_nano_pb());
    var RippleMessages = __importStar(require_messages_ripple_pb());
    var ThorchainMessages = __importStar(require_messages_thorchain_pb());
    var Messages = __importStar(require_messages_pb());
    var lodash_1 = __importDefault(require_lodash());
    var AllMessages = [].concat(Object.entries(lodash_1.default.omit(Messages, "MessageType", "MessageTypeMap"))).concat(Object.entries(CosmosMessages)).concat(Object.entries(BinanceMessages)).concat(Object.entries(RippleMessages)).concat(Object.entries(NanoMessages)).concat(Object.entries(lodash_1.default.omit(EosMessages, "EosPublicKeyKind", "EosPublicKeyKindMap"))).concat(Object.entries(ThorchainMessages));
    var upperCasedMessageClasses = AllMessages.reduce((registry, entry) => {
      registry[entry[0].toUpperCase()] = entry[1];
      return registry;
    }, {});
    exports2.messageNameRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {
      registry[entry[1]] = entry[0].split("_")[1];
      return registry;
    }, {});
    exports2.messageTypeRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {
      registry[entry[1]] = upperCasedMessageClasses[entry[0].split("_")[1].toUpperCase()];
      return registry;
    }, {});
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/keepkey.js
var require_keepkey = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/keepkey.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.create = exports2.info = exports2.KeepKeyHDWallet = exports2.KeepKeyHDWalletInfo = exports2.isKeepKey = void 0;
    var core = __importStar(require_dist3());
    var Messages = __importStar(require_messages_pb());
    var Types = __importStar(require_types_pb());
    var lodash_1 = __importDefault(require_lodash());
    var semver_1 = __importDefault(require_semver());
    var Binance = __importStar(require_binance());
    var Btc = __importStar(require_bitcoin());
    var Cosmos = __importStar(require_cosmos());
    var Eos = __importStar(require_eos());
    var Eth = __importStar(require_ethereum());
    var Ripple = __importStar(require_ripple());
    var Thorchain = __importStar(require_thorchain());
    var typeRegistry_1 = require_typeRegistry();
    var utils_1 = require_utils4();
    function isKeepKey(wallet) {
      return lodash_1.default.isObject(wallet) && wallet._isKeepKey;
    }
    exports2.isKeepKey = isKeepKey;
    function describeETHPath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Ethereum",
        isKnown: false
      };
      if (path.length != 5)
        return unknown;
      if (path[0] != 2147483648 + 44)
        return unknown;
      if (path[1] != 2147483648 + core.slip44ByCoin("Ethereum"))
        return unknown;
      if ((path[2] & 2147483648) >>> 0 !== 2147483648)
        return unknown;
      if (path[3] != 0)
        return unknown;
      if (path[4] != 0)
        return unknown;
      let index = path[2] & 2147483647;
      return {
        verbose: `Ethereum Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Ethereum",
        isKnown: true,
        isPrefork: false
      };
    }
    function describeUTXOPath(path, coin, scriptType) {
      var _a;
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin,
        scriptType,
        isKnown: false
      };
      if (!scriptType)
        return unknown;
      if (!Btc.btcSupportsCoin(coin))
        return unknown;
      if (!Btc.btcSupportsScriptType(coin, scriptType))
        return unknown;
      if (path.length !== 3 && path.length !== 5)
        return unknown;
      if ((path[0] & 2147483648) >>> 0 !== 2147483648)
        return unknown;
      let purpose = path[0] & 2147483647;
      if (![44, 49, 84].includes(purpose))
        return unknown;
      if (purpose === 44 && scriptType !== core.BTCInputScriptType.SpendAddress)
        return unknown;
      if (purpose === 49 && scriptType !== core.BTCInputScriptType.SpendP2SHWitness)
        return unknown;
      if (purpose === 84 && scriptType !== core.BTCInputScriptType.SpendWitness)
        return unknown;
      let wholeAccount = path.length === 3;
      let script = scriptType ? (_a = {
        [core.BTCInputScriptType.SpendAddress]: ["Legacy"],
        [core.BTCInputScriptType.SpendP2SHWitness]: [],
        [core.BTCInputScriptType.SpendWitness]: ["Segwit Native"]
      }[scriptType]) !== null && _a !== void 0 ? _a : [] : [];
      let isPrefork = false;
      const slip44 = core.slip44ByCoin(coin);
      if (slip44 === void 0)
        return unknown;
      if (path[1] !== 2147483648 + slip44) {
        switch (coin) {
          case "BitcoinCash":
          case "BitcoinGold": {
            if (path[1] === 2147483648 + core.slip44ByCoin("Bitcoin")) {
              isPrefork = true;
              break;
            }
            return unknown;
          }
          case "BitcoinSV": {
            if (path[1] === 2147483648 + core.slip44ByCoin("Bitcoin") || path[1] === 2147483648 + core.slip44ByCoin("BitcoinCash")) {
              isPrefork = true;
              break;
            }
            return unknown;
          }
          default:
            return unknown;
        }
      }
      let attributes = isPrefork ? ["Prefork"] : [];
      switch (coin) {
        case "Bitcoin":
        case "Litecoin":
        case "BitcoinGold":
        case "Testnet": {
          attributes = attributes.concat(script);
          break;
        }
        default:
          break;
      }
      let attr = attributes.length ? ` (${attributes.join(", ")})` : "";
      let accountIdx = path[2] & 2147483647;
      if (wholeAccount) {
        return {
          coin,
          verbose: `${coin} Account #${accountIdx}${attr}`,
          accountIdx,
          wholeAccount: true,
          isKnown: true,
          scriptType,
          isPrefork
        };
      } else {
        let change = path[3] === 1 ? "Change " : "";
        let addressIdx = path[4];
        return {
          coin,
          verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,
          accountIdx,
          addressIdx,
          wholeAccount: false,
          isKnown: true,
          isChange: path[3] === 1,
          scriptType,
          isPrefork
        };
      }
    }
    function describeCosmosPath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Atom",
        isKnown: false
      };
      if (path.length != 5) {
        return unknown;
      }
      if (path[0] != 2147483648 + 44) {
        return unknown;
      }
      if (path[1] != 2147483648 + core.slip44ByCoin("Atom")) {
        return unknown;
      }
      if ((path[2] & 2147483648) >>> 0 !== 2147483648) {
        return unknown;
      }
      if (path[3] !== 0 || path[4] !== 0) {
        return unknown;
      }
      let index = path[2] & 2147483647;
      return {
        verbose: `Cosmos Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Atom",
        isKnown: true,
        isPrefork: false
      };
    }
    function describeThorchainPath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Rune",
        isKnown: false
      };
      if (path.length != 5) {
        return unknown;
      }
      if (path[0] != 2147483648 + 44) {
        return unknown;
      }
      if (path[1] != 2147483648 + core.slip44ByCoin("Rune")) {
        return unknown;
      }
      if ((path[2] & 2147483648) >>> 0 !== 2147483648) {
        return unknown;
      }
      if (path[3] !== 0 || path[4] !== 0) {
        return unknown;
      }
      let index = path[2] & 2147483647;
      return {
        verbose: `THORChain Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Rune",
        isKnown: true,
        isPrefork: false
      };
    }
    function describeEosPath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Eos",
        isKnown: false
      };
      if (path.length != 5) {
        return unknown;
      }
      if (path[0] != 2147483648 + 44) {
        return unknown;
      }
      if (path[1] != 2147483648 + core.slip44ByCoin("Eos")) {
        return unknown;
      }
      if ((path[2] & 2147483648) >>> 0 !== 2147483648) {
        return unknown;
      }
      if (path[3] !== 0 || path[4] !== 0) {
        return unknown;
      }
      let index = path[2] & 2147483647;
      return {
        verbose: `Eos Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Eos",
        isKnown: true,
        isPrefork: false
      };
    }
    function describeRipplePath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Ripple",
        isKnown: false
      };
      if (path.length != 5) {
        return unknown;
      }
      if (path[0] != 2147483648 + 44) {
        return unknown;
      }
      if (path[1] != 2147483648 + core.slip44ByCoin("Ripple")) {
        return unknown;
      }
      if ((path[2] & 2147483648) >>> 0 !== 2147483648) {
        return unknown;
      }
      if (path[3] !== 0 || path[4] !== 0) {
        return unknown;
      }
      let index = path[2] & 2147483647;
      return {
        verbose: `Ripple Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Ripple",
        isKnown: true,
        isPrefork: false
      };
    }
    function describeBinancePath(path) {
      let pathStr = core.addressNListToBIP32(path);
      let unknown = {
        verbose: pathStr,
        coin: "Binance",
        isKnown: false
      };
      if (path.length != 5) {
        return unknown;
      }
      if (path[0] != 2147483648 + 44) {
        return unknown;
      }
      if (path[1] != 2147483648 + core.slip44ByCoin("Binance")) {
        return unknown;
      }
      if ((path[2] & 2147483648) >>> 0 !== 2147483648) {
        return unknown;
      }
      if (path[3] !== 0 || path[4] !== 0) {
        return unknown;
      }
      let index = path[2] & 2147483647;
      return {
        verbose: `Binance Account #${index}`,
        accountIdx: index,
        wholeAccount: true,
        coin: "Binance",
        isKnown: true,
        isPrefork: false
      };
    }
    var KeepKeyHDWalletInfo = class {
      constructor() {
        this._supportsBTCInfo = true;
        this._supportsETHInfo = true;
        this._supportsCosmosInfo = false;
        this._supportsRippleInfo = true;
        this._supportsBinanceInfo = true;
        this._supportsEosInfo = true;
        this._supportsThorchainInfo = true;
      }
      getVendor() {
        return "KeepKey";
      }
      btcSupportsCoin(coin) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcSupportsCoin(coin);
        });
      }
      btcSupportsScriptType(coin, scriptType) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcSupportsScriptType(coin, scriptType);
        });
      }
      btcSupportsSecureTransfer() {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcSupportsSecureTransfer();
        });
      }
      btcSupportsNativeShapeShift() {
        return Btc.btcSupportsNativeShapeShift();
      }
      btcGetAccountPaths(msg) {
        return Btc.btcGetAccountPaths(msg);
      }
      btcIsSameAccount(msg) {
        return Btc.btcIsSameAccount(msg);
      }
      ethSupportsNetwork(chain_id) {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethSupportsNetwork(chain_id);
        });
      }
      ethSupportsSecureTransfer() {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethSupportsSecureTransfer();
        });
      }
      ethSupportsNativeShapeShift() {
        return Eth.ethSupportsNativeShapeShift();
      }
      ethSupportsEIP1559() {
        return __awaiter(this, void 0, void 0, function* () {
          return true;
        });
      }
      ethGetAccountPaths(msg) {
        return Eth.ethGetAccountPaths(msg);
      }
      cosmosGetAccountPaths(msg) {
        return Cosmos.cosmosGetAccountPaths(msg);
      }
      thorchainGetAccountPaths(msg) {
        return Thorchain.thorchainGetAccountPaths(msg);
      }
      rippleGetAccountPaths(msg) {
        return Ripple.rippleGetAccountPaths(msg);
      }
      binanceGetAccountPaths(msg) {
        return Binance.binanceGetAccountPaths(msg);
      }
      eosGetAccountPaths(msg) {
        return Eos.eosGetAccountPaths(msg);
      }
      hasOnDevicePinEntry() {
        return false;
      }
      hasOnDevicePassphrase() {
        return false;
      }
      hasOnDeviceDisplay() {
        return true;
      }
      hasOnDeviceRecovery() {
        return false;
      }
      hasNativeShapeShift(srcCoin, dstCoin) {
        return true;
      }
      supportsOfflineSigning() {
        return true;
      }
      supportsBroadcast() {
        return false;
      }
      describePath(msg) {
        switch (msg.coin) {
          case "Ethereum":
            return describeETHPath(msg.path);
          case "Atom":
            return describeCosmosPath(msg.path);
          case "Binance":
            return describeBinancePath(msg.path);
          case "Ripple":
            return describeRipplePath(msg.path);
          case "Eos":
            return describeEosPath(msg.path);
          default:
            return describeUTXOPath(msg.path, msg.coin, msg.scriptType);
        }
      }
      btcNextAccountPath(msg) {
        let description = describeUTXOPath(msg.addressNList, msg.coin, msg.scriptType);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        if (addressNList[0] === 2147483648 + 44 || addressNList[0] === 2147483648 + 49 || addressNList[0] === 2147483648 + 84) {
          addressNList[2] += 1;
          return Object.assign(Object.assign({}, msg), { addressNList });
        }
        return void 0;
      }
      ethNextAccountPath(msg) {
        let addressNList = msg.hardenedPath.concat(msg.relPath);
        let description = describeETHPath(addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        if (addressNList[0] === 2147483648 + 44) {
          addressNList[2] += 1;
          return Object.assign(Object.assign({}, msg), { addressNList, hardenedPath: core.hardenedPath(addressNList), relPath: core.relativePath(addressNList) });
        }
        return void 0;
      }
      cosmosNextAccountPath(msg) {
        let description = describeCosmosPath(msg.addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        addressNList[2] += 1;
        return Object.assign(Object.assign({}, msg), { addressNList });
      }
      thorchainNextAccountPath(msg) {
        let description = describeThorchainPath(msg.addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        addressNList[2] += 1;
        return Object.assign(Object.assign({}, msg), { addressNList });
      }
      rippleNextAccountPath(msg) {
        let description = describeRipplePath(msg.addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        addressNList[2] += 1;
        return Object.assign(Object.assign({}, msg), { addressNList });
      }
      binanceNextAccountPath(msg) {
        let description = describeBinancePath(msg.addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        addressNList[2] += 1;
        return Object.assign(Object.assign({}, msg), { addressNList });
      }
      eosNextAccountPath(msg) {
        let description = describeEosPath(msg.addressNList);
        if (!description.isKnown) {
          return void 0;
        }
        let addressNList = msg.addressNList;
        addressNList[2] += 1;
        return Object.assign(Object.assign({}, msg), { addressNList });
      }
    };
    exports2.KeepKeyHDWalletInfo = KeepKeyHDWalletInfo;
    var KeepKeyHDWallet = class {
      constructor(transport) {
        this._supportsETHInfo = true;
        this._supportsBTCInfo = true;
        this._supportsCosmosInfo = false;
        this._supportsRippleInfo = true;
        this._supportsBinanceInfo = true;
        this._supportsEosInfo = true;
        this._supportsFioInfo = false;
        this._isKeepKey = true;
        this._supportsETH = true;
        this._supportsBTC = true;
        this._supportsCosmos = false;
        this._supportsRipple = true;
        this._supportsBinance = true;
        this._supportsEos = true;
        this._supportsFio = false;
        this._supportsThorchainInfo = true;
        this._supportsThorchain = true;
        this._supportsSecretInfo = false;
        this._supportsSecret = false;
        this._supportsKava = false;
        this._supportsKavaInfo = false;
        this._supportsTerra = false;
        this._supportsTerraInfo = false;
        this.transport = transport;
        this._supportsDebugLink = transport.debugLink;
        this.info = new KeepKeyHDWalletInfo();
      }
      static create(transport) {
        return __awaiter(this, void 0, void 0, function* () {
          return new KeepKeyHDWallet(transport);
        });
      }
      getDeviceID() {
        return __awaiter(this, void 0, void 0, function* () {
          const featuresId = (yield this.getFeatures(true)).deviceId;
          if (featuresId)
            return featuresId;
          return yield this.transport.getDeviceID();
        });
      }
      getVendor() {
        return "KeepKey";
      }
      getModel() {
        return __awaiter(this, void 0, void 0, function* () {
          return core.mustBeDefined((yield this.getFeatures(true)).model);
        });
      }
      getFirmwareVersion() {
        return __awaiter(this, void 0, void 0, function* () {
          const features = yield this.getFeatures(true);
          return `v${features.majorVersion}.${features.minorVersion}.${features.patchVersion}`;
        });
      }
      getLabel() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          return (_a = (yield this.getFeatures(true)).label) !== null && _a !== void 0 ? _a : "";
        });
      }
      isInitialized() {
        return __awaiter(this, void 0, void 0, function* () {
          return !!(yield this.getFeatures()).initialized;
        });
      }
      isLocked() {
        return __awaiter(this, void 0, void 0, function* () {
          const features = yield this.getFeatures();
          if (features.pinProtection && !features.pinCached)
            return true;
          if (features.passphraseProtection && !features.passphraseCached)
            return true;
          return false;
        });
      }
      getPublicKeys(getPublicKeys) {
        return __awaiter(this, void 0, void 0, function* () {
          const publicKeys = [];
          for (let i = 0; i < getPublicKeys.length; i++) {
            const { coin, addressNList, curve, showDisplay, scriptType } = getPublicKeys[i];
            const GPK = new Messages.GetPublicKey();
            if (coin)
              GPK.setCoinName(coin);
            GPK.setAddressNList(addressNList);
            GPK.setShowDisplay(showDisplay || false);
            GPK.setEcdsaCurveName(curve || "secp256k1");
            GPK.setScriptType(utils_1.translateInputScriptType(scriptType || core.BTCInputScriptType.SpendAddress));
            const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETPUBLICKEY, GPK, {
              msgTimeout: showDisplay ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT
            });
            const publicKey = event.proto;
            publicKeys.push({ xpub: core.mustBeDefined(publicKey.getXpub()) });
          }
          return publicKeys;
        });
      }
      ping(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          const ping = new Messages.Ping();
          ping.setMessage(msg.msg);
          ping.setButtonProtection(msg.button || false);
          ping.setPinProtection(msg.pin || false);
          ping.setPassphraseProtection(msg.passphrase || false);
          const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_PING, ping, {
            msgTimeout: msg.button || msg.pin || msg.passphrase ? core.LONG_TIMEOUT : core.DEFAULT_TIMEOUT
          });
          const message = event.proto;
          return { msg: core.mustBeDefined(message.getMessage()) };
        });
      }
      reset(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          const resetDevice = new Messages.ResetDevice();
          resetDevice.setStrength(msg.entropy || 128);
          resetDevice.setDisplayRandom(false);
          resetDevice.setPassphraseProtection(msg.passphrase || false);
          resetDevice.setPinProtection(msg.pin || false);
          resetDevice.setLabel(msg.label);
          if (msg.autoLockDelayMs) {
            resetDevice.setAutoLockDelayMs(msg.autoLockDelayMs);
          }
          resetDevice.setU2fCounter(msg.u2fCounter || Math.floor(+new Date() / 1e3));
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_RESETDEVICE, resetDevice, {
            msgTimeout: core.LONG_TIMEOUT
          });
          this.cacheFeatures(void 0);
        });
      }
      recover(r) {
        return __awaiter(this, void 0, void 0, function* () {
          const msg = new Messages.RecoveryDevice();
          msg.setWordCount({ 128: 12, 192: 18, 256: 24 }[r.entropy]);
          msg.setPassphraseProtection(r.passphrase);
          msg.setPinProtection(r.pin);
          msg.setLabel(r.label);
          msg.setLanguage(r.language || "english");
          msg.setEnforceWordlist(true);
          msg.setUseCharacterCipher(true);
          if (r.autoLockDelayMs) {
            msg.setAutoLockDelayMs(r.autoLockDelayMs);
          }
          msg.setU2fCounter(r.u2fCounter || Math.floor(+new Date() / 1e3));
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_RECOVERYDEVICE, msg, {
            msgTimeout: core.LONG_TIMEOUT
          });
          this.cacheFeatures(void 0);
        });
      }
      pressYes() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.press(true);
        });
      }
      pressNo() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.press(false);
        });
      }
      press(isYes) {
        return __awaiter(this, void 0, void 0, function* () {
          let decision = new Messages.DebugLinkDecision();
          decision.setYesNo(isYes);
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_DEBUGLINKDECISION, decision, {
            noWait: true,
            debugLink: true
          });
        });
      }
      hasOnDevicePinEntry() {
        return false;
      }
      hasOnDevicePassphrase() {
        return false;
      }
      hasOnDeviceDisplay() {
        return true;
      }
      hasOnDeviceRecovery() {
        return false;
      }
      hasNativeShapeShift(srcCoin, dstCoin) {
        return true;
      }
      supportsOfflineSigning() {
        return true;
      }
      supportsBroadcast() {
        return false;
      }
      sendPin(pin) {
        return __awaiter(this, void 0, void 0, function* () {
          const matrixAck = new Messages.PinMatrixAck();
          matrixAck.setPin(pin);
          console.assert((yield this.transport.call(Messages.MessageType.MESSAGETYPE_PINMATRIXACK, matrixAck, {
            msgTimeout: core.DEFAULT_TIMEOUT,
            omitLock: true,
            noWait: true
          })) === void 0);
        });
      }
      sendPassphrase(passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
          const passphraseAck = new Messages.PassphraseAck();
          passphraseAck.setPassphrase(passphrase);
          console.assert((yield this.transport.call(Messages.MessageType.MESSAGETYPE_PASSPHRASEACK, passphraseAck, {
            msgTimeout: core.DEFAULT_TIMEOUT,
            omitLock: true,
            noWait: true
          })) === void 0);
        });
      }
      sendCharacter(character) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.sendCharacterProto(character, false, false);
        });
      }
      sendCharacterDelete() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.sendCharacterProto("", true, false);
        });
      }
      sendCharacterDone() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.sendCharacterProto("", false, true);
        });
      }
      sendWord(word) {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("Not Yet Implemented :(");
        });
      }
      sendCharacterProto(character, _delete, _done) {
        return __awaiter(this, void 0, void 0, function* () {
          const characterAck = new Messages.CharacterAck();
          if (character !== "") {
            characterAck.setCharacter(character);
          } else if (_delete) {
            characterAck.setDelete(_delete);
          } else if (_done) {
            characterAck.setDone(_done);
          }
          console.assert((yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHARACTERACK, characterAck, {
            msgTimeout: core.DEFAULT_TIMEOUT,
            omitLock: true,
            noWait: true
          })) === void 0);
        });
      }
      applyPolicy(p) {
        return __awaiter(this, void 0, void 0, function* () {
          const policy = new Types.PolicyType();
          policy.setPolicyName(p.policyName);
          policy.setEnabled(p.enabled);
          const applyPolicies = new Messages.ApplyPolicies();
          applyPolicies.setPolicyList([policy]);
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYPOLICIES, applyPolicies, {
            msgTimeout: core.LONG_TIMEOUT
          });
          this.cacheFeatures(void 0);
        });
      }
      applySettings(s) {
        return __awaiter(this, void 0, void 0, function* () {
          const applySettings = new Messages.ApplySettings();
          if (s.label) {
            applySettings.setLabel(s.label);
          }
          if (s.language) {
            applySettings.setLanguage(s.language);
          }
          if (s.usePassphrase !== void 0) {
            applySettings.setUsePassphrase(s.usePassphrase);
          }
          if (s.autoLockDelayMs) {
            applySettings.setAutoLockDelayMs(s.autoLockDelayMs);
          }
          if (s.u2fCounter) {
            applySettings.setU2fCounter(s.u2fCounter);
          }
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_APPLYSETTINGS, applySettings);
          this.cacheFeatures(void 0);
        });
      }
      cancel() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.transport.cancel();
        });
      }
      changePin() {
        return __awaiter(this, void 0, void 0, function* () {
          const changePin = new Messages.ChangePin();
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin, {
            msgTimeout: core.LONG_TIMEOUT
          });
        });
      }
      cipherKeyValue(v) {
        return __awaiter(this, void 0, void 0, function* () {
          const cipherKeyValue = new Messages.CipherKeyValue();
          cipherKeyValue.setAddressNList(v.addressNList);
          cipherKeyValue.setKey(v.key);
          cipherKeyValue.setValue(v.value);
          cipherKeyValue.setEncrypt(!!v.encrypt);
          cipherKeyValue.setAskOnEncrypt(v.askOnEncrypt || false);
          cipherKeyValue.setAskOnDecrypt(v.askOnDecrypt || false);
          cipherKeyValue.setIv(v.iv || "");
          const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_CIPHERKEYVALUE, cipherKeyValue);
          const ckv = response.message;
          return ckv.getValue();
        });
      }
      clearSession() {
        return __awaiter(this, void 0, void 0, function* () {
          const clearSession = new Messages.ClearSession();
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_CLEARSESSION, clearSession);
          this.cacheFeatures(void 0);
        });
      }
      decryptKeyValue(v) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.cipherKeyValue(v);
        });
      }
      firmwareErase() {
        return __awaiter(this, void 0, void 0, function* () {
          const firmwareErase = new Messages.FirmwareErase();
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREERASE, firmwareErase);
          this.cacheFeatures(void 0);
        });
      }
      firmwareUpload(firmware) {
        return __awaiter(this, void 0, void 0, function* () {
          const firmwareUpload = new Messages.FirmwareUpload();
          const hash = yield this.transport.getFirmwareHash(firmware);
          firmwareUpload.setPayload(firmware);
          firmwareUpload.setPayloadHash(hash);
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_FIRMWAREUPLOAD, firmwareUpload);
          this.cacheFeatures(void 0);
        });
      }
      initialize() {
        return __awaiter(this, void 0, void 0, function* () {
          const initialize = new Messages.Initialize();
          const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_INITIALIZE, initialize);
          if (!event.message)
            throw event;
          const out = event.message;
          if (!out.deviceId)
            throw new Error("no deviceId in features object");
          this.features = out;
          const transportDeviceID = yield this.transport.getDeviceID();
          if (transportDeviceID !== out.deviceId) {
            this.transport.keyring.addAlias(transportDeviceID, out.deviceId);
          }
          const fwVersion = `v${out.majorVersion}.${out.minorVersion}.${out.patchVersion}`;
          this._supportsRipple = semver_1.default.gte(fwVersion, "v6.4.0");
          this._supportsBinance = semver_1.default.gte(fwVersion, "v6.4.0");
          this._supportsEos = semver_1.default.gte(fwVersion, "v6.4.0");
          this.cacheFeatures(out);
          return out;
        });
      }
      getFeatures(cached = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (cached && this.featuresCache)
            return this.featuresCache;
          const features = new Messages.GetFeatures();
          const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETFEATURES, features);
          this.cacheFeatures(event.message);
          return event.message;
        });
      }
      cacheFeatures(features) {
        this.featuresCache = features;
      }
      getEntropy(size) {
        return __awaiter(this, void 0, void 0, function* () {
          const getEntropy = new Messages.GetEntropy();
          getEntropy.setSize(size);
          const event = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETENTROPY, getEntropy, {
            msgTimeout: core.LONG_TIMEOUT
          });
          return core.mustBeDefined(event.proto).getEntropy_asU8();
        });
      }
      getNumCoins() {
        return __awaiter(this, void 0, void 0, function* () {
          const getCoinTable = new Messages.GetCoinTable();
          const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable);
          return core.mustBeDefined(core.mustBeDefined(response.proto).getNumCoins());
        });
      }
      getCoinTable(start = 0, end = start + 10) {
        return __awaiter(this, void 0, void 0, function* () {
          const getCoinTable = new Messages.GetCoinTable();
          getCoinTable.setStart(start);
          getCoinTable.setEnd(end);
          const response = yield this.transport.call(Messages.MessageType.MESSAGETYPE_GETCOINTABLE, getCoinTable);
          const coinTable = response.message;
          return coinTable.tableList;
        });
      }
      loadDevice(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          const loadDevice = new Messages.LoadDevice();
          loadDevice.setMnemonic(msg.mnemonic);
          loadDevice.setPassphraseProtection(!!msg.passphrase);
          loadDevice.setSkipChecksum(!!msg.skipChecksum);
          if (msg.pin)
            loadDevice.setPin(msg.pin);
          if (msg.label)
            loadDevice.setLabel(msg.label);
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_LOADDEVICE, loadDevice, {
            msgTimeout: core.LONG_TIMEOUT
          });
          this.cacheFeatures(void 0);
        });
      }
      removePin() {
        return __awaiter(this, void 0, void 0, function* () {
          const changePin = new Messages.ChangePin();
          changePin.setRemove(true);
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_CHANGEPIN, changePin);
          this.cacheFeatures(void 0);
        });
      }
      send(events) {
        return __awaiter(this, void 0, void 0, function* () {
          for (const event of events) {
            const MessageType = typeRegistry_1.messageTypeRegistry[core.mustBeDefined(event.message_enum)];
            const msg = new MessageType();
            Object.entries(event.message).forEach(([key, value]) => {
              const setterMethod = utils_1.protoFieldToSetMethod(key);
              if (msg[setterMethod]) {
                msg[setterMethod](value);
              }
            });
            yield this.transport.call(core.mustBeDefined(event.message_enum), msg);
          }
        });
      }
      softReset() {
        return __awaiter(this, void 0, void 0, function* () {
          const softReset = new Messages.SoftReset();
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_SOFTRESET, softReset);
          this.cacheFeatures(void 0);
        });
      }
      wipe() {
        return __awaiter(this, void 0, void 0, function* () {
          const wipeDevice = new Messages.WipeDevice();
          yield this.transport.call(Messages.MessageType.MESSAGETYPE_WIPEDEVICE, wipeDevice);
          this.cacheFeatures(void 0);
        });
      }
      btcSupportsCoin(coin) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.info.btcSupportsCoin(coin);
        });
      }
      btcSupportsScriptType(coin, scriptType) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.info.btcSupportsScriptType(coin, scriptType);
        });
      }
      btcGetAddress(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcGetAddress(this, this.transport, msg);
        });
      }
      btcSignTx(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcSignTx(this, this.transport, msg);
        });
      }
      btcSupportsSecureTransfer() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.info.btcSupportsSecureTransfer();
        });
      }
      btcSupportsNativeShapeShift() {
        return this.info.btcSupportsNativeShapeShift();
      }
      ethSupportsEIP1559() {
        return __awaiter(this, void 0, void 0, function* () {
          return semver_1.default.gte(yield this.getFirmwareVersion(), "v7.2.1");
        });
      }
      btcSignMessage(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcSignMessage(this, this.transport, msg);
        });
      }
      btcVerifyMessage(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Btc.btcVerifyMessage(this, this.transport, msg);
        });
      }
      btcGetAccountPaths(msg) {
        return this.info.btcGetAccountPaths(msg);
      }
      btcIsSameAccount(msg) {
        return this.info.btcIsSameAccount(msg);
      }
      ethSignTx(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethSignTx(this.transport, msg);
        });
      }
      ethGetAddress(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethGetAddress(this.transport, msg);
        });
      }
      ethSignMessage(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethSignMessage(this.transport, msg);
        });
      }
      ethVerifyMessage(msg) {
        return __awaiter(this, void 0, void 0, function* () {
          return Eth.ethVerifyMessage(this.transport, msg);
        });
      }
      ethSupportsNetwork(chain_id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.info.ethSupportsNetwork(chain_id);
        });
      }
      ethSupportsSecureTransfer() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.info.ethSupportsSecureTransfer();
        });
      }
      ethSupportsNativeShapeShift() {
        return this.info.ethSupportsNativeShapeShift();
      }
      ethGetAccountPaths(msg) {
        return this.info.ethGetAccountPaths(msg);
      }
      rippleGetAccountPaths(msg) {
        return this.info.rippleGetAccountPaths(msg);
      }
      rippleGetAddress(msg) {
        return Ripple.rippleGetAddress(this.transport, msg);
      }
      rippleSignTx(msg) {
        return Ripple.rippleSignTx(this.transport, msg);
      }
      cosmosGetAccountPaths(msg) {
        return this.info.cosmosGetAccountPaths(msg);
      }
      cosmosGetAddress(msg) {
        return Cosmos.cosmosGetAddress(this.transport, msg);
      }
      cosmosSignTx(msg) {
        return Cosmos.cosmosSignTx(this.transport, msg);
      }
      thorchainGetAccountPaths(msg) {
        return this.info.thorchainGetAccountPaths(msg);
      }
      thorchainGetAddress(msg) {
        return Thorchain.thorchainGetAddress(this.transport, msg);
      }
      thorchainSignTx(msg) {
        return Thorchain.thorchainSignTx(this.transport, msg);
      }
      binanceGetAccountPaths(msg) {
        return this.info.binanceGetAccountPaths(msg);
      }
      binanceGetAddress(msg) {
        return Binance.binanceGetAddress(this.transport, msg);
      }
      binanceSignTx(msg) {
        return Binance.binanceSignTx(this.transport, msg);
      }
      eosGetAccountPaths(msg) {
        return this.info.eosGetAccountPaths(msg);
      }
      eosGetPublicKey(msg) {
        return Eos.eosGetPublicKey(this.transport, msg);
      }
      eosSignTx(msg) {
        return Eos.eosSignTx(this.transport, msg);
      }
      describePath(msg) {
        return this.info.describePath(msg);
      }
      disconnect() {
        return this.transport.disconnect();
      }
      btcNextAccountPath(msg) {
        return this.info.btcNextAccountPath(msg);
      }
      ethNextAccountPath(msg) {
        return this.info.ethNextAccountPath(msg);
      }
      eosNextAccountPath(msg) {
        return this.info.eosNextAccountPath(msg);
      }
      cosmosNextAccountPath(msg) {
        return this.info.cosmosNextAccountPath(msg);
      }
      rippleNextAccountPath(msg) {
        return this.info.rippleNextAccountPath(msg);
      }
      binanceNextAccountPath(msg) {
        return this.info.binanceNextAccountPath(msg);
      }
    };
    exports2.KeepKeyHDWallet = KeepKeyHDWallet;
    function info() {
      return new KeepKeyHDWalletInfo();
    }
    exports2.info = info;
    function create(transport) {
      return new KeepKeyHDWallet(transport);
    }
    exports2.create = create;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/transport.js
var require_transport = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/transport.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transport = void 0;
    var Messages = __importStar(require_messages_pb());
    var Types = __importStar(require_types_pb());
    var core = __importStar(require_dist3());
    var jspb2 = __importStar(require_google_protobuf());
    var typeRegistry_1 = require_typeRegistry();
    var utils_1 = require_utils4();
    var Transport = class extends core.Transport {
      constructor(keyring, delegate) {
        super(keyring);
        this.debugLink = false;
        this.userActionRequired = false;
        this.callInProgress = {
          main: void 0,
          debug: void 0
        };
        this.delegate = delegate;
      }
      static create(keyring, delegate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Transport(keyring, delegate);
        });
      }
      isOpened() {
        return this.delegate.isOpened();
      }
      getDeviceID() {
        return this.delegate.getDeviceID();
      }
      connect() {
        return this.delegate.connect();
      }
      tryConnectDebugLink() {
        return __awaiter(this, void 0, void 0, function* () {
          let out = false;
          if (this.delegate.tryConnectDebugLink && (yield this.delegate.tryConnectDebugLink()))
            out = true;
          this.debugLink = out;
          return out;
        });
      }
      disconnect() {
        return this.delegate.disconnect();
      }
      write(buf, debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          for (let i = 0; i < buf.length; i += utils_1.SEGMENT_SIZE) {
            const segment = buf.slice(i, i + utils_1.SEGMENT_SIZE);
            const padding = new Uint8Array(utils_1.SEGMENT_SIZE - segment.length);
            const fragments = [];
            fragments.push(new Uint8Array([utils_1.SEGMENT_SIZE]));
            fragments.push(segment);
            fragments.push(padding);
            const fragmentBuffer = new Uint8Array(fragments.map((x) => x.length).reduce((a2, x) => a2 + x, 0));
            fragments.reduce((a2, x) => (fragmentBuffer.set(x, a2), a2 + x.length), 0);
            yield this.delegate.writeChunk(fragmentBuffer, debugLink);
          }
        });
      }
      read(debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          const first = yield this.delegate.readChunk(debugLink);
          const firstView = new DataView(first.buffer.slice(first.byteOffset, first.byteOffset + first.byteLength));
          const valid = (firstView.getUint32(0) & 4294967040) === 1059267328;
          const msgLength = firstView.getUint32(5);
          if (!valid)
            throw new Error("message not valid");
          const buffer = new Uint8Array(9 + 2 + msgLength);
          buffer.set(first.slice(0, Math.min(first.length, buffer.length)));
          for (let offset = first.length; offset < buffer.length; ) {
            let next = (yield this.delegate.readChunk(debugLink)).slice(1);
            buffer.set(next.slice(0, Math.min(next.length, buffer.length - offset)), offset);
            offset += next.length;
          }
          return buffer;
        });
      }
      getVendor() {
        return "KeepKey";
      }
      getEntropy(length) {
        if (typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.crypto)) {
          return window.crypto.getRandomValues(new Uint8Array(length));
        }
        const { randomBytes } = (init_crypto(), __toCommonJS(crypto_exports));
        return randomBytes(length);
      }
      getFirmwareHash(firmware) {
        return __awaiter(this, void 0, void 0, function* () {
          if (typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.crypto)) {
            return new Uint8Array(yield window.crypto.subtle.digest({ name: "SHA-256" }, firmware));
          }
          const { createHash } = (init_crypto(), __toCommonJS(crypto_exports));
          const hash = createHash("sha256");
          hash.update(firmware);
          return hash.digest();
        });
      }
      cancellable(inProgress) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            yield inProgress;
          } catch (e2) {
            if (core.isIndexable(e2) && e2.type === core.HDWalletErrorType.ActionCancelled) {
              this.callInProgress = { main: void 0, debug: void 0 };
              throw e2;
            }
          }
        });
      }
      lockDuring(action) {
        return __awaiter(this, void 0, void 0, function* () {
          this.callInProgress.main = (() => __awaiter(this, void 0, void 0, function* () {
            yield this.cancellable(this.callInProgress.main);
            return action();
          }))();
          return this.callInProgress.main;
        });
      }
      handleCancellableResponse(messageType) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.readResponse(false);
        });
      }
      readResponse(debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          let buf;
          do {
            buf = yield this.read(debugLink);
          } while (!buf);
          const [msgTypeEnum, msg] = this.fromMessageBuffer(buf);
          let event = core.makeEvent({
            message_type: typeRegistry_1.messageNameRegistry[msgTypeEnum],
            message_enum: msgTypeEnum,
            message: msg.toObject(),
            proto: msg,
            from_wallet: true
          });
          this.emit(String(msgTypeEnum), event);
          if (debugLink)
            return event;
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_FAILURE) {
            const failureEvent = core.makeEvent({
              message_type: core.Events.FAILURE,
              message_enum: msgTypeEnum,
              message: msg.toObject(),
              from_wallet: true
            });
            this.emit(core.Events.FAILURE, failureEvent);
            return failureEvent;
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_BUTTONREQUEST) {
            this.emit(core.Events.BUTTON_REQUEST, core.makeEvent({
              message_type: core.Events.BUTTON_REQUEST,
              from_wallet: true
            }));
            this.userActionRequired = true;
            return this.call(Messages.MessageType.MESSAGETYPE_BUTTONACK, new Messages.ButtonAck(), {
              msgTimeout: core.LONG_TIMEOUT,
              omitLock: true
            });
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_ENTROPYREQUEST) {
            const ack = new Messages.EntropyAck();
            ack.setEntropy(this.getEntropy(32));
            return this.call(Messages.MessageType.MESSAGETYPE_ENTROPYACK, ack, {
              msgTimeout: core.LONG_TIMEOUT,
              omitLock: true
            });
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_PINMATRIXREQUEST) {
            this.emit(core.Events.PIN_REQUEST, core.makeEvent({
              message_type: core.Events.PIN_REQUEST,
              from_wallet: true
            }));
            this.userActionRequired = true;
            return this.handleCancellableResponse(Messages.MessageType.MESSAGETYPE_PINMATRIXACK);
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_PASSPHRASEREQUEST) {
            this.emit(core.Events.PASSPHRASE_REQUEST, core.makeEvent({
              message_type: core.Events.PASSPHRASE_REQUEST,
              from_wallet: true
            }));
            this.userActionRequired = true;
            return this.handleCancellableResponse(Messages.MessageType.MESSAGETYPE_PASSPHRASEACK);
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_CHARACTERREQUEST) {
            this.emit(core.Events.CHARACTER_REQUEST, core.makeEvent({
              message_type: core.Events.CHARACTER_REQUEST,
              from_wallet: true
            }));
            this.userActionRequired = true;
            return this.handleCancellableResponse(Messages.MessageType.MESSAGETYPE_CHARACTERACK);
          }
          if (msgTypeEnum === Messages.MessageType.MESSAGETYPE_WORDREQUEST) {
            this.emit(core.Events.WORD_REQUEST, core.makeEvent({
              message_type: core.Events.WORD_REQUEST,
              from_wallet: true
            }));
            this.userActionRequired = true;
            return this.handleCancellableResponse(Messages.MessageType.MESSAGETYPE_WORDACK);
          }
          return event;
        });
      }
      call(msgTypeEnum, msg, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          options !== null && options !== void 0 ? options : options = {};
          (_a = options.msgTimeout) !== null && _a !== void 0 ? _a : options.msgTimeout = core.DEFAULT_TIMEOUT;
          this.emit(String(msgTypeEnum), core.makeEvent({
            message_type: typeRegistry_1.messageNameRegistry[msgTypeEnum],
            message_enum: msgTypeEnum,
            message: msg.toObject(),
            proto: msg,
            from_wallet: false
          }));
          const makePromise = () => __awaiter(this, void 0, void 0, function* () {
            if ([
              Messages.MessageType.MESSAGETYPE_BUTTONACK,
              Messages.MessageType.MESSAGETYPE_PASSPHRASEACK,
              Messages.MessageType.MESSAGETYPE_CHARACTERACK,
              Messages.MessageType.MESSAGETYPE_PINMATRIXACK,
              Messages.MessageType.MESSAGETYPE_WORDACK
            ].includes(msgTypeEnum)) {
              this.userActionRequired = true;
            }
            yield this.write(this.toMessageBuffer(msgTypeEnum, msg), !!(options === null || options === void 0 ? void 0 : options.debugLink));
            if (options === null || options === void 0 ? void 0 : options.noWait)
              return void 0;
            const response = yield this.readResponse(!!(options === null || options === void 0 ? void 0 : options.debugLink));
            this.userActionRequired = false;
            if (response.message_enum === Messages.MessageType.MESSAGETYPE_FAILURE && response.message.code === Types.FailureType.FAILURE_ACTIONCANCELLED) {
              this.callInProgress = { main: void 0, debug: void 0 };
              throw new core.ActionCancelled();
            }
            if (response.message_type === core.Events.FAILURE)
              throw response;
            return response;
          });
          if (options === null || options === void 0 ? void 0 : options.omitLock)
            return makePromise();
          const lockKey = (options === null || options === void 0 ? void 0 : options.debugLink) ? "debug" : "main";
          this.callInProgress[lockKey] = (() => __awaiter(this, void 0, void 0, function* () {
            yield this.cancellable(this.callInProgress[lockKey]);
            try {
              return makePromise();
            } finally {
              this.userActionRequired = false;
            }
          }))();
          return yield this.callInProgress[lockKey];
        });
      }
      cancel() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this.userActionRequired)
            return;
          try {
            this.callInProgress = { main: void 0, debug: void 0 };
            const cancelMsg = new Messages.Cancel();
            yield this.call(Messages.MessageType.MESSAGETYPE_CANCEL, cancelMsg, {
              noWait: this.userActionRequired
            });
          } catch (e2) {
            console.error("Cancel Pending Error", e2);
          } finally {
            this.callInProgress = { main: void 0, debug: void 0 };
          }
        });
      }
      toMessageBuffer(msgTypeEnum, msg) {
        const messageBuffer = msg.serializeBinary();
        const headerBuffer = new Uint8Array(8);
        const headerView = new DataView(headerBuffer.buffer);
        headerView.setUint8(0, 35);
        headerView.setUint8(1, 35);
        headerView.setUint16(2, msgTypeEnum);
        headerView.setUint32(4, messageBuffer.byteLength);
        const fragments = [headerBuffer, messageBuffer];
        const fragmentBuffer = new Uint8Array(fragments.map((x) => x.length).reduce((a2, x) => a2 + x, 0));
        fragments.reduce((a2, x) => (fragmentBuffer.set(x, a2), a2 + x.length), 0);
        return fragmentBuffer;
      }
      fromMessageBuffer(buf) {
        const typeID = new DataView(buf.buffer).getUint16(3);
        const MType = typeRegistry_1.messageTypeRegistry[typeID];
        if (!MType) {
          const msg2 = new Messages.Failure();
          msg2.setCode(Types.FailureType.FAILURE_UNEXPECTEDMESSAGE);
          msg2.setMessage("Unknown message type received");
          return [Messages.MessageType.MESSAGETYPE_FAILURE, msg2];
        }
        const msg = new MType();
        const reader = new jspb2.BinaryReader(buf, 9, buf.length - (9 + 2));
        return [typeID, MType.deserializeBinaryFromReader(msg, reader)];
      }
      static failureMessageFactory(e2) {
        const msg = new Messages.Failure();
        msg.setCode(Types.FailureType.FAILURE_UNEXPECTEDMESSAGE);
        if (typeof e2 === "string") {
          msg.setMessage(e2);
        } else {
          msg.setMessage(String(e2));
        }
        return msg.serializeBinary();
      }
    };
    exports2.Transport = Transport;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/adapter.js
var require_adapter = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/adapter.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Adapter = void 0;
    var core = __importStar(require_dist3());
    var keepkey_1 = require_keepkey();
    var transport_1 = require_transport();
    var Adapter = class {
      constructor(keyring, delegate) {
        var _a, _b;
        this.keyring = keyring;
        this.delegate = delegate;
        try {
          (_b = (_a = this.delegate).registerCallbacks) === null || _b === void 0 ? void 0 : _b.call(_a, this.handleConnect.bind(this), this.handleDisconnect.bind(this));
        } catch (e2) {
          console.error(e2);
        }
      }
      static fromDelegate(delegate) {
        const fn = (keyring) => new Adapter(keyring, delegate);
        const out = fn;
        out.useKeyring = fn;
        return out;
      }
      static inspectDevice(delegate, device) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
          const props = (_b = yield Promise.resolve((_a = delegate.inspectDevice) === null || _a === void 0 ? void 0 : _a.call(delegate, device))) !== null && _b !== void 0 ? _b : ["object", "function"].includes(typeof device) ? device : {};
          if (!props.serialNumber && typeof device === "string")
            props.serialNumber = device;
          return {
            get productName() {
              const out = props["productName"];
              return typeof out === "string" ? out : "KeepKey";
            },
            get serialNumber() {
              const out = props["serialNumber"];
              if (typeof out !== "string")
                throw new Error("could not get serialNumber from device");
              return out;
            }
          };
        });
      }
      inspectDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
          return Adapter.inspectDevice(this.delegate, device);
        });
      }
      handleConnect(device) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            yield this.initialize([device]);
            const { productName, serialNumber } = yield this.inspectDevice(device);
            yield this.keyring.emit([productName, serialNumber, core.Events.CONNECT], serialNumber);
          } catch (e2) {
            console.error(e2);
          }
        });
      }
      handleDisconnect(device) {
        return __awaiter(this, void 0, void 0, function* () {
          const { productName, serialNumber } = yield this.inspectDevice(device);
          try {
            yield this.keyring.remove(serialNumber);
          } catch (_a) {
          }
          yield this.keyring.emit([productName, serialNumber, core.Events.DISCONNECT], serialNumber);
        });
      }
      initialize(devices, tryDebugLink, autoConnect) {
        return __awaiter(this, void 0, void 0, function* () {
          devices = devices !== null && devices !== void 0 ? devices : yield this.getDevices();
          for (const device of devices) {
            const { serialNumber } = yield this.inspectDevice(device);
            if (this.keyring.wallets[serialNumber])
              yield this.keyring.remove(serialNumber);
            const delegate = yield this.getTransportDelegate(device);
            if (delegate === null)
              continue;
            const transport = yield transport_1.Transport.create(this.keyring, delegate);
            yield transport.connect();
            if (tryDebugLink)
              yield transport.tryConnectDebugLink();
            const wallet = yield keepkey_1.KeepKeyHDWallet.create(transport);
            if (autoConnect)
              yield wallet.initialize();
            this.keyring.add(wallet, serialNumber);
          }
          return Object.keys(this.keyring.wallets).length;
        });
      }
      getDevice(serialNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this.delegate.getDevice)
            return yield this.delegate.getDevice(serialNumber);
          if (!serialNumber)
            throw new Error("no default device specified");
          const devices = yield this.getDevices();
          return (yield Promise.all(devices.map((x) => __awaiter(this, void 0, void 0, function* () {
            return (yield this.inspectDevice(x)).serialNumber === serialNumber ? x : null;
          })))).filter((x) => x !== null)[0];
        });
      }
      getDevices() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this.delegate.getDevices)
            return yield this.delegate.getDevices();
          let defaultDevice = void 0;
          try {
            defaultDevice = yield this.getDevice();
          } catch (_a) {
          }
          return defaultDevice ? [defaultDevice] : [];
        });
      }
      getTransportDelegate(device) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.delegate.getTransportDelegate(device);
        });
      }
      pairDevice(serialNumber, tryDebugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          const device = yield this.getDevice(serialNumber);
          if (!device)
            throw new Error(serialNumber ? `could not find device matching serial number '${serialNumber}'` : "could not find default device");
          return this.pairRawDevice(device, tryDebugLink);
        });
      }
      pairRawDevice(device, tryDebugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.initialize([device], tryDebugLink, true);
          return core.mustBeDefined(this.keyring.get((yield this.inspectDevice(device)).serialNumber));
        });
      }
    };
    exports2.Adapter = Adapter;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey/dist/index.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_adapter(), exports2);
    __exportStar(require_keepkey(), exports2);
    __exportStar(require_transport(), exports2);
    __exportStar(require_typeRegistry(), exports2);
    __exportStar(require_utils4(), exports2);
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/utils.js
var require_utils5 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/utils.js"(exports2) {
    "use strict";
    init_define_process_env();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HID_PRODUCT_ID = exports2.WEBUSB_PRODUCT_ID = exports2.VENDOR_ID = void 0;
    exports2.VENDOR_ID = 11044;
    exports2.WEBUSB_PRODUCT_ID = 2;
    exports2.HID_PRODUCT_ID = 1;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/transport.js
var require_transport2 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/transport.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransportDelegate = void 0;
    var core = __importStar(require_dist3());
    var keepkey = __importStar(require_dist4());
    var utils_1 = require_utils5();
    var TransportDelegate = class {
      constructor(usbDevice) {
        if (usbDevice.vendorId !== utils_1.VENDOR_ID)
          throw new core.WebUSBCouldNotPair("KeepKey", "bad vendor id");
        if (usbDevice.productId !== utils_1.WEBUSB_PRODUCT_ID)
          throw new core.FirmwareUpdateRequired("KeepKey", "6.1.0");
        this.usbDevice = usbDevice;
      }
      static create(device) {
        return __awaiter(this, void 0, void 0, function* () {
          if (device.vendorId !== utils_1.VENDOR_ID)
            return null;
          return new TransportDelegate(device);
        });
      }
      getDeviceID() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.usbDevice.serialNumber;
        });
      }
      isOpened() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.usbDevice.opened;
        });
      }
      connect() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.usbDevice.open();
          if (this.usbDevice.configuration === null)
            yield this.usbDevice.selectConfiguration(1);
          try {
            yield this.usbDevice.claimInterface(0);
          } catch (e2) {
            console.error("Could not claim interface 0", this.usbDevice, { e: e2 });
            if (core.isIndexable(e2) && e2.code === 18)
              throw new core.FirmwareUpdateRequired("KeepKey", "6.1.0");
            if (core.isIndexable(e2) && e2.code === 19)
              throw new core.ConflictingApp("KeepKey");
            throw e2;
          }
        });
      }
      tryConnectDebugLink() {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            yield this.usbDevice.claimInterface(1);
            return true;
          } catch (e2) {
            return false;
          }
        });
      }
      disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this.usbDevice.opened)
            return;
          try {
            yield this.usbDevice.close();
          } catch (e2) {
            console.log("Error closing connection with usbDevice");
          }
        });
      }
      writeChunk(buf, debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.usbDevice.transferOut(debugLink ? 2 : 1, buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength));
        });
      }
      readChunk(debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
          const { status, data } = yield this.usbDevice.transferIn(debugLink ? 2 : 1, keepkey.SEGMENT_SIZE + 1);
          if (status === "stall") {
            yield this.usbDevice.clearHalt("out", debugLink ? 2 : 1);
          }
          if (data === void 0)
            throw new Error("bad read");
          return new Uint8Array(core.toArrayBuffer(data));
        });
      }
    };
    exports2.TransportDelegate = TransportDelegate;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/adapter.js
var require_adapter2 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/adapter.js"(exports2) {
    "use strict";
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebUSBKeepKeyAdapter = exports2.Adapter = exports2.AdapterDelegate = void 0;
    var core = __importStar(require_dist3());
    var keepkey = __importStar(require_dist4());
    var transport_1 = require_transport2();
    var utils_1 = require_utils5();
    var webUSB = typeof window === "object" && ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.usb);
    function assertWebUSB(webUSB2) {
      if (!webUSB2)
        throw new core.WebUSBNotAvailable();
    }
    exports2.AdapterDelegate = {
      getDevices() {
        return __awaiter(this, void 0, void 0, function* () {
          assertWebUSB(webUSB);
          const devices = (yield webUSB.getDevices()).filter((d2) => d2.serialNumber !== void 0);
          return devices.filter((x) => x.vendorId === utils_1.VENDOR_ID && [utils_1.WEBUSB_PRODUCT_ID, utils_1.HID_PRODUCT_ID].includes(x.productId));
        });
      },
      getDevice(serialNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          assertWebUSB(webUSB);
          try {
            const out = yield webUSB.requestDevice({
              filters: [
                { vendorId: utils_1.VENDOR_ID, productId: utils_1.WEBUSB_PRODUCT_ID, serialNumber },
                { vendorId: utils_1.VENDOR_ID, productId: utils_1.HID_PRODUCT_ID, serialNumber }
              ]
            });
            if (out.serialNumber === void 0)
              throw new Error("expected serial number");
            return out;
          } catch (e2) {
            throw new core.WebUSBCouldNotPair("KeepKey", String(core.isIndexable(e2) ? e2.message : e2));
          }
        });
      },
      getTransportDelegate(device) {
        return __awaiter(this, void 0, void 0, function* () {
          return new transport_1.TransportDelegate(device);
        });
      },
      registerCallbacks(handleConnect, handleDisconnect) {
        assertWebUSB(webUSB);
        function handleUSBEvent(connecting, e2) {
          return __awaiter(this, void 0, void 0, function* () {
            const device = e2.device;
            if (device.vendorId !== utils_1.VENDOR_ID)
              return;
            if (device.productId !== utils_1.WEBUSB_PRODUCT_ID)
              return;
            return (connecting ? handleConnect : handleDisconnect)(device);
          });
        }
        webUSB.addEventListener("connect", handleUSBEvent.bind(null, true));
        webUSB.addEventListener("disconnect", handleUSBEvent.bind(null, false));
      }
    };
    exports2.Adapter = keepkey.Adapter.fromDelegate(exports2.AdapterDelegate);
    exports2.WebUSBKeepKeyAdapter = exports2.Adapter;
  }
});

// node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@shapeshiftoss/hdwallet-keepkey-webusb/dist/index.js"(exports2) {
    init_define_process_env();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_adapter2(), exports2);
    __exportStar(require_transport2(), exports2);
    __exportStar(require_utils5(), exports2);
  }
});
"use strict";
export default require_dist5();
/*!
 * is.js 0.8.0
 * Author: Aras Atasaygin
 */
/**
 * @license
 * https://github.com/bitcoincashjs/cashaddr
 * Copyright (c) 2017-2018 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */
/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
/** @preserve
 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
 * derived from CryptoJS.mode.CTR
 * Jan Hruby jhruby.web@gmail.com
 */
//# sourceMappingURL=dist-VFUFQXAS.js.map
