{
  "version": 3,
  "sources": ["../u2f-api/lib/google-u2f-api.js", "../u2f-api/lib/u2f-api.js", "../u2f-api/index.js", "../@ledgerhq/hw-transport-u2f/src/TransportU2F.js", "../@ledgerhq/hw-transport-u2f/node_modules/@ledgerhq/hw-transport/src/Transport.js", "../@ledgerhq/hw-transport-u2f/node_modules/@ledgerhq/errors/dist/index.js", "../@ledgerhq/hw-transport-u2f/node_modules/@ledgerhq/logs/src/index.js"],
  "sourcesContent": ["// Copyright 2014 Google Inc. All rights reserved\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n/**\n * @fileoverview The U2F api.\n */\n\n'use strict';\n\n/** Namespace for the U2F api.\n * @type {Object}\n */\nvar u2f = u2f || {};\n\nmodule.exports = u2f; // Adaptation for u2f-api package\n\n/**\n * The U2F extension id\n * @type {string}\n * @const\n */\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\n\n/**\n * Message types for messsages to/from the extension\n * @const\n * @enum {string}\n */\nu2f.MessageTypes = {\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\n};\n\n/**\n * Response status codes\n * @const\n * @enum {number}\n */\nu2f.ErrorCodes = {\n  'OK': 0,\n  'OTHER_ERROR': 1,\n  'BAD_REQUEST': 2,\n  'CONFIGURATION_UNSUPPORTED': 3,\n  'DEVICE_INELIGIBLE': 4,\n  'TIMEOUT': 5\n};\n\n/**\n * A message type for registration requests\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   signRequests: Array.<u2f.SignRequest>,\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\n *   timeoutSeconds: ?number,\n *   requestId: ?number\n * }}\n */\nu2f.Request;\n\n/**\n * A message for registration responses\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\n *   requestId: ?number\n * }}\n */\nu2f.Response;\n\n/**\n * An error object for responses\n * @typedef {{\n *   errorCode: u2f.ErrorCodes,\n *   errorMessage: ?string\n * }}\n */\nu2f.Error;\n\n/**\n * Data object for a single sign request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   keyHandle: string,\n *   appId: string\n * }}\n */\nu2f.SignRequest;\n\n/**\n * Data object for a sign response.\n * @typedef {{\n *   keyHandle: string,\n *   signatureData: string,\n *   clientData: string\n * }}\n */\nu2f.SignResponse;\n\n/**\n * Data object for a registration request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   appId: string\n * }}\n */\nu2f.RegisterRequest;\n\n/**\n * Data object for a registration response.\n * @typedef {{\n *   registrationData: string,\n *   clientData: string\n * }}\n */\nu2f.RegisterResponse;\n\n\n// Low level MessagePort API support\n\n/**\n * Call MessagePort disconnect\n */\nu2f.disconnect = function() {\n  if (u2f.port_ && u2f.port_.port_) {\n    u2f.port_.port_.disconnect();\n    u2f.port_ = null;\n  }\n};\n\n/**\n * Sets up a MessagePort to the U2F extension using the\n * available mechanisms.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n */\nu2f.getMessagePort = function(callback) {\n  if (typeof chrome != 'undefined' && chrome.runtime) {\n    // The actual message here does not matter, but we need to get a reply\n    // for the callback to run. Thus, send an empty signature request\n    // in order to get a failure response.\n    var msg = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: []\n    };\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {\n      if (!chrome.runtime.lastError) {\n        // We are on a whitelisted origin and can talk directly\n        // with the extension.\n        u2f.getChromeRuntimePort_(callback);\n      } else {\n        // chrome.runtime was available, but we couldn't message\n        // the extension directly, use iframe\n        u2f.getIframePort_(callback);\n      }\n    });\n  } else {\n    // chrome.runtime was not available at all, which is normal\n    // when this origin doesn't have access to any extensions.\n    u2f.getIframePort_(callback);\n  }\n};\n\n/**\n * Connects directly to the extension via chrome.runtime.connect\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\n * @private\n */\nu2f.getChromeRuntimePort_ = function(callback) {\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID,\n    {'includeTlsChannelId': true});\n  setTimeout(function() {\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\n  }, 0);\n};\n\n/**\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\n * @param {Port} port\n * @constructor\n * @private\n */\nu2f.WrappedChromeRuntimePort_ = function(port) {\n  this.port_ = port;\n};\n\n/**\n * Posts a message on the underlying channel.\n * @param {Object} message\n */\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {\n  this.port_.postMessage(message);\n};\n\n/**\n * Emulates the HTML 5 addEventListener interface. Works only for the\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\n * @param {string} eventName\n * @param {function({data: Object})} handler\n */\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener =\n    function(eventName, handler) {\n  var name = eventName.toLowerCase();\n  if (name == 'message' || name == 'onmessage') {\n    this.port_.onMessage.addListener(function(message) {\n      // Emulate a minimal MessageEvent object\n      handler({'data': message});\n    });\n  } else {\n    console.error('WrappedChromeRuntimePort only supports onMessage');\n  }\n};\n\n/**\n * Sets up an embedded trampoline iframe, sourced from the extension.\n * @param {function(MessagePort)} callback\n * @private\n */\nu2f.getIframePort_ = function(callback) {\n  // Create the iframe\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\n  var iframe = document.createElement('iframe');\n  iframe.src = iframeOrigin + '/u2f-comms.html';\n  iframe.setAttribute('style', 'display:none');\n  document.body.appendChild(iframe);\n\n  var hasCalledBack = false;\n\n  var channel = new MessageChannel();\n  var ready = function(message) {\n    if (message.data == 'ready') {\n      channel.port1.removeEventListener('message', ready);\n      if (!hasCalledBack)\n      {\n        hasCalledBack = true;\n        callback(null, channel.port1);\n      }\n    } else {\n      console.error('First event on iframe port was not \"ready\"');\n    }\n  };\n  channel.port1.addEventListener('message', ready);\n  channel.port1.start();\n\n  iframe.addEventListener('load', function() {\n    // Deliver the port to the iframe and initialize\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\n  });\n\n  // Give this 200ms to initialize, after that, we treat this method as failed\n  setTimeout(function() {\n    if (!hasCalledBack)\n    {\n      hasCalledBack = true;\n      callback(new Error(\"IFrame extension not supported\"));\n    }\n  }, 200);\n};\n\n\n// High-level JS API\n\n/**\n * Default extension response timeout in seconds.\n * @const\n */\nu2f.EXTENSION_TIMEOUT_SEC = 30;\n\n/**\n * A singleton instance for a MessagePort to the extension.\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\n * @private\n */\nu2f.port_ = null;\n\n/**\n * Callbacks waiting for a port\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\n * @private\n */\nu2f.waitingForPort_ = [];\n\n/**\n * A counter for requestIds.\n * @type {number}\n * @private\n */\nu2f.reqCounter_ = 0;\n\n/**\n * A map from requestIds to client callbacks\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\n *                       |function((u2f.Error|u2f.SignResponse)))>}\n * @private\n */\nu2f.callbackMap_ = {};\n\n/**\n * Creates or retrieves the MessagePort singleton to use.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n * @private\n */\nu2f.getPortSingleton_ = function(callback) {\n  if (u2f.port_) {\n    callback(null, u2f.port_);\n  } else {\n    if (u2f.waitingForPort_.length == 0) {\n      u2f.getMessagePort(function(err, port) {\n        if (!err) {\n          u2f.port_ = port;\n          u2f.port_.addEventListener('message',\n            /** @type {function(Event)} */ (u2f.responseHandler_));\n        }\n\n        // Careful, here be async callbacks. Maybe.\n        while (u2f.waitingForPort_.length)\n          u2f.waitingForPort_.shift()(err, port);\n      });\n    }\n    u2f.waitingForPort_.push(callback);\n  }\n};\n\n/**\n * Handles response messages from the extension.\n * @param {MessageEvent.<u2f.Response>} message\n * @private\n */\nu2f.responseHandler_ = function(message) {\n  var response = message.data;\n  var reqId = response['requestId'];\n  if (!reqId || !u2f.callbackMap_[reqId]) {\n    console.error('Unknown or missing requestId in response.');\n    return;\n  }\n  var cb = u2f.callbackMap_[reqId];\n  delete u2f.callbackMap_[reqId];\n  cb(null, response['responseData']);\n};\n\n/**\n * Calls the callback with true or false as first and only argument\n * @param {Function} callback\n */\nu2f.isSupported = function(callback) {\n  u2f.getPortSingleton_(function(err, port) {\n    callback(!err);\n  });\n}\n\n/**\n * Dispatches an array of sign requests to available U2F tokens.\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.SignResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.sign = function(signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: signRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n\n/**\n * Dispatches register requests to available U2F tokens. An array of sign\n * requests identifies already registered tokens.\n * @param {Array.<u2f.RegisterRequest>} registerRequests\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.register = function(registerRequests, signRequests,\n    callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\n      signRequests: signRequests,\n      registerRequests: registerRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n", "'use strict';\n\nmodule.exports = API;\n\nvar chromeApi = require( './google-u2f-api' );\n\n// Feature detection (yes really)\nvar isBrowser = ( typeof navigator !== 'undefined' ) && !!navigator.userAgent;\nvar isSafari = isBrowser && navigator.userAgent.match( /Safari\\// )\n\t&& !navigator.userAgent.match( /Chrome\\// );\nvar isEDGE = isBrowser && navigator.userAgent.match( /Edge\\/1[2345]/ );\n\nvar _backend = null;\nfunction getBackend( Promise )\n{\n\tif ( !_backend )\n\t\t_backend = new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction notSupported( )\n\t\t\t{\n\t\t\t\t// Note; {native: true} means *not* using Google's hack\n\t\t\t\tresolve( { u2f: null, native: true } );\n\t\t\t}\n\n\t\t\tif ( !isBrowser )\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( isSafari )\n\t\t\t\t// Safari doesn't support U2F, and the Safari-FIDO-U2F\n\t\t\t\t// extension lacks full support (Multi-facet apps), so we\n\t\t\t\t// block it until proper support.\n\t\t\t\treturn notSupported( );\n\n\t\t\tvar hasNativeSupport =\n\t\t\t\t( typeof window.u2f !== 'undefined' ) &&\n\t\t\t\t( typeof window.u2f.sign === 'function' );\n\n\t\t\tif ( hasNativeSupport )\n\t\t\t\tresolve( { u2f: window.u2f, native: true } );\n\n\t\t\tif ( isEDGE )\n\t\t\t\t// We don't want to check for Google's extension hack on EDGE\n\t\t\t\t// as it'll cause trouble (popups, etc)\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( location.protocol === 'http:' )\n\t\t\t\t// U2F isn't supported over http, only https\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( typeof MessageChannel === 'undefined' )\n\t\t\t\t// Unsupported browser, the chrome hack would throw\n\t\t\t\treturn notSupported( );\n\n\t\t\t// Test for google extension support\n\t\t\tchromeApi.isSupported( function( ok )\n\t\t\t{\n\t\t\t\tif ( ok )\n\t\t\t\t\tresolve( { u2f: chromeApi, native: false } );\n\t\t\t\telse\n\t\t\t\t\tnotSupported( );\n\t\t\t} );\n\t\t} );\n\n\treturn _backend;\n}\n\nfunction API( Promise )\n{\n\treturn {\n\t\tisSupported   : isSupported.bind( Promise ),\n\t\tensureSupport : ensureSupport.bind( Promise ),\n\t\tregister      : register.bind( Promise ),\n\t\tsign          : sign.bind( Promise ),\n\t\tErrorCodes    : API.ErrorCodes,\n\t\tErrorNames    : API.ErrorNames\n\t};\n}\n\nAPI.ErrorCodes = {\n\tCANCELLED: -1,\n\tOK: 0,\n\tOTHER_ERROR: 1,\n\tBAD_REQUEST: 2,\n\tCONFIGURATION_UNSUPPORTED: 3,\n\tDEVICE_INELIGIBLE: 4,\n\tTIMEOUT: 5\n};\nAPI.ErrorNames = {\n\t\"-1\": \"CANCELLED\",\n\t\"0\": \"OK\",\n\t\"1\": \"OTHER_ERROR\",\n\t\"2\": \"BAD_REQUEST\",\n\t\"3\": \"CONFIGURATION_UNSUPPORTED\",\n\t\"4\": \"DEVICE_INELIGIBLE\",\n\t\"5\": \"TIMEOUT\"\n};\n\nfunction makeError( msg, err )\n{\n\tvar code = err != null ? err.errorCode : 1; // Default to OTHER_ERROR\n\tvar type = API.ErrorNames[ '' + code ];\n\tvar error = new Error( msg );\n\terror.metaData = {\n\t\ttype: type,\n\t\tcode: code\n\t}\n\treturn error;\n}\n\nfunction deferPromise( Promise, promise )\n{\n\tvar ret = { };\n\tret.promise = new Promise( function( resolve, reject ) {\n\t\tret.resolve = resolve;\n\t\tret.reject = reject;\n\t\tpromise.then( resolve, reject );\n\t} );\n\t/**\n\t * Reject request promise and disconnect port if 'disconnect' flag is true\n\t * @param {string} msg\n\t * @param {boolean} disconnect\n\t */\n\tret.promise.cancel = function( msg, disconnect )\n\t{\n\t\tgetBackend( Promise )\n\t\t.then( function( backend )\n\t\t{\n\t\t\tif ( disconnect && !backend.native )\n\t\t\t\tbackend.u2f.disconnect( );\n\n\t\t\tret.reject( makeError( msg, { errorCode: -1 } ) );\n\t\t} );\n\t};\n\treturn ret;\n}\n\nfunction defer( Promise, fun )\n{\n\treturn deferPromise( Promise, new Promise( function( resolve, reject )\n\t{\n\t\ttry\n\t\t{\n\t\t\tfun && fun( resolve, reject );\n\t\t}\n\t\tcatch ( err )\n\t\t{\n\t\t\treject( err );\n\t\t}\n\t} ) );\n}\n\nfunction isSupported( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\treturn !!backend.u2f;\n\t} );\n}\n\nfunction _ensureSupport( backend )\n{\n\tif ( !backend.u2f )\n\t{\n\t\tif ( location.protocol === 'http:' )\n\t\t\tthrow new Error( \"U2F isn't supported over http, only https\" );\n\t\tthrow new Error( \"U2F not supported\" );\n\t}\n}\n\nfunction ensureSupport( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( _ensureSupport );\n}\n\nfunction register( registerRequests, signRequests /* = null */, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( registerRequests ) )\n\t\tregisterRequests = [ registerRequests ];\n\n\tif ( typeof signRequests === 'number' && typeof timeout === 'undefined' )\n\t{\n\t\ttimeout = signRequests;\n\t\tsignRequests = null;\n\t}\n\n\tif ( !signRequests )\n\t\tsignRequests = [ ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = registerRequests[ 0 ].appId;\n\n\t\t\t\tu2f.register(\n\t\t\t\t\tappId, registerRequests, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.register(\n\t\t\t\t\tregisterRequests, signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction sign( signRequests, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( signRequests ) )\n\t\tsignRequests = [ signRequests ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = signRequests[ 0 ].appId;\n\t\t\t\tvar challenge = signRequests[ 0 ].challenge;\n\n\t\t\t\tu2f.sign( appId, challenge, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.sign( signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction makeDefault( func )\n{\n\tAPI[ func ] = function( )\n\t{\n\t\tif ( !global.Promise )\n\t\t\t// This is very unlikely to ever happen, since browsers\n\t\t\t// supporting U2F will most likely support Promises.\n\t\t\tthrow new Error( \"The platform doesn't natively support promises\" );\n\n\t\tvar args = [ ].slice.call( arguments );\n\t\treturn API( global.Promise )[ func ].apply( null, args );\n\t};\n}\n\n// Provide default functions using the built-in Promise if available.\nmakeDefault( 'isSupported' );\nmakeDefault( 'ensureSupport' );\nmakeDefault( 'register' );\nmakeDefault( 'sign' );\n", "'use strict';\nmodule.exports = require( './lib/u2f-api' );", "//@flow\n\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id);\n  // $FlowFixMe\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu: Buffer, key: Buffer) {\n  const result = Buffer.alloc(apdu.length);\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n  return result;\n}\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nconst webSafe64 = (base64: string) =>\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n// Convert from web-safe to normal, add trailing \"=\"s\nconst normal64 = (base64: string) =>\n  base64.replace(/-/g, \"+\").replace(/_/g, \"/\") +\n  \"==\".substring(0, (3 * base64.length) % 4);\n\nfunction attemptExchange(\n  apdu: Buffer,\n  timeoutMillis: number,\n  scrambleKey: Buffer,\n  unwrap: boolean\n): Promise<Buffer> {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"hex\"\n  );\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin,\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then((response) => {\n    const { signatureData } = response;\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach((t) => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\nexport default class TransportU2F extends Transport<null> {\n  static isSupported = isSupported;\n\n  /*\n   */\n  static list = (): * =>\n    // this transport is not discoverable but we are going to guess if it is here with isSupported()\n    isSupported().then((supported) => (supported ? [null] : []));\n\n  /*\n   */\n  static listen = (observer: *) => {\n    let unsubscribed = false;\n    isSupported().then((supported) => {\n      if (unsubscribed) return;\n      if (supported) {\n        observer.next({ type: \"add\", descriptor: null });\n        observer.complete();\n      } else {\n        observer.error(\n          new TransportError(\n            \"U2F browser support is needed for Ledger. \" +\n              \"Please use Chrome, Opera or Firefox with a U2F extension. \" +\n              \"Also make sure you're on an HTTPS connection\",\n            \"U2FNotSupported\"\n          )\n        );\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n      },\n    };\n  };\n\n  scrambleKey: Buffer;\n\n  unwrap: boolean = true;\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_: *, _openTimeout?: number = 5000): Promise<TransportU2F> {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    transportInstances.push(this);\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    try {\n      return await attemptExchange(\n        apdu,\n        this.exchangeTimeout,\n        this.scrambleKey,\n        this.unwrap\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        }\n        // the wrapping make error more usable and \"printable\" to the end user.\n        throw wrapU2FTransportError(\n          e,\n          \"Failed to sign with Ledger device: U2F \" + e.metaData.type,\n          \"U2F_\" + e.metaData.code\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   */\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  /**\n   */\n  setUnwrap(unwrap: boolean) {\n    this.unwrap = unwrap;\n  }\n\n  close(): Promise<void> {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n}\n", "//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n", "/* eslint-disable no-continue */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexport { AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceNameInvalid, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisconnectedDevice, DisconnectedDeviceDuringOperation, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FeeNotLoaded, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidXRPTag, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceInParentAccount, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughSpendableBalance, NotSupportedLegacyAddress, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, StatusCodes, SyncError, TimeoutTagged, TransportError, TransportInterfaceNotAvailable, TransportOpenUserCancelled, TransportRaceCondition, TransportStatusError, TransportWebUSBGestureRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, addCustomErrorDeserializer, createCustomErrorClass, deserializeError, getAltStatusMessage, serializeError };\n", "// @flow\n\n/**\n * A Log object\n */\nexport type Log = {\n  type: string,\n  message?: string,\n  data?: any,\n  id: string, // unique amount all logs\n  date: Date, // date of the log\n};\n\nexport type Unsubscribe = () => void;\n\nlet id = 0;\nconst subscribers = [];\n\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type: string, message?: string, data?: any) => {\n  const obj: Log = { type, id: String(++id), date: new Date() };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb: (Log) => void): Unsubscribe => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log: Log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n// for debug purpose\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}\n"],
  "mappings": "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",
  "names": []
}
