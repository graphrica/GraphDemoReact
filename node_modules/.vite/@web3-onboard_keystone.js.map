{
  "version": 3,
  "sources": ["dep:@web3-onboard_keystone", "../@web3-onboard/keystone/dist/index.js"],
  "sourcesContent": ["import d from \"./node_modules/@web3-onboard/keystone/dist/index.js\";export default d;", "import { accountSelect, createEIP1193Provider, ProviderRpcErrorCode, ProviderRpcError } from '@web3-onboard/common';\nconst DEFAULT_BASE_PATH = \"m/44'/60'/0'/0\";\nconst basePaths = [\n    {\n        label: 'Keystone',\n        value: DEFAULT_BASE_PATH\n    }\n];\nconst assets = [\n    {\n        label: 'ETH'\n    }\n];\nconst getAccount = async (keyring, provider, index) => {\n    const address = (await keyring.addAccounts())[index];\n    const derivationPath = await keyring._pathFromAddress(address);\n    return {\n        derivationPath,\n        address,\n        balance: {\n            asset: '',\n            value: await provider.getBalance(address)\n        }\n    };\n};\nconst generateAccounts = async (keyring, provider) => {\n    const accounts = [];\n    let zeroBalanceAccounts = 0, index = 0;\n    while (zeroBalanceAccounts < 5) {\n        const account = await getAccount(keyring, provider, index);\n        if (account.balance.value.isZero()) {\n            zeroBalanceAccounts++;\n            accounts.push(account);\n        }\n        else {\n            accounts.push(account);\n            // Reset the number of 0 balance accounts\n            zeroBalanceAccounts = 0;\n        }\n        index++;\n    }\n    return accounts;\n};\nfunction keystone({ customNetwork } = {}) {\n    const getIcon = async () => (await import('./icon.js')).default;\n    return () => {\n        let accounts;\n        return {\n            label: 'Keystone',\n            getIcon,\n            getInterface: async ({ EventEmitter, chains }) => {\n                const { StaticJsonRpcProvider } = await import('@ethersproject/providers');\n                const { default: Common, Hardfork } = await import('@ethereumjs/common');\n                const { default: AirGappedKeyring } = await import('@keystonehq/eth-keyring');\n                const { TransactionFactory: Transaction } = await import('@ethereumjs/tx');\n                const keyring = AirGappedKeyring.getEmptyKeyring();\n                await keyring.readKeyring();\n                const eventEmitter = new EventEmitter();\n                let currentChain = chains[0];\n                const scanAccounts = async ({ derivationPath, chainId, asset }) => {\n                    currentChain =\n                        chains.find(({ id }) => id === chainId) || currentChain;\n                    const provider = new StaticJsonRpcProvider(currentChain.rpcUrl);\n                    return generateAccounts(keyring, provider);\n                };\n                const getAccounts = async () => {\n                    accounts = await accountSelect({\n                        basePaths,\n                        assets,\n                        chains,\n                        scanAccounts,\n                        supportsCustomPath: false\n                    });\n                    if (accounts.length) {\n                        eventEmitter.emit('accountsChanged', [accounts[0].address]);\n                    }\n                    return accounts;\n                };\n                const request = async ({ method, params }) => {\n                    const response = await fetch(currentChain.rpcUrl, {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            id: '42',\n                            method,\n                            params\n                        })\n                    }).then(res => res.json());\n                    if (response.result) {\n                        return response.result;\n                    }\n                    else {\n                        throw response.error;\n                    }\n                };\n                const keystoneProvider = { request };\n                const provider = createEIP1193Provider(keystoneProvider, {\n                    eth_requestAccounts: async () => {\n                        // Triggers the account select modal if no accounts have been selected\n                        const accounts = await getAccounts();\n                        if (accounts.length === 0) {\n                            throw new ProviderRpcError({\n                                code: ProviderRpcErrorCode.ACCOUNT_ACCESS_REJECTED,\n                                message: 'User rejected the request.'\n                            });\n                        }\n                        return accounts[0] ? [accounts[0].address] : [];\n                    },\n                    eth_selectAccounts: async () => {\n                        const accounts = await getAccounts();\n                        return accounts.map(({ address }) => address);\n                    },\n                    eth_accounts: async () => {\n                        return accounts && accounts[0].address ? [accounts[0].address] : [];\n                    },\n                    eth_chainId: async () => {\n                        return currentChain.id;\n                    },\n                    eth_signTransaction: async ({ params: [transactionObject] }) => {\n                        if (!accounts)\n                            throw new Error('No account selected. Must call eth_requestAccounts first.');\n                        if (!transactionObject)\n                            throw new ProviderRpcError({\n                                message: 'Invalid method parameters',\n                                code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                data: transactionObject\n                            });\n                        const account = accounts.find(account => account.address === transactionObject.from) || accounts[0];\n                        const { address: from } = account;\n                        // Set the `from` field to the currently selected account\n                        transactionObject = { ...transactionObject, from };\n                        // @ts-ignore -- Due to weird commonjs exports\n                        const CommonConstructor = Common.default || Common;\n                        const common = new Common({\n                            chain: customNetwork || Number.parseInt(currentChain.id) || 1,\n                            // Berlin is the minimum hardfork that will allow for EIP1559\n                            hardfork: Hardfork.Berlin,\n                            // List of supported EIPS\n                            eips: [1559]\n                        });\n                        transactionObject.gasLimit =\n                            transactionObject.gas || transactionObject.gasLimit;\n                        const transaction = Transaction.fromTxData({\n                            ...transactionObject\n                        }, { common, freeze: false });\n                        // @ts-ignore\n                        const signedTx = await keyring.signTransaction(from, transaction);\n                        return `0x${signedTx.serialize().toString('hex')}`;\n                    },\n                    eth_sendTransaction: async ({ baseRequest, params }) => {\n                        const signedTx = await provider.request({\n                            method: 'eth_signTransaction',\n                            params\n                        });\n                        const transactionHash = await baseRequest({\n                            method: 'eth_sendRawTransaction',\n                            params: [signedTx]\n                        });\n                        return transactionHash;\n                    },\n                    eth_sign: async ({ params: [address, message] }) => {\n                        if (!(accounts && accounts.length && accounts.length > 0))\n                            throw new Error('No account selected. Must call eth_requestAccounts first.');\n                        const account = accounts.find(account => account.address === address) ||\n                            accounts[0];\n                        return keyring.signMessage(account.address, message);\n                    },\n                    eth_signTypedData: async ({ params: [address, typedData] }) => {\n                        if (!(accounts && accounts.length && accounts.length > 0))\n                            throw new Error('No account selected. Must call eth_requestAccounts first.');\n                        const account = accounts.find(account => account.address === address) ||\n                            accounts[0];\n                        return keyring.signTypedData(account.address, typedData);\n                    },\n                    wallet_switchEthereumChain: async ({ params: [{ chainId }] }) => {\n                        currentChain =\n                            chains.find(({ id }) => id === chainId) || currentChain;\n                        if (!currentChain)\n                            throw new Error('chain must be set before switching');\n                        eventEmitter.emit('chainChanged', currentChain.id);\n                        return null;\n                    },\n                    wallet_addEthereumChain: null\n                });\n                provider.on = eventEmitter.on.bind(eventEmitter);\n                return {\n                    provider\n                };\n            }\n        };\n    };\n}\nexport default keystone;\n"],
  "mappings": "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",
  "names": []
}
